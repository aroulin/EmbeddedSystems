// LT24_System_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2014.12.12.10:50:35

`timescale 1 ps / 1 ps
module LT24_System_mm_interconnect_0 (
		input  wire        clk_clk_clk,                                        //                                      clk_clk.clk
		input  wire        pll_c0_clk,                                         //                                       pll_c0.clk
		input  wire        nios2_reset_n_reset_bridge_in_reset_reset,          //          nios2_reset_n_reset_bridge_in_reset.reset
		input  wire        sdram_controller_reset_reset_bridge_in_reset_reset, // sdram_controller_reset_reset_bridge_in_reset.reset
		input  wire [31:0] LT24_CTRL_0_avalon_master_address,                  //                    LT24_CTRL_0_avalon_master.address
		output wire        LT24_CTRL_0_avalon_master_waitrequest,              //                                             .waitrequest
		input  wire        LT24_CTRL_0_avalon_master_read,                     //                                             .read
		output wire [31:0] LT24_CTRL_0_avalon_master_readdata,                 //                                             .readdata
		input  wire [26:0] nios2_data_master_address,                          //                            nios2_data_master.address
		output wire        nios2_data_master_waitrequest,                      //                                             .waitrequest
		input  wire [3:0]  nios2_data_master_byteenable,                       //                                             .byteenable
		input  wire        nios2_data_master_read,                             //                                             .read
		output wire [31:0] nios2_data_master_readdata,                         //                                             .readdata
		output wire        nios2_data_master_readdatavalid,                    //                                             .readdatavalid
		input  wire        nios2_data_master_write,                            //                                             .write
		input  wire [31:0] nios2_data_master_writedata,                        //                                             .writedata
		input  wire        nios2_data_master_debugaccess,                      //                                             .debugaccess
		input  wire [26:0] nios2_instruction_master_address,                   //                     nios2_instruction_master.address
		output wire        nios2_instruction_master_waitrequest,               //                                             .waitrequest
		input  wire        nios2_instruction_master_read,                      //                                             .read
		output wire [31:0] nios2_instruction_master_readdata,                  //                                             .readdata
		output wire        nios2_instruction_master_readdatavalid,             //                                             .readdatavalid
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,                //                  jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                  //                                             .write
		output wire        jtag_uart_avalon_jtag_slave_read,                   //                                             .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,               //                                             .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,              //                                             .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,            //                                             .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,             //                                             .chipselect
		output wire [2:0]  LT24_CTRL_0_avalon_slave_0_address,                 //                   LT24_CTRL_0_avalon_slave_0.address
		output wire        LT24_CTRL_0_avalon_slave_0_write,                   //                                             .write
		output wire        LT24_CTRL_0_avalon_slave_0_read,                    //                                             .read
		input  wire [31:0] LT24_CTRL_0_avalon_slave_0_readdata,                //                                             .readdata
		output wire [31:0] LT24_CTRL_0_avalon_slave_0_writedata,               //                                             .writedata
		output wire        LT24_CTRL_0_avalon_slave_0_chipselect,              //                                             .chipselect
		output wire [8:0]  nios2_jtag_debug_module_address,                    //                      nios2_jtag_debug_module.address
		output wire        nios2_jtag_debug_module_write,                      //                                             .write
		output wire        nios2_jtag_debug_module_read,                       //                                             .read
		input  wire [31:0] nios2_jtag_debug_module_readdata,                   //                                             .readdata
		output wire [31:0] nios2_jtag_debug_module_writedata,                  //                                             .writedata
		output wire [3:0]  nios2_jtag_debug_module_byteenable,                 //                                             .byteenable
		input  wire        nios2_jtag_debug_module_waitrequest,                //                                             .waitrequest
		output wire        nios2_jtag_debug_module_debugaccess,                //                                             .debugaccess
		output wire [1:0]  pll_pll_slave_address,                              //                                pll_pll_slave.address
		output wire        pll_pll_slave_write,                                //                                             .write
		output wire        pll_pll_slave_read,                                 //                                             .read
		input  wire [31:0] pll_pll_slave_readdata,                             //                                             .readdata
		output wire [31:0] pll_pll_slave_writedata,                            //                                             .writedata
		output wire [23:0] sdram_controller_s1_address,                        //                          sdram_controller_s1.address
		output wire        sdram_controller_s1_write,                          //                                             .write
		output wire        sdram_controller_s1_read,                           //                                             .read
		input  wire [15:0] sdram_controller_s1_readdata,                       //                                             .readdata
		output wire [15:0] sdram_controller_s1_writedata,                      //                                             .writedata
		output wire [1:0]  sdram_controller_s1_byteenable,                     //                                             .byteenable
		input  wire        sdram_controller_s1_readdatavalid,                  //                                             .readdatavalid
		input  wire        sdram_controller_s1_waitrequest,                    //                                             .waitrequest
		output wire        sdram_controller_s1_chipselect                      //                                             .chipselect
	);

	wire          nios2_instruction_master_translator_avalon_universal_master_0_waitrequest;    // nios2_instruction_master_agent:av_waitrequest -> nios2_instruction_master_translator:uav_waitrequest
	wire    [2:0] nios2_instruction_master_translator_avalon_universal_master_0_burstcount;     // nios2_instruction_master_translator:uav_burstcount -> nios2_instruction_master_agent:av_burstcount
	wire   [31:0] nios2_instruction_master_translator_avalon_universal_master_0_writedata;      // nios2_instruction_master_translator:uav_writedata -> nios2_instruction_master_agent:av_writedata
	wire   [31:0] nios2_instruction_master_translator_avalon_universal_master_0_address;        // nios2_instruction_master_translator:uav_address -> nios2_instruction_master_agent:av_address
	wire          nios2_instruction_master_translator_avalon_universal_master_0_lock;           // nios2_instruction_master_translator:uav_lock -> nios2_instruction_master_agent:av_lock
	wire          nios2_instruction_master_translator_avalon_universal_master_0_write;          // nios2_instruction_master_translator:uav_write -> nios2_instruction_master_agent:av_write
	wire          nios2_instruction_master_translator_avalon_universal_master_0_read;           // nios2_instruction_master_translator:uav_read -> nios2_instruction_master_agent:av_read
	wire   [31:0] nios2_instruction_master_translator_avalon_universal_master_0_readdata;       // nios2_instruction_master_agent:av_readdata -> nios2_instruction_master_translator:uav_readdata
	wire          nios2_instruction_master_translator_avalon_universal_master_0_debugaccess;    // nios2_instruction_master_translator:uav_debugaccess -> nios2_instruction_master_agent:av_debugaccess
	wire    [3:0] nios2_instruction_master_translator_avalon_universal_master_0_byteenable;     // nios2_instruction_master_translator:uav_byteenable -> nios2_instruction_master_agent:av_byteenable
	wire          nios2_instruction_master_translator_avalon_universal_master_0_readdatavalid;  // nios2_instruction_master_agent:av_readdatavalid -> nios2_instruction_master_translator:uav_readdatavalid
	wire          nios2_data_master_translator_avalon_universal_master_0_waitrequest;           // nios2_data_master_agent:av_waitrequest -> nios2_data_master_translator:uav_waitrequest
	wire    [2:0] nios2_data_master_translator_avalon_universal_master_0_burstcount;            // nios2_data_master_translator:uav_burstcount -> nios2_data_master_agent:av_burstcount
	wire   [31:0] nios2_data_master_translator_avalon_universal_master_0_writedata;             // nios2_data_master_translator:uav_writedata -> nios2_data_master_agent:av_writedata
	wire   [31:0] nios2_data_master_translator_avalon_universal_master_0_address;               // nios2_data_master_translator:uav_address -> nios2_data_master_agent:av_address
	wire          nios2_data_master_translator_avalon_universal_master_0_lock;                  // nios2_data_master_translator:uav_lock -> nios2_data_master_agent:av_lock
	wire          nios2_data_master_translator_avalon_universal_master_0_write;                 // nios2_data_master_translator:uav_write -> nios2_data_master_agent:av_write
	wire          nios2_data_master_translator_avalon_universal_master_0_read;                  // nios2_data_master_translator:uav_read -> nios2_data_master_agent:av_read
	wire   [31:0] nios2_data_master_translator_avalon_universal_master_0_readdata;              // nios2_data_master_agent:av_readdata -> nios2_data_master_translator:uav_readdata
	wire          nios2_data_master_translator_avalon_universal_master_0_debugaccess;           // nios2_data_master_translator:uav_debugaccess -> nios2_data_master_agent:av_debugaccess
	wire    [3:0] nios2_data_master_translator_avalon_universal_master_0_byteenable;            // nios2_data_master_translator:uav_byteenable -> nios2_data_master_agent:av_byteenable
	wire          nios2_data_master_translator_avalon_universal_master_0_readdatavalid;         // nios2_data_master_agent:av_readdatavalid -> nios2_data_master_translator:uav_readdatavalid
	wire          lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_waitrequest;   // LT24_CTRL_0_avalon_master_agent:av_waitrequest -> LT24_CTRL_0_avalon_master_translator:uav_waitrequest
	wire    [2:0] lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_burstcount;    // LT24_CTRL_0_avalon_master_translator:uav_burstcount -> LT24_CTRL_0_avalon_master_agent:av_burstcount
	wire   [31:0] lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_writedata;     // LT24_CTRL_0_avalon_master_translator:uav_writedata -> LT24_CTRL_0_avalon_master_agent:av_writedata
	wire   [31:0] lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_address;       // LT24_CTRL_0_avalon_master_translator:uav_address -> LT24_CTRL_0_avalon_master_agent:av_address
	wire          lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_lock;          // LT24_CTRL_0_avalon_master_translator:uav_lock -> LT24_CTRL_0_avalon_master_agent:av_lock
	wire          lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_write;         // LT24_CTRL_0_avalon_master_translator:uav_write -> LT24_CTRL_0_avalon_master_agent:av_write
	wire          lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_read;          // LT24_CTRL_0_avalon_master_translator:uav_read -> LT24_CTRL_0_avalon_master_agent:av_read
	wire   [31:0] lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_readdata;      // LT24_CTRL_0_avalon_master_agent:av_readdata -> LT24_CTRL_0_avalon_master_translator:uav_readdata
	wire          lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_debugaccess;   // LT24_CTRL_0_avalon_master_translator:uav_debugaccess -> LT24_CTRL_0_avalon_master_agent:av_debugaccess
	wire    [3:0] lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_byteenable;    // LT24_CTRL_0_avalon_master_translator:uav_byteenable -> LT24_CTRL_0_avalon_master_agent:av_byteenable
	wire          lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_readdatavalid; // LT24_CTRL_0_avalon_master_agent:av_readdatavalid -> LT24_CTRL_0_avalon_master_translator:uav_readdatavalid
	wire          rsp_mux_002_src_endofpacket;                                                  // rsp_mux_002:src_endofpacket -> LT24_CTRL_0_avalon_master_agent:rp_endofpacket
	wire          rsp_mux_002_src_valid;                                                        // rsp_mux_002:src_valid -> LT24_CTRL_0_avalon_master_agent:rp_valid
	wire          rsp_mux_002_src_startofpacket;                                                // rsp_mux_002:src_startofpacket -> LT24_CTRL_0_avalon_master_agent:rp_startofpacket
	wire  [107:0] rsp_mux_002_src_data;                                                         // rsp_mux_002:src_data -> LT24_CTRL_0_avalon_master_agent:rp_data
	wire    [4:0] rsp_mux_002_src_channel;                                                      // rsp_mux_002:src_channel -> LT24_CTRL_0_avalon_master_agent:rp_channel
	wire          rsp_mux_002_src_ready;                                                        // LT24_CTRL_0_avalon_master_agent:rp_ready -> rsp_mux_002:src_ready
	wire          nios2_jtag_debug_module_agent_m0_waitrequest;                                 // nios2_jtag_debug_module_translator:uav_waitrequest -> nios2_jtag_debug_module_agent:m0_waitrequest
	wire    [2:0] nios2_jtag_debug_module_agent_m0_burstcount;                                  // nios2_jtag_debug_module_agent:m0_burstcount -> nios2_jtag_debug_module_translator:uav_burstcount
	wire   [31:0] nios2_jtag_debug_module_agent_m0_writedata;                                   // nios2_jtag_debug_module_agent:m0_writedata -> nios2_jtag_debug_module_translator:uav_writedata
	wire   [31:0] nios2_jtag_debug_module_agent_m0_address;                                     // nios2_jtag_debug_module_agent:m0_address -> nios2_jtag_debug_module_translator:uav_address
	wire          nios2_jtag_debug_module_agent_m0_write;                                       // nios2_jtag_debug_module_agent:m0_write -> nios2_jtag_debug_module_translator:uav_write
	wire          nios2_jtag_debug_module_agent_m0_lock;                                        // nios2_jtag_debug_module_agent:m0_lock -> nios2_jtag_debug_module_translator:uav_lock
	wire          nios2_jtag_debug_module_agent_m0_read;                                        // nios2_jtag_debug_module_agent:m0_read -> nios2_jtag_debug_module_translator:uav_read
	wire   [31:0] nios2_jtag_debug_module_agent_m0_readdata;                                    // nios2_jtag_debug_module_translator:uav_readdata -> nios2_jtag_debug_module_agent:m0_readdata
	wire          nios2_jtag_debug_module_agent_m0_readdatavalid;                               // nios2_jtag_debug_module_translator:uav_readdatavalid -> nios2_jtag_debug_module_agent:m0_readdatavalid
	wire          nios2_jtag_debug_module_agent_m0_debugaccess;                                 // nios2_jtag_debug_module_agent:m0_debugaccess -> nios2_jtag_debug_module_translator:uav_debugaccess
	wire    [3:0] nios2_jtag_debug_module_agent_m0_byteenable;                                  // nios2_jtag_debug_module_agent:m0_byteenable -> nios2_jtag_debug_module_translator:uav_byteenable
	wire          nios2_jtag_debug_module_agent_rf_source_endofpacket;                          // nios2_jtag_debug_module_agent:rf_source_endofpacket -> nios2_jtag_debug_module_agent_rsp_fifo:in_endofpacket
	wire          nios2_jtag_debug_module_agent_rf_source_valid;                                // nios2_jtag_debug_module_agent:rf_source_valid -> nios2_jtag_debug_module_agent_rsp_fifo:in_valid
	wire          nios2_jtag_debug_module_agent_rf_source_startofpacket;                        // nios2_jtag_debug_module_agent:rf_source_startofpacket -> nios2_jtag_debug_module_agent_rsp_fifo:in_startofpacket
	wire  [108:0] nios2_jtag_debug_module_agent_rf_source_data;                                 // nios2_jtag_debug_module_agent:rf_source_data -> nios2_jtag_debug_module_agent_rsp_fifo:in_data
	wire          nios2_jtag_debug_module_agent_rf_source_ready;                                // nios2_jtag_debug_module_agent_rsp_fifo:in_ready -> nios2_jtag_debug_module_agent:rf_source_ready
	wire          nios2_jtag_debug_module_agent_rsp_fifo_out_endofpacket;                       // nios2_jtag_debug_module_agent_rsp_fifo:out_endofpacket -> nios2_jtag_debug_module_agent:rf_sink_endofpacket
	wire          nios2_jtag_debug_module_agent_rsp_fifo_out_valid;                             // nios2_jtag_debug_module_agent_rsp_fifo:out_valid -> nios2_jtag_debug_module_agent:rf_sink_valid
	wire          nios2_jtag_debug_module_agent_rsp_fifo_out_startofpacket;                     // nios2_jtag_debug_module_agent_rsp_fifo:out_startofpacket -> nios2_jtag_debug_module_agent:rf_sink_startofpacket
	wire  [108:0] nios2_jtag_debug_module_agent_rsp_fifo_out_data;                              // nios2_jtag_debug_module_agent_rsp_fifo:out_data -> nios2_jtag_debug_module_agent:rf_sink_data
	wire          nios2_jtag_debug_module_agent_rsp_fifo_out_ready;                             // nios2_jtag_debug_module_agent:rf_sink_ready -> nios2_jtag_debug_module_agent_rsp_fifo:out_ready
	wire          nios2_jtag_debug_module_agent_rdata_fifo_src_valid;                           // nios2_jtag_debug_module_agent:rdata_fifo_src_valid -> nios2_jtag_debug_module_agent:rdata_fifo_sink_valid
	wire   [33:0] nios2_jtag_debug_module_agent_rdata_fifo_src_data;                            // nios2_jtag_debug_module_agent:rdata_fifo_src_data -> nios2_jtag_debug_module_agent:rdata_fifo_sink_data
	wire          nios2_jtag_debug_module_agent_rdata_fifo_src_ready;                           // nios2_jtag_debug_module_agent:rdata_fifo_sink_ready -> nios2_jtag_debug_module_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_endofpacket;                                                      // cmd_mux:src_endofpacket -> nios2_jtag_debug_module_agent:cp_endofpacket
	wire          cmd_mux_src_valid;                                                            // cmd_mux:src_valid -> nios2_jtag_debug_module_agent:cp_valid
	wire          cmd_mux_src_startofpacket;                                                    // cmd_mux:src_startofpacket -> nios2_jtag_debug_module_agent:cp_startofpacket
	wire  [107:0] cmd_mux_src_data;                                                             // cmd_mux:src_data -> nios2_jtag_debug_module_agent:cp_data
	wire    [4:0] cmd_mux_src_channel;                                                          // cmd_mux:src_channel -> nios2_jtag_debug_module_agent:cp_channel
	wire          cmd_mux_src_ready;                                                            // nios2_jtag_debug_module_agent:cp_ready -> cmd_mux:src_ready
	wire          sdram_controller_s1_agent_m0_waitrequest;                                     // sdram_controller_s1_translator:uav_waitrequest -> sdram_controller_s1_agent:m0_waitrequest
	wire    [1:0] sdram_controller_s1_agent_m0_burstcount;                                      // sdram_controller_s1_agent:m0_burstcount -> sdram_controller_s1_translator:uav_burstcount
	wire   [15:0] sdram_controller_s1_agent_m0_writedata;                                       // sdram_controller_s1_agent:m0_writedata -> sdram_controller_s1_translator:uav_writedata
	wire   [31:0] sdram_controller_s1_agent_m0_address;                                         // sdram_controller_s1_agent:m0_address -> sdram_controller_s1_translator:uav_address
	wire          sdram_controller_s1_agent_m0_write;                                           // sdram_controller_s1_agent:m0_write -> sdram_controller_s1_translator:uav_write
	wire          sdram_controller_s1_agent_m0_lock;                                            // sdram_controller_s1_agent:m0_lock -> sdram_controller_s1_translator:uav_lock
	wire          sdram_controller_s1_agent_m0_read;                                            // sdram_controller_s1_agent:m0_read -> sdram_controller_s1_translator:uav_read
	wire   [15:0] sdram_controller_s1_agent_m0_readdata;                                        // sdram_controller_s1_translator:uav_readdata -> sdram_controller_s1_agent:m0_readdata
	wire          sdram_controller_s1_agent_m0_readdatavalid;                                   // sdram_controller_s1_translator:uav_readdatavalid -> sdram_controller_s1_agent:m0_readdatavalid
	wire          sdram_controller_s1_agent_m0_debugaccess;                                     // sdram_controller_s1_agent:m0_debugaccess -> sdram_controller_s1_translator:uav_debugaccess
	wire    [1:0] sdram_controller_s1_agent_m0_byteenable;                                      // sdram_controller_s1_agent:m0_byteenable -> sdram_controller_s1_translator:uav_byteenable
	wire          sdram_controller_s1_agent_rf_source_endofpacket;                              // sdram_controller_s1_agent:rf_source_endofpacket -> sdram_controller_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_controller_s1_agent_rf_source_valid;                                    // sdram_controller_s1_agent:rf_source_valid -> sdram_controller_s1_agent_rsp_fifo:in_valid
	wire          sdram_controller_s1_agent_rf_source_startofpacket;                            // sdram_controller_s1_agent:rf_source_startofpacket -> sdram_controller_s1_agent_rsp_fifo:in_startofpacket
	wire   [90:0] sdram_controller_s1_agent_rf_source_data;                                     // sdram_controller_s1_agent:rf_source_data -> sdram_controller_s1_agent_rsp_fifo:in_data
	wire          sdram_controller_s1_agent_rf_source_ready;                                    // sdram_controller_s1_agent_rsp_fifo:in_ready -> sdram_controller_s1_agent:rf_source_ready
	wire          sdram_controller_s1_agent_rsp_fifo_out_endofpacket;                           // sdram_controller_s1_agent_rsp_fifo:out_endofpacket -> sdram_controller_s1_agent:rf_sink_endofpacket
	wire          sdram_controller_s1_agent_rsp_fifo_out_valid;                                 // sdram_controller_s1_agent_rsp_fifo:out_valid -> sdram_controller_s1_agent:rf_sink_valid
	wire          sdram_controller_s1_agent_rsp_fifo_out_startofpacket;                         // sdram_controller_s1_agent_rsp_fifo:out_startofpacket -> sdram_controller_s1_agent:rf_sink_startofpacket
	wire   [90:0] sdram_controller_s1_agent_rsp_fifo_out_data;                                  // sdram_controller_s1_agent_rsp_fifo:out_data -> sdram_controller_s1_agent:rf_sink_data
	wire          sdram_controller_s1_agent_rsp_fifo_out_ready;                                 // sdram_controller_s1_agent:rf_sink_ready -> sdram_controller_s1_agent_rsp_fifo:out_ready
	wire          sdram_controller_s1_agent_rdata_fifo_src_valid;                               // sdram_controller_s1_agent:rdata_fifo_src_valid -> sdram_controller_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_controller_s1_agent_rdata_fifo_src_data;                                // sdram_controller_s1_agent:rdata_fifo_src_data -> sdram_controller_s1_agent_rdata_fifo:in_data
	wire          sdram_controller_s1_agent_rdata_fifo_src_ready;                               // sdram_controller_s1_agent_rdata_fifo:in_ready -> sdram_controller_s1_agent:rdata_fifo_src_ready
	wire          sdram_controller_s1_agent_rdata_fifo_out_valid;                               // sdram_controller_s1_agent_rdata_fifo:out_valid -> sdram_controller_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] sdram_controller_s1_agent_rdata_fifo_out_data;                                // sdram_controller_s1_agent_rdata_fifo:out_data -> sdram_controller_s1_agent:rdata_fifo_sink_data
	wire          sdram_controller_s1_agent_rdata_fifo_out_ready;                               // sdram_controller_s1_agent:rdata_fifo_sink_ready -> sdram_controller_s1_agent_rdata_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                             // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                              // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                               // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                 // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                   // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                    // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                    // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                           // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                             // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                              // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                      // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                            // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                    // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire  [108:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                             // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                            // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                   // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                         // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                 // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire  [108:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                          // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                         // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                       // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                        // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                       // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_endofpacket;                                                  // cmd_mux_002:src_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                        // cmd_mux_002:src_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire          cmd_mux_002_src_startofpacket;                                                // cmd_mux_002:src_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire  [107:0] cmd_mux_002_src_data;                                                         // cmd_mux_002:src_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire    [4:0] cmd_mux_002_src_channel;                                                      // cmd_mux_002:src_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_002_src_ready;                                                        // jtag_uart_avalon_jtag_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire          pll_pll_slave_agent_m0_waitrequest;                                           // pll_pll_slave_translator:uav_waitrequest -> pll_pll_slave_agent:m0_waitrequest
	wire    [2:0] pll_pll_slave_agent_m0_burstcount;                                            // pll_pll_slave_agent:m0_burstcount -> pll_pll_slave_translator:uav_burstcount
	wire   [31:0] pll_pll_slave_agent_m0_writedata;                                             // pll_pll_slave_agent:m0_writedata -> pll_pll_slave_translator:uav_writedata
	wire   [31:0] pll_pll_slave_agent_m0_address;                                               // pll_pll_slave_agent:m0_address -> pll_pll_slave_translator:uav_address
	wire          pll_pll_slave_agent_m0_write;                                                 // pll_pll_slave_agent:m0_write -> pll_pll_slave_translator:uav_write
	wire          pll_pll_slave_agent_m0_lock;                                                  // pll_pll_slave_agent:m0_lock -> pll_pll_slave_translator:uav_lock
	wire          pll_pll_slave_agent_m0_read;                                                  // pll_pll_slave_agent:m0_read -> pll_pll_slave_translator:uav_read
	wire   [31:0] pll_pll_slave_agent_m0_readdata;                                              // pll_pll_slave_translator:uav_readdata -> pll_pll_slave_agent:m0_readdata
	wire          pll_pll_slave_agent_m0_readdatavalid;                                         // pll_pll_slave_translator:uav_readdatavalid -> pll_pll_slave_agent:m0_readdatavalid
	wire          pll_pll_slave_agent_m0_debugaccess;                                           // pll_pll_slave_agent:m0_debugaccess -> pll_pll_slave_translator:uav_debugaccess
	wire    [3:0] pll_pll_slave_agent_m0_byteenable;                                            // pll_pll_slave_agent:m0_byteenable -> pll_pll_slave_translator:uav_byteenable
	wire          pll_pll_slave_agent_rf_source_endofpacket;                                    // pll_pll_slave_agent:rf_source_endofpacket -> pll_pll_slave_agent_rsp_fifo:in_endofpacket
	wire          pll_pll_slave_agent_rf_source_valid;                                          // pll_pll_slave_agent:rf_source_valid -> pll_pll_slave_agent_rsp_fifo:in_valid
	wire          pll_pll_slave_agent_rf_source_startofpacket;                                  // pll_pll_slave_agent:rf_source_startofpacket -> pll_pll_slave_agent_rsp_fifo:in_startofpacket
	wire  [108:0] pll_pll_slave_agent_rf_source_data;                                           // pll_pll_slave_agent:rf_source_data -> pll_pll_slave_agent_rsp_fifo:in_data
	wire          pll_pll_slave_agent_rf_source_ready;                                          // pll_pll_slave_agent_rsp_fifo:in_ready -> pll_pll_slave_agent:rf_source_ready
	wire          pll_pll_slave_agent_rsp_fifo_out_endofpacket;                                 // pll_pll_slave_agent_rsp_fifo:out_endofpacket -> pll_pll_slave_agent:rf_sink_endofpacket
	wire          pll_pll_slave_agent_rsp_fifo_out_valid;                                       // pll_pll_slave_agent_rsp_fifo:out_valid -> pll_pll_slave_agent:rf_sink_valid
	wire          pll_pll_slave_agent_rsp_fifo_out_startofpacket;                               // pll_pll_slave_agent_rsp_fifo:out_startofpacket -> pll_pll_slave_agent:rf_sink_startofpacket
	wire  [108:0] pll_pll_slave_agent_rsp_fifo_out_data;                                        // pll_pll_slave_agent_rsp_fifo:out_data -> pll_pll_slave_agent:rf_sink_data
	wire          pll_pll_slave_agent_rsp_fifo_out_ready;                                       // pll_pll_slave_agent:rf_sink_ready -> pll_pll_slave_agent_rsp_fifo:out_ready
	wire          pll_pll_slave_agent_rdata_fifo_src_valid;                                     // pll_pll_slave_agent:rdata_fifo_src_valid -> pll_pll_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] pll_pll_slave_agent_rdata_fifo_src_data;                                      // pll_pll_slave_agent:rdata_fifo_src_data -> pll_pll_slave_agent:rdata_fifo_sink_data
	wire          pll_pll_slave_agent_rdata_fifo_src_ready;                                     // pll_pll_slave_agent:rdata_fifo_sink_ready -> pll_pll_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_endofpacket;                                                  // cmd_mux_003:src_endofpacket -> pll_pll_slave_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                        // cmd_mux_003:src_valid -> pll_pll_slave_agent:cp_valid
	wire          cmd_mux_003_src_startofpacket;                                                // cmd_mux_003:src_startofpacket -> pll_pll_slave_agent:cp_startofpacket
	wire  [107:0] cmd_mux_003_src_data;                                                         // cmd_mux_003:src_data -> pll_pll_slave_agent:cp_data
	wire    [4:0] cmd_mux_003_src_channel;                                                      // cmd_mux_003:src_channel -> pll_pll_slave_agent:cp_channel
	wire          cmd_mux_003_src_ready;                                                        // pll_pll_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire          lt24_ctrl_0_avalon_slave_0_agent_m0_waitrequest;                              // LT24_CTRL_0_avalon_slave_0_translator:uav_waitrequest -> LT24_CTRL_0_avalon_slave_0_agent:m0_waitrequest
	wire    [2:0] lt24_ctrl_0_avalon_slave_0_agent_m0_burstcount;                               // LT24_CTRL_0_avalon_slave_0_agent:m0_burstcount -> LT24_CTRL_0_avalon_slave_0_translator:uav_burstcount
	wire   [31:0] lt24_ctrl_0_avalon_slave_0_agent_m0_writedata;                                // LT24_CTRL_0_avalon_slave_0_agent:m0_writedata -> LT24_CTRL_0_avalon_slave_0_translator:uav_writedata
	wire   [31:0] lt24_ctrl_0_avalon_slave_0_agent_m0_address;                                  // LT24_CTRL_0_avalon_slave_0_agent:m0_address -> LT24_CTRL_0_avalon_slave_0_translator:uav_address
	wire          lt24_ctrl_0_avalon_slave_0_agent_m0_write;                                    // LT24_CTRL_0_avalon_slave_0_agent:m0_write -> LT24_CTRL_0_avalon_slave_0_translator:uav_write
	wire          lt24_ctrl_0_avalon_slave_0_agent_m0_lock;                                     // LT24_CTRL_0_avalon_slave_0_agent:m0_lock -> LT24_CTRL_0_avalon_slave_0_translator:uav_lock
	wire          lt24_ctrl_0_avalon_slave_0_agent_m0_read;                                     // LT24_CTRL_0_avalon_slave_0_agent:m0_read -> LT24_CTRL_0_avalon_slave_0_translator:uav_read
	wire   [31:0] lt24_ctrl_0_avalon_slave_0_agent_m0_readdata;                                 // LT24_CTRL_0_avalon_slave_0_translator:uav_readdata -> LT24_CTRL_0_avalon_slave_0_agent:m0_readdata
	wire          lt24_ctrl_0_avalon_slave_0_agent_m0_readdatavalid;                            // LT24_CTRL_0_avalon_slave_0_translator:uav_readdatavalid -> LT24_CTRL_0_avalon_slave_0_agent:m0_readdatavalid
	wire          lt24_ctrl_0_avalon_slave_0_agent_m0_debugaccess;                              // LT24_CTRL_0_avalon_slave_0_agent:m0_debugaccess -> LT24_CTRL_0_avalon_slave_0_translator:uav_debugaccess
	wire    [3:0] lt24_ctrl_0_avalon_slave_0_agent_m0_byteenable;                               // LT24_CTRL_0_avalon_slave_0_agent:m0_byteenable -> LT24_CTRL_0_avalon_slave_0_translator:uav_byteenable
	wire          lt24_ctrl_0_avalon_slave_0_agent_rf_source_endofpacket;                       // LT24_CTRL_0_avalon_slave_0_agent:rf_source_endofpacket -> LT24_CTRL_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          lt24_ctrl_0_avalon_slave_0_agent_rf_source_valid;                             // LT24_CTRL_0_avalon_slave_0_agent:rf_source_valid -> LT24_CTRL_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire          lt24_ctrl_0_avalon_slave_0_agent_rf_source_startofpacket;                     // LT24_CTRL_0_avalon_slave_0_agent:rf_source_startofpacket -> LT24_CTRL_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [108:0] lt24_ctrl_0_avalon_slave_0_agent_rf_source_data;                              // LT24_CTRL_0_avalon_slave_0_agent:rf_source_data -> LT24_CTRL_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire          lt24_ctrl_0_avalon_slave_0_agent_rf_source_ready;                             // LT24_CTRL_0_avalon_slave_0_agent_rsp_fifo:in_ready -> LT24_CTRL_0_avalon_slave_0_agent:rf_source_ready
	wire          lt24_ctrl_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                    // LT24_CTRL_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> LT24_CTRL_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire          lt24_ctrl_0_avalon_slave_0_agent_rsp_fifo_out_valid;                          // LT24_CTRL_0_avalon_slave_0_agent_rsp_fifo:out_valid -> LT24_CTRL_0_avalon_slave_0_agent:rf_sink_valid
	wire          lt24_ctrl_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                  // LT24_CTRL_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> LT24_CTRL_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire  [108:0] lt24_ctrl_0_avalon_slave_0_agent_rsp_fifo_out_data;                           // LT24_CTRL_0_avalon_slave_0_agent_rsp_fifo:out_data -> LT24_CTRL_0_avalon_slave_0_agent:rf_sink_data
	wire          lt24_ctrl_0_avalon_slave_0_agent_rsp_fifo_out_ready;                          // LT24_CTRL_0_avalon_slave_0_agent:rf_sink_ready -> LT24_CTRL_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          lt24_ctrl_0_avalon_slave_0_agent_rdata_fifo_src_valid;                        // LT24_CTRL_0_avalon_slave_0_agent:rdata_fifo_src_valid -> LT24_CTRL_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] lt24_ctrl_0_avalon_slave_0_agent_rdata_fifo_src_data;                         // LT24_CTRL_0_avalon_slave_0_agent:rdata_fifo_src_data -> LT24_CTRL_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          lt24_ctrl_0_avalon_slave_0_agent_rdata_fifo_src_ready;                        // LT24_CTRL_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> LT24_CTRL_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_endofpacket;                                                  // cmd_mux_004:src_endofpacket -> LT24_CTRL_0_avalon_slave_0_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                        // cmd_mux_004:src_valid -> LT24_CTRL_0_avalon_slave_0_agent:cp_valid
	wire          cmd_mux_004_src_startofpacket;                                                // cmd_mux_004:src_startofpacket -> LT24_CTRL_0_avalon_slave_0_agent:cp_startofpacket
	wire  [107:0] cmd_mux_004_src_data;                                                         // cmd_mux_004:src_data -> LT24_CTRL_0_avalon_slave_0_agent:cp_data
	wire    [4:0] cmd_mux_004_src_channel;                                                      // cmd_mux_004:src_channel -> LT24_CTRL_0_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_004_src_ready;                                                        // LT24_CTRL_0_avalon_slave_0_agent:cp_ready -> cmd_mux_004:src_ready
	wire          nios2_instruction_master_agent_cp_endofpacket;                                // nios2_instruction_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          nios2_instruction_master_agent_cp_valid;                                      // nios2_instruction_master_agent:cp_valid -> router:sink_valid
	wire          nios2_instruction_master_agent_cp_startofpacket;                              // nios2_instruction_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire  [107:0] nios2_instruction_master_agent_cp_data;                                       // nios2_instruction_master_agent:cp_data -> router:sink_data
	wire          nios2_instruction_master_agent_cp_ready;                                      // router:sink_ready -> nios2_instruction_master_agent:cp_ready
	wire          nios2_data_master_agent_cp_endofpacket;                                       // nios2_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          nios2_data_master_agent_cp_valid;                                             // nios2_data_master_agent:cp_valid -> router_001:sink_valid
	wire          nios2_data_master_agent_cp_startofpacket;                                     // nios2_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire  [107:0] nios2_data_master_agent_cp_data;                                              // nios2_data_master_agent:cp_data -> router_001:sink_data
	wire          nios2_data_master_agent_cp_ready;                                             // router_001:sink_ready -> nios2_data_master_agent:cp_ready
	wire          lt24_ctrl_0_avalon_master_agent_cp_endofpacket;                               // LT24_CTRL_0_avalon_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          lt24_ctrl_0_avalon_master_agent_cp_valid;                                     // LT24_CTRL_0_avalon_master_agent:cp_valid -> router_002:sink_valid
	wire          lt24_ctrl_0_avalon_master_agent_cp_startofpacket;                             // LT24_CTRL_0_avalon_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire  [107:0] lt24_ctrl_0_avalon_master_agent_cp_data;                                      // LT24_CTRL_0_avalon_master_agent:cp_data -> router_002:sink_data
	wire          lt24_ctrl_0_avalon_master_agent_cp_ready;                                     // router_002:sink_ready -> LT24_CTRL_0_avalon_master_agent:cp_ready
	wire          router_002_src_endofpacket;                                                   // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          router_002_src_valid;                                                         // router_002:src_valid -> cmd_demux_002:sink_valid
	wire          router_002_src_startofpacket;                                                 // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire  [107:0] router_002_src_data;                                                          // router_002:src_data -> cmd_demux_002:sink_data
	wire    [4:0] router_002_src_channel;                                                       // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_ready;                                                         // cmd_demux_002:sink_ready -> router_002:src_ready
	wire          nios2_jtag_debug_module_agent_rp_endofpacket;                                 // nios2_jtag_debug_module_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          nios2_jtag_debug_module_agent_rp_valid;                                       // nios2_jtag_debug_module_agent:rp_valid -> router_003:sink_valid
	wire          nios2_jtag_debug_module_agent_rp_startofpacket;                               // nios2_jtag_debug_module_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire  [107:0] nios2_jtag_debug_module_agent_rp_data;                                        // nios2_jtag_debug_module_agent:rp_data -> router_003:sink_data
	wire          nios2_jtag_debug_module_agent_rp_ready;                                       // router_003:sink_ready -> nios2_jtag_debug_module_agent:rp_ready
	wire          router_003_src_endofpacket;                                                   // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_003_src_valid;                                                         // router_003:src_valid -> rsp_demux:sink_valid
	wire          router_003_src_startofpacket;                                                 // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire  [107:0] router_003_src_data;                                                          // router_003:src_data -> rsp_demux:sink_data
	wire    [4:0] router_003_src_channel;                                                       // router_003:src_channel -> rsp_demux:sink_channel
	wire          router_003_src_ready;                                                         // rsp_demux:sink_ready -> router_003:src_ready
	wire          sdram_controller_s1_agent_rp_endofpacket;                                     // sdram_controller_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          sdram_controller_s1_agent_rp_valid;                                           // sdram_controller_s1_agent:rp_valid -> router_004:sink_valid
	wire          sdram_controller_s1_agent_rp_startofpacket;                                   // sdram_controller_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire   [89:0] sdram_controller_s1_agent_rp_data;                                            // sdram_controller_s1_agent:rp_data -> router_004:sink_data
	wire          sdram_controller_s1_agent_rp_ready;                                           // router_004:sink_ready -> sdram_controller_s1_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                             // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                   // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_005:sink_valid
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                           // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire  [107:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                    // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_005:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                   // router_005:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          router_005_src_endofpacket;                                                   // router_005:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_005_src_valid;                                                         // router_005:src_valid -> rsp_demux_002:sink_valid
	wire          router_005_src_startofpacket;                                                 // router_005:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire  [107:0] router_005_src_data;                                                          // router_005:src_data -> rsp_demux_002:sink_data
	wire    [4:0] router_005_src_channel;                                                       // router_005:src_channel -> rsp_demux_002:sink_channel
	wire          router_005_src_ready;                                                         // rsp_demux_002:sink_ready -> router_005:src_ready
	wire          pll_pll_slave_agent_rp_endofpacket;                                           // pll_pll_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          pll_pll_slave_agent_rp_valid;                                                 // pll_pll_slave_agent:rp_valid -> router_006:sink_valid
	wire          pll_pll_slave_agent_rp_startofpacket;                                         // pll_pll_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire  [107:0] pll_pll_slave_agent_rp_data;                                                  // pll_pll_slave_agent:rp_data -> router_006:sink_data
	wire          pll_pll_slave_agent_rp_ready;                                                 // router_006:sink_ready -> pll_pll_slave_agent:rp_ready
	wire          router_006_src_endofpacket;                                                   // router_006:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_006_src_valid;                                                         // router_006:src_valid -> rsp_demux_003:sink_valid
	wire          router_006_src_startofpacket;                                                 // router_006:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire  [107:0] router_006_src_data;                                                          // router_006:src_data -> rsp_demux_003:sink_data
	wire    [4:0] router_006_src_channel;                                                       // router_006:src_channel -> rsp_demux_003:sink_channel
	wire          router_006_src_ready;                                                         // rsp_demux_003:sink_ready -> router_006:src_ready
	wire          lt24_ctrl_0_avalon_slave_0_agent_rp_endofpacket;                              // LT24_CTRL_0_avalon_slave_0_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          lt24_ctrl_0_avalon_slave_0_agent_rp_valid;                                    // LT24_CTRL_0_avalon_slave_0_agent:rp_valid -> router_007:sink_valid
	wire          lt24_ctrl_0_avalon_slave_0_agent_rp_startofpacket;                            // LT24_CTRL_0_avalon_slave_0_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire  [107:0] lt24_ctrl_0_avalon_slave_0_agent_rp_data;                                     // LT24_CTRL_0_avalon_slave_0_agent:rp_data -> router_007:sink_data
	wire          lt24_ctrl_0_avalon_slave_0_agent_rp_ready;                                    // router_007:sink_ready -> LT24_CTRL_0_avalon_slave_0_agent:rp_ready
	wire          router_007_src_endofpacket;                                                   // router_007:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_007_src_valid;                                                         // router_007:src_valid -> rsp_demux_004:sink_valid
	wire          router_007_src_startofpacket;                                                 // router_007:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire  [107:0] router_007_src_data;                                                          // router_007:src_data -> rsp_demux_004:sink_data
	wire    [4:0] router_007_src_channel;                                                       // router_007:src_channel -> rsp_demux_004:sink_channel
	wire          router_007_src_ready;                                                         // rsp_demux_004:sink_ready -> router_007:src_ready
	wire          router_src_endofpacket;                                                       // router:src_endofpacket -> nios2_instruction_master_limiter:cmd_sink_endofpacket
	wire          router_src_valid;                                                             // router:src_valid -> nios2_instruction_master_limiter:cmd_sink_valid
	wire          router_src_startofpacket;                                                     // router:src_startofpacket -> nios2_instruction_master_limiter:cmd_sink_startofpacket
	wire  [107:0] router_src_data;                                                              // router:src_data -> nios2_instruction_master_limiter:cmd_sink_data
	wire    [4:0] router_src_channel;                                                           // router:src_channel -> nios2_instruction_master_limiter:cmd_sink_channel
	wire          router_src_ready;                                                             // nios2_instruction_master_limiter:cmd_sink_ready -> router:src_ready
	wire          nios2_instruction_master_limiter_cmd_src_endofpacket;                         // nios2_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          nios2_instruction_master_limiter_cmd_src_startofpacket;                       // nios2_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire  [107:0] nios2_instruction_master_limiter_cmd_src_data;                                // nios2_instruction_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire    [4:0] nios2_instruction_master_limiter_cmd_src_channel;                             // nios2_instruction_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          nios2_instruction_master_limiter_cmd_src_ready;                               // cmd_demux:sink_ready -> nios2_instruction_master_limiter:cmd_src_ready
	wire          rsp_mux_src_endofpacket;                                                      // rsp_mux:src_endofpacket -> nios2_instruction_master_limiter:rsp_sink_endofpacket
	wire          rsp_mux_src_valid;                                                            // rsp_mux:src_valid -> nios2_instruction_master_limiter:rsp_sink_valid
	wire          rsp_mux_src_startofpacket;                                                    // rsp_mux:src_startofpacket -> nios2_instruction_master_limiter:rsp_sink_startofpacket
	wire  [107:0] rsp_mux_src_data;                                                             // rsp_mux:src_data -> nios2_instruction_master_limiter:rsp_sink_data
	wire    [4:0] rsp_mux_src_channel;                                                          // rsp_mux:src_channel -> nios2_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_ready;                                                            // nios2_instruction_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire          nios2_instruction_master_limiter_rsp_src_endofpacket;                         // nios2_instruction_master_limiter:rsp_src_endofpacket -> nios2_instruction_master_agent:rp_endofpacket
	wire          nios2_instruction_master_limiter_rsp_src_valid;                               // nios2_instruction_master_limiter:rsp_src_valid -> nios2_instruction_master_agent:rp_valid
	wire          nios2_instruction_master_limiter_rsp_src_startofpacket;                       // nios2_instruction_master_limiter:rsp_src_startofpacket -> nios2_instruction_master_agent:rp_startofpacket
	wire  [107:0] nios2_instruction_master_limiter_rsp_src_data;                                // nios2_instruction_master_limiter:rsp_src_data -> nios2_instruction_master_agent:rp_data
	wire    [4:0] nios2_instruction_master_limiter_rsp_src_channel;                             // nios2_instruction_master_limiter:rsp_src_channel -> nios2_instruction_master_agent:rp_channel
	wire          nios2_instruction_master_limiter_rsp_src_ready;                               // nios2_instruction_master_agent:rp_ready -> nios2_instruction_master_limiter:rsp_src_ready
	wire          router_001_src_endofpacket;                                                   // router_001:src_endofpacket -> nios2_data_master_limiter:cmd_sink_endofpacket
	wire          router_001_src_valid;                                                         // router_001:src_valid -> nios2_data_master_limiter:cmd_sink_valid
	wire          router_001_src_startofpacket;                                                 // router_001:src_startofpacket -> nios2_data_master_limiter:cmd_sink_startofpacket
	wire  [107:0] router_001_src_data;                                                          // router_001:src_data -> nios2_data_master_limiter:cmd_sink_data
	wire    [4:0] router_001_src_channel;                                                       // router_001:src_channel -> nios2_data_master_limiter:cmd_sink_channel
	wire          router_001_src_ready;                                                         // nios2_data_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire          nios2_data_master_limiter_cmd_src_endofpacket;                                // nios2_data_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          nios2_data_master_limiter_cmd_src_startofpacket;                              // nios2_data_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire  [107:0] nios2_data_master_limiter_cmd_src_data;                                       // nios2_data_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire    [4:0] nios2_data_master_limiter_cmd_src_channel;                                    // nios2_data_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          nios2_data_master_limiter_cmd_src_ready;                                      // cmd_demux_001:sink_ready -> nios2_data_master_limiter:cmd_src_ready
	wire          rsp_mux_001_src_endofpacket;                                                  // rsp_mux_001:src_endofpacket -> nios2_data_master_limiter:rsp_sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                        // rsp_mux_001:src_valid -> nios2_data_master_limiter:rsp_sink_valid
	wire          rsp_mux_001_src_startofpacket;                                                // rsp_mux_001:src_startofpacket -> nios2_data_master_limiter:rsp_sink_startofpacket
	wire  [107:0] rsp_mux_001_src_data;                                                         // rsp_mux_001:src_data -> nios2_data_master_limiter:rsp_sink_data
	wire    [4:0] rsp_mux_001_src_channel;                                                      // rsp_mux_001:src_channel -> nios2_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_ready;                                                        // nios2_data_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire          nios2_data_master_limiter_rsp_src_endofpacket;                                // nios2_data_master_limiter:rsp_src_endofpacket -> nios2_data_master_agent:rp_endofpacket
	wire          nios2_data_master_limiter_rsp_src_valid;                                      // nios2_data_master_limiter:rsp_src_valid -> nios2_data_master_agent:rp_valid
	wire          nios2_data_master_limiter_rsp_src_startofpacket;                              // nios2_data_master_limiter:rsp_src_startofpacket -> nios2_data_master_agent:rp_startofpacket
	wire  [107:0] nios2_data_master_limiter_rsp_src_data;                                       // nios2_data_master_limiter:rsp_src_data -> nios2_data_master_agent:rp_data
	wire    [4:0] nios2_data_master_limiter_rsp_src_channel;                                    // nios2_data_master_limiter:rsp_src_channel -> nios2_data_master_agent:rp_channel
	wire          nios2_data_master_limiter_rsp_src_ready;                                      // nios2_data_master_agent:rp_ready -> nios2_data_master_limiter:rsp_src_ready
	wire          sdram_controller_s1_burst_adapter_source0_endofpacket;                        // sdram_controller_s1_burst_adapter:source0_endofpacket -> sdram_controller_s1_agent:cp_endofpacket
	wire          sdram_controller_s1_burst_adapter_source0_valid;                              // sdram_controller_s1_burst_adapter:source0_valid -> sdram_controller_s1_agent:cp_valid
	wire          sdram_controller_s1_burst_adapter_source0_startofpacket;                      // sdram_controller_s1_burst_adapter:source0_startofpacket -> sdram_controller_s1_agent:cp_startofpacket
	wire   [89:0] sdram_controller_s1_burst_adapter_source0_data;                               // sdram_controller_s1_burst_adapter:source0_data -> sdram_controller_s1_agent:cp_data
	wire          sdram_controller_s1_burst_adapter_source0_ready;                              // sdram_controller_s1_agent:cp_ready -> sdram_controller_s1_burst_adapter:source0_ready
	wire    [4:0] sdram_controller_s1_burst_adapter_source0_channel;                            // sdram_controller_s1_burst_adapter:source0_channel -> sdram_controller_s1_agent:cp_channel
	wire          cmd_demux_src0_endofpacket;                                                   // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                                         // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire          cmd_demux_src0_startofpacket;                                                 // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [107:0] cmd_demux_src0_data;                                                          // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire    [4:0] cmd_demux_src0_channel;                                                       // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_ready;                                                         // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire          cmd_demux_001_src0_endofpacket;                                               // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src0_valid;                                                     // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire          cmd_demux_001_src0_startofpacket;                                             // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire  [107:0] cmd_demux_001_src0_data;                                                      // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire    [4:0] cmd_demux_001_src0_channel;                                                   // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_ready;                                                     // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire          cmd_demux_001_src2_endofpacket;                                               // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src2_valid;                                                     // cmd_demux_001:src2_valid -> cmd_mux_002:sink0_valid
	wire          cmd_demux_001_src2_startofpacket;                                             // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire  [107:0] cmd_demux_001_src2_data;                                                      // cmd_demux_001:src2_data -> cmd_mux_002:sink0_data
	wire    [4:0] cmd_demux_001_src2_channel;                                                   // cmd_demux_001:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_001_src2_ready;                                                     // cmd_mux_002:sink0_ready -> cmd_demux_001:src2_ready
	wire          cmd_demux_001_src3_endofpacket;                                               // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_001_src3_valid;                                                     // cmd_demux_001:src3_valid -> cmd_mux_003:sink0_valid
	wire          cmd_demux_001_src3_startofpacket;                                             // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire  [107:0] cmd_demux_001_src3_data;                                                      // cmd_demux_001:src3_data -> cmd_mux_003:sink0_data
	wire    [4:0] cmd_demux_001_src3_channel;                                                   // cmd_demux_001:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_001_src3_ready;                                                     // cmd_mux_003:sink0_ready -> cmd_demux_001:src3_ready
	wire          cmd_demux_001_src4_endofpacket;                                               // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src4_valid;                                                     // cmd_demux_001:src4_valid -> cmd_mux_004:sink0_valid
	wire          cmd_demux_001_src4_startofpacket;                                             // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire  [107:0] cmd_demux_001_src4_data;                                                      // cmd_demux_001:src4_data -> cmd_mux_004:sink0_data
	wire    [4:0] cmd_demux_001_src4_channel;                                                   // cmd_demux_001:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_001_src4_ready;                                                     // cmd_mux_004:sink0_ready -> cmd_demux_001:src4_ready
	wire          rsp_demux_src0_endofpacket;                                                   // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                         // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire          rsp_demux_src0_startofpacket;                                                 // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [107:0] rsp_demux_src0_data;                                                          // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire    [4:0] rsp_demux_src0_channel;                                                       // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_ready;                                                         // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire          rsp_demux_src1_endofpacket;                                                   // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                         // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire          rsp_demux_src1_startofpacket;                                                 // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire  [107:0] rsp_demux_src1_data;                                                          // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire    [4:0] rsp_demux_src1_channel;                                                       // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_ready;                                                         // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire          rsp_demux_002_src0_endofpacket;                                               // rsp_demux_002:src0_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_002_src0_valid;                                                     // rsp_demux_002:src0_valid -> rsp_mux_001:sink2_valid
	wire          rsp_demux_002_src0_startofpacket;                                             // rsp_demux_002:src0_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire  [107:0] rsp_demux_002_src0_data;                                                      // rsp_demux_002:src0_data -> rsp_mux_001:sink2_data
	wire    [4:0] rsp_demux_002_src0_channel;                                                   // rsp_demux_002:src0_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src0_ready;                                                     // rsp_mux_001:sink2_ready -> rsp_demux_002:src0_ready
	wire          rsp_demux_003_src0_endofpacket;                                               // rsp_demux_003:src0_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_003_src0_valid;                                                     // rsp_demux_003:src0_valid -> rsp_mux_001:sink3_valid
	wire          rsp_demux_003_src0_startofpacket;                                             // rsp_demux_003:src0_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire  [107:0] rsp_demux_003_src0_data;                                                      // rsp_demux_003:src0_data -> rsp_mux_001:sink3_data
	wire    [4:0] rsp_demux_003_src0_channel;                                                   // rsp_demux_003:src0_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src0_ready;                                                     // rsp_mux_001:sink3_ready -> rsp_demux_003:src0_ready
	wire          rsp_demux_004_src0_endofpacket;                                               // rsp_demux_004:src0_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_004_src0_valid;                                                     // rsp_demux_004:src0_valid -> rsp_mux_001:sink4_valid
	wire          rsp_demux_004_src0_startofpacket;                                             // rsp_demux_004:src0_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire  [107:0] rsp_demux_004_src0_data;                                                      // rsp_demux_004:src0_data -> rsp_mux_001:sink4_data
	wire    [4:0] rsp_demux_004_src0_channel;                                                   // rsp_demux_004:src0_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src0_ready;                                                     // rsp_mux_001:sink4_ready -> rsp_demux_004:src0_ready
	wire          router_004_src_endofpacket;                                                   // router_004:src_endofpacket -> sdram_controller_s1_rsp_width_adapter:in_endofpacket
	wire          router_004_src_valid;                                                         // router_004:src_valid -> sdram_controller_s1_rsp_width_adapter:in_valid
	wire          router_004_src_startofpacket;                                                 // router_004:src_startofpacket -> sdram_controller_s1_rsp_width_adapter:in_startofpacket
	wire   [89:0] router_004_src_data;                                                          // router_004:src_data -> sdram_controller_s1_rsp_width_adapter:in_data
	wire    [4:0] router_004_src_channel;                                                       // router_004:src_channel -> sdram_controller_s1_rsp_width_adapter:in_channel
	wire          router_004_src_ready;                                                         // sdram_controller_s1_rsp_width_adapter:in_ready -> router_004:src_ready
	wire          sdram_controller_s1_rsp_width_adapter_src_endofpacket;                        // sdram_controller_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          sdram_controller_s1_rsp_width_adapter_src_valid;                              // sdram_controller_s1_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire          sdram_controller_s1_rsp_width_adapter_src_startofpacket;                      // sdram_controller_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire  [107:0] sdram_controller_s1_rsp_width_adapter_src_data;                               // sdram_controller_s1_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          sdram_controller_s1_rsp_width_adapter_src_ready;                              // rsp_demux_001:sink_ready -> sdram_controller_s1_rsp_width_adapter:out_ready
	wire    [4:0] sdram_controller_s1_rsp_width_adapter_src_channel;                            // sdram_controller_s1_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          cmd_mux_001_src_endofpacket;                                                  // cmd_mux_001:src_endofpacket -> sdram_controller_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_mux_001_src_valid;                                                        // cmd_mux_001:src_valid -> sdram_controller_s1_cmd_width_adapter:in_valid
	wire          cmd_mux_001_src_startofpacket;                                                // cmd_mux_001:src_startofpacket -> sdram_controller_s1_cmd_width_adapter:in_startofpacket
	wire  [107:0] cmd_mux_001_src_data;                                                         // cmd_mux_001:src_data -> sdram_controller_s1_cmd_width_adapter:in_data
	wire    [4:0] cmd_mux_001_src_channel;                                                      // cmd_mux_001:src_channel -> sdram_controller_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_ready;                                                        // sdram_controller_s1_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire          sdram_controller_s1_cmd_width_adapter_src_endofpacket;                        // sdram_controller_s1_cmd_width_adapter:out_endofpacket -> sdram_controller_s1_burst_adapter:sink0_endofpacket
	wire          sdram_controller_s1_cmd_width_adapter_src_valid;                              // sdram_controller_s1_cmd_width_adapter:out_valid -> sdram_controller_s1_burst_adapter:sink0_valid
	wire          sdram_controller_s1_cmd_width_adapter_src_startofpacket;                      // sdram_controller_s1_cmd_width_adapter:out_startofpacket -> sdram_controller_s1_burst_adapter:sink0_startofpacket
	wire   [89:0] sdram_controller_s1_cmd_width_adapter_src_data;                               // sdram_controller_s1_cmd_width_adapter:out_data -> sdram_controller_s1_burst_adapter:sink0_data
	wire          sdram_controller_s1_cmd_width_adapter_src_ready;                              // sdram_controller_s1_burst_adapter:sink0_ready -> sdram_controller_s1_cmd_width_adapter:out_ready
	wire    [4:0] sdram_controller_s1_cmd_width_adapter_src_channel;                            // sdram_controller_s1_cmd_width_adapter:out_channel -> sdram_controller_s1_burst_adapter:sink0_channel
	wire          cmd_demux_src1_endofpacket;                                                   // cmd_demux:src1_endofpacket -> crosser:in_endofpacket
	wire          cmd_demux_src1_valid;                                                         // cmd_demux:src1_valid -> crosser:in_valid
	wire          cmd_demux_src1_startofpacket;                                                 // cmd_demux:src1_startofpacket -> crosser:in_startofpacket
	wire  [107:0] cmd_demux_src1_data;                                                          // cmd_demux:src1_data -> crosser:in_data
	wire    [4:0] cmd_demux_src1_channel;                                                       // cmd_demux:src1_channel -> crosser:in_channel
	wire          cmd_demux_src1_ready;                                                         // crosser:in_ready -> cmd_demux:src1_ready
	wire          crosser_out_endofpacket;                                                      // crosser:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          crosser_out_valid;                                                            // crosser:out_valid -> cmd_mux_001:sink0_valid
	wire          crosser_out_startofpacket;                                                    // crosser:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire  [107:0] crosser_out_data;                                                             // crosser:out_data -> cmd_mux_001:sink0_data
	wire    [4:0] crosser_out_channel;                                                          // crosser:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_out_ready;                                                            // cmd_mux_001:sink0_ready -> crosser:out_ready
	wire          cmd_demux_001_src1_endofpacket;                                               // cmd_demux_001:src1_endofpacket -> crosser_001:in_endofpacket
	wire          cmd_demux_001_src1_valid;                                                     // cmd_demux_001:src1_valid -> crosser_001:in_valid
	wire          cmd_demux_001_src1_startofpacket;                                             // cmd_demux_001:src1_startofpacket -> crosser_001:in_startofpacket
	wire  [107:0] cmd_demux_001_src1_data;                                                      // cmd_demux_001:src1_data -> crosser_001:in_data
	wire    [4:0] cmd_demux_001_src1_channel;                                                   // cmd_demux_001:src1_channel -> crosser_001:in_channel
	wire          cmd_demux_001_src1_ready;                                                     // crosser_001:in_ready -> cmd_demux_001:src1_ready
	wire          crosser_001_out_endofpacket;                                                  // crosser_001:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          crosser_001_out_valid;                                                        // crosser_001:out_valid -> cmd_mux_001:sink1_valid
	wire          crosser_001_out_startofpacket;                                                // crosser_001:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire  [107:0] crosser_001_out_data;                                                         // crosser_001:out_data -> cmd_mux_001:sink1_data
	wire    [4:0] crosser_001_out_channel;                                                      // crosser_001:out_channel -> cmd_mux_001:sink1_channel
	wire          crosser_001_out_ready;                                                        // cmd_mux_001:sink1_ready -> crosser_001:out_ready
	wire          cmd_demux_002_src0_endofpacket;                                               // cmd_demux_002:src0_endofpacket -> crosser_002:in_endofpacket
	wire          cmd_demux_002_src0_valid;                                                     // cmd_demux_002:src0_valid -> crosser_002:in_valid
	wire          cmd_demux_002_src0_startofpacket;                                             // cmd_demux_002:src0_startofpacket -> crosser_002:in_startofpacket
	wire  [107:0] cmd_demux_002_src0_data;                                                      // cmd_demux_002:src0_data -> crosser_002:in_data
	wire    [4:0] cmd_demux_002_src0_channel;                                                   // cmd_demux_002:src0_channel -> crosser_002:in_channel
	wire          cmd_demux_002_src0_ready;                                                     // crosser_002:in_ready -> cmd_demux_002:src0_ready
	wire          crosser_002_out_endofpacket;                                                  // crosser_002:out_endofpacket -> cmd_mux_001:sink2_endofpacket
	wire          crosser_002_out_valid;                                                        // crosser_002:out_valid -> cmd_mux_001:sink2_valid
	wire          crosser_002_out_startofpacket;                                                // crosser_002:out_startofpacket -> cmd_mux_001:sink2_startofpacket
	wire  [107:0] crosser_002_out_data;                                                         // crosser_002:out_data -> cmd_mux_001:sink2_data
	wire    [4:0] crosser_002_out_channel;                                                      // crosser_002:out_channel -> cmd_mux_001:sink2_channel
	wire          crosser_002_out_ready;                                                        // cmd_mux_001:sink2_ready -> crosser_002:out_ready
	wire          rsp_demux_001_src0_endofpacket;                                               // rsp_demux_001:src0_endofpacket -> crosser_003:in_endofpacket
	wire          rsp_demux_001_src0_valid;                                                     // rsp_demux_001:src0_valid -> crosser_003:in_valid
	wire          rsp_demux_001_src0_startofpacket;                                             // rsp_demux_001:src0_startofpacket -> crosser_003:in_startofpacket
	wire  [107:0] rsp_demux_001_src0_data;                                                      // rsp_demux_001:src0_data -> crosser_003:in_data
	wire    [4:0] rsp_demux_001_src0_channel;                                                   // rsp_demux_001:src0_channel -> crosser_003:in_channel
	wire          rsp_demux_001_src0_ready;                                                     // crosser_003:in_ready -> rsp_demux_001:src0_ready
	wire          crosser_003_out_endofpacket;                                                  // crosser_003:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          crosser_003_out_valid;                                                        // crosser_003:out_valid -> rsp_mux:sink1_valid
	wire          crosser_003_out_startofpacket;                                                // crosser_003:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire  [107:0] crosser_003_out_data;                                                         // crosser_003:out_data -> rsp_mux:sink1_data
	wire    [4:0] crosser_003_out_channel;                                                      // crosser_003:out_channel -> rsp_mux:sink1_channel
	wire          crosser_003_out_ready;                                                        // rsp_mux:sink1_ready -> crosser_003:out_ready
	wire          rsp_demux_001_src1_endofpacket;                                               // rsp_demux_001:src1_endofpacket -> crosser_004:in_endofpacket
	wire          rsp_demux_001_src1_valid;                                                     // rsp_demux_001:src1_valid -> crosser_004:in_valid
	wire          rsp_demux_001_src1_startofpacket;                                             // rsp_demux_001:src1_startofpacket -> crosser_004:in_startofpacket
	wire  [107:0] rsp_demux_001_src1_data;                                                      // rsp_demux_001:src1_data -> crosser_004:in_data
	wire    [4:0] rsp_demux_001_src1_channel;                                                   // rsp_demux_001:src1_channel -> crosser_004:in_channel
	wire          rsp_demux_001_src1_ready;                                                     // crosser_004:in_ready -> rsp_demux_001:src1_ready
	wire          crosser_004_out_endofpacket;                                                  // crosser_004:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          crosser_004_out_valid;                                                        // crosser_004:out_valid -> rsp_mux_001:sink1_valid
	wire          crosser_004_out_startofpacket;                                                // crosser_004:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire  [107:0] crosser_004_out_data;                                                         // crosser_004:out_data -> rsp_mux_001:sink1_data
	wire    [4:0] crosser_004_out_channel;                                                      // crosser_004:out_channel -> rsp_mux_001:sink1_channel
	wire          crosser_004_out_ready;                                                        // rsp_mux_001:sink1_ready -> crosser_004:out_ready
	wire          rsp_demux_001_src2_endofpacket;                                               // rsp_demux_001:src2_endofpacket -> crosser_005:in_endofpacket
	wire          rsp_demux_001_src2_valid;                                                     // rsp_demux_001:src2_valid -> crosser_005:in_valid
	wire          rsp_demux_001_src2_startofpacket;                                             // rsp_demux_001:src2_startofpacket -> crosser_005:in_startofpacket
	wire  [107:0] rsp_demux_001_src2_data;                                                      // rsp_demux_001:src2_data -> crosser_005:in_data
	wire    [4:0] rsp_demux_001_src2_channel;                                                   // rsp_demux_001:src2_channel -> crosser_005:in_channel
	wire          rsp_demux_001_src2_ready;                                                     // crosser_005:in_ready -> rsp_demux_001:src2_ready
	wire          crosser_005_out_endofpacket;                                                  // crosser_005:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          crosser_005_out_valid;                                                        // crosser_005:out_valid -> rsp_mux_002:sink0_valid
	wire          crosser_005_out_startofpacket;                                                // crosser_005:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire  [107:0] crosser_005_out_data;                                                         // crosser_005:out_data -> rsp_mux_002:sink0_data
	wire    [4:0] crosser_005_out_channel;                                                      // crosser_005:out_channel -> rsp_mux_002:sink0_channel
	wire          crosser_005_out_ready;                                                        // rsp_mux_002:sink0_ready -> crosser_005:out_ready
	wire    [4:0] nios2_instruction_master_limiter_cmd_valid_data;                              // nios2_instruction_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [4:0] nios2_data_master_limiter_cmd_valid_data;                                     // nios2_data_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_instruction_master_translator (
		.clk                      (clk_clk_clk),                                                                 //                       clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address              (nios2_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (nios2_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (nios2_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (nios2_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (nios2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (nios2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (nios2_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (nios2_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (nios2_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (nios2_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (nios2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (nios2_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (nios2_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                  (nios2_instruction_master_read),                                               //                          .read
		.av_readdata              (nios2_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (nios2_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount            (1'b1),                                                                        //               (terminated)
		.av_byteenable            (4'b1111),                                                                     //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                        //               (terminated)
		.av_begintransfer         (1'b0),                                                                        //               (terminated)
		.av_chipselect            (1'b0),                                                                        //               (terminated)
		.av_write                 (1'b0),                                                                        //               (terminated)
		.av_writedata             (32'b00000000000000000000000000000000),                                        //               (terminated)
		.av_lock                  (1'b0),                                                                        //               (terminated)
		.av_debugaccess           (1'b0),                                                                        //               (terminated)
		.uav_clken                (),                                                                            //               (terminated)
		.av_clken                 (1'b1),                                                                        //               (terminated)
		.uav_response             (2'b00),                                                                       //               (terminated)
		.av_response              (),                                                                            //               (terminated)
		.uav_writeresponserequest (),                                                                            //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                        //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid    ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_data_master_translator (
		.clk                      (clk_clk_clk),                                                          //                       clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address              (nios2_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (nios2_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (nios2_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (nios2_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (nios2_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (nios2_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (nios2_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (nios2_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (nios2_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (nios2_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (nios2_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (nios2_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (nios2_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (nios2_data_master_byteenable),                                         //                          .byteenable
		.av_read                  (nios2_data_master_read),                                               //                          .read
		.av_readdata              (nios2_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (nios2_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (nios2_data_master_write),                                              //                          .write
		.av_writedata             (nios2_data_master_writedata),                                          //                          .writedata
		.av_debugaccess           (nios2_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount            (1'b1),                                                                 //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                 //               (terminated)
		.av_begintransfer         (1'b0),                                                                 //               (terminated)
		.av_chipselect            (1'b0),                                                                 //               (terminated)
		.av_lock                  (1'b0),                                                                 //               (terminated)
		.uav_clken                (),                                                                     //               (terminated)
		.av_clken                 (1'b1),                                                                 //               (terminated)
		.uav_response             (2'b00),                                                                //               (terminated)
		.av_response              (),                                                                     //               (terminated)
		.uav_writeresponserequest (),                                                                     //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                 //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid    ()                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) lt24_ctrl_0_avalon_master_translator (
		.clk                      (clk_clk_clk),                                                                  //                       clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset),                                    //                     reset.reset
		.uav_address              (lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (LT24_CTRL_0_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (LT24_CTRL_0_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_read                  (LT24_CTRL_0_avalon_master_read),                                               //                          .read
		.av_readdata              (LT24_CTRL_0_avalon_master_readdata),                                           //                          .readdata
		.av_burstcount            (1'b1),                                                                         //               (terminated)
		.av_byteenable            (4'b1111),                                                                      //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                         //               (terminated)
		.av_begintransfer         (1'b0),                                                                         //               (terminated)
		.av_chipselect            (1'b0),                                                                         //               (terminated)
		.av_readdatavalid         (),                                                                             //               (terminated)
		.av_write                 (1'b0),                                                                         //               (terminated)
		.av_writedata             (32'b00000000000000000000000000000000),                                         //               (terminated)
		.av_lock                  (1'b0),                                                                         //               (terminated)
		.av_debugaccess           (1'b0),                                                                         //               (terminated)
		.uav_clken                (),                                                                             //               (terminated)
		.av_clken                 (1'b1),                                                                         //               (terminated)
		.uav_response             (2'b00),                                                                        //               (terminated)
		.av_response              (),                                                                             //               (terminated)
		.uav_writeresponserequest (),                                                                             //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                         //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                         //               (terminated)
		.av_writeresponsevalid    ()                                                                              //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_jtag_debug_module_translator (
		.clk                      (clk_clk_clk),                                    //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address              (nios2_jtag_debug_module_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (nios2_jtag_debug_module_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (nios2_jtag_debug_module_agent_m0_read),          //                         .read
		.uav_write                (nios2_jtag_debug_module_agent_m0_write),         //                         .write
		.uav_waitrequest          (nios2_jtag_debug_module_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (nios2_jtag_debug_module_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (nios2_jtag_debug_module_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (nios2_jtag_debug_module_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (nios2_jtag_debug_module_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (nios2_jtag_debug_module_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (nios2_jtag_debug_module_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (nios2_jtag_debug_module_address),                //      avalon_anti_slave_0.address
		.av_write                 (nios2_jtag_debug_module_write),                  //                         .write
		.av_read                  (nios2_jtag_debug_module_read),                   //                         .read
		.av_readdata              (nios2_jtag_debug_module_readdata),               //                         .readdata
		.av_writedata             (nios2_jtag_debug_module_writedata),              //                         .writedata
		.av_byteenable            (nios2_jtag_debug_module_byteenable),             //                         .byteenable
		.av_waitrequest           (nios2_jtag_debug_module_waitrequest),            //                         .waitrequest
		.av_debugaccess           (nios2_jtag_debug_module_debugaccess),            //                         .debugaccess
		.av_begintransfer         (),                                               //              (terminated)
		.av_beginbursttransfer    (),                                               //              (terminated)
		.av_burstcount            (),                                               //              (terminated)
		.av_readdatavalid         (1'b0),                                           //              (terminated)
		.av_writebyteenable       (),                                               //              (terminated)
		.av_lock                  (),                                               //              (terminated)
		.av_chipselect            (),                                               //              (terminated)
		.av_clken                 (),                                               //              (terminated)
		.uav_clken                (1'b0),                                           //              (terminated)
		.av_outputenable          (),                                               //              (terminated)
		.uav_response             (),                                               //              (terminated)
		.av_response              (2'b00),                                          //              (terminated)
		.uav_writeresponserequest (1'b0),                                           //              (terminated)
		.uav_writeresponsevalid   (),                                               //              (terminated)
		.av_writeresponserequest  (),                                               //              (terminated)
		.av_writeresponsevalid    (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_controller_s1_translator (
		.clk                      (pll_c0_clk),                                         //                      clk.clk
		.reset                    (sdram_controller_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sdram_controller_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount           (sdram_controller_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read                 (sdram_controller_s1_agent_m0_read),                  //                         .read
		.uav_write                (sdram_controller_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest          (sdram_controller_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid        (sdram_controller_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable           (sdram_controller_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata             (sdram_controller_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata            (sdram_controller_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock                 (sdram_controller_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess          (sdram_controller_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address               (sdram_controller_s1_address),                        //      avalon_anti_slave_0.address
		.av_write                 (sdram_controller_s1_write),                          //                         .write
		.av_read                  (sdram_controller_s1_read),                           //                         .read
		.av_readdata              (sdram_controller_s1_readdata),                       //                         .readdata
		.av_writedata             (sdram_controller_s1_writedata),                      //                         .writedata
		.av_byteenable            (sdram_controller_s1_byteenable),                     //                         .byteenable
		.av_readdatavalid         (sdram_controller_s1_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest           (sdram_controller_s1_waitrequest),                    //                         .waitrequest
		.av_chipselect            (sdram_controller_s1_chipselect),                     //                         .chipselect
		.av_begintransfer         (),                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                   //              (terminated)
		.av_burstcount            (),                                                   //              (terminated)
		.av_writebyteenable       (),                                                   //              (terminated)
		.av_lock                  (),                                                   //              (terminated)
		.av_clken                 (),                                                   //              (terminated)
		.uav_clken                (1'b0),                                               //              (terminated)
		.av_debugaccess           (),                                                   //              (terminated)
		.av_outputenable          (),                                                   //              (terminated)
		.uav_response             (),                                                   //              (terminated)
		.av_response              (2'b00),                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                   //              (terminated)
		.av_writeresponserequest  (),                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                      (clk_clk_clk),                                        //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (jtag_uart_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write                 (jtag_uart_avalon_jtag_slave_write),                  //                         .write
		.av_read                  (jtag_uart_avalon_jtag_slave_read),                   //                         .read
		.av_readdata              (jtag_uart_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata             (jtag_uart_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest           (jtag_uart_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect            (jtag_uart_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer         (),                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                   //              (terminated)
		.av_burstcount            (),                                                   //              (terminated)
		.av_byteenable            (),                                                   //              (terminated)
		.av_readdatavalid         (1'b0),                                               //              (terminated)
		.av_writebyteenable       (),                                                   //              (terminated)
		.av_lock                  (),                                                   //              (terminated)
		.av_clken                 (),                                                   //              (terminated)
		.uav_clken                (1'b0),                                               //              (terminated)
		.av_debugaccess           (),                                                   //              (terminated)
		.av_outputenable          (),                                                   //              (terminated)
		.uav_response             (),                                                   //              (terminated)
		.av_response              (2'b00),                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                   //              (terminated)
		.av_writeresponserequest  (),                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pll_pll_slave_translator (
		.clk                      (clk_clk_clk),                               //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (pll_pll_slave_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount           (pll_pll_slave_agent_m0_burstcount),         //                         .burstcount
		.uav_read                 (pll_pll_slave_agent_m0_read),               //                         .read
		.uav_write                (pll_pll_slave_agent_m0_write),              //                         .write
		.uav_waitrequest          (pll_pll_slave_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid        (pll_pll_slave_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable           (pll_pll_slave_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata             (pll_pll_slave_agent_m0_readdata),           //                         .readdata
		.uav_writedata            (pll_pll_slave_agent_m0_writedata),          //                         .writedata
		.uav_lock                 (pll_pll_slave_agent_m0_lock),               //                         .lock
		.uav_debugaccess          (pll_pll_slave_agent_m0_debugaccess),        //                         .debugaccess
		.av_address               (pll_pll_slave_address),                     //      avalon_anti_slave_0.address
		.av_write                 (pll_pll_slave_write),                       //                         .write
		.av_read                  (pll_pll_slave_read),                        //                         .read
		.av_readdata              (pll_pll_slave_readdata),                    //                         .readdata
		.av_writedata             (pll_pll_slave_writedata),                   //                         .writedata
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lt24_ctrl_0_avalon_slave_0_translator (
		.clk                      (clk_clk_clk),                                       //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address              (lt24_ctrl_0_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (lt24_ctrl_0_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (lt24_ctrl_0_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write                (lt24_ctrl_0_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (lt24_ctrl_0_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (lt24_ctrl_0_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (lt24_ctrl_0_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (lt24_ctrl_0_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (lt24_ctrl_0_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (lt24_ctrl_0_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (lt24_ctrl_0_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (LT24_CTRL_0_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write                 (LT24_CTRL_0_avalon_slave_0_write),                  //                         .write
		.av_read                  (LT24_CTRL_0_avalon_slave_0_read),                   //                         .read
		.av_readdata              (LT24_CTRL_0_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata             (LT24_CTRL_0_avalon_slave_0_writedata),              //                         .writedata
		.av_chipselect            (LT24_CTRL_0_avalon_slave_0_chipselect),             //                         .chipselect
		.av_begintransfer         (),                                                  //              (terminated)
		.av_beginbursttransfer    (),                                                  //              (terminated)
		.av_burstcount            (),                                                  //              (terminated)
		.av_byteenable            (),                                                  //              (terminated)
		.av_readdatavalid         (1'b0),                                              //              (terminated)
		.av_waitrequest           (1'b0),                                              //              (terminated)
		.av_writebyteenable       (),                                                  //              (terminated)
		.av_lock                  (),                                                  //              (terminated)
		.av_clken                 (),                                                  //              (terminated)
		.uav_clken                (1'b0),                                              //              (terminated)
		.av_debugaccess           (),                                                  //              (terminated)
		.av_outputenable          (),                                                  //              (terminated)
		.uav_response             (),                                                  //              (terminated)
		.av_response              (2'b00),                                             //              (terminated)
		.uav_writeresponserequest (1'b0),                                              //              (terminated)
		.uav_writeresponsevalid   (),                                                  //              (terminated)
		.av_writeresponserequest  (),                                                  //              (terminated)
		.av_writeresponsevalid    (1'b0)                                               //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BEGIN_BURST           (87),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (92),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_ORI_BURST_SIZE_H      (107),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_instruction_master_agent (
		.clk                     (clk_clk_clk),                                                                 //       clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address              (nios2_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (nios2_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (nios2_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (nios2_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (nios2_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (nios2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (nios2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (nios2_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (nios2_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (nios2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (nios2_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (nios2_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (nios2_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (nios2_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (nios2_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (nios2_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (nios2_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (nios2_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel              (nios2_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (nios2_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (nios2_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (nios2_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                            // (terminated)
		.av_writeresponserequest (1'b0),                                                                        // (terminated)
		.av_writeresponsevalid   ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BEGIN_BURST           (87),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (92),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_ORI_BURST_SIZE_H      (107),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_data_master_agent (
		.clk                     (clk_clk_clk),                                                          //       clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address              (nios2_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (nios2_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (nios2_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (nios2_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (nios2_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (nios2_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (nios2_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (nios2_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (nios2_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (nios2_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (nios2_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (nios2_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (nios2_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (nios2_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (nios2_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (nios2_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (nios2_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (nios2_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel              (nios2_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (nios2_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (nios2_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (nios2_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                     // (terminated)
		.av_writeresponserequest (1'b0),                                                                 // (terminated)
		.av_writeresponsevalid   ()                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BEGIN_BURST           (87),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (92),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_ORI_BURST_SIZE_H      (107),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) lt24_ctrl_0_avalon_master_agent (
		.clk                     (clk_clk_clk),                                                                  //       clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.av_address              (lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (lt24_ctrl_0_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (lt24_ctrl_0_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (lt24_ctrl_0_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (lt24_ctrl_0_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (lt24_ctrl_0_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (lt24_ctrl_0_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_002_src_valid),                                                        //        rp.valid
		.rp_data                 (rsp_mux_002_src_data),                                                         //          .data
		.rp_channel              (rsp_mux_002_src_channel),                                                      //          .channel
		.rp_startofpacket        (rsp_mux_002_src_startofpacket),                                                //          .startofpacket
		.rp_endofpacket          (rsp_mux_002_src_endofpacket),                                                  //          .endofpacket
		.rp_ready                (rsp_mux_002_src_ready),                                                        //          .ready
		.av_response             (),                                                                             // (terminated)
		.av_writeresponserequest (1'b0),                                                                         // (terminated)
		.av_writeresponsevalid   ()                                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (87),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (92),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_ORI_BURST_SIZE_H      (107),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_jtag_debug_module_agent (
		.clk                     (clk_clk_clk),                                              //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_jtag_debug_module_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_jtag_debug_module_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_jtag_debug_module_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_jtag_debug_module_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_jtag_debug_module_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_jtag_debug_module_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_jtag_debug_module_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_jtag_debug_module_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_jtag_debug_module_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_jtag_debug_module_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_jtag_debug_module_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_jtag_debug_module_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_jtag_debug_module_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_jtag_debug_module_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_jtag_debug_module_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_jtag_debug_module_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                      //                .channel
		.rf_sink_ready           (nios2_jtag_debug_module_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_jtag_debug_module_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_jtag_debug_module_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_jtag_debug_module_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_jtag_debug_module_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_jtag_debug_module_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_jtag_debug_module_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_jtag_debug_module_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (nios2_jtag_debug_module_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (nios2_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (nios2_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (nios2_jtag_debug_module_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponserequest (),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_jtag_debug_module_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                              //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_jtag_debug_module_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_jtag_debug_module_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_jtag_debug_module_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_jtag_debug_module_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_jtag_debug_module_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_jtag_debug_module_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_jtag_debug_module_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_jtag_debug_module_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (73),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (76),
		.PKT_DEST_ID_L             (74),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (80),
		.PKT_PROTECTION_L          (78),
		.PKT_RESPONSE_STATUS_H     (86),
		.PKT_RESPONSE_STATUS_L     (85),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (87),
		.PKT_ORI_BURST_SIZE_H      (89),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (90),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sdram_controller_s1_agent (
		.clk                     (pll_c0_clk),                                              //             clk.clk
		.reset                   (sdram_controller_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (sdram_controller_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sdram_controller_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sdram_controller_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sdram_controller_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sdram_controller_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sdram_controller_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sdram_controller_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sdram_controller_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sdram_controller_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sdram_controller_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sdram_controller_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sdram_controller_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sdram_controller_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sdram_controller_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sdram_controller_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sdram_controller_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sdram_controller_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sdram_controller_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sdram_controller_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sdram_controller_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sdram_controller_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sdram_controller_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sdram_controller_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sdram_controller_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sdram_controller_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sdram_controller_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sdram_controller_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sdram_controller_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sdram_controller_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sdram_controller_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sdram_controller_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sdram_controller_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (sdram_controller_s1_agent_rdata_fifo_out_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sdram_controller_s1_agent_rdata_fifo_out_valid),          //                .valid
		.rdata_fifo_sink_data    (sdram_controller_s1_agent_rdata_fifo_out_data),           //                .data
		.rdata_fifo_src_ready    (sdram_controller_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_controller_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sdram_controller_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponserequest (),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (91),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_controller_s1_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                           //       clk.clk
		.reset             (sdram_controller_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sdram_controller_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_controller_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_controller_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_controller_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_controller_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_controller_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_controller_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_controller_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_controller_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_controller_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_controller_s1_agent_rdata_fifo (
		.clk               (pll_c0_clk),                                         //       clk.clk
		.reset             (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_controller_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (sdram_controller_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (sdram_controller_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (sdram_controller_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (sdram_controller_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (sdram_controller_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (87),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (92),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_ORI_BURST_SIZE_H      (107),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (clk_clk_clk),                                                  //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                      //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponserequest (),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                  //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (87),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (92),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_ORI_BURST_SIZE_H      (107),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pll_pll_slave_agent (
		.clk                     (clk_clk_clk),                                    //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (pll_pll_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pll_pll_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pll_pll_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pll_pll_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pll_pll_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (pll_pll_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pll_pll_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pll_pll_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (pll_pll_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pll_pll_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (pll_pll_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (pll_pll_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pll_pll_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (pll_pll_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (pll_pll_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (pll_pll_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_003_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                        //                .channel
		.rf_sink_ready           (pll_pll_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pll_pll_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pll_pll_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pll_pll_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pll_pll_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pll_pll_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pll_pll_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pll_pll_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pll_pll_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pll_pll_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (pll_pll_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pll_pll_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (pll_pll_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (pll_pll_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pll_pll_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pll_pll_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponserequest (),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pll_pll_slave_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                    //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (pll_pll_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pll_pll_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pll_pll_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pll_pll_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pll_pll_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pll_pll_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pll_pll_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pll_pll_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pll_pll_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pll_pll_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (87),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (92),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_ORI_BURST_SIZE_H      (107),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) lt24_ctrl_0_avalon_slave_0_agent (
		.clk                     (clk_clk_clk),                                                 //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (lt24_ctrl_0_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lt24_ctrl_0_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lt24_ctrl_0_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lt24_ctrl_0_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lt24_ctrl_0_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (lt24_ctrl_0_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lt24_ctrl_0_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lt24_ctrl_0_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (lt24_ctrl_0_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lt24_ctrl_0_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (lt24_ctrl_0_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (lt24_ctrl_0_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lt24_ctrl_0_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (lt24_ctrl_0_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (lt24_ctrl_0_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (lt24_ctrl_0_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                     //                .channel
		.rf_sink_ready           (lt24_ctrl_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lt24_ctrl_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lt24_ctrl_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lt24_ctrl_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lt24_ctrl_0_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lt24_ctrl_0_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lt24_ctrl_0_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lt24_ctrl_0_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lt24_ctrl_0_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lt24_ctrl_0_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (lt24_ctrl_0_avalon_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (lt24_ctrl_0_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (lt24_ctrl_0_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (lt24_ctrl_0_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lt24_ctrl_0_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lt24_ctrl_0_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponserequest (),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lt24_ctrl_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                 //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (lt24_ctrl_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (lt24_ctrl_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (lt24_ctrl_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lt24_ctrl_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lt24_ctrl_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lt24_ctrl_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lt24_ctrl_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lt24_ctrl_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lt24_ctrl_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lt24_ctrl_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	LT24_System_mm_interconnect_0_router router (
		.sink_ready         (nios2_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                     //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_src_ready),                                //       src.ready
		.src_valid          (router_src_valid),                                //          .valid
		.src_data           (router_src_data),                                 //          .data
		.src_channel        (router_src_channel),                              //          .channel
		.src_startofpacket  (router_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                           //          .endofpacket
	);

	LT24_System_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios2_data_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (nios2_data_master_agent_cp_valid),          //          .valid
		.sink_data          (nios2_data_master_agent_cp_data),           //          .data
		.sink_startofpacket (nios2_data_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (nios2_data_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (clk_clk_clk),                               //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                      //       src.ready
		.src_valid          (router_001_src_valid),                      //          .valid
		.src_data           (router_001_src_data),                       //          .data
		.src_channel        (router_001_src_channel),                    //          .channel
		.src_startofpacket  (router_001_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                 //          .endofpacket
	);

	LT24_System_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (lt24_ctrl_0_avalon_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (lt24_ctrl_0_avalon_master_agent_cp_valid),         //          .valid
		.sink_data          (lt24_ctrl_0_avalon_master_agent_cp_data),          //          .data
		.sink_startofpacket (lt24_ctrl_0_avalon_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (lt24_ctrl_0_avalon_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                      //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_002_src_ready),                             //       src.ready
		.src_valid          (router_002_src_valid),                             //          .valid
		.src_data           (router_002_src_data),                              //          .data
		.src_channel        (router_002_src_channel),                           //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                        //          .endofpacket
	);

	LT24_System_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (nios2_jtag_debug_module_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_jtag_debug_module_agent_rp_valid),         //          .valid
		.sink_data          (nios2_jtag_debug_module_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_jtag_debug_module_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_jtag_debug_module_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                    //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_003_src_ready),                           //       src.ready
		.src_valid          (router_003_src_valid),                           //          .valid
		.src_data           (router_003_src_data),                            //          .data
		.src_channel        (router_003_src_channel),                         //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                      //          .endofpacket
	);

	LT24_System_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (sdram_controller_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (sdram_controller_s1_agent_rp_valid),                 //          .valid
		.sink_data          (sdram_controller_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (sdram_controller_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (sdram_controller_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (pll_c0_clk),                                         //       clk.clk
		.reset              (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                               //       src.ready
		.src_valid          (router_004_src_valid),                               //          .valid
		.src_data           (router_004_src_data),                                //          .data
		.src_channel        (router_004_src_channel),                             //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                          //          .endofpacket
	);

	LT24_System_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                        //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_005_src_ready),                               //       src.ready
		.src_valid          (router_005_src_valid),                               //          .valid
		.src_data           (router_005_src_data),                                //          .data
		.src_channel        (router_005_src_channel),                             //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                          //          .endofpacket
	);

	LT24_System_mm_interconnect_0_router_005 router_006 (
		.sink_ready         (pll_pll_slave_agent_rp_ready),              //      sink.ready
		.sink_valid         (pll_pll_slave_agent_rp_valid),              //          .valid
		.sink_data          (pll_pll_slave_agent_rp_data),               //          .data
		.sink_startofpacket (pll_pll_slave_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (pll_pll_slave_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_clk_clk),                               //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                      //       src.ready
		.src_valid          (router_006_src_valid),                      //          .valid
		.src_data           (router_006_src_data),                       //          .data
		.src_channel        (router_006_src_channel),                    //          .channel
		.src_startofpacket  (router_006_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                 //          .endofpacket
	);

	LT24_System_mm_interconnect_0_router_005 router_007 (
		.sink_ready         (lt24_ctrl_0_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (lt24_ctrl_0_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (lt24_ctrl_0_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (lt24_ctrl_0_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (lt24_ctrl_0_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                       //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_007_src_ready),                              //       src.ready
		.src_valid          (router_007_src_valid),                              //          .valid
		.src_data           (router_007_src_data),                               //          .data
		.src_channel        (router_007_src_channel),                            //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                         //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (92),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (89),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (13),
		.PIPELINED                 (0),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (5),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) nios2_instruction_master_limiter (
		.clk                    (clk_clk_clk),                                            //       clk.clk
		.reset                  (nios2_reset_n_reset_bridge_in_reset_reset),              // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                       //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                       //          .valid
		.cmd_sink_data          (router_src_data),                                        //          .data
		.cmd_sink_channel       (router_src_channel),                                     //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                               //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                 //          .endofpacket
		.cmd_src_ready          (nios2_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios2_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios2_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios2_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios2_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                      //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                      //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                    //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                       //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                              //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                //          .endofpacket
		.rsp_src_ready          (nios2_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios2_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios2_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios2_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios2_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios2_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios2_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (92),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (89),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (13),
		.PIPELINED                 (0),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (5),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) nios2_data_master_limiter (
		.clk                    (clk_clk_clk),                                     //       clk.clk
		.reset                  (nios2_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                            //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                            //          .valid
		.cmd_sink_data          (router_001_src_data),                             //          .data
		.cmd_sink_channel       (router_001_src_channel),                          //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                    //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                      //          .endofpacket
		.cmd_src_ready          (nios2_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios2_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios2_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios2_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios2_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                           //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                           //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                         //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                            //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                   //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                     //          .endofpacket
		.rsp_src_ready          (nios2_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios2_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios2_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios2_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios2_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios2_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios2_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (69),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (90),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (61),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) sdram_controller_s1_burst_adapter (
		.clk                   (pll_c0_clk),                                              //       cr0.clk
		.reset                 (sdram_controller_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (sdram_controller_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sdram_controller_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sdram_controller_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sdram_controller_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sdram_controller_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sdram_controller_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sdram_controller_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sdram_controller_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sdram_controller_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sdram_controller_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sdram_controller_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sdram_controller_s1_burst_adapter_source0_ready)          //          .ready
	);

	LT24_System_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_clk_clk),                                            //        clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset),              //  clk_reset.reset
		.sink_ready         (nios2_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (nios2_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (nios2_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (nios2_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (nios2_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (nios2_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                   //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                   //           .valid
		.src0_data          (cmd_demux_src0_data),                                    //           .data
		.src0_channel       (cmd_demux_src0_channel),                                 //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                           //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                             //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                   //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                   //           .valid
		.src1_data          (cmd_demux_src1_data),                                    //           .data
		.src1_channel       (cmd_demux_src1_channel),                                 //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                           //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                              //           .endofpacket
	);

	LT24_System_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_clk_clk),                                     //        clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset),       //  clk_reset.reset
		.sink_ready         (nios2_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (nios2_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (nios2_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (nios2_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (nios2_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (nios2_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                        //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                        //           .valid
		.src0_data          (cmd_demux_001_src0_data),                         //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                      //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                  //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                        //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                        //           .valid
		.src1_data          (cmd_demux_001_src1_data),                         //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                      //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                  //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                        //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                        //           .valid
		.src2_data          (cmd_demux_001_src2_data),                         //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                      //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                  //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                        //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                        //           .valid
		.src3_data          (cmd_demux_001_src3_data),                         //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                      //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                  //           .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                        //       src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                        //           .valid
		.src4_data          (cmd_demux_001_src4_data),                         //           .data
		.src4_channel       (cmd_demux_001_src4_channel),                      //           .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                //           .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket)                   //           .endofpacket
	);

	LT24_System_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (clk_clk_clk),                               //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                      //      sink.ready
		.sink_channel       (router_002_src_channel),                    //          .channel
		.sink_data          (router_002_src_data),                       //          .data
		.sink_startofpacket (router_002_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_002_src_valid),                      //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                  //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                  //          .valid
		.src0_data          (cmd_demux_002_src0_data),                   //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)             //          .endofpacket
	);

	LT24_System_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_clk_clk),                               //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_src_valid),                         //          .valid
		.src_data            (cmd_mux_src_data),                          //          .data
		.src_channel         (cmd_mux_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                    //          .channel
		.sink0_data          (cmd_demux_src0_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                  //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                   //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)             //          .endofpacket
	);

	LT24_System_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (pll_c0_clk),                                         //       clk.clk
		.reset               (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                              //          .valid
		.src_data            (cmd_mux_001_src_data),                               //          .data
		.src_channel         (cmd_mux_001_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                  //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                  //          .valid
		.sink0_channel       (crosser_out_channel),                                //          .channel
		.sink0_data          (crosser_out_data),                                   //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                            //          .endofpacket
		.sink1_ready         (crosser_001_out_ready),                              //     sink1.ready
		.sink1_valid         (crosser_001_out_valid),                              //          .valid
		.sink1_channel       (crosser_001_out_channel),                            //          .channel
		.sink1_data          (crosser_001_out_data),                               //          .data
		.sink1_startofpacket (crosser_001_out_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (crosser_001_out_endofpacket),                        //          .endofpacket
		.sink2_ready         (crosser_002_out_ready),                              //     sink2.ready
		.sink2_valid         (crosser_002_out_valid),                              //          .valid
		.sink2_channel       (crosser_002_out_channel),                            //          .channel
		.sink2_data          (crosser_002_out_data),                               //          .data
		.sink2_startofpacket (crosser_002_out_startofpacket),                      //          .startofpacket
		.sink2_endofpacket   (crosser_002_out_endofpacket)                         //          .endofpacket
	);

	LT24_System_mm_interconnect_0_cmd_mux_002 cmd_mux_002 (
		.clk                 (clk_clk_clk),                               //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                     //          .valid
		.src_data            (cmd_mux_002_src_data),                      //          .data
		.src_channel         (cmd_mux_002_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_001_src2_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src2_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src2_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src2_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src2_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src2_endofpacket)             //          .endofpacket
	);

	LT24_System_mm_interconnect_0_cmd_mux_002 cmd_mux_003 (
		.clk                 (clk_clk_clk),                               //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                     //          .valid
		.src_data            (cmd_mux_003_src_data),                      //          .data
		.src_channel         (cmd_mux_003_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_001_src3_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src3_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src3_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src3_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src3_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src3_endofpacket)             //          .endofpacket
	);

	LT24_System_mm_interconnect_0_cmd_mux_002 cmd_mux_004 (
		.clk                 (clk_clk_clk),                               //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                     //          .valid
		.src_data            (cmd_mux_004_src_data),                      //          .data
		.src_channel         (cmd_mux_004_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_001_src4_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src4_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src4_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src4_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src4_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src4_endofpacket)             //          .endofpacket
	);

	LT24_System_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_clk_clk),                               //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                      //      sink.ready
		.sink_channel       (router_003_src_channel),                    //          .channel
		.sink_data          (router_003_src_data),                       //          .data
		.sink_startofpacket (router_003_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_003_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_src0_data),                       //          .data
		.src0_channel       (rsp_demux_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_src1_data),                       //          .data
		.src1_channel       (rsp_demux_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                 //          .endofpacket
	);

	LT24_System_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (pll_c0_clk),                                              //       clk.clk
		.reset              (sdram_controller_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.sink_ready         (sdram_controller_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sdram_controller_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sdram_controller_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sdram_controller_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_controller_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sdram_controller_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                          //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                                //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                                //          .valid
		.src1_data          (rsp_demux_001_src1_data),                                 //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                              //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                        //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket),                          //          .endofpacket
		.src2_ready         (rsp_demux_001_src2_ready),                                //      src2.ready
		.src2_valid         (rsp_demux_001_src2_valid),                                //          .valid
		.src2_data          (rsp_demux_001_src2_data),                                 //          .data
		.src2_channel       (rsp_demux_001_src2_channel),                              //          .channel
		.src2_startofpacket (rsp_demux_001_src2_startofpacket),                        //          .startofpacket
		.src2_endofpacket   (rsp_demux_001_src2_endofpacket)                           //          .endofpacket
	);

	LT24_System_mm_interconnect_0_cmd_demux_002 rsp_demux_002 (
		.clk                (clk_clk_clk),                               //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                      //      sink.ready
		.sink_channel       (router_005_src_channel),                    //          .channel
		.sink_data          (router_005_src_data),                       //          .data
		.sink_startofpacket (router_005_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_005_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_002_src0_data),                   //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)             //          .endofpacket
	);

	LT24_System_mm_interconnect_0_cmd_demux_002 rsp_demux_003 (
		.clk                (clk_clk_clk),                               //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                      //      sink.ready
		.sink_channel       (router_006_src_channel),                    //          .channel
		.sink_data          (router_006_src_data),                       //          .data
		.sink_startofpacket (router_006_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_006_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_003_src0_data),                   //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)             //          .endofpacket
	);

	LT24_System_mm_interconnect_0_cmd_demux_002 rsp_demux_004 (
		.clk                (clk_clk_clk),                               //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                      //      sink.ready
		.sink_channel       (router_007_src_channel),                    //          .channel
		.sink_data          (router_007_src_data),                       //          .data
		.sink_startofpacket (router_007_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_007_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_004_src0_data),                   //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)             //          .endofpacket
	);

	LT24_System_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_clk_clk),                               //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                         //       src.ready
		.src_valid           (rsp_mux_src_valid),                         //          .valid
		.src_data            (rsp_mux_src_data),                          //          .data
		.src_channel         (rsp_mux_src_channel),                       //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                      //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                      //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                    //          .channel
		.sink0_data          (rsp_demux_src0_data),                       //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                //          .endofpacket
		.sink1_ready         (crosser_003_out_ready),                     //     sink1.ready
		.sink1_valid         (crosser_003_out_valid),                     //          .valid
		.sink1_channel       (crosser_003_out_channel),                   //          .channel
		.sink1_data          (crosser_003_out_data),                      //          .data
		.sink1_startofpacket (crosser_003_out_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (crosser_003_out_endofpacket)                //          .endofpacket
	);

	LT24_System_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_clk_clk),                               //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                     //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                     //          .valid
		.src_data            (rsp_mux_001_src_data),                      //          .data
		.src_channel         (rsp_mux_001_src_channel),                   //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                      //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                      //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                    //          .channel
		.sink0_data          (rsp_demux_src1_data),                       //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                //          .endofpacket
		.sink1_ready         (crosser_004_out_ready),                     //     sink1.ready
		.sink1_valid         (crosser_004_out_valid),                     //          .valid
		.sink1_channel       (crosser_004_out_channel),                   //          .channel
		.sink1_data          (crosser_004_out_data),                      //          .data
		.sink1_startofpacket (crosser_004_out_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (crosser_004_out_endofpacket),               //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                  //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                  //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                   //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),            //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                  //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                  //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                   //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),          //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),            //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                  //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                  //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                   //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),          //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket)             //          .endofpacket
	);

	LT24_System_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (clk_clk_clk),                               //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                     //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                     //          .valid
		.src_data            (rsp_mux_002_src_data),                      //          .data
		.src_channel         (rsp_mux_002_src_channel),                   //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),               //          .endofpacket
		.sink0_ready         (crosser_005_out_ready),                     //     sink0.ready
		.sink0_valid         (crosser_005_out_valid),                     //          .valid
		.sink0_channel       (crosser_005_out_channel),                   //          .channel
		.sink0_data          (crosser_005_out_data),                      //          .data
		.sink0_startofpacket (crosser_005_out_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (crosser_005_out_endofpacket)                //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (58),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (59),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (86),
		.IN_PKT_RESPONSE_STATUS_L      (85),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (87),
		.IN_PKT_ORI_BURST_SIZE_H       (89),
		.IN_ST_DATA_W                  (90),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (104),
		.OUT_PKT_RESPONSE_STATUS_L     (103),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (105),
		.OUT_PKT_ORI_BURST_SIZE_H      (107),
		.OUT_ST_DATA_W                 (108),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_controller_s1_rsp_width_adapter (
		.clk                  (pll_c0_clk),                                              //       clk.clk
		.reset                (sdram_controller_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (router_004_src_valid),                                    //      sink.valid
		.in_channel           (router_004_src_channel),                                  //          .channel
		.in_startofpacket     (router_004_src_startofpacket),                            //          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                              //          .endofpacket
		.in_ready             (router_004_src_ready),                                    //          .ready
		.in_data              (router_004_src_data),                                     //          .data
		.out_endofpacket      (sdram_controller_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_controller_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_controller_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_controller_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_controller_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_controller_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (104),
		.IN_PKT_RESPONSE_STATUS_L      (103),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (105),
		.IN_PKT_ORI_BURST_SIZE_H       (107),
		.IN_ST_DATA_W                  (108),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (58),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (86),
		.OUT_PKT_RESPONSE_STATUS_L     (85),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (87),
		.OUT_PKT_ORI_BURST_SIZE_H      (89),
		.OUT_ST_DATA_W                 (90),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_controller_s1_cmd_width_adapter (
		.clk                  (pll_c0_clk),                                              //       clk.clk
		.reset                (sdram_controller_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                   //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                 //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                           //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                             //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                   //          .ready
		.in_data              (cmd_mux_001_src_data),                                    //          .data
		.out_endofpacket      (sdram_controller_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_controller_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sdram_controller_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_controller_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_controller_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_controller_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                   // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_clk_clk),                                        //        in_clk.clk
		.in_reset          (nios2_reset_n_reset_bridge_in_reset_reset),          //  in_clk_reset.reset
		.out_clk           (pll_c0_clk),                                         //       out_clk.clk
		.out_reset         (sdram_controller_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                               //            in.ready
		.in_valid          (cmd_demux_src1_valid),                               //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                       //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                         //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                             //              .channel
		.in_data           (cmd_demux_src1_data),                                //              .data
		.out_ready         (crosser_out_ready),                                  //           out.ready
		.out_valid         (crosser_out_valid),                                  //              .valid
		.out_startofpacket (crosser_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_out_channel),                                //              .channel
		.out_data          (crosser_out_data),                                   //              .data
		.in_empty          (1'b0),                                               //   (terminated)
		.in_error          (1'b0),                                               //   (terminated)
		.out_empty         (),                                                   //   (terminated)
		.out_error         ()                                                    //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_clk_clk),                                        //        in_clk.clk
		.in_reset          (nios2_reset_n_reset_bridge_in_reset_reset),          //  in_clk_reset.reset
		.out_clk           (pll_c0_clk),                                         //       out_clk.clk
		.out_reset         (sdram_controller_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                           //            in.ready
		.in_valid          (cmd_demux_001_src1_valid),                           //              .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),                   //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),                     //              .endofpacket
		.in_channel        (cmd_demux_001_src1_channel),                         //              .channel
		.in_data           (cmd_demux_001_src1_data),                            //              .data
		.out_ready         (crosser_001_out_ready),                              //           out.ready
		.out_valid         (crosser_001_out_valid),                              //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                      //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                        //              .endofpacket
		.out_channel       (crosser_001_out_channel),                            //              .channel
		.out_data          (crosser_001_out_data),                               //              .data
		.in_empty          (1'b0),                                               //   (terminated)
		.in_error          (1'b0),                                               //   (terminated)
		.out_empty         (),                                                   //   (terminated)
		.out_error         ()                                                    //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_clk_clk),                                        //        in_clk.clk
		.in_reset          (nios2_reset_n_reset_bridge_in_reset_reset),          //  in_clk_reset.reset
		.out_clk           (pll_c0_clk),                                         //       out_clk.clk
		.out_reset         (sdram_controller_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src0_ready),                           //            in.ready
		.in_valid          (cmd_demux_002_src0_valid),                           //              .valid
		.in_startofpacket  (cmd_demux_002_src0_startofpacket),                   //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src0_endofpacket),                     //              .endofpacket
		.in_channel        (cmd_demux_002_src0_channel),                         //              .channel
		.in_data           (cmd_demux_002_src0_data),                            //              .data
		.out_ready         (crosser_002_out_ready),                              //           out.ready
		.out_valid         (crosser_002_out_valid),                              //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                      //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                        //              .endofpacket
		.out_channel       (crosser_002_out_channel),                            //              .channel
		.out_data          (crosser_002_out_data),                               //              .data
		.in_empty          (1'b0),                                               //   (terminated)
		.in_error          (1'b0),                                               //   (terminated)
		.out_empty         (),                                                   //   (terminated)
		.out_error         ()                                                    //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (pll_c0_clk),                                         //        in_clk.clk
		.in_reset          (sdram_controller_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_clk_clk),                                        //       out_clk.clk
		.out_reset         (nios2_reset_n_reset_bridge_in_reset_reset),          // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                           //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                           //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                   //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                     //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                         //              .channel
		.in_data           (rsp_demux_001_src0_data),                            //              .data
		.out_ready         (crosser_003_out_ready),                              //           out.ready
		.out_valid         (crosser_003_out_valid),                              //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                      //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                        //              .endofpacket
		.out_channel       (crosser_003_out_channel),                            //              .channel
		.out_data          (crosser_003_out_data),                               //              .data
		.in_empty          (1'b0),                                               //   (terminated)
		.in_error          (1'b0),                                               //   (terminated)
		.out_empty         (),                                                   //   (terminated)
		.out_error         ()                                                    //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (pll_c0_clk),                                         //        in_clk.clk
		.in_reset          (sdram_controller_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_clk_clk),                                        //       out_clk.clk
		.out_reset         (nios2_reset_n_reset_bridge_in_reset_reset),          // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src1_ready),                           //            in.ready
		.in_valid          (rsp_demux_001_src1_valid),                           //              .valid
		.in_startofpacket  (rsp_demux_001_src1_startofpacket),                   //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src1_endofpacket),                     //              .endofpacket
		.in_channel        (rsp_demux_001_src1_channel),                         //              .channel
		.in_data           (rsp_demux_001_src1_data),                            //              .data
		.out_ready         (crosser_004_out_ready),                              //           out.ready
		.out_valid         (crosser_004_out_valid),                              //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                      //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                        //              .endofpacket
		.out_channel       (crosser_004_out_channel),                            //              .channel
		.out_data          (crosser_004_out_data),                               //              .data
		.in_empty          (1'b0),                                               //   (terminated)
		.in_error          (1'b0),                                               //   (terminated)
		.out_empty         (),                                                   //   (terminated)
		.out_error         ()                                                    //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (pll_c0_clk),                                         //        in_clk.clk
		.in_reset          (sdram_controller_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_clk_clk),                                        //       out_clk.clk
		.out_reset         (nios2_reset_n_reset_bridge_in_reset_reset),          // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src2_ready),                           //            in.ready
		.in_valid          (rsp_demux_001_src2_valid),                           //              .valid
		.in_startofpacket  (rsp_demux_001_src2_startofpacket),                   //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src2_endofpacket),                     //              .endofpacket
		.in_channel        (rsp_demux_001_src2_channel),                         //              .channel
		.in_data           (rsp_demux_001_src2_data),                            //              .data
		.out_ready         (crosser_005_out_ready),                              //           out.ready
		.out_valid         (crosser_005_out_valid),                              //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                      //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                        //              .endofpacket
		.out_channel       (crosser_005_out_channel),                            //              .channel
		.out_data          (crosser_005_out_data),                               //              .data
		.in_empty          (1'b0),                                               //   (terminated)
		.in_error          (1'b0),                                               //   (terminated)
		.out_empty         (),                                                   //   (terminated)
		.out_error         ()                                                    //   (terminated)
	);

endmodule
