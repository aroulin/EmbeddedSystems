
LT24_DE0_Software.elf:     file format elf32-littlenios2
LT24_DE0_Software.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00001edc memsz 0x00001edc flags r-x
    LOAD off    0x00002efc vaddr 0x00005efc paddr 0x00005fec align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x000030dc vaddr 0x000060dc paddr 0x000060dc align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00001228  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cb4  00005248  00005248  00002248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000000f0  00005efc  00005fec  00002efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  000060dc  000060dc  000030dc  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00002fec  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002b8  00000000  00000000  00003010  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004c0e  00000000  00000000  000032c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001669  00000000  00000000  00007ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001a81  00000000  00000000  0000953f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003d8  00000000  00000000  0000afc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000ec1  00000000  00000000  0000b398  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001741  00000000  00000000  0000c259  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000020  00000000  00000000  0000d99c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000220  00000000  00000000  0000d9c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  0000ed2d  2**0
                  CONTENTS, READONLY
 16 .cpu          0000000c  00000000  00000000  0000ed30  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  0000ed3c  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  0000ed3d  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   0000000b  00000000  00000000  0000ed3e  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    0000000b  00000000  00000000  0000ed49  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   0000000b  00000000  00000000  0000ed54  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 0000000b  00000000  00000000  0000ed5f  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 0000003e  00000000  00000000  0000ed6a  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     00033ef7  00000000  00000000  0000eda8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .text	00000000 .text
00005248 l    d  .rodata	00000000 .rodata
00005efc l    d  .rwdata	00000000 .rwdata
000060dc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../LT24_DE0_Software_bsp//obj/HAL/src/crt0.o
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00005efc l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00004ea0 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 
00004130 g     F .text	00000038 LCD_DrawPoint
000050d4 g     F .text	0000002c alt_main
000045b0 g     F .text	00000080 _puts_r
00005fec g       *ABS*	00000000 __flash_rwdata_start
000040a0 g     F .text	00000018 LT24_write_data
00004564 g     F .text	0000004c printf
00005100 g     F .text	00000038 alt_putstr
00000000  w      *UND*	00000000 __errno
00004000 g     F .entry	0000001c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
000060dc g     O .bss	00000004 errno
000060e4 g     O .bss	00000004 alt_argv
0000dfdc g       *ABS*	00000000 _gp
00004630 g     F .text	00000014 puts
00004528 g     F .text	0000003c _printf_r
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00004fc0 g     F .text	00000008 __udivsi3
00005210 g     F .text	00000038 alt_icache_flush
0000527a g     O .rodata	00000c80 image16
00004184 g     F .text	00000018 wait_20ns
0000405c g     F .text	0000002c LT24_dma_start
00005fdc g     O .rwdata	00000004 _global_impure_ptr
000060ec g       *ABS*	00000000 __bss_end
00004088 g     F .text	00000018 LT24_write_cmd
000051f8 g     F .text	00000004 alt_dcache_flush_all
00005fec g       *ABS*	00000000 __ram_rwdata_end
00005138 g     F .text	00000068 write
00005efc g       *ABS*	00000000 __ram_rodata_end
00005fe4 g     O .rwdata	00000004 jtag_uart_0
00004fc8 g     F .text	00000008 __umodsi3
000060ec g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
000051c4 g     F .text	00000034 altera_avalon_jtag_uart_write
0000466c g     F .text	000006c4 ___vfprintf_internal_r
000040b8 g     F .text	00000078 LCD_SetCursor
00004020 g     F .text	0000003c _start
000051c0 g     F .text	00000004 alt_sys_init
00005efc g       *ABS*	00000000 __ram_rwdata_start
00005248 g       *ABS*	00000000 __ram_rodata_start
000060ec g       *ABS*	00000000 __alt_stack_base
00004d54 g     F .text	000000e0 __sfvwrite_small_dev
000060dc g       *ABS*	00000000 __bss_start
0000419c g     F .text	0000038c main
000060e0 g     O .bss	00000004 alt_envp
00005fe8 g     O .rwdata	00000004 alt_errno
00004f14 g     F .text	00000050 __divsi3
00005248 g       *ABS*	00000000 __flash_rodata_start
000051a0 g     F .text	00000020 alt_irq_init
00004168 g     F .text	0000001c wait_ms
00004e34 g     F .text	0000006c _write_r
00005fe0 g     O .rwdata	00000004 _impure_ptr
000060e8 g     O .bss	00000004 alt_argc
00004020 g       *ABS*	00000000 __ram_exceptions_start
00005fec g       *ABS*	00000000 _edata
000060ec g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
00005208 g     F .text	00000008 altera_nios2_qsys_irq_init
00004f64 g     F .text	0000005c __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
0000401c g       .entry	00000000 _exit
00004644 g     F .text	00000028 strlen
000051fc g     F .text	0000000c alt_icache_flush_all
00004d30 g     F .text	00000024 __vfprintf_internal
00004fd0 g     F .text	00000104 alt_load



Disassembly of section .entry:

00004000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    4000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
    4004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    4008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    400c:	00bffd16 	blt	zero,r2,4004 <_gp+0xffff6028>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4014:	08500814 	ori	at,at,16416
    jmp r1
    4018:	0800683a 	jmp	at

0000401c <_exit>:
    401c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x4000>

Disassembly of section .text:

00004020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b7f714 	ori	gp,gp,57308
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	10983714 	ori	r2,r2,24796

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d83b14 	ori	r3,r3,24812

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_gp+0xffff6068>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	0004fd00 	call	4fd0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	00050d40 	call	50d4 <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <_gp+0xffff607c>

0000405c <LT24_dma_start>:
#define LCD_WR_REG(x) LT24_write_cmd(x)
#define LCD_WR_DATA(x) LT24_write_data(x)

void LT24_dma_start(alt_u32 address, alt_u32 len) {

	while (IORD_32DIRECT(LT24_CTRL_0_BASE, 2*4))
    405c:	01a40a14 	movui	r6,36904
    4060:	30800037 	ldwio	r2,0(r6)
    4064:	00e40a14 	movui	r3,36904
    4068:	103ffd1e 	bne	r2,zero,4060 <_gp+0xffff6084>
		;
	IOWR_32DIRECT(LT24_CTRL_0_BASE, 4*4, address);
    406c:	00a40c14 	movui	r2,36912
    4070:	11000035 	stwio	r4,0(r2)
	while (IORD_32DIRECT(LT24_CTRL_0_BASE, 2*4))
    4074:	18800037 	ldwio	r2,0(r3)
    4078:	103ffe1e 	bne	r2,zero,4074 <_gp+0xffff6098>
		;
	IOWR_32DIRECT(LT24_CTRL_0_BASE, 5*4, len);
    407c:	00a40d14 	movui	r2,36916
    4080:	11400035 	stwio	r5,0(r2)
    4084:	f800283a 	ret

00004088 <LT24_write_cmd>:
}

void LT24_write_cmd(int cmd) {

	while (IORD_32DIRECT(LT24_CTRL_0_BASE, 2*4)) {
    4088:	00e40a14 	movui	r3,36904
    408c:	18800037 	ldwio	r2,0(r3)
    4090:	103ffe1e 	bne	r2,zero,408c <_gp+0xffff60b0>
		//alt_putstr("Wait CMD - ");
	}

	IOWR_32DIRECT(LT24_CTRL_0_BASE, 0*4, cmd);
    4094:	00a40814 	movui	r2,36896
    4098:	11000035 	stwio	r4,0(r2)
    409c:	f800283a 	ret

000040a0 <LT24_write_data>:

}

inline void LT24_write_data(int data) {

	while (IORD_32DIRECT(LT24_CTRL_0_BASE, 2*4)) {
    40a0:	00e40a14 	movui	r3,36904
    40a4:	18800037 	ldwio	r2,0(r3)
    40a8:	103ffe1e 	bne	r2,zero,40a4 <_gp+0xffff60c8>
		//alt_putstr("Wait DATA - ");
	}

	IOWR_32DIRECT(LT24_CTRL_0_BASE, 1*4, data);
    40ac:	00a40914 	movui	r2,36900
    40b0:	11000035 	stwio	r4,0(r2)
    40b4:	f800283a 	ret

000040b8 <LCD_SetCursor>:

}

void LCD_SetCursor(alt_u16 Xpos, alt_u16 Ypos) {
    40b8:	defffb04 	addi	sp,sp,-20
    40bc:	dc000015 	stw	r16,0(sp)
    40c0:	2021883a 	mov	r16,r4
	LCD_WR_REG(0x002A);
    40c4:	01000a84 	movi	r4,42

	IOWR_32DIRECT(LT24_CTRL_0_BASE, 1*4, data);

}

void LCD_SetCursor(alt_u16 Xpos, alt_u16 Ypos) {
    40c8:	dfc00415 	stw	ra,16(sp)
    40cc:	dc400115 	stw	r17,4(sp)
    40d0:	dcc00315 	stw	r19,12(sp)
    40d4:	2823883a 	mov	r17,r5
    40d8:	dc800215 	stw	r18,8(sp)
	LCD_WR_REG(0x002A);
    40dc:	00040880 	call	4088 <LT24_write_cmd>
	LCD_WR_DATA(Xpos>>8);
    40e0:	813fffcc 	andi	r4,r16,65535
    40e4:	2008d23a 	srli	r4,r4,8
    40e8:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(Xpos&0XFF);
    40ec:	81003fcc 	andi	r4,r16,255
    40f0:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_REG(0x002B);
    40f4:	01000ac4 	movi	r4,43
    40f8:	00040880 	call	4088 <LT24_write_cmd>
	LCD_WR_DATA(Ypos>>8);
    40fc:	893fffcc 	andi	r4,r17,65535
    4100:	2008d23a 	srli	r4,r4,8
    4104:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(Ypos&0XFF);
    4108:	89003fcc 	andi	r4,r17,255
    410c:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_REG(0x002C);
    4110:	01000b04 	movi	r4,44
}
    4114:	dfc00417 	ldw	ra,16(sp)
    4118:	dcc00317 	ldw	r19,12(sp)
    411c:	dc800217 	ldw	r18,8(sp)
    4120:	dc400117 	ldw	r17,4(sp)
    4124:	dc000017 	ldw	r16,0(sp)
    4128:	dec00504 	addi	sp,sp,20
	LCD_WR_DATA(Xpos>>8);
	LCD_WR_DATA(Xpos&0XFF);
	LCD_WR_REG(0x002B);
	LCD_WR_DATA(Ypos>>8);
	LCD_WR_DATA(Ypos&0XFF);
	LCD_WR_REG(0x002C);
    412c:	00040881 	jmpi	4088 <LT24_write_cmd>

00004130 <LCD_DrawPoint>:
}

void LCD_DrawPoint(alt_u16 x, alt_u16 y, alt_u16 color) {
    4130:	defffe04 	addi	sp,sp,-8

	alt_u16 color16 = color;

	LCD_SetCursor(x, y);
    4134:	297fffcc 	andi	r5,r5,65535
    4138:	213fffcc 	andi	r4,r4,65535
	LCD_WR_DATA(Ypos>>8);
	LCD_WR_DATA(Ypos&0XFF);
	LCD_WR_REG(0x002C);
}

void LCD_DrawPoint(alt_u16 x, alt_u16 y, alt_u16 color) {
    413c:	dfc00115 	stw	ra,4(sp)
    4140:	dc000015 	stw	r16,0(sp)
    4144:	3021883a 	mov	r16,r6

	alt_u16 color16 = color;

	LCD_SetCursor(x, y);
    4148:	00040b80 	call	40b8 <LCD_SetCursor>
	LCD_WR_REG(0x002C);
    414c:	01000b04 	movi	r4,44
    4150:	00040880 	call	4088 <LT24_write_cmd>
	LCD_WR_DATA(color16);
    4154:	813fffcc 	andi	r4,r16,65535
}
    4158:	dfc00117 	ldw	ra,4(sp)
    415c:	dc000017 	ldw	r16,0(sp)
    4160:	dec00204 	addi	sp,sp,8

	alt_u16 color16 = color;

	LCD_SetCursor(x, y);
	LCD_WR_REG(0x002C);
	LCD_WR_DATA(color16);
    4164:	00040a01 	jmpi	40a0 <LT24_write_data>

00004168 <wait_ms>:
}

void wait_ms(alt_u32 ms) {
	int i = 0;
	for (i = 0; i < ms * 25000; ++i) {
    4168:	21186a24 	muli	r4,r4,25000
    416c:	0005883a 	mov	r2,zero
    4170:	00000206 	br	417c <wait_ms+0x14>
		asm("nop");
    4174:	0001883a 	nop
	LCD_WR_DATA(color16);
}

void wait_ms(alt_u32 ms) {
	int i = 0;
	for (i = 0; i < ms * 25000; ++i) {
    4178:	10800044 	addi	r2,r2,1
    417c:	113ffd1e 	bne	r2,r4,4174 <_gp+0xffff6198>
		asm("nop");
	}
}
    4180:	f800283a 	ret

00004184 <wait_20ns>:

void wait_20ns(alt_u32 ns20) {
	int i = 0;
	for (i = 0; i < ns20; ++i) {
    4184:	0005883a 	mov	r2,zero
    4188:	00000206 	br	4194 <wait_20ns+0x10>
		asm("nop");
    418c:	0001883a 	nop
	}
}

void wait_20ns(alt_u32 ns20) {
	int i = 0;
	for (i = 0; i < ns20; ++i) {
    4190:	10800044 	addi	r2,r2,1
    4194:	113ffd1e 	bne	r2,r4,418c <_gp+0xffff61b0>
		asm("nop");
	}
}
    4198:	f800283a 	ret

0000419c <main>:

int main() {
    419c:	defffe04 	addi	sp,sp,-8
	alt_putstr("Hello from Nios II!\n");
    41a0:	01000034 	movhi	r4,0
    41a4:	21149204 	addi	r4,r4,21064
	for (i = 0; i < ns20; ++i) {
		asm("nop");
	}
}

int main() {
    41a8:	dc000015 	stw	r16,0(sp)
    41ac:	dfc00115 	stw	ra,4(sp)
	alt_putstr("Hello from Nios II!\n");
    41b0:	00051000 	call	5100 <alt_putstr>

	//LCD ON
	IOWR_32DIRECT(LT24_CTRL_0_BASE, 3*4, 1);
    41b4:	04000044 	movi	r16,1
    41b8:	00a40b14 	movui	r2,36908
    41bc:	14000035 	stwio	r16,0(r2)

	LCD_WR_REG(0x0011);
    41c0:	01000444 	movi	r4,17
    41c4:	00040880 	call	4088 <LT24_write_cmd>
	//Exit Sleep

	LCD_WR_REG(0x00CF);
    41c8:	010033c4 	movi	r4,207
    41cc:	00040880 	call	4088 <LT24_write_cmd>
	LCD_WR_DATA(0x0000);
    41d0:	0009883a 	mov	r4,zero
    41d4:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0081);
    41d8:	01002044 	movi	r4,129
    41dc:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0X00c0);
    41e0:	01003004 	movi	r4,192
    41e4:	00040a00 	call	40a0 <LT24_write_data>

	LCD_WR_REG(0x00ED);
    41e8:	01003b44 	movi	r4,237
    41ec:	00040880 	call	4088 <LT24_write_cmd>
	LCD_WR_DATA(0x0064);
    41f0:	01001904 	movi	r4,100
    41f4:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0003);
    41f8:	010000c4 	movi	r4,3
    41fc:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0X0012);
    4200:	01000484 	movi	r4,18
    4204:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0X0081);
    4208:	01002044 	movi	r4,129
    420c:	00040a00 	call	40a0 <LT24_write_data>

	LCD_WR_REG(0x00E8);
    4210:	01003a04 	movi	r4,232
    4214:	00040880 	call	4088 <LT24_write_cmd>
	LCD_WR_DATA(0x0085);
    4218:	01002144 	movi	r4,133
    421c:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0001);
    4220:	8009883a 	mov	r4,r16
    4224:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x00798);
    4228:	0101e604 	movi	r4,1944
    422c:	00040a00 	call	40a0 <LT24_write_data>

	LCD_WR_REG(0x00CB);
    4230:	010032c4 	movi	r4,203
    4234:	00040880 	call	4088 <LT24_write_cmd>
	LCD_WR_DATA(0x0039);
    4238:	01000e44 	movi	r4,57
    423c:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x002C);
    4240:	01000b04 	movi	r4,44
    4244:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0000);
    4248:	0009883a 	mov	r4,zero
    424c:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0034);
    4250:	01000d04 	movi	r4,52
    4254:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0002);
    4258:	01000084 	movi	r4,2
    425c:	00040a00 	call	40a0 <LT24_write_data>

	LCD_WR_REG(0x00F7);
    4260:	01003dc4 	movi	r4,247
    4264:	00040880 	call	4088 <LT24_write_cmd>
	LCD_WR_DATA(0x0020);
    4268:	01000804 	movi	r4,32
    426c:	00040a00 	call	40a0 <LT24_write_data>

	LCD_WR_REG(0x00EA);
    4270:	01003a84 	movi	r4,234
    4274:	00040880 	call	4088 <LT24_write_cmd>
	LCD_WR_DATA(0x0000);
    4278:	0009883a 	mov	r4,zero
    427c:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0000);
    4280:	0009883a 	mov	r4,zero
    4284:	00040a00 	call	40a0 <LT24_write_data>

	LCD_WR_REG(0x00B1);
    4288:	01002c44 	movi	r4,177
    428c:	00040880 	call	4088 <LT24_write_cmd>
	LCD_WR_DATA(0x0000);
    4290:	0009883a 	mov	r4,zero
    4294:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x001b);
    4298:	010006c4 	movi	r4,27
    429c:	00040a00 	call	40a0 <LT24_write_data>

	LCD_WR_REG(0x00B6);
    42a0:	01002d84 	movi	r4,182
    42a4:	00040880 	call	4088 <LT24_write_cmd>
	LCD_WR_DATA(0x000A);
    42a8:	01000284 	movi	r4,10
    42ac:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x00A2);
    42b0:	01002884 	movi	r4,162
    42b4:	00040a00 	call	40a0 <LT24_write_data>

	LCD_WR_REG(0x00C0);
    42b8:	01003004 	movi	r4,192
    42bc:	00040880 	call	4088 <LT24_write_cmd>
	//Power control
	LCD_WR_DATA(0x0005);
    42c0:	01000144 	movi	r4,5
    42c4:	00040a00 	call	40a0 <LT24_write_data>
	//VRH[5:0]

	LCD_WR_REG(0x00C1);
    42c8:	01003044 	movi	r4,193
    42cc:	00040880 	call	4088 <LT24_write_cmd>
	//Power control
	LCD_WR_DATA(0x0011);
    42d0:	01000444 	movi	r4,17
    42d4:	00040a00 	call	40a0 <LT24_write_data>
	//SAP[2:0];BT[3:0]

	LCD_WR_REG(0x00C5);
    42d8:	01003144 	movi	r4,197
    42dc:	00040880 	call	4088 <LT24_write_cmd>
	//VCM control
	LCD_WR_DATA(0x0045);
    42e0:	01001144 	movi	r4,69
    42e4:	00040a00 	call	40a0 <LT24_write_data>
	//3F
	LCD_WR_DATA(0x0045);
    42e8:	01001144 	movi	r4,69
    42ec:	00040a00 	call	40a0 <LT24_write_data>
	//3C

	LCD_WR_REG(0x00C7);
    42f0:	010031c4 	movi	r4,199
    42f4:	00040880 	call	4088 <LT24_write_cmd>
	//VCM control2
	LCD_WR_DATA(0X00a2);
    42f8:	01002884 	movi	r4,162
    42fc:	00040a00 	call	40a0 <LT24_write_data>

	LCD_WR_REG(0x0036);
    4300:	01000d84 	movi	r4,54
    4304:	00040880 	call	4088 <LT24_write_cmd>
	// Memory Access Control
	LCD_WR_DATA(0x0008);
    4308:	01000204 	movi	r4,8
    430c:	00040a00 	call	40a0 <LT24_write_data>
	//48

	LCD_WR_REG(0x00F2);
    4310:	01003c84 	movi	r4,242
    4314:	00040880 	call	4088 <LT24_write_cmd>
	// 3Gamma Function Disable
	LCD_WR_DATA(0x0000);
    4318:	0009883a 	mov	r4,zero
    431c:	00040a00 	call	40a0 <LT24_write_data>

	LCD_WR_REG(0x0026);
    4320:	01000984 	movi	r4,38
    4324:	00040880 	call	4088 <LT24_write_cmd>
	//Gamma curve selected
	LCD_WR_DATA(0x0001);
    4328:	8009883a 	mov	r4,r16
    432c:	00040a00 	call	40a0 <LT24_write_data>

	LCD_WR_REG(0x00E0);
    4330:	01003804 	movi	r4,224
    4334:	00040880 	call	4088 <LT24_write_cmd>
	//Set Gamma
	LCD_WR_DATA(0x000F);
    4338:	010003c4 	movi	r4,15
    433c:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0026);
    4340:	01000984 	movi	r4,38
    4344:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0024);
    4348:	01000904 	movi	r4,36
    434c:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x000b);
    4350:	010002c4 	movi	r4,11
    4354:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x000E);
    4358:	01000384 	movi	r4,14
    435c:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0008);
    4360:	01000204 	movi	r4,8
    4364:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x004b);
    4368:	010012c4 	movi	r4,75
    436c:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0X00a8);
    4370:	01002a04 	movi	r4,168
    4374:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x003b);
    4378:	01000ec4 	movi	r4,59
    437c:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x000a);
    4380:	01000284 	movi	r4,10
    4384:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0014);
    4388:	01000504 	movi	r4,20
    438c:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0006);
    4390:	01000184 	movi	r4,6
    4394:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0010);
    4398:	01000404 	movi	r4,16
    439c:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0009);
    43a0:	01000244 	movi	r4,9
    43a4:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0000);
    43a8:	0009883a 	mov	r4,zero
    43ac:	00040a00 	call	40a0 <LT24_write_data>

	LCD_WR_REG(0X00E1);
    43b0:	01003844 	movi	r4,225
    43b4:	00040880 	call	4088 <LT24_write_cmd>
	//Set Gamma
	LCD_WR_DATA(0x0000);
    43b8:	0009883a 	mov	r4,zero
    43bc:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x001c);
    43c0:	01000704 	movi	r4,28
    43c4:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0020);
    43c8:	01000804 	movi	r4,32
    43cc:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0004);
    43d0:	01000104 	movi	r4,4
    43d4:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0010);
    43d8:	01000404 	movi	r4,16
    43dc:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0008);
    43e0:	01000204 	movi	r4,8
    43e4:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0034);
    43e8:	01000d04 	movi	r4,52
    43ec:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0047);
    43f0:	010011c4 	movi	r4,71
    43f4:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0044);
    43f8:	01001104 	movi	r4,68
    43fc:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0005);
    4400:	01000144 	movi	r4,5
    4404:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x000b);
    4408:	010002c4 	movi	r4,11
    440c:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0009);
    4410:	01000244 	movi	r4,9
    4414:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x002f);
    4418:	01000bc4 	movi	r4,47
    441c:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0036);
    4420:	01000d84 	movi	r4,54
    4424:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x000f);
    4428:	010003c4 	movi	r4,15
    442c:	00040a00 	call	40a0 <LT24_write_data>

	LCD_WR_REG(0x002A);
    4430:	01000a84 	movi	r4,42
    4434:	00040880 	call	4088 <LT24_write_cmd>
	LCD_WR_DATA(0x0000);
    4438:	0009883a 	mov	r4,zero
    443c:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0000);
    4440:	0009883a 	mov	r4,zero
    4444:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0000);
    4448:	0009883a 	mov	r4,zero
    444c:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x00ef);
    4450:	01003bc4 	movi	r4,239
    4454:	00040a00 	call	40a0 <LT24_write_data>

	LCD_WR_REG(0x002B);
    4458:	01000ac4 	movi	r4,43
    445c:	00040880 	call	4088 <LT24_write_cmd>
	LCD_WR_DATA(0x0000);
    4460:	0009883a 	mov	r4,zero
    4464:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0000);
    4468:	0009883a 	mov	r4,zero
    446c:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0001);
    4470:	8009883a 	mov	r4,r16
    4474:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x003f);
    4478:	01000fc4 	movi	r4,63
    447c:	00040a00 	call	40a0 <LT24_write_data>

	LCD_WR_REG(0x003A);
    4480:	01000e84 	movi	r4,58
    4484:	00040880 	call	4088 <LT24_write_cmd>
	LCD_WR_DATA(0x0055);
    4488:	01001544 	movi	r4,85
    448c:	00040a00 	call	40a0 <LT24_write_data>

	LCD_WR_REG(0x00f6);
    4490:	01003d84 	movi	r4,246
    4494:	00040880 	call	4088 <LT24_write_cmd>
	LCD_WR_DATA(0x0001);
    4498:	8009883a 	mov	r4,r16
    449c:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0030);
    44a0:	01000c04 	movi	r4,48
    44a4:	00040a00 	call	40a0 <LT24_write_data>
	LCD_WR_DATA(0x0000);
    44a8:	0009883a 	mov	r4,zero
    44ac:	00040a00 	call	40a0 <LT24_write_data>

	LCD_WR_REG(0x0029);
    44b0:	01000a44 	movi	r4,41
    44b4:	00040880 	call	4088 <LT24_write_cmd>
	//display on

	LCD_SetCursor(0, 0);
    44b8:	0009883a 	mov	r4,zero
    44bc:	000b883a 	mov	r5,zero
    44c0:	00040b80 	call	40b8 <LCD_SetCursor>
	LCD_WR_REG(0x002c);
    44c4:	01000b04 	movi	r4,44
    44c8:	00040880 	call	4088 <LT24_write_cmd>
    44cc:	04000074 	movhi	r16,1
    44d0:	840b0004 	addi	r16,r16,11264
	int i = 0;
	int j = 0;

	// Clear screen with white
	for (i = 0; i < 320 * 240; ++i) {
		LCD_WR_DATA(0xFF80);
    44d4:	013fe014 	movui	r4,65408
    44d8:	843fffc4 	addi	r16,r16,-1
    44dc:	00040a00 	call	40a0 <LT24_write_data>

	int i = 0;
	int j = 0;

	// Clear screen with white
	for (i = 0; i < 320 * 240; ++i) {
    44e0:	803ffc1e 	bne	r16,zero,44d4 <_gp+0xffff64f8>
		LCD_WR_DATA(0xFF80);
	}

	printf("0x%x\n", image16);
    44e4:	01000034 	movhi	r4,0
    44e8:	21149804 	addi	r4,r4,21088
    44ec:	01400034 	movhi	r5,0
    44f0:	29549e84 	addi	r5,r5,21114
    44f4:	00045640 	call	4564 <printf>
	LT24_dma_start(image16, (BMPHEIGHT*BMPWIDTH)/2);
    44f8:	01000034 	movhi	r4,0
    44fc:	21149e84 	addi	r4,r4,21114
    4500:	0140c804 	movi	r5,800
    4504:	000405c0 	call	405c <LT24_dma_start>
	while (IORD_32DIRECT(LT24_CTRL_0_BASE, 2*4)) {
    4508:	04240a14 	movui	r16,36904
    450c:	00000306 	br	451c <main+0x380>
		printf("DMA busy writing\n");
    4510:	01000034 	movhi	r4,0
    4514:	21149a04 	addi	r4,r4,21096
    4518:	00046300 	call	4630 <puts>
		LCD_WR_DATA(0xFF80);
	}

	printf("0x%x\n", image16);
	LT24_dma_start(image16, (BMPHEIGHT*BMPWIDTH)/2);
	while (IORD_32DIRECT(LT24_CTRL_0_BASE, 2*4)) {
    451c:	80800037 	ldwio	r2,0(r16)
    4520:	103ffb1e 	bne	r2,zero,4510 <_gp+0xffff6534>
    4524:	003fff06 	br	4524 <_gp+0xffff6548>

00004528 <_printf_r>:
    4528:	defffd04 	addi	sp,sp,-12
    452c:	dfc00015 	stw	ra,0(sp)
    4530:	d9800115 	stw	r6,4(sp)
    4534:	d9c00215 	stw	r7,8(sp)
    4538:	20800217 	ldw	r2,8(r4)
    453c:	00c00034 	movhi	r3,0
    4540:	18d35504 	addi	r3,r3,19796
    4544:	280d883a 	mov	r6,r5
    4548:	10c00115 	stw	r3,4(r2)
    454c:	100b883a 	mov	r5,r2
    4550:	d9c00104 	addi	r7,sp,4
    4554:	000466c0 	call	466c <___vfprintf_internal_r>
    4558:	dfc00017 	ldw	ra,0(sp)
    455c:	dec00304 	addi	sp,sp,12
    4560:	f800283a 	ret

00004564 <printf>:
    4564:	defffc04 	addi	sp,sp,-16
    4568:	dfc00015 	stw	ra,0(sp)
    456c:	d9400115 	stw	r5,4(sp)
    4570:	d9800215 	stw	r6,8(sp)
    4574:	d9c00315 	stw	r7,12(sp)
    4578:	00800034 	movhi	r2,0
    457c:	1097f804 	addi	r2,r2,24544
    4580:	10800017 	ldw	r2,0(r2)
    4584:	00c00034 	movhi	r3,0
    4588:	18d35504 	addi	r3,r3,19796
    458c:	200b883a 	mov	r5,r4
    4590:	10800217 	ldw	r2,8(r2)
    4594:	d9800104 	addi	r6,sp,4
    4598:	10c00115 	stw	r3,4(r2)
    459c:	1009883a 	mov	r4,r2
    45a0:	0004d300 	call	4d30 <__vfprintf_internal>
    45a4:	dfc00017 	ldw	ra,0(sp)
    45a8:	dec00404 	addi	sp,sp,16
    45ac:	f800283a 	ret

000045b0 <_puts_r>:
    45b0:	defffd04 	addi	sp,sp,-12
    45b4:	dc000015 	stw	r16,0(sp)
    45b8:	2021883a 	mov	r16,r4
    45bc:	2809883a 	mov	r4,r5
    45c0:	dfc00215 	stw	ra,8(sp)
    45c4:	dc400115 	stw	r17,4(sp)
    45c8:	2823883a 	mov	r17,r5
    45cc:	00046440 	call	4644 <strlen>
    45d0:	81400217 	ldw	r5,8(r16)
    45d4:	00c00034 	movhi	r3,0
    45d8:	18d35504 	addi	r3,r3,19796
    45dc:	880d883a 	mov	r6,r17
    45e0:	8009883a 	mov	r4,r16
    45e4:	28c00115 	stw	r3,4(r5)
    45e8:	100f883a 	mov	r7,r2
    45ec:	183ee83a 	callr	r3
    45f0:	047fffc4 	movi	r17,-1
    45f4:	14400926 	beq	r2,r17,461c <_puts_r+0x6c>
    45f8:	81400217 	ldw	r5,8(r16)
    45fc:	8009883a 	mov	r4,r16
    4600:	01800034 	movhi	r6,0
    4604:	31949904 	addi	r6,r6,21092
    4608:	28800117 	ldw	r2,4(r5)
    460c:	01c00044 	movi	r7,1
    4610:	103ee83a 	callr	r2
    4614:	14400126 	beq	r2,r17,461c <_puts_r+0x6c>
    4618:	0005883a 	mov	r2,zero
    461c:	dfc00217 	ldw	ra,8(sp)
    4620:	dc400117 	ldw	r17,4(sp)
    4624:	dc000017 	ldw	r16,0(sp)
    4628:	dec00304 	addi	sp,sp,12
    462c:	f800283a 	ret

00004630 <puts>:
    4630:	00800034 	movhi	r2,0
    4634:	1097f804 	addi	r2,r2,24544
    4638:	200b883a 	mov	r5,r4
    463c:	11000017 	ldw	r4,0(r2)
    4640:	00045b01 	jmpi	45b0 <_puts_r>

00004644 <strlen>:
    4644:	20800007 	ldb	r2,0(r4)
    4648:	10000626 	beq	r2,zero,4664 <strlen+0x20>
    464c:	2005883a 	mov	r2,r4
    4650:	10800044 	addi	r2,r2,1
    4654:	10c00007 	ldb	r3,0(r2)
    4658:	183ffd1e 	bne	r3,zero,4650 <_gp+0xffff6674>
    465c:	1105c83a 	sub	r2,r2,r4
    4660:	f800283a 	ret
    4664:	0005883a 	mov	r2,zero
    4668:	f800283a 	ret

0000466c <___vfprintf_internal_r>:
    466c:	deffe204 	addi	sp,sp,-120
    4670:	d8c00804 	addi	r3,sp,32
    4674:	df001c15 	stw	fp,112(sp)
    4678:	ddc01b15 	stw	r23,108(sp)
    467c:	dd401915 	stw	r21,100(sp)
    4680:	dd001815 	stw	r20,96(sp)
    4684:	dcc01715 	stw	r19,92(sp)
    4688:	dc801615 	stw	r18,88(sp)
    468c:	dc001415 	stw	r16,80(sp)
    4690:	dfc01d15 	stw	ra,116(sp)
    4694:	dd801a15 	stw	r22,104(sp)
    4698:	dc401515 	stw	r17,84(sp)
    469c:	2039883a 	mov	fp,r4
    46a0:	d9c00e15 	stw	r7,56(sp)
    46a4:	3021883a 	mov	r16,r6
    46a8:	0025883a 	mov	r18,zero
    46ac:	d8001315 	stw	zero,76(sp)
    46b0:	d8000d15 	stw	zero,52(sp)
    46b4:	0029883a 	mov	r20,zero
    46b8:	d8000b15 	stw	zero,44(sp)
    46bc:	d8000c15 	stw	zero,48(sp)
    46c0:	d8001115 	stw	zero,68(sp)
    46c4:	d8001015 	stw	zero,64(sp)
    46c8:	002b883a 	mov	r21,zero
    46cc:	04c00044 	movi	r19,1
    46d0:	d8c00a15 	stw	r3,40(sp)
    46d4:	282f883a 	mov	r23,r5
    46d8:	80c00003 	ldbu	r3,0(r16)
    46dc:	84000044 	addi	r16,r16,1
    46e0:	18803fcc 	andi	r2,r3,255
    46e4:	1080201c 	xori	r2,r2,128
    46e8:	10bfe004 	addi	r2,r2,-128
    46ec:	10001426 	beq	r2,zero,4740 <___vfprintf_internal_r+0xd4>
    46f0:	acc02f26 	beq	r21,r19,47b0 <___vfprintf_internal_r+0x144>
    46f4:	9d401f16 	blt	r19,r21,4774 <___vfprintf_internal_r+0x108>
    46f8:	a83ff71e 	bne	r21,zero,46d8 <_gp+0xffff66fc>
    46fc:	01000944 	movi	r4,37
    4700:	1100d526 	beq	r2,r4,4a58 <___vfprintf_internal_r+0x3ec>
    4704:	b8800117 	ldw	r2,4(r23)
    4708:	d8c00905 	stb	r3,36(sp)
    470c:	e009883a 	mov	r4,fp
    4710:	b80b883a 	mov	r5,r23
    4714:	d9800904 	addi	r6,sp,36
    4718:	01c00044 	movi	r7,1
    471c:	103ee83a 	callr	r2
    4720:	10009c1e 	bne	r2,zero,4994 <___vfprintf_internal_r+0x328>
    4724:	80c00003 	ldbu	r3,0(r16)
    4728:	94800044 	addi	r18,r18,1
    472c:	84000044 	addi	r16,r16,1
    4730:	18803fcc 	andi	r2,r3,255
    4734:	1080201c 	xori	r2,r2,128
    4738:	10bfe004 	addi	r2,r2,-128
    473c:	103fec1e 	bne	r2,zero,46f0 <_gp+0xffff6714>
    4740:	9005883a 	mov	r2,r18
    4744:	dfc01d17 	ldw	ra,116(sp)
    4748:	df001c17 	ldw	fp,112(sp)
    474c:	ddc01b17 	ldw	r23,108(sp)
    4750:	dd801a17 	ldw	r22,104(sp)
    4754:	dd401917 	ldw	r21,100(sp)
    4758:	dd001817 	ldw	r20,96(sp)
    475c:	dcc01717 	ldw	r19,92(sp)
    4760:	dc801617 	ldw	r18,88(sp)
    4764:	dc401517 	ldw	r17,84(sp)
    4768:	dc001417 	ldw	r16,80(sp)
    476c:	dec01e04 	addi	sp,sp,120
    4770:	f800283a 	ret
    4774:	01000084 	movi	r4,2
    4778:	a9001126 	beq	r21,r4,47c0 <___vfprintf_internal_r+0x154>
    477c:	010000c4 	movi	r4,3
    4780:	a93fd51e 	bne	r21,r4,46d8 <_gp+0xffff66fc>
    4784:	193ff404 	addi	r4,r3,-48
    4788:	21003fcc 	andi	r4,r4,255
    478c:	01400244 	movi	r5,9
    4790:	29001936 	bltu	r5,r4,47f8 <___vfprintf_internal_r+0x18c>
    4794:	d8c00b17 	ldw	r3,44(sp)
    4798:	00bfffc4 	movi	r2,-1
    479c:	1880e126 	beq	r3,r2,4b24 <___vfprintf_internal_r+0x4b8>
    47a0:	188002a4 	muli	r2,r3,10
    47a4:	2089883a 	add	r4,r4,r2
    47a8:	d9000b15 	stw	r4,44(sp)
    47ac:	003fca06 	br	46d8 <_gp+0xffff66fc>
    47b0:	01000c04 	movi	r4,48
    47b4:	1100d626 	beq	r2,r4,4b10 <___vfprintf_internal_r+0x4a4>
    47b8:	01000944 	movi	r4,37
    47bc:	1100f026 	beq	r2,r4,4b80 <___vfprintf_internal_r+0x514>
    47c0:	193ff404 	addi	r4,r3,-48
    47c4:	21003fcc 	andi	r4,r4,255
    47c8:	01400244 	movi	r5,9
    47cc:	29000836 	bltu	r5,r4,47f0 <___vfprintf_internal_r+0x184>
    47d0:	d8c00c17 	ldw	r3,48(sp)
    47d4:	00bfffc4 	movi	r2,-1
    47d8:	1880d026 	beq	r3,r2,4b1c <___vfprintf_internal_r+0x4b0>
    47dc:	188002a4 	muli	r2,r3,10
    47e0:	2089883a 	add	r4,r4,r2
    47e4:	d9000c15 	stw	r4,48(sp)
    47e8:	05400084 	movi	r21,2
    47ec:	003fba06 	br	46d8 <_gp+0xffff66fc>
    47f0:	01000b84 	movi	r4,46
    47f4:	1100a526 	beq	r2,r4,4a8c <___vfprintf_internal_r+0x420>
    47f8:	01001b04 	movi	r4,108
    47fc:	1100a126 	beq	r2,r4,4a84 <___vfprintf_internal_r+0x418>
    4800:	d9400b17 	ldw	r5,44(sp)
    4804:	00bfffc4 	movi	r2,-1
    4808:	2880da26 	beq	r5,r2,4b74 <___vfprintf_internal_r+0x508>
    480c:	d8001015 	stw	zero,64(sp)
    4810:	18ffea04 	addi	r3,r3,-88
    4814:	18c03fcc 	andi	r3,r3,255
    4818:	00800804 	movi	r2,32
    481c:	10c0022e 	bgeu	r2,r3,4828 <___vfprintf_internal_r+0x1bc>
    4820:	002b883a 	mov	r21,zero
    4824:	003fac06 	br	46d8 <_gp+0xffff66fc>
    4828:	18c7883a 	add	r3,r3,r3
    482c:	18c7883a 	add	r3,r3,r3
    4830:	01000034 	movhi	r4,0
    4834:	21121104 	addi	r4,r4,18500
    4838:	1907883a 	add	r3,r3,r4
    483c:	18800017 	ldw	r2,0(r3)
    4840:	1000683a 	jmp	r2
    4844:	00004bac 	andhi	zero,zero,302
    4848:	00004820 	cmpeqi	zero,zero,288
    484c:	00004820 	cmpeqi	zero,zero,288
    4850:	00004820 	cmpeqi	zero,zero,288
    4854:	00004820 	cmpeqi	zero,zero,288
    4858:	00004820 	cmpeqi	zero,zero,288
    485c:	00004820 	cmpeqi	zero,zero,288
    4860:	00004820 	cmpeqi	zero,zero,288
    4864:	00004820 	cmpeqi	zero,zero,288
    4868:	00004820 	cmpeqi	zero,zero,288
    486c:	00004820 	cmpeqi	zero,zero,288
    4870:	00004bbc 	xorhi	zero,zero,302
    4874:	000048c8 	cmpgei	zero,zero,291
    4878:	00004820 	cmpeqi	zero,zero,288
    487c:	00004820 	cmpeqi	zero,zero,288
    4880:	00004820 	cmpeqi	zero,zero,288
    4884:	00004820 	cmpeqi	zero,zero,288
    4888:	000048c8 	cmpgei	zero,zero,291
    488c:	00004820 	cmpeqi	zero,zero,288
    4890:	00004820 	cmpeqi	zero,zero,288
    4894:	00004820 	cmpeqi	zero,zero,288
    4898:	00004820 	cmpeqi	zero,zero,288
    489c:	00004820 	cmpeqi	zero,zero,288
    48a0:	0000499c 	xori	zero,zero,294
    48a4:	00004820 	cmpeqi	zero,zero,288
    48a8:	00004820 	cmpeqi	zero,zero,288
    48ac:	00004820 	cmpeqi	zero,zero,288
    48b0:	00004c04 	movi	zero,304
    48b4:	00004820 	cmpeqi	zero,zero,288
    48b8:	000049a0 	cmpeqi	zero,zero,294
    48bc:	00004820 	cmpeqi	zero,zero,288
    48c0:	00004820 	cmpeqi	zero,zero,288
    48c4:	00004bb4 	movhi	zero,302
    48c8:	d8c00d17 	ldw	r3,52(sp)
    48cc:	18003426 	beq	r3,zero,49a0 <___vfprintf_internal_r+0x334>
    48d0:	d9000e17 	ldw	r4,56(sp)
    48d4:	00c00044 	movi	r3,1
    48d8:	25800017 	ldw	r22,0(r4)
    48dc:	21000104 	addi	r4,r4,4
    48e0:	d9000e15 	stw	r4,56(sp)
    48e4:	d8c00d15 	stw	r3,52(sp)
    48e8:	b0010b16 	blt	r22,zero,4d18 <___vfprintf_internal_r+0x6ac>
    48ec:	d8001215 	stw	zero,72(sp)
    48f0:	d82b883a 	mov	r21,sp
    48f4:	b000321e 	bne	r22,zero,49c0 <___vfprintf_internal_r+0x354>
    48f8:	d8c00b17 	ldw	r3,44(sp)
    48fc:	d809883a 	mov	r4,sp
    4900:	00c00b0e 	bge	zero,r3,4930 <___vfprintf_internal_r+0x2c4>
    4904:	d8800b17 	ldw	r2,44(sp)
    4908:	d82b883a 	mov	r21,sp
    490c:	00c00c04 	movi	r3,48
    4910:	00000206 	br	491c <___vfprintf_internal_r+0x2b0>
    4914:	d9400a17 	ldw	r5,40(sp)
    4918:	a9400426 	beq	r21,r5,492c <___vfprintf_internal_r+0x2c0>
    491c:	a8c00005 	stb	r3,0(r21)
    4920:	10bfffc4 	addi	r2,r2,-1
    4924:	ad400044 	addi	r21,r21,1
    4928:	103ffa1e 	bne	r2,zero,4914 <_gp+0xffff6938>
    492c:	a92dc83a 	sub	r22,r21,r4
    4930:	d8c01217 	ldw	r3,72(sp)
    4934:	b0c5883a 	add	r2,r22,r3
    4938:	d8c00c17 	ldw	r3,48(sp)
    493c:	1885c83a 	sub	r2,r3,r2
    4940:	d8c01017 	ldw	r3,64(sp)
    4944:	d8800f15 	stw	r2,60(sp)
    4948:	18007826 	beq	r3,zero,4b2c <___vfprintf_internal_r+0x4c0>
    494c:	d8c01217 	ldw	r3,72(sp)
    4950:	1800e41e 	bne	r3,zero,4ce4 <___vfprintf_internal_r+0x678>
    4954:	d8c00f17 	ldw	r3,60(sp)
    4958:	00c05c0e 	bge	zero,r3,4acc <___vfprintf_internal_r+0x460>
    495c:	00800c04 	movi	r2,48
    4960:	d88008c5 	stb	r2,35(sp)
    4964:	1c7fffc4 	addi	r17,r3,-1
    4968:	00000306 	br	4978 <___vfprintf_internal_r+0x30c>
    496c:	8c7fffc4 	addi	r17,r17,-1
    4970:	013fffc4 	movi	r4,-1
    4974:	8900eb26 	beq	r17,r4,4d24 <___vfprintf_internal_r+0x6b8>
    4978:	b8800117 	ldw	r2,4(r23)
    497c:	e009883a 	mov	r4,fp
    4980:	b80b883a 	mov	r5,r23
    4984:	d98008c4 	addi	r6,sp,35
    4988:	01c00044 	movi	r7,1
    498c:	103ee83a 	callr	r2
    4990:	103ff626 	beq	r2,zero,496c <_gp+0xffff6990>
    4994:	04bfffc4 	movi	r18,-1
    4998:	003f6906 	br	4740 <_gp+0xffff6764>
    499c:	05000204 	movi	r20,8
    49a0:	d9400e17 	ldw	r5,56(sp)
    49a4:	2d800017 	ldw	r22,0(r5)
    49a8:	29400104 	addi	r5,r5,4
    49ac:	d9400e15 	stw	r5,56(sp)
    49b0:	d8000d15 	stw	zero,52(sp)
    49b4:	d8001215 	stw	zero,72(sp)
    49b8:	d82b883a 	mov	r21,sp
    49bc:	b03fce26 	beq	r22,zero,48f8 <_gp+0xffff691c>
    49c0:	9005883a 	mov	r2,r18
    49c4:	dc000f15 	stw	r16,60(sp)
    49c8:	a025883a 	mov	r18,r20
    49cc:	04400244 	movi	r17,9
    49d0:	dc001317 	ldw	r16,76(sp)
    49d4:	1029883a 	mov	r20,r2
    49d8:	00000506 	br	49f0 <___vfprintf_internal_r+0x384>
    49dc:	b5800c04 	addi	r22,r22,48
    49e0:	ad800005 	stb	r22,0(r21)
    49e4:	102d883a 	mov	r22,r2
    49e8:	ad400044 	addi	r21,r21,1
    49ec:	10000c26 	beq	r2,zero,4a20 <___vfprintf_internal_r+0x3b4>
    49f0:	b009883a 	mov	r4,r22
    49f4:	900b883a 	mov	r5,r18
    49f8:	0004fc00 	call	4fc0 <__udivsi3>
    49fc:	9089383a 	mul	r4,r18,r2
    4a00:	b12dc83a 	sub	r22,r22,r4
    4a04:	8dbff50e 	bge	r17,r22,49dc <_gp+0xffff6a00>
    4a08:	80001126 	beq	r16,zero,4a50 <___vfprintf_internal_r+0x3e4>
    4a0c:	b5800dc4 	addi	r22,r22,55
    4a10:	ad800005 	stb	r22,0(r21)
    4a14:	102d883a 	mov	r22,r2
    4a18:	ad400044 	addi	r21,r21,1
    4a1c:	103ff41e 	bne	r2,zero,49f0 <_gp+0xffff6a14>
    4a20:	d8c00b17 	ldw	r3,44(sp)
    4a24:	a005883a 	mov	r2,r20
    4a28:	aeedc83a 	sub	r22,r21,sp
    4a2c:	9029883a 	mov	r20,r18
    4a30:	1025883a 	mov	r18,r2
    4a34:	1d85c83a 	sub	r2,r3,r22
    4a38:	dc000f17 	ldw	r16,60(sp)
    4a3c:	d809883a 	mov	r4,sp
    4a40:	00bfbb0e 	bge	zero,r2,4930 <_gp+0xffff6954>
    4a44:	d8c00a17 	ldw	r3,40(sp)
    4a48:	a8ffb036 	bltu	r21,r3,490c <_gp+0xffff6930>
    4a4c:	003fb806 	br	4930 <_gp+0xffff6954>
    4a50:	b58015c4 	addi	r22,r22,87
    4a54:	003fe206 	br	49e0 <_gp+0xffff6a04>
    4a58:	00c00044 	movi	r3,1
    4a5c:	d8c00d15 	stw	r3,52(sp)
    4a60:	00ffffc4 	movi	r3,-1
    4a64:	d8c00b15 	stw	r3,44(sp)
    4a68:	d8001315 	stw	zero,76(sp)
    4a6c:	05000284 	movi	r20,10
    4a70:	d8c00c15 	stw	r3,48(sp)
    4a74:	d8001115 	stw	zero,68(sp)
    4a78:	d8001015 	stw	zero,64(sp)
    4a7c:	dd400d17 	ldw	r21,52(sp)
    4a80:	003f1506 	br	46d8 <_gp+0xffff66fc>
    4a84:	00c00044 	movi	r3,1
    4a88:	d8c01115 	stw	r3,68(sp)
    4a8c:	054000c4 	movi	r21,3
    4a90:	003f1106 	br	46d8 <_gp+0xffff66fc>
    4a94:	d8c00f17 	ldw	r3,60(sp)
    4a98:	90e5883a 	add	r18,r18,r3
    4a9c:	d8c01217 	ldw	r3,72(sp)
    4aa0:	18000a26 	beq	r3,zero,4acc <___vfprintf_internal_r+0x460>
    4aa4:	b8800117 	ldw	r2,4(r23)
    4aa8:	00c00b44 	movi	r3,45
    4aac:	d8c00905 	stb	r3,36(sp)
    4ab0:	e009883a 	mov	r4,fp
    4ab4:	b80b883a 	mov	r5,r23
    4ab8:	d9800904 	addi	r6,sp,36
    4abc:	01c00044 	movi	r7,1
    4ac0:	103ee83a 	callr	r2
    4ac4:	103fb31e 	bne	r2,zero,4994 <_gp+0xffff69b8>
    4ac8:	94800044 	addi	r18,r18,1
    4acc:	ada3c83a 	sub	r17,r21,r22
    4ad0:	05800316 	blt	zero,r22,4ae0 <___vfprintf_internal_r+0x474>
    4ad4:	003f5206 	br	4820 <_gp+0xffff6844>
    4ad8:	94800044 	addi	r18,r18,1
    4adc:	ac7f5026 	beq	r21,r17,4820 <_gp+0xffff6844>
    4ae0:	ad7fffc4 	addi	r21,r21,-1
    4ae4:	a8c00003 	ldbu	r3,0(r21)
    4ae8:	b8800117 	ldw	r2,4(r23)
    4aec:	e009883a 	mov	r4,fp
    4af0:	d8c00905 	stb	r3,36(sp)
    4af4:	b80b883a 	mov	r5,r23
    4af8:	d9800904 	addi	r6,sp,36
    4afc:	01c00044 	movi	r7,1
    4b00:	103ee83a 	callr	r2
    4b04:	103ff426 	beq	r2,zero,4ad8 <_gp+0xffff6afc>
    4b08:	04bfffc4 	movi	r18,-1
    4b0c:	003f0c06 	br	4740 <_gp+0xffff6764>
    4b10:	dd401015 	stw	r21,64(sp)
    4b14:	05400084 	movi	r21,2
    4b18:	003eef06 	br	46d8 <_gp+0xffff66fc>
    4b1c:	0005883a 	mov	r2,zero
    4b20:	003f2f06 	br	47e0 <_gp+0xffff6804>
    4b24:	0005883a 	mov	r2,zero
    4b28:	003f1e06 	br	47a4 <_gp+0xffff67c8>
    4b2c:	d8c00f17 	ldw	r3,60(sp)
    4b30:	00ffda0e 	bge	zero,r3,4a9c <_gp+0xffff6ac0>
    4b34:	00800804 	movi	r2,32
    4b38:	d8800885 	stb	r2,34(sp)
    4b3c:	1c7fffc4 	addi	r17,r3,-1
    4b40:	00000306 	br	4b50 <___vfprintf_internal_r+0x4e4>
    4b44:	8c7fffc4 	addi	r17,r17,-1
    4b48:	013fffc4 	movi	r4,-1
    4b4c:	893fd126 	beq	r17,r4,4a94 <_gp+0xffff6ab8>
    4b50:	b8800117 	ldw	r2,4(r23)
    4b54:	e009883a 	mov	r4,fp
    4b58:	b80b883a 	mov	r5,r23
    4b5c:	d9800884 	addi	r6,sp,34
    4b60:	01c00044 	movi	r7,1
    4b64:	103ee83a 	callr	r2
    4b68:	103ff626 	beq	r2,zero,4b44 <_gp+0xffff6b68>
    4b6c:	04bfffc4 	movi	r18,-1
    4b70:	003ef306 	br	4740 <_gp+0xffff6764>
    4b74:	00800044 	movi	r2,1
    4b78:	d8800b15 	stw	r2,44(sp)
    4b7c:	003f2406 	br	4810 <_gp+0xffff6834>
    4b80:	b8c00117 	ldw	r3,4(r23)
    4b84:	d8800905 	stb	r2,36(sp)
    4b88:	e009883a 	mov	r4,fp
    4b8c:	b80b883a 	mov	r5,r23
    4b90:	d9800904 	addi	r6,sp,36
    4b94:	a80f883a 	mov	r7,r21
    4b98:	183ee83a 	callr	r3
    4b9c:	103f7d1e 	bne	r2,zero,4994 <_gp+0xffff69b8>
    4ba0:	94800044 	addi	r18,r18,1
    4ba4:	002b883a 	mov	r21,zero
    4ba8:	003ecb06 	br	46d8 <_gp+0xffff66fc>
    4bac:	00c00044 	movi	r3,1
    4bb0:	d8c01315 	stw	r3,76(sp)
    4bb4:	05000404 	movi	r20,16
    4bb8:	003f7906 	br	49a0 <_gp+0xffff69c4>
    4bbc:	d8c00c17 	ldw	r3,48(sp)
    4bc0:	98c0380e 	bge	r19,r3,4ca4 <___vfprintf_internal_r+0x638>
    4bc4:	1dbfffc4 	addi	r22,r3,-1
    4bc8:	00800804 	movi	r2,32
    4bcc:	d8800845 	stb	r2,33(sp)
    4bd0:	b023883a 	mov	r17,r22
    4bd4:	057fffc4 	movi	r21,-1
    4bd8:	8c7fffc4 	addi	r17,r17,-1
    4bdc:	8d403026 	beq	r17,r21,4ca0 <___vfprintf_internal_r+0x634>
    4be0:	b8800117 	ldw	r2,4(r23)
    4be4:	e009883a 	mov	r4,fp
    4be8:	b80b883a 	mov	r5,r23
    4bec:	d9800844 	addi	r6,sp,33
    4bf0:	01c00044 	movi	r7,1
    4bf4:	103ee83a 	callr	r2
    4bf8:	103ff726 	beq	r2,zero,4bd8 <_gp+0xffff6bfc>
    4bfc:	04bfffc4 	movi	r18,-1
    4c00:	003ecf06 	br	4740 <_gp+0xffff6764>
    4c04:	d9000e17 	ldw	r4,56(sp)
    4c08:	d8c00e17 	ldw	r3,56(sp)
    4c0c:	21000017 	ldw	r4,0(r4)
    4c10:	18c00104 	addi	r3,r3,4
    4c14:	d8c00e15 	stw	r3,56(sp)
    4c18:	d9000f15 	stw	r4,60(sp)
    4c1c:	00046440 	call	4644 <strlen>
    4c20:	d8c00c17 	ldw	r3,48(sp)
    4c24:	102d883a 	mov	r22,r2
    4c28:	1887c83a 	sub	r3,r3,r2
    4c2c:	d8c01215 	stw	r3,72(sp)
    4c30:	00c0110e 	bge	zero,r3,4c78 <___vfprintf_internal_r+0x60c>
    4c34:	00800804 	movi	r2,32
    4c38:	d8800805 	stb	r2,32(sp)
    4c3c:	1c7fffc4 	addi	r17,r3,-1
    4c40:	057fffc4 	movi	r21,-1
    4c44:	00000206 	br	4c50 <___vfprintf_internal_r+0x5e4>
    4c48:	8c7fffc4 	addi	r17,r17,-1
    4c4c:	8d400826 	beq	r17,r21,4c70 <___vfprintf_internal_r+0x604>
    4c50:	b8800117 	ldw	r2,4(r23)
    4c54:	e009883a 	mov	r4,fp
    4c58:	b80b883a 	mov	r5,r23
    4c5c:	d9800804 	addi	r6,sp,32
    4c60:	01c00044 	movi	r7,1
    4c64:	103ee83a 	callr	r2
    4c68:	103ff726 	beq	r2,zero,4c48 <_gp+0xffff6c6c>
    4c6c:	003f4906 	br	4994 <_gp+0xffff69b8>
    4c70:	d8c01217 	ldw	r3,72(sp)
    4c74:	90e5883a 	add	r18,r18,r3
    4c78:	b8800117 	ldw	r2,4(r23)
    4c7c:	d9800f17 	ldw	r6,60(sp)
    4c80:	e009883a 	mov	r4,fp
    4c84:	b80b883a 	mov	r5,r23
    4c88:	b00f883a 	mov	r7,r22
    4c8c:	103ee83a 	callr	r2
    4c90:	103f401e 	bne	r2,zero,4994 <_gp+0xffff69b8>
    4c94:	95a5883a 	add	r18,r18,r22
    4c98:	002b883a 	mov	r21,zero
    4c9c:	003e8e06 	br	46d8 <_gp+0xffff66fc>
    4ca0:	95a5883a 	add	r18,r18,r22
    4ca4:	d9000e17 	ldw	r4,56(sp)
    4ca8:	b8800117 	ldw	r2,4(r23)
    4cac:	b80b883a 	mov	r5,r23
    4cb0:	20c00017 	ldw	r3,0(r4)
    4cb4:	d9800904 	addi	r6,sp,36
    4cb8:	e009883a 	mov	r4,fp
    4cbc:	d8c00905 	stb	r3,36(sp)
    4cc0:	d8c00e17 	ldw	r3,56(sp)
    4cc4:	01c00044 	movi	r7,1
    4cc8:	1c400104 	addi	r17,r3,4
    4ccc:	103ee83a 	callr	r2
    4cd0:	103f301e 	bne	r2,zero,4994 <_gp+0xffff69b8>
    4cd4:	94800044 	addi	r18,r18,1
    4cd8:	dc400e15 	stw	r17,56(sp)
    4cdc:	002b883a 	mov	r21,zero
    4ce0:	003e7d06 	br	46d8 <_gp+0xffff66fc>
    4ce4:	b8800117 	ldw	r2,4(r23)
    4ce8:	00c00b44 	movi	r3,45
    4cec:	d8c00905 	stb	r3,36(sp)
    4cf0:	e009883a 	mov	r4,fp
    4cf4:	b80b883a 	mov	r5,r23
    4cf8:	d9800904 	addi	r6,sp,36
    4cfc:	01c00044 	movi	r7,1
    4d00:	103ee83a 	callr	r2
    4d04:	103f231e 	bne	r2,zero,4994 <_gp+0xffff69b8>
    4d08:	d8c00f17 	ldw	r3,60(sp)
    4d0c:	94800044 	addi	r18,r18,1
    4d10:	00ff1216 	blt	zero,r3,495c <_gp+0xffff6980>
    4d14:	003f6d06 	br	4acc <_gp+0xffff6af0>
    4d18:	05adc83a 	sub	r22,zero,r22
    4d1c:	d8c01215 	stw	r3,72(sp)
    4d20:	003f2506 	br	49b8 <_gp+0xffff69dc>
    4d24:	d8c00f17 	ldw	r3,60(sp)
    4d28:	90e5883a 	add	r18,r18,r3
    4d2c:	003f6706 	br	4acc <_gp+0xffff6af0>

00004d30 <__vfprintf_internal>:
    4d30:	00800034 	movhi	r2,0
    4d34:	1097f804 	addi	r2,r2,24544
    4d38:	2007883a 	mov	r3,r4
    4d3c:	11000017 	ldw	r4,0(r2)
    4d40:	2805883a 	mov	r2,r5
    4d44:	300f883a 	mov	r7,r6
    4d48:	180b883a 	mov	r5,r3
    4d4c:	100d883a 	mov	r6,r2
    4d50:	000466c1 	jmpi	466c <___vfprintf_internal_r>

00004d54 <__sfvwrite_small_dev>:
    4d54:	2880000b 	ldhu	r2,0(r5)
    4d58:	defffa04 	addi	sp,sp,-24
    4d5c:	dcc00315 	stw	r19,12(sp)
    4d60:	10c0020c 	andi	r3,r2,8
    4d64:	18ffffcc 	andi	r3,r3,65535
    4d68:	18e0001c 	xori	r3,r3,32768
    4d6c:	dc800215 	stw	r18,8(sp)
    4d70:	dc400115 	stw	r17,4(sp)
    4d74:	dfc00515 	stw	ra,20(sp)
    4d78:	dd000415 	stw	r20,16(sp)
    4d7c:	dc000015 	stw	r16,0(sp)
    4d80:	18e00004 	addi	r3,r3,-32768
    4d84:	2825883a 	mov	r18,r5
    4d88:	2027883a 	mov	r19,r4
    4d8c:	3023883a 	mov	r17,r6
    4d90:	18002626 	beq	r3,zero,4e2c <__sfvwrite_small_dev+0xd8>
    4d94:	2940008f 	ldh	r5,2(r5)
    4d98:	28001016 	blt	r5,zero,4ddc <__sfvwrite_small_dev+0x88>
    4d9c:	01c01a0e 	bge	zero,r7,4e08 <__sfvwrite_small_dev+0xb4>
    4da0:	3821883a 	mov	r16,r7
    4da4:	05010004 	movi	r20,1024
    4da8:	00000306 	br	4db8 <__sfvwrite_small_dev+0x64>
    4dac:	88a3883a 	add	r17,r17,r2
    4db0:	0400150e 	bge	zero,r16,4e08 <__sfvwrite_small_dev+0xb4>
    4db4:	9140008f 	ldh	r5,2(r18)
    4db8:	880d883a 	mov	r6,r17
    4dbc:	9809883a 	mov	r4,r19
    4dc0:	800f883a 	mov	r7,r16
    4dc4:	a400010e 	bge	r20,r16,4dcc <__sfvwrite_small_dev+0x78>
    4dc8:	01c10004 	movi	r7,1024
    4dcc:	0004e340 	call	4e34 <_write_r>
    4dd0:	80a1c83a 	sub	r16,r16,r2
    4dd4:	00bff516 	blt	zero,r2,4dac <_gp+0xffff6dd0>
    4dd8:	9080000b 	ldhu	r2,0(r18)
    4ddc:	10801014 	ori	r2,r2,64
    4de0:	9080000d 	sth	r2,0(r18)
    4de4:	00bfffc4 	movi	r2,-1
    4de8:	dfc00517 	ldw	ra,20(sp)
    4dec:	dd000417 	ldw	r20,16(sp)
    4df0:	dcc00317 	ldw	r19,12(sp)
    4df4:	dc800217 	ldw	r18,8(sp)
    4df8:	dc400117 	ldw	r17,4(sp)
    4dfc:	dc000017 	ldw	r16,0(sp)
    4e00:	dec00604 	addi	sp,sp,24
    4e04:	f800283a 	ret
    4e08:	0005883a 	mov	r2,zero
    4e0c:	dfc00517 	ldw	ra,20(sp)
    4e10:	dd000417 	ldw	r20,16(sp)
    4e14:	dcc00317 	ldw	r19,12(sp)
    4e18:	dc800217 	ldw	r18,8(sp)
    4e1c:	dc400117 	ldw	r17,4(sp)
    4e20:	dc000017 	ldw	r16,0(sp)
    4e24:	dec00604 	addi	sp,sp,24
    4e28:	f800283a 	ret
    4e2c:	00bfffc4 	movi	r2,-1
    4e30:	003fed06 	br	4de8 <_gp+0xffff6e0c>

00004e34 <_write_r>:
    4e34:	defffd04 	addi	sp,sp,-12
    4e38:	dc400115 	stw	r17,4(sp)
    4e3c:	dc000015 	stw	r16,0(sp)
    4e40:	2023883a 	mov	r17,r4
    4e44:	04000034 	movhi	r16,0
    4e48:	84183704 	addi	r16,r16,24796
    4e4c:	2809883a 	mov	r4,r5
    4e50:	300b883a 	mov	r5,r6
    4e54:	380d883a 	mov	r6,r7
    4e58:	dfc00215 	stw	ra,8(sp)
    4e5c:	80000015 	stw	zero,0(r16)
    4e60:	00051380 	call	5138 <write>
    4e64:	00ffffc4 	movi	r3,-1
    4e68:	10c00526 	beq	r2,r3,4e80 <_write_r+0x4c>
    4e6c:	dfc00217 	ldw	ra,8(sp)
    4e70:	dc400117 	ldw	r17,4(sp)
    4e74:	dc000017 	ldw	r16,0(sp)
    4e78:	dec00304 	addi	sp,sp,12
    4e7c:	f800283a 	ret
    4e80:	80c00017 	ldw	r3,0(r16)
    4e84:	183ff926 	beq	r3,zero,4e6c <_gp+0xffff6e90>
    4e88:	88c00015 	stw	r3,0(r17)
    4e8c:	dfc00217 	ldw	ra,8(sp)
    4e90:	dc400117 	ldw	r17,4(sp)
    4e94:	dc000017 	ldw	r16,0(sp)
    4e98:	dec00304 	addi	sp,sp,12
    4e9c:	f800283a 	ret

00004ea0 <udivmodsi4>:
    4ea0:	2005883a 	mov	r2,r4
    4ea4:	2900182e 	bgeu	r5,r4,4f08 <udivmodsi4+0x68>
    4ea8:	28001716 	blt	r5,zero,4f08 <udivmodsi4+0x68>
    4eac:	01000804 	movi	r4,32
    4eb0:	00c00044 	movi	r3,1
    4eb4:	00000206 	br	4ec0 <udivmodsi4+0x20>
    4eb8:	20001126 	beq	r4,zero,4f00 <udivmodsi4+0x60>
    4ebc:	28000516 	blt	r5,zero,4ed4 <udivmodsi4+0x34>
    4ec0:	294b883a 	add	r5,r5,r5
    4ec4:	213fffc4 	addi	r4,r4,-1
    4ec8:	18c7883a 	add	r3,r3,r3
    4ecc:	28bffa36 	bltu	r5,r2,4eb8 <_gp+0xffff6edc>
    4ed0:	18000b26 	beq	r3,zero,4f00 <udivmodsi4+0x60>
    4ed4:	0009883a 	mov	r4,zero
    4ed8:	11400236 	bltu	r2,r5,4ee4 <udivmodsi4+0x44>
    4edc:	1145c83a 	sub	r2,r2,r5
    4ee0:	20c8b03a 	or	r4,r4,r3
    4ee4:	1806d07a 	srli	r3,r3,1
    4ee8:	280ad07a 	srli	r5,r5,1
    4eec:	183ffa1e 	bne	r3,zero,4ed8 <_gp+0xffff6efc>
    4ef0:	3000021e 	bne	r6,zero,4efc <udivmodsi4+0x5c>
    4ef4:	2005883a 	mov	r2,r4
    4ef8:	f800283a 	ret
    4efc:	f800283a 	ret
    4f00:	0009883a 	mov	r4,zero
    4f04:	003ffa06 	br	4ef0 <_gp+0xffff6f14>
    4f08:	00c00044 	movi	r3,1
    4f0c:	0009883a 	mov	r4,zero
    4f10:	003ff106 	br	4ed8 <_gp+0xffff6efc>

00004f14 <__divsi3>:
    4f14:	defffe04 	addi	sp,sp,-8
    4f18:	dfc00115 	stw	ra,4(sp)
    4f1c:	dc000015 	stw	r16,0(sp)
    4f20:	20000a16 	blt	r4,zero,4f4c <__divsi3+0x38>
    4f24:	0021883a 	mov	r16,zero
    4f28:	28000b16 	blt	r5,zero,4f58 <__divsi3+0x44>
    4f2c:	000d883a 	mov	r6,zero
    4f30:	0004ea00 	call	4ea0 <udivmodsi4>
    4f34:	80000126 	beq	r16,zero,4f3c <__divsi3+0x28>
    4f38:	0085c83a 	sub	r2,zero,r2
    4f3c:	dfc00117 	ldw	ra,4(sp)
    4f40:	dc000017 	ldw	r16,0(sp)
    4f44:	dec00204 	addi	sp,sp,8
    4f48:	f800283a 	ret
    4f4c:	0109c83a 	sub	r4,zero,r4
    4f50:	04000044 	movi	r16,1
    4f54:	283ff50e 	bge	r5,zero,4f2c <_gp+0xffff6f50>
    4f58:	014bc83a 	sub	r5,zero,r5
    4f5c:	8400005c 	xori	r16,r16,1
    4f60:	003ff206 	br	4f2c <_gp+0xffff6f50>

00004f64 <__modsi3>:
    4f64:	deffff04 	addi	sp,sp,-4
    4f68:	dfc00015 	stw	ra,0(sp)
    4f6c:	20000516 	blt	r4,zero,4f84 <__modsi3+0x20>
    4f70:	28000c16 	blt	r5,zero,4fa4 <__modsi3+0x40>
    4f74:	01800044 	movi	r6,1
    4f78:	dfc00017 	ldw	ra,0(sp)
    4f7c:	dec00104 	addi	sp,sp,4
    4f80:	0004ea01 	jmpi	4ea0 <udivmodsi4>
    4f84:	0109c83a 	sub	r4,zero,r4
    4f88:	28000b16 	blt	r5,zero,4fb8 <__modsi3+0x54>
    4f8c:	01800044 	movi	r6,1
    4f90:	0004ea00 	call	4ea0 <udivmodsi4>
    4f94:	0085c83a 	sub	r2,zero,r2
    4f98:	dfc00017 	ldw	ra,0(sp)
    4f9c:	dec00104 	addi	sp,sp,4
    4fa0:	f800283a 	ret
    4fa4:	014bc83a 	sub	r5,zero,r5
    4fa8:	01800044 	movi	r6,1
    4fac:	dfc00017 	ldw	ra,0(sp)
    4fb0:	dec00104 	addi	sp,sp,4
    4fb4:	0004ea01 	jmpi	4ea0 <udivmodsi4>
    4fb8:	014bc83a 	sub	r5,zero,r5
    4fbc:	003ff306 	br	4f8c <_gp+0xffff6fb0>

00004fc0 <__udivsi3>:
    4fc0:	000d883a 	mov	r6,zero
    4fc4:	0004ea01 	jmpi	4ea0 <udivmodsi4>

00004fc8 <__umodsi3>:
    4fc8:	01800044 	movi	r6,1
    4fcc:	0004ea01 	jmpi	4ea0 <udivmodsi4>

00004fd0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4fd0:	deffff04 	addi	sp,sp,-4
    4fd4:	dfc00015 	stw	ra,0(sp)
    4fd8:	00c00034 	movhi	r3,0
    4fdc:	18d7bf04 	addi	r3,r3,24316
    4fe0:	01000034 	movhi	r4,0
    4fe4:	2117fb04 	addi	r4,r4,24556

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4fe8:	1900061e 	bne	r3,r4,5004 <alt_load+0x34>
    4fec:	00c00034 	movhi	r3,0
    4ff0:	18d00804 	addi	r3,r3,16416
    4ff4:	01000034 	movhi	r4,0
    4ff8:	21100804 	addi	r4,r4,16416
    4ffc:	1900151e 	bne	r3,r4,5054 <alt_load+0x84>
    5000:	00000e06 	br	503c <alt_load+0x6c>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
    5004:	01400034 	movhi	r5,0
    5008:	2957fb04 	addi	r5,r5,24556
    500c:	00bfff04 	movi	r2,-4
    5010:	28cbc83a 	sub	r5,r5,r3
    5014:	288a703a 	and	r5,r5,r2
    5018:	0005883a 	mov	r2,zero
    501c:	00000506 	br	5034 <alt_load+0x64>
    5020:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
    5024:	39c00017 	ldw	r7,0(r7)
    5028:	188d883a 	add	r6,r3,r2
    502c:	10800104 	addi	r2,r2,4
    5030:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    5034:	117ffa1e 	bne	r2,r5,5020 <_gp+0xffff7044>
    5038:	003fec06 	br	4fec <_gp+0xffff7010>
    503c:	00c00034 	movhi	r3,0
    5040:	18d49204 	addi	r3,r3,21064
    5044:	01000034 	movhi	r4,0
    5048:	21149204 	addi	r4,r4,21064

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    504c:	1900131e 	bne	r3,r4,509c <alt_load+0xcc>
    5050:	00000e06 	br	508c <alt_load+0xbc>
    5054:	01400034 	movhi	r5,0
    5058:	29500804 	addi	r5,r5,16416
    505c:	00bfff04 	movi	r2,-4
    5060:	28cbc83a 	sub	r5,r5,r3
    5064:	288a703a 	and	r5,r5,r2
    5068:	0005883a 	mov	r2,zero
    506c:	00000506 	br	5084 <alt_load+0xb4>
    5070:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
    5074:	39c00017 	ldw	r7,0(r7)
    5078:	188d883a 	add	r6,r3,r2
    507c:	10800104 	addi	r2,r2,4
    5080:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    5084:	117ffa1e 	bne	r2,r5,5070 <_gp+0xffff7094>
    5088:	003fec06 	br	503c <_gp+0xffff7060>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    508c:	00051f80 	call	51f8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    5090:	dfc00017 	ldw	ra,0(sp)
    5094:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    5098:	00051fc1 	jmpi	51fc <alt_icache_flush_all>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
    509c:	01400034 	movhi	r5,0
    50a0:	2957bf04 	addi	r5,r5,24316
    50a4:	00bfff04 	movi	r2,-4
    50a8:	28cbc83a 	sub	r5,r5,r3
    50ac:	288a703a 	and	r5,r5,r2
    50b0:	0005883a 	mov	r2,zero
    50b4:	00000506 	br	50cc <alt_load+0xfc>
    50b8:	208f883a 	add	r7,r4,r2
    {
      *to++ = *from++;
    50bc:	39c00017 	ldw	r7,0(r7)
    50c0:	188d883a 	add	r6,r3,r2
    50c4:	10800104 	addi	r2,r2,4
    50c8:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    50cc:	117ffa1e 	bne	r2,r5,50b8 <_gp+0xffff70dc>
    50d0:	003fee06 	br	508c <_gp+0xffff70b0>

000050d4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    50d4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    50d8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    50dc:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    50e0:	00051a00 	call	51a0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    50e4:	00051c00 	call	51c0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    50e8:	d1204317 	ldw	r4,-32500(gp)
    50ec:	d1604217 	ldw	r5,-32504(gp)
    50f0:	d1a04117 	ldw	r6,-32508(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    50f4:	dfc00017 	ldw	ra,0(sp)
    50f8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    50fc:	000419c1 	jmpi	419c <main>

00005100 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    5100:	defffe04 	addi	sp,sp,-8
    5104:	dc000015 	stw	r16,0(sp)
    5108:	dfc00115 	stw	ra,4(sp)
    510c:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    5110:	00046440 	call	4644 <strlen>
    5114:	01000034 	movhi	r4,0
    5118:	2117f904 	addi	r4,r4,24548
    511c:	800b883a 	mov	r5,r16
    5120:	100d883a 	mov	r6,r2
    5124:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    5128:	dfc00117 	ldw	ra,4(sp)
    512c:	dc000017 	ldw	r16,0(sp)
    5130:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    5134:	00051c41 	jmpi	51c4 <altera_avalon_jtag_uart_write>

00005138 <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    5138:	deffff04 	addi	sp,sp,-4
    513c:	dfc00015 	stw	ra,0(sp)
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    5140:	00800044 	movi	r2,1
    5144:	20800226 	beq	r4,r2,5150 <write+0x18>
    5148:	00800084 	movi	r2,2
    514c:	2080061e 	bne	r4,r2,5168 <write+0x30>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    5150:	01000034 	movhi	r4,0
    5154:	2117f904 	addi	r4,r4,24548
    5158:	000f883a 	mov	r7,zero
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
        return -1;
    }
}
    515c:	dfc00017 	ldw	ra,0(sp)
    5160:	dec00104 	addi	sp,sp,4
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    5164:	00051c41 	jmpi	51c4 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    5168:	00800034 	movhi	r2,0
    516c:	1097fa04 	addi	r2,r2,24552
    5170:	10800017 	ldw	r2,0(r2)
    5174:	10000226 	beq	r2,zero,5180 <write+0x48>
    5178:	103ee83a 	callr	r2
    517c:	00000206 	br	5188 <write+0x50>
    5180:	00800034 	movhi	r2,0
    5184:	10983704 	addi	r2,r2,24796
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    5188:	00c01444 	movi	r3,81
    518c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    5190:	00bfffc4 	movi	r2,-1
    5194:	dfc00017 	ldw	ra,0(sp)
    5198:	dec00104 	addi	sp,sp,4
    519c:	f800283a 	ret

000051a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    51a0:	deffff04 	addi	sp,sp,-4
    51a4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    51a8:	00052080 	call	5208 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    51ac:	00800044 	movi	r2,1
    51b0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    51b4:	dfc00017 	ldw	ra,0(sp)
    51b8:	dec00104 	addi	sp,sp,4
    51bc:	f800283a 	ret

000051c0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    51c0:	f800283a 	ret

000051c4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    51c4:	20c00017 	ldw	r3,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    51c8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    51cc:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    51d0:	19800104 	addi	r6,r3,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    51d4:	00000606 	br	51f0 <altera_avalon_jtag_uart_write+0x2c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    51d8:	31c00037 	ldwio	r7,0(r6)
    51dc:	39ffffec 	andhi	r7,r7,65535
    51e0:	383ffd26 	beq	r7,zero,51d8 <_gp+0xffff71fc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    51e4:	29c00007 	ldb	r7,0(r5)
    51e8:	29400044 	addi	r5,r5,1
    51ec:	19c00035 	stwio	r7,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    51f0:	293ff936 	bltu	r5,r4,51d8 <_gp+0xffff71fc>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    51f4:	f800283a 	ret

000051f8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    51f8:	f800283a 	ret

000051fc <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    51fc:	0009883a 	mov	r4,zero
    5200:	01440004 	movi	r5,4096
    5204:	00052101 	jmpi	5210 <alt_icache_flush>

00005208 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    5208:	000170fa 	wrctl	ienable,zero
    520c:	f800283a 	ret

00005210 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    5210:	00840004 	movi	r2,4096
    5214:	1140012e 	bgeu	r2,r5,521c <alt_icache_flush+0xc>
    5218:	100b883a 	mov	r5,r2
    521c:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    5220:	2005883a 	mov	r2,r4
    5224:	00000206 	br	5230 <alt_icache_flush+0x20>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    5228:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    522c:	10800804 	addi	r2,r2,32
    5230:	117ffd36 	bltu	r2,r5,5228 <_gp+0xffff724c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    5234:	210007cc 	andi	r4,r4,31
    5238:	20000126 	beq	r4,zero,5240 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    523c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    5240:	0000203a 	flushp
    5244:	f800283a 	ret
