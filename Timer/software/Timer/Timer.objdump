
Timer.elf:     file format elf32-littlenios2
Timer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00005504 memsz 0x00005504 flags r-x
    LOAD off    0x00006524 vaddr 0x00005524 paddr 0x00006f90 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x000089fc vaddr 0x000089fc paddr 0x000089fc align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000052e4  000001bc  000001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000084  000054a0  000054a0  000064a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00005524  00006f90  00006524  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  000089fc  000089fc  000089fc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00008b58  00008b58  00007f90  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  02004000  02004000  00007f90  2**0
                  CONTENTS
  8 .comment      00000039  00000000  00000000  00007f90  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000009d0  00000000  00000000  00007fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00015de0  00000000  00000000  000089a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005f71  00000000  00000000  0001e780  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006713  00000000  00000000  000246f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000017fc  00000000  00000000  0002ae04  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000022ff  00000000  00000000  0002c600  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000330b  00000000  00000000  0002e8ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00031c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000198  00000000  00000000  00031c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000345e6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000345e9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000345f5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000345f6  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  000345f7  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00034602  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0003460d  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000006  00000000  00000000  00034618  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000002e  00000000  00000000  0003461e  2**0
                  CONTENTS, READONLY
 27 .jdi          00003f4c  00000000  00000000  0003464c  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00059603  00000000  00000000  00038598  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001bc l    d  .text	00000000 .text
000054a0 l    d  .rodata	00000000 .rodata
00005524 l    d  .rwdata	00000000 .rwdata
000089fc l    d  .bss	00000000 .bss
00008b58 l    d  .sdram	00000000 .sdram
02004000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Timer_bsp//obj/HAL/src/crt0.o
00000204 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_timer.c
0000029c l     F .text	00000098 handle_timer_interrupts
00000000 l    df *ABS*	00000000 hello_world.c
00000334 l     F .text	00000068 handle_button_interrupts
0000039c l     F .text	0000003c handle_timer_irq
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 timer.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000ab8 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000eb0 l     F .text	00000038 alt_dev_reg
00005524 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00001184 l     F .text	000001fc altera_avalon_jtag_uart_irq
00001380 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00001c2c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001d88 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00001db4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00001f8c l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000020c4 l     F .text	00000050 alt_get_errno
00002114 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000672c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00003408 l     F .text	00000008 __fp_lock
00003410 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00004ce0 l     F .text	00000070 udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00004e28 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00004f24 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00005014 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00005174 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00006f8c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00005364 l     F .text	00000050 alt_get_errno
00004ba4 g     F .text	00000064 _isatty_r
00000b9c g     F .text	00000078 alt_main
00008a58 g     O .bss	00000100 alt_irq
00004c08 g     F .text	0000006c _lseek_r
00006f90 g       *ABS*	00000000 __flash_rwdata_start
00008b58 g       *ABS*	00000000 __alt_heap_start
000048cc g     F .text	0000005c __sseek
000034a0 g     F .text	0000019c __sinit
00002c00 g     F .text	00000180 __swbuf_r
00003424 g     F .text	00000064 __sfmoreglue
00005154 g     F .text	00000020 __malloc_unlock
00003488 g     F .text	00000018 _cleanup
0000044c g     F .text	00000070 setup_irq_timer
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00008a00 g     O .bss	00000004 edge_capture
00000020 g       *ABS*	00000000 __flash_exceptions_start
00004b3c g     F .text	00000068 _fstat_r
00008a20 g     O .bss	00000004 errno
00004848 g     F .text	00000008 __seofread
00008a10 g     O .bss	00000004 alt_argv
0000ef58 g       *ABS*	00000000 _gp
00000e80 g     F .text	00000030 usleep
000065ac g     O .rwdata	00000180 alt_fd_list
00002550 g     F .text	00000090 alt_find_dev
000028fc g     F .text	0000010c memcpy
00003418 g     F .text	0000000c _cleanup_r
0000204c g     F .text	00000078 alt_io_redirect
000054a0 g       *ABS*	00000000 __DTOR_END__
00001578 g     F .text	00000208 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
02004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00004de4 g     F .text	00000008 .hidden __udivsi3
00004f74 g     F .text	000000a0 isatty
000027a8 g     F .text	0000008c alt_icache_flush
000007c8 g     F .text	00000028 timer_read_irq
00008a2c g     O .bss	00000004 __malloc_top_pad
00004790 g     F .text	00000064 _sbrk_r
00004c74 g     F .text	0000006c _read_r
00006f6c g     O .rwdata	00000004 alt_max_fd
00004a00 g     F .text	00000128 _fclose_r
000033d8 g     F .text	00000030 fflush
00008a28 g     O .bss	00000004 __malloc_max_sbrked_mem
00005064 g     F .text	000000d0 lseek
00006f7c g     O .rwdata	00000004 _global_impure_ptr
00008b58 g       *ABS*	00000000 __bss_end
000009c8 g     F .text	000000f0 alt_iic_isr_register
0000242c g     F .text	00000104 alt_tick
00000770 g     F .text	0000002c timer_enable_irq
00003768 g     F .text	00000018 __fp_lock_all
0000097c g     F .text	0000004c alt_ic_irq_enabled
00002394 g     F .text	00000098 alt_alarm_stop
00008a08 g     O .bss	00000004 alt_irq_active
0000079c g     F .text	0000002c timer_clear_irq
000000ec g     F .exceptions	000000d0 alt_irq_handler
00006584 g     O .rwdata	00000028 alt_dev_null
00001d44 g     F .text	00000044 alt_dcache_flush_all
00006f90 g       *ABS*	00000000 __ram_rwdata_end
00000690 g     F .text	00000030 timer_init
00006f64 g     O .rwdata	00000008 alt_dev_list
000053b4 g     F .text	000000ec write
00002a08 g     F .text	000000a0 _putc_r
00005524 g       *ABS*	00000000 __ram_rodata_end
00004e78 g     F .text	000000ac fstat
00004dec g     F .text	00000008 .hidden __umodsi3
00008b58 g       *ABS*	00000000 end
0000065c g     F .text	00000034 leds
000006c0 g     F .text	0000002c timer_start
000010c4 g     F .text	000000c0 altera_avalon_jtag_uart_init
000054a0 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
00001780 g     F .text	00000218 altera_avalon_jtag_uart_write
00003758 g     F .text	00000004 __sfp_lock_acquire
00000208 g     F .text	00000094 init_timer_interrupt
000003d8 g     F .text	00000074 setup_irq_inputs
000038d4 g     F .text	000002d0 _free_r
00000c14 g     F .text	00000228 alt_printf
00002ff0 g     F .text	000001a4 __call_exitprocs
00006f84 g     O .rwdata	00000004 __malloc_sbrk_base
000001bc g     F .text	0000004c _start
00008a18 g     O .bss	00000004 _alt_tick_rate
00008a1c g     O .bss	00000004 _alt_nticks
000051c4 g     F .text	000000f0 read
00000f1c g     F .text	00000044 alt_sys_init
00002ed4 g     F .text	0000011c __register_exitproc
00001424 g     F .text	00000068 altera_avalon_jtag_uart_close
00005524 g       *ABS*	00000000 __ram_rwdata_start
000054a0 g       *ABS*	00000000 __ram_rodata_start
00008a30 g     O .bss	00000028 __malloc_current_mallinfo
000005a4 g     F .text	00000058 leds_set
00000f60 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000026f4 g     F .text	000000b4 alt_get_fd
00001ad8 g     F .text	00000154 alt_busy_sleep
0000499c g     F .text	00000064 _close_r
00002880 g     F .text	0000007c memcmp
00001020 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00008b58 g       *ABS*	00000000 __alt_stack_base
00000718 g     F .text	00000028 timer_read
00001070 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002d9c g     F .text	00000138 __swsetup_r
0000363c g     F .text	0000011c __sfp
00006b50 g     O .rwdata	00000408 __malloc_av_
00003764 g     F .text	00000004 __sinit_lock_release
000047f4 g     F .text	00000054 __sread
000025e0 g     F .text	00000114 alt_find_file
00001e04 g     F .text	000000a0 alt_dev_llist_insert
00005134 g     F .text	00000020 __malloc_lock
000052b4 g     F .text	000000b0 sbrk
00003194 g     F .text	00000244 _fflush_r
00008a04 g     O .bss	00000004 response_time
000089fc g       *ABS*	00000000 __bss_start
0000467c g     F .text	00000114 memset
000004bc g     F .text	000000e8 main
00008a14 g     O .bss	00000004 alt_envp
00008a24 g     O .bss	00000004 __malloc_max_total_mem
00000fc0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00002d80 g     F .text	0000001c __swbuf
00004928 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
00004b28 g     F .text	00000014 fclose
00003eb8 g     F .text	000007c4 _malloc_r
000005fc g     F .text	00000060 leds_clr
00006f70 g     O .rwdata	00000004 alt_errno
00003ba4 g     F .text	000000a8 _fwalk
00002aa8 g     F .text	000000cc putc
00004d50 g     F .text	00000048 .hidden __divsi3
00003798 g     F .text	0000013c _malloc_trim_r
000054a0 g       *ABS*	00000000 __CTOR_END__
000054a0 g       *ABS*	00000000 __flash_rodata_start
000054a0 g       *ABS*	00000000 __DTOR_LIST__
000089fc g     O .bss	00000004 count
00000ee8 g     F .text	00000034 alt_irq_init
00002334 g     F .text	00000060 alt_release_fd
00002834 g     F .text	00000014 atexit
00004930 g     F .text	0000006c _write_r
00006f80 g     O .rwdata	00000004 _impure_ptr
00008a0c g     O .bss	00000004 alt_argc
00001f00 g     F .text	0000005c _do_dtors
000006ec g     F .text	0000002c timer_stop
00000020 g       .exceptions	00000000 alt_irq_entry
00003780 g     F .text	00000018 __fp_unlock_all
00006f5c g     O .rwdata	00000008 alt_fs_list
00000740 g     F .text	00000030 timer_reset
00000020 g       *ABS*	00000000 __ram_exceptions_start
000007f0 g     F .text	00000050 alt_ic_isr_register
00006f90 g       *ABS*	00000000 _edata
00008b58 g       *ABS*	00000000 _end
000001bc g       *ABS*	00000000 __ram_exceptions_end
0000148c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
000008dc g     F .text	000000a0 alt_ic_irq_disable
00004850 g     F .text	0000007c __swrite
00006f88 g     O .rwdata	00000004 __malloc_trim_threshold
00002530 g     F .text	00000020 altera_nios2_qsys_irq_init
00002848 g     F .text	00000038 exit
00003c4c g     F .text	000000b8 _fwalk_reent
00004d98 g     F .text	0000004c .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000375c g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
00004df4 g     F .text	00000034 _exit
00001998 g     F .text	00000140 alt_alarm_start
00003d04 g     F .text	000001b4 __smakebuf_r
00002b74 g     F .text	0000008c strlen
000021e0 g     F .text	00000154 open
00000e3c g     F .text	00000044 alt_putchar
00001f5c g     F .text	00000030 alt_icache_flush_all
00006f58 g     O .rwdata	00000004 alt_priority_mask
00000840 g     F .text	0000009c alt_ic_irq_enable
00006f74 g     O .rwdata	00000008 alt_alarm_list
00001ea4 g     F .text	0000005c _do_ctors
00001c7c g     F .text	000000c8 close
00000b1c g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00003760 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_onchip_memory2_0+0xfdffc004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406f14 	ori	at,at,444
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001726 	beq	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00c00074 	movhi	r3,1
 130:	18e29604 	addi	r3,r3,-30120
 134:	e0bffd17 	ldw	r2,-12(fp)
 138:	100490fa 	slli	r2,r2,3
 13c:	1885883a 	add	r2,r3,r2
 140:	10800017 	ldw	r2,0(r2)
 144:	01000074 	movhi	r4,1
 148:	21229604 	addi	r4,r4,-30120
 14c:	e0fffd17 	ldw	r3,-12(fp)
 150:	180690fa 	slli	r3,r3,3
 154:	20c7883a 	add	r3,r4,r3
 158:	18c00104 	addi	r3,r3,4
 15c:	18c00017 	ldw	r3,0(r3)
 160:	1809883a 	mov	r4,r3
 164:	103ee83a 	callr	r2
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 17c:	e0bffb17 	ldw	r2,-20(fp)
 180:	103fe31e 	bne	r2,zero,110 <__alt_mem_onchip_memory2_0+0xfdffc110>
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffc17 	ldw	r2,-16(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fde06 	br	11c <__alt_mem_onchip_memory2_0+0xfdffc11c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	0001883a 	nop
}
 1a8:	e037883a 	mov	sp,fp
 1ac:	dfc00117 	ldw	ra,4(sp)
 1b0:	df000017 	ldw	fp,0(sp)
 1b4:	dec00204 	addi	sp,sp,8
 1b8:	f800283a 	ret

Disassembly of section .text:

000001bc <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1bc:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     1c0:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1c4:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     1c8:	00bffd16 	blt	zero,r2,1c0 <__alt_mem_onchip_memory2_0+0xfdffc1c0>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1cc:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     1d0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1d4:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1d8:	d6bbd614 	ori	gp,gp,61272
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1dc:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1e0:	10a27f14 	ori	r2,r2,35324

    movhi r3, %hi(__bss_end)
     1e4:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1e8:	18e2d614 	ori	r3,r3,35672

    beq r2, r3, 1f
     1ec:	10c00326 	beq	r2,r3,1fc <_start+0x40>

0:
    stw zero, (r2)
     1f0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1f4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f8:	10fffd36 	bltu	r2,r3,1f0 <__alt_mem_onchip_memory2_0+0xfdffc1f0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1fc:	0000b1c0 	call	b1c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     200:	0000b9c0 	call	b9c <alt_main>

00000204 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     204:	003fff06 	br	204 <__alt_mem_onchip_memory2_0+0xfdffc204>

00000208 <init_timer_interrupt>:

void init_timer_interrupt(void);

unsigned int count;
extern int response_time;
void init_timer_interrupt(void) {
     208:	defffc04 	addi	sp,sp,-16
     20c:	dfc00315 	stw	ra,12(sp)
     210:	df000215 	stw	fp,8(sp)
     214:	df000204 	addi	fp,sp,8
	count = 0;
     218:	d026a915 	stw	zero,-25948(gp)
	int* ptr;
	IOWR_ALTERA_AVALON_TIMER_CONTROL(ALT_TIMER_0_BASE,
     21c:	00c002c4 	movi	r3,11
     220:	00808074 	movhi	r2,513
     224:	10a40904 	addi	r2,r2,-28636
     228:	10c00035 	stwio	r3,0(r2)
			(1 << 3) | (1 << 1) | (1 << 0));
	IOWR_ALTERA_AVALON_TIMER_STATUS(ALT_TIMER_0_BASE, 0); // Clear TO Bit(Reaching 0)
     22c:	0007883a 	mov	r3,zero
     230:	00808074 	movhi	r2,513
     234:	10a40804 	addi	r2,r2,-28640
     238:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(ALT_TIMER_0_BASE, (alt_u16 )(50000000));
     23c:	00fc2014 	movui	r3,61568
     240:	00808074 	movhi	r2,513
     244:	10a40a04 	addi	r2,r2,-28632
     248:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(ALT_TIMER_0_BASE,
     24c:	00c0be84 	movi	r3,762
     250:	00808074 	movhi	r2,513
     254:	10a40b04 	addi	r2,r2,-28628
     258:	10c00035 	stwio	r3,0(r2)
			(alt_u16 )((50000000) >> 16));
	alt_ic_isr_register(ALT_TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,
     25c:	d8000015 	stw	zero,0(sp)
     260:	0009883a 	mov	r4,zero
     264:	01400084 	movi	r5,2
     268:	01800034 	movhi	r6,0
     26c:	3180a704 	addi	r6,r6,668
     270:	e1ffff17 	ldw	r7,-4(fp)
     274:	00007f00 	call	7f0 <alt_ic_isr_register>
			ALT_TIMER_0_IRQ, handle_timer_interrupts, ptr, 0x0); //Register Interrupt
	IOWR_ALTERA_AVALON_TIMER_CONTROL(ALT_TIMER_0_BASE,
     278:	00c001c4 	movi	r3,7
     27c:	00808074 	movhi	r2,513
     280:	10a40904 	addi	r2,r2,-28636
     284:	10c00035 	stwio	r3,0(r2)
			(1 << 2) | (1 << 1) | (1 << 0)); //Start Timer, IRQ enable, Continuous enable
}
     288:	e037883a 	mov	sp,fp
     28c:	dfc00117 	ldw	ra,4(sp)
     290:	df000017 	ldw	fp,0(sp)
     294:	dec00204 	addi	sp,sp,8
     298:	f800283a 	ret

0000029c <handle_timer_interrupts>:

static void handle_timer_interrupts(void* context) {
     29c:	defffd04 	addi	sp,sp,-12
     2a0:	dfc00215 	stw	ra,8(sp)
     2a4:	df000115 	stw	fp,4(sp)
     2a8:	df000104 	addi	fp,sp,4
     2ac:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_TIMER_SNAPL(ALT_TIMER_0_BASE, 0);
     2b0:	0007883a 	mov	r3,zero
     2b4:	00808074 	movhi	r2,513
     2b8:	10a40c04 	addi	r2,r2,-28624
     2bc:	10c00035 	stwio	r3,0(r2)
	response_time = IORD_ALTERA_AVALON_TIMER_SNAPL(ALT_TIMER_0_BASE) & 0xFFFF;
     2c0:	00808074 	movhi	r2,513
     2c4:	10a40c04 	addi	r2,r2,-28624
     2c8:	10800037 	ldwio	r2,0(r2)
     2cc:	10ffffcc 	andi	r3,r2,65535
     2d0:	00800074 	movhi	r2,1
     2d4:	10a28104 	addi	r2,r2,-30204
     2d8:	10c00015 	stw	r3,0(r2)
	response_time |= IORD_ALTERA_AVALON_TIMER_SNAPH(ALT_TIMER_0_BASE) << 16;
     2dc:	00808074 	movhi	r2,513
     2e0:	10a40d04 	addi	r2,r2,-28620
     2e4:	10800037 	ldwio	r2,0(r2)
     2e8:	1006943a 	slli	r3,r2,16
     2ec:	00800074 	movhi	r2,1
     2f0:	10a28104 	addi	r2,r2,-30204
     2f4:	10800017 	ldw	r2,0(r2)
     2f8:	1886b03a 	or	r3,r3,r2
     2fc:	00800074 	movhi	r2,1
     300:	10a28104 	addi	r2,r2,-30204
     304:	10c00015 	stw	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(ALT_TIMER_0_BASE, 0); //Clear TO(timeout) bit)
     308:	0007883a 	mov	r3,zero
     30c:	00808074 	movhi	r2,513
     310:	10a40804 	addi	r2,r2,-28640
     314:	10c00035 	stwio	r3,0(r2)
	//count++;
	//if(count < 10)
	//  return;
	//count = 0;
	leds_set(1 << 6);
     318:	01001004 	movi	r4,64
     31c:	00005a40 	call	5a4 <leds_set>
}
     320:	e037883a 	mov	sp,fp
     324:	dfc00117 	ldw	ra,4(sp)
     328:	df000017 	ldw	fp,0(sp)
     32c:	dec00204 	addi	sp,sp,8
     330:	f800283a 	ret

00000334 <handle_button_interrupts>:

volatile int edge_capture;

volatile int response_time;

static void handle_button_interrupts(void* context) {
     334:	defffc04 	addi	sp,sp,-16
     338:	dfc00315 	stw	ra,12(sp)
     33c:	df000215 	stw	fp,8(sp)
     340:	df000204 	addi	fp,sp,8
     344:	e13fff15 	stw	r4,-4(fp)
	/* Cast context to edge_capture's type. It is important that this
	 be declared volatile to avoid unwanted compiler optimization. */
	volatile int* edge_capture_ptr = (volatile int*) context;
     348:	e0bfff17 	ldw	r2,-4(fp)
     34c:	e0bffe15 	stw	r2,-8(fp)
	/*
	 * Read the edge capture register on the button PIO.
	 * Store value.
	 */
	*edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(INPUTS_BASE);
     350:	00808074 	movhi	r2,513
     354:	10a41304 	addi	r2,r2,-28596
     358:	10c00037 	ldwio	r3,0(r2)
     35c:	e0bffe17 	ldw	r2,-8(fp)
     360:	10c00015 	stw	r3,0(r2)
	/* Write to the edge capture register to reset it
	 * Using bit-clearing (write 1 to a particular bit to clear it */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(INPUTS_BASE, 0xF);
     364:	00c003c4 	movi	r3,15
     368:	00808074 	movhi	r2,513
     36c:	10a41304 	addi	r2,r2,-28596
     370:	10c00035 	stwio	r3,0(r2)

	/*
	 * Indicate interrupt
	 */
	leds_set(1 << 7);
     374:	013fe004 	movi	r4,-128
     378:	00005a40 	call	5a4 <leds_set>

	/* Read the PIO to delay ISR exit. This is done to prevent a
	 spurious interrupt in systems with high processor -> pio
	 latency and fast interrupts. */
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(INPUTS_BASE);
     37c:	00808074 	movhi	r2,513
     380:	10a41304 	addi	r2,r2,-28596
     384:	10800037 	ldwio	r2,0(r2)
}
     388:	e037883a 	mov	sp,fp
     38c:	dfc00117 	ldw	ra,4(sp)
     390:	df000017 	ldw	fp,0(sp)
     394:	dec00204 	addi	sp,sp,8
     398:	f800283a 	ret

0000039c <handle_timer_irq>:

static void handle_timer_irq(void* context) {
     39c:	defffd04 	addi	sp,sp,-12
     3a0:	dfc00215 	stw	ra,8(sp)
     3a4:	df000115 	stw	fp,4(sp)
     3a8:	df000104 	addi	fp,sp,4
     3ac:	e13fff15 	stw	r4,-4(fp)
	response_time = timer_read();
     3b0:	00007180 	call	718 <timer_read>
     3b4:	d0a6ab15 	stw	r2,-25940(gp)
	/* Indicate interrupt */
	leds_set(1 << 6);
     3b8:	01001004 	movi	r4,64
     3bc:	00005a40 	call	5a4 <leds_set>
	timer_clear_irq();
     3c0:	000079c0 	call	79c <timer_clear_irq>
}
     3c4:	e037883a 	mov	sp,fp
     3c8:	dfc00117 	ldw	ra,4(sp)
     3cc:	df000017 	ldw	fp,0(sp)
     3d0:	dec00204 	addi	sp,sp,8
     3d4:	f800283a 	ret

000003d8 <setup_irq_inputs>:

void setup_irq_inputs(void) {
     3d8:	defffc04 	addi	sp,sp,-16
     3dc:	dfc00315 	stw	ra,12(sp)
     3e0:	df000215 	stw	fp,8(sp)
     3e4:	df000204 	addi	fp,sp,8
	void* edge_capture_ptr = (void*) edge_capture;
     3e8:	d0a6aa17 	ldw	r2,-25944(gp)
     3ec:	e0bfff15 	stw	r2,-4(fp)
	/* Reset the edge capture register */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(INPUTS_BASE, 0);
     3f0:	0007883a 	mov	r3,zero
     3f4:	00808074 	movhi	r2,513
     3f8:	10a41304 	addi	r2,r2,-28596
     3fc:	10c00035 	stwio	r3,0(r2)
	/* Enable interrupt on KEY(1) which is on inputs(0) */
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(INPUTS_BASE, 1);
     400:	00c00044 	movi	r3,1
     404:	00808074 	movhi	r2,513
     408:	10a41204 	addi	r2,r2,-28600
     40c:	10c00035 	stwio	r3,0(r2)
	/* Register the ISR */
	alt_ic_isr_register(INPUTS_IRQ_INTERRUPT_CONTROLLER_ID,
     410:	d8000015 	stw	zero,0(sp)
     414:	0009883a 	mov	r4,zero
     418:	01400044 	movi	r5,1
     41c:	01800034 	movhi	r6,0
     420:	3180cd04 	addi	r6,r6,820
     424:	e1ffff17 	ldw	r7,-4(fp)
     428:	00007f00 	call	7f0 <alt_ic_isr_register>
	INPUTS_IRQ, handle_button_interrupts, edge_capture_ptr, 0);

	alt_ic_irq_enable(INPUTS_IRQ_INTERRUPT_CONTROLLER_ID, INPUTS_IRQ);
     42c:	0009883a 	mov	r4,zero
     430:	01400044 	movi	r5,1
     434:	00008400 	call	840 <alt_ic_irq_enable>
}
     438:	e037883a 	mov	sp,fp
     43c:	dfc00117 	ldw	ra,4(sp)
     440:	df000017 	ldw	fp,0(sp)
     444:	dec00204 	addi	sp,sp,8
     448:	f800283a 	ret

0000044c <setup_irq_timer>:

void setup_irq_timer(void) {
     44c:	defffd04 	addi	sp,sp,-12
     450:	dfc00215 	stw	ra,8(sp)
     454:	df000115 	stw	fp,4(sp)
     458:	df000104 	addi	fp,sp,4
	timer_enable_irq();
     45c:	00007700 	call	770 <timer_enable_irq>
	if (alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ,
     460:	d8000015 	stw	zero,0(sp)
     464:	013fffc4 	movi	r4,-1
     468:	017fffc4 	movi	r5,-1
     46c:	01800034 	movhi	r6,0
     470:	3180e704 	addi	r6,r6,924
     474:	000f883a 	mov	r7,zero
     478:	00007f00 	call	7f0 <alt_ic_isr_register>
     47c:	10000326 	beq	r2,zero,48c <setup_irq_timer+0x40>
			handle_timer_irq, (void*) 0, 0))
		alt_printf("Fail register");
     480:	01000034 	movhi	r4,0
     484:	21152804 	addi	r4,r4,21664
     488:	0000c140 	call	c14 <alt_printf>
	if (alt_ic_irq_enable(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ))
     48c:	013fffc4 	movi	r4,-1
     490:	017fffc4 	movi	r5,-1
     494:	00008400 	call	840 <alt_ic_irq_enable>
     498:	10000326 	beq	r2,zero,4a8 <setup_irq_timer+0x5c>
		alt_printf("Fail enable");
     49c:	01000034 	movhi	r4,0
     4a0:	21152c04 	addi	r4,r4,21680
     4a4:	0000c140 	call	c14 <alt_printf>
}
     4a8:	e037883a 	mov	sp,fp
     4ac:	dfc00117 	ldw	ra,4(sp)
     4b0:	df000017 	ldw	fp,0(sp)
     4b4:	dec00204 	addi	sp,sp,8
     4b8:	f800283a 	ret

000004bc <main>:

int main() {
     4bc:	defffd04 	addi	sp,sp,-12
     4c0:	dfc00215 	stw	ra,8(sp)
     4c4:	df000115 	stw	fp,4(sp)
     4c8:	df000104 	addi	fp,sp,4
	alt_printf("Hello from Nios II Timer!\n");
     4cc:	01000034 	movhi	r4,0
     4d0:	21152f04 	addi	r4,r4,21692
     4d4:	0000c140 	call	c14 <alt_printf>
	leds(1);
     4d8:	01000044 	movi	r4,1
     4dc:	000065c0 	call	65c <leds>

	setup_irq_inputs();
     4e0:	00003d80 	call	3d8 <setup_irq_inputs>
//	setup_irq_timer();

	init_timer_interrupt();
     4e4:	00002080 	call	208 <init_timer_interrupt>
	timer_init(500000000);
	timer_reset();
	timer_start();
*/
	while (1) {
		int i = 0;
     4e8:	e03fff15 	stw	zero,-4(fp)
		for (i = 1; i < 6; ++i) {
     4ec:	00800044 	movi	r2,1
     4f0:	e0bfff15 	stw	r2,-4(fp)
     4f4:	00000d06 	br	52c <main+0x70>
			leds(1 << i);
     4f8:	00c00044 	movi	r3,1
     4fc:	e0bfff17 	ldw	r2,-4(fp)
     500:	1884983a 	sll	r2,r3,r2
     504:	10803fcc 	andi	r2,r2,255
     508:	1080201c 	xori	r2,r2,128
     50c:	10bfe004 	addi	r2,r2,-128
     510:	1009883a 	mov	r4,r2
     514:	000065c0 	call	65c <leds>
			usleep(500000 / 8);
     518:	013d0914 	movui	r4,62500
     51c:	0000e800 	call	e80 <usleep>
	timer_reset();
	timer_start();
*/
	while (1) {
		int i = 0;
		for (i = 1; i < 6; ++i) {
     520:	e0bfff17 	ldw	r2,-4(fp)
     524:	10800044 	addi	r2,r2,1
     528:	e0bfff15 	stw	r2,-4(fp)
     52c:	e0bfff17 	ldw	r2,-4(fp)
     530:	10800190 	cmplti	r2,r2,6
     534:	103ff01e 	bne	r2,zero,4f8 <__alt_mem_onchip_memory2_0+0xfdffc4f8>
			leds(1 << i);
			usleep(500000 / 8);
		}

		alt_printf("response time = %x\n", 50000000-response_time);
     538:	d0a6ab17 	ldw	r2,-25940(gp)
     53c:	00c0bef4 	movhi	r3,763
     540:	18fc2004 	addi	r3,r3,-3968
     544:	1885c83a 	sub	r2,r3,r2
     548:	01000034 	movhi	r4,0
     54c:	21153604 	addi	r4,r4,21720
     550:	100b883a 	mov	r5,r2
     554:	0000c140 	call	c14 <alt_printf>

		for (i = 4; i >= 0; --i) {
     558:	00800104 	movi	r2,4
     55c:	e0bfff15 	stw	r2,-4(fp)
     560:	00000d06 	br	598 <main+0xdc>
			leds(1 << i);
     564:	00c00044 	movi	r3,1
     568:	e0bfff17 	ldw	r2,-4(fp)
     56c:	1884983a 	sll	r2,r3,r2
     570:	10803fcc 	andi	r2,r2,255
     574:	1080201c 	xori	r2,r2,128
     578:	10bfe004 	addi	r2,r2,-128
     57c:	1009883a 	mov	r4,r2
     580:	000065c0 	call	65c <leds>
			usleep(500000 / 8);
     584:	013d0914 	movui	r4,62500
     588:	0000e800 	call	e80 <usleep>
			usleep(500000 / 8);
		}

		alt_printf("response time = %x\n", 50000000-response_time);

		for (i = 4; i >= 0; --i) {
     58c:	e0bfff17 	ldw	r2,-4(fp)
     590:	10bfffc4 	addi	r2,r2,-1
     594:	e0bfff15 	stw	r2,-4(fp)
     598:	e0bfff17 	ldw	r2,-4(fp)
     59c:	103ff10e 	bge	r2,zero,564 <__alt_mem_onchip_memory2_0+0xfdffc564>
			leds(1 << i);
			usleep(500000 / 8);
		}
	}
     5a0:	003fd106 	br	4e8 <__alt_mem_onchip_memory2_0+0xfdffc4e8>

000005a4 <leds_set>:

#include "leds.h"
#include "io.h"
#include "system.h"

void leds_set(char mask) {
     5a4:	defffd04 	addi	sp,sp,-12
     5a8:	df000215 	stw	fp,8(sp)
     5ac:	df000204 	addi	fp,sp,8
     5b0:	2005883a 	mov	r2,r4
     5b4:	e0bfff05 	stb	r2,-4(fp)
	char before = IORD_8DIRECT(LEDS_BASE, 0);
     5b8:	00808074 	movhi	r2,513
     5bc:	10a41404 	addi	r2,r2,-28592
     5c0:	10800023 	ldbuio	r2,0(r2)
     5c4:	10803fcc 	andi	r2,r2,255
     5c8:	e0bffe05 	stb	r2,-8(fp)
	char after = before | mask;
     5cc:	e0fffe03 	ldbu	r3,-8(fp)
     5d0:	e0bfff03 	ldbu	r2,-4(fp)
     5d4:	1884b03a 	or	r2,r3,r2
     5d8:	e0bffe45 	stb	r2,-7(fp)
	IOWR_8DIRECT(LEDS_BASE, 0, after);
     5dc:	e0fffe47 	ldb	r3,-7(fp)
     5e0:	00808074 	movhi	r2,513
     5e4:	10a41404 	addi	r2,r2,-28592
     5e8:	10c00025 	stbio	r3,0(r2)
}
     5ec:	e037883a 	mov	sp,fp
     5f0:	df000017 	ldw	fp,0(sp)
     5f4:	dec00104 	addi	sp,sp,4
     5f8:	f800283a 	ret

000005fc <leds_clr>:

void leds_clr(char mask) {
     5fc:	defffd04 	addi	sp,sp,-12
     600:	df000215 	stw	fp,8(sp)
     604:	df000204 	addi	fp,sp,8
     608:	2005883a 	mov	r2,r4
     60c:	e0bfff05 	stb	r2,-4(fp)
	char before = IORD_8DIRECT(LEDS_BASE, 0);
     610:	00808074 	movhi	r2,513
     614:	10a41404 	addi	r2,r2,-28592
     618:	10800023 	ldbuio	r2,0(r2)
     61c:	10803fcc 	andi	r2,r2,255
     620:	e0bffe05 	stb	r2,-8(fp)
	char after = before & ~mask;
     624:	e0bfff03 	ldbu	r2,-4(fp)
     628:	0084303a 	nor	r2,zero,r2
     62c:	1007883a 	mov	r3,r2
     630:	e0bffe03 	ldbu	r2,-8(fp)
     634:	1884703a 	and	r2,r3,r2
     638:	e0bffe45 	stb	r2,-7(fp)
	IOWR_8DIRECT(LEDS_BASE, 0, after);
     63c:	e0fffe47 	ldb	r3,-7(fp)
     640:	00808074 	movhi	r2,513
     644:	10a41404 	addi	r2,r2,-28592
     648:	10c00025 	stbio	r3,0(r2)
}
     64c:	e037883a 	mov	sp,fp
     650:	df000017 	ldw	fp,0(sp)
     654:	dec00104 	addi	sp,sp,4
     658:	f800283a 	ret

0000065c <leds>:

void leds(char value) {
     65c:	defffe04 	addi	sp,sp,-8
     660:	df000115 	stw	fp,4(sp)
     664:	df000104 	addi	fp,sp,4
     668:	2005883a 	mov	r2,r4
     66c:	e0bfff05 	stb	r2,-4(fp)
	IOWR_8DIRECT(LEDS_BASE, 0, value);
     670:	e0ffff07 	ldb	r3,-4(fp)
     674:	00808074 	movhi	r2,513
     678:	10a41404 	addi	r2,r2,-28592
     67c:	10c00025 	stbio	r3,0(r2)
}
     680:	e037883a 	mov	sp,fp
     684:	df000017 	ldw	fp,0(sp)
     688:	dec00104 	addi	sp,sp,4
     68c:	f800283a 	ret

00000690 <timer_init>:
#include "timer.h"
#include "system.h"
#include "io.h"

// Setup timer with limit and interrupts enabled
void timer_init(unsigned int limit) {
     690:	defffe04 	addi	sp,sp,-8
     694:	df000115 	stw	fp,4(sp)
     698:	df000104 	addi	fp,sp,4
     69c:	e13fff15 	stw	r4,-4(fp)
	// Write limit value
	IOWR_32DIRECT(TIMER_0_BASE, 6*4, limit);
     6a0:	e0ffff17 	ldw	r3,-4(fp)
     6a4:	00808074 	movhi	r2,513
     6a8:	10a40604 	addi	r2,r2,-28648
     6ac:	10c00035 	stwio	r3,0(r2)
}
     6b0:	e037883a 	mov	sp,fp
     6b4:	df000017 	ldw	fp,0(sp)
     6b8:	dec00104 	addi	sp,sp,4
     6bc:	f800283a 	ret

000006c0 <timer_start>:

void timer_start(void) {
     6c0:	deffff04 	addi	sp,sp,-4
     6c4:	df000015 	stw	fp,0(sp)
     6c8:	d839883a 	mov	fp,sp
	IOWR_32DIRECT(TIMER_0_BASE, 2*4, 1);
     6cc:	00c00044 	movi	r3,1
     6d0:	00808074 	movhi	r2,513
     6d4:	10a40204 	addi	r2,r2,-28664
     6d8:	10c00035 	stwio	r3,0(r2)
}
     6dc:	e037883a 	mov	sp,fp
     6e0:	df000017 	ldw	fp,0(sp)
     6e4:	dec00104 	addi	sp,sp,4
     6e8:	f800283a 	ret

000006ec <timer_stop>:

void timer_stop(void) {
     6ec:	deffff04 	addi	sp,sp,-4
     6f0:	df000015 	stw	fp,0(sp)
     6f4:	d839883a 	mov	fp,sp
	IOWR_32DIRECT(TIMER_0_BASE, 3*4, 1);
     6f8:	00c00044 	movi	r3,1
     6fc:	00808074 	movhi	r2,513
     700:	10a40304 	addi	r2,r2,-28660
     704:	10c00035 	stwio	r3,0(r2)
}
     708:	e037883a 	mov	sp,fp
     70c:	df000017 	ldw	fp,0(sp)
     710:	dec00104 	addi	sp,sp,4
     714:	f800283a 	ret

00000718 <timer_read>:

unsigned int timer_read(void)
{
     718:	deffff04 	addi	sp,sp,-4
     71c:	df000015 	stw	fp,0(sp)
     720:	d839883a 	mov	fp,sp
	return IORD_32DIRECT(TIMER_0_BASE, 0);
     724:	00808074 	movhi	r2,513
     728:	10a40004 	addi	r2,r2,-28672
     72c:	10800037 	ldwio	r2,0(r2)
}
     730:	e037883a 	mov	sp,fp
     734:	df000017 	ldw	fp,0(sp)
     738:	dec00104 	addi	sp,sp,4
     73c:	f800283a 	ret

00000740 <timer_reset>:

void timer_reset(void)
{
     740:	deffff04 	addi	sp,sp,-4
     744:	df000015 	stw	fp,0(sp)
     748:	d839883a 	mov	fp,sp
	return IOWR_32DIRECT(TIMER_0_BASE, 1*4, 1);
     74c:	00c00044 	movi	r3,1
     750:	00808074 	movhi	r2,513
     754:	10a40104 	addi	r2,r2,-28668
     758:	10c00035 	stwio	r3,0(r2)
     75c:	0001883a 	nop
}
     760:	e037883a 	mov	sp,fp
     764:	df000017 	ldw	fp,0(sp)
     768:	dec00104 	addi	sp,sp,4
     76c:	f800283a 	ret

00000770 <timer_enable_irq>:

void timer_enable_irq(void)
{
     770:	deffff04 	addi	sp,sp,-4
     774:	df000015 	stw	fp,0(sp)
     778:	d839883a 	mov	fp,sp
	IOWR_32DIRECT(TIMER_0_BASE, 4*4, 1);
     77c:	00c00044 	movi	r3,1
     780:	00808074 	movhi	r2,513
     784:	10a40404 	addi	r2,r2,-28656
     788:	10c00035 	stwio	r3,0(r2)
}
     78c:	e037883a 	mov	sp,fp
     790:	df000017 	ldw	fp,0(sp)
     794:	dec00104 	addi	sp,sp,4
     798:	f800283a 	ret

0000079c <timer_clear_irq>:

void timer_clear_irq(void)
{
     79c:	deffff04 	addi	sp,sp,-4
     7a0:	df000015 	stw	fp,0(sp)
     7a4:	d839883a 	mov	fp,sp
	IOWR_32DIRECT(TIMER_0_BASE, 5*4, 1);
     7a8:	00c00044 	movi	r3,1
     7ac:	00808074 	movhi	r2,513
     7b0:	10a40504 	addi	r2,r2,-28652
     7b4:	10c00035 	stwio	r3,0(r2)
}
     7b8:	e037883a 	mov	sp,fp
     7bc:	df000017 	ldw	fp,0(sp)
     7c0:	dec00104 	addi	sp,sp,4
     7c4:	f800283a 	ret

000007c8 <timer_read_irq>:

int timer_read_irq(void)
{
     7c8:	deffff04 	addi	sp,sp,-4
     7cc:	df000015 	stw	fp,0(sp)
     7d0:	d839883a 	mov	fp,sp
	return IORD_32DIRECT(TIMER_0_BASE, 4*4);
     7d4:	00808074 	movhi	r2,513
     7d8:	10a40404 	addi	r2,r2,-28656
     7dc:	10800037 	ldwio	r2,0(r2)
}
     7e0:	e037883a 	mov	sp,fp
     7e4:	df000017 	ldw	fp,0(sp)
     7e8:	dec00104 	addi	sp,sp,4
     7ec:	f800283a 	ret

000007f0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
     7f0:	defff904 	addi	sp,sp,-28
     7f4:	dfc00615 	stw	ra,24(sp)
     7f8:	df000515 	stw	fp,20(sp)
     7fc:	df000504 	addi	fp,sp,20
     800:	e13ffc15 	stw	r4,-16(fp)
     804:	e17ffd15 	stw	r5,-12(fp)
     808:	e1bffe15 	stw	r6,-8(fp)
     80c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
     810:	e0800217 	ldw	r2,8(fp)
     814:	d8800015 	stw	r2,0(sp)
     818:	e13ffc17 	ldw	r4,-16(fp)
     81c:	e17ffd17 	ldw	r5,-12(fp)
     820:	e1bffe17 	ldw	r6,-8(fp)
     824:	e1ffff17 	ldw	r7,-4(fp)
     828:	00009c80 	call	9c8 <alt_iic_isr_register>
}  
     82c:	e037883a 	mov	sp,fp
     830:	dfc00117 	ldw	ra,4(sp)
     834:	df000017 	ldw	fp,0(sp)
     838:	dec00204 	addi	sp,sp,8
     83c:	f800283a 	ret

00000840 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
     840:	defff904 	addi	sp,sp,-28
     844:	df000615 	stw	fp,24(sp)
     848:	df000604 	addi	fp,sp,24
     84c:	e13ffe15 	stw	r4,-8(fp)
     850:	e17fff15 	stw	r5,-4(fp)
     854:	e0bfff17 	ldw	r2,-4(fp)
     858:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     85c:	0005303a 	rdctl	r2,status
     860:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     864:	e0fffb17 	ldw	r3,-20(fp)
     868:	00bfff84 	movi	r2,-2
     86c:	1884703a 	and	r2,r3,r2
     870:	1001703a 	wrctl	status,r2
  
  return context;
     874:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
     878:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
     87c:	e0bffa17 	ldw	r2,-24(fp)
     880:	00c00044 	movi	r3,1
     884:	1884983a 	sll	r2,r3,r2
     888:	1007883a 	mov	r3,r2
     88c:	00800074 	movhi	r2,1
     890:	10a28204 	addi	r2,r2,-30200
     894:	10800017 	ldw	r2,0(r2)
     898:	1886b03a 	or	r3,r3,r2
     89c:	00800074 	movhi	r2,1
     8a0:	10a28204 	addi	r2,r2,-30200
     8a4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     8a8:	00800074 	movhi	r2,1
     8ac:	10a28204 	addi	r2,r2,-30200
     8b0:	10800017 	ldw	r2,0(r2)
     8b4:	100170fa 	wrctl	ienable,r2
     8b8:	e0bffc17 	ldw	r2,-16(fp)
     8bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     8c0:	e0bffd17 	ldw	r2,-12(fp)
     8c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
     8c8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
     8cc:	e037883a 	mov	sp,fp
     8d0:	df000017 	ldw	fp,0(sp)
     8d4:	dec00104 	addi	sp,sp,4
     8d8:	f800283a 	ret

000008dc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
     8dc:	defff904 	addi	sp,sp,-28
     8e0:	df000615 	stw	fp,24(sp)
     8e4:	df000604 	addi	fp,sp,24
     8e8:	e13ffe15 	stw	r4,-8(fp)
     8ec:	e17fff15 	stw	r5,-4(fp)
     8f0:	e0bfff17 	ldw	r2,-4(fp)
     8f4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     8f8:	0005303a 	rdctl	r2,status
     8fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     900:	e0fffb17 	ldw	r3,-20(fp)
     904:	00bfff84 	movi	r2,-2
     908:	1884703a 	and	r2,r3,r2
     90c:	1001703a 	wrctl	status,r2
  
  return context;
     910:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
     914:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
     918:	e0bffa17 	ldw	r2,-24(fp)
     91c:	00c00044 	movi	r3,1
     920:	1884983a 	sll	r2,r3,r2
     924:	0084303a 	nor	r2,zero,r2
     928:	1007883a 	mov	r3,r2
     92c:	00800074 	movhi	r2,1
     930:	10a28204 	addi	r2,r2,-30200
     934:	10800017 	ldw	r2,0(r2)
     938:	1886703a 	and	r3,r3,r2
     93c:	00800074 	movhi	r2,1
     940:	10a28204 	addi	r2,r2,-30200
     944:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     948:	00800074 	movhi	r2,1
     94c:	10a28204 	addi	r2,r2,-30200
     950:	10800017 	ldw	r2,0(r2)
     954:	100170fa 	wrctl	ienable,r2
     958:	e0bffc17 	ldw	r2,-16(fp)
     95c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     960:	e0bffd17 	ldw	r2,-12(fp)
     964:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
     968:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
     96c:	e037883a 	mov	sp,fp
     970:	df000017 	ldw	fp,0(sp)
     974:	dec00104 	addi	sp,sp,4
     978:	f800283a 	ret

0000097c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
     97c:	defffc04 	addi	sp,sp,-16
     980:	df000315 	stw	fp,12(sp)
     984:	df000304 	addi	fp,sp,12
     988:	e13ffe15 	stw	r4,-8(fp)
     98c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
     990:	000530fa 	rdctl	r2,ienable
     994:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
     998:	e0bfff17 	ldw	r2,-4(fp)
     99c:	00c00044 	movi	r3,1
     9a0:	1884983a 	sll	r2,r3,r2
     9a4:	1007883a 	mov	r3,r2
     9a8:	e0bffd17 	ldw	r2,-12(fp)
     9ac:	1884703a 	and	r2,r3,r2
     9b0:	1004c03a 	cmpne	r2,r2,zero
     9b4:	10803fcc 	andi	r2,r2,255
}
     9b8:	e037883a 	mov	sp,fp
     9bc:	df000017 	ldw	fp,0(sp)
     9c0:	dec00104 	addi	sp,sp,4
     9c4:	f800283a 	ret

000009c8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
     9c8:	defff504 	addi	sp,sp,-44
     9cc:	dfc00a15 	stw	ra,40(sp)
     9d0:	df000915 	stw	fp,36(sp)
     9d4:	df000904 	addi	fp,sp,36
     9d8:	e13ffc15 	stw	r4,-16(fp)
     9dc:	e17ffd15 	stw	r5,-12(fp)
     9e0:	e1bffe15 	stw	r6,-8(fp)
     9e4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
     9e8:	00bffa84 	movi	r2,-22
     9ec:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
     9f0:	e0bffd17 	ldw	r2,-12(fp)
     9f4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
     9f8:	e0bff817 	ldw	r2,-32(fp)
     9fc:	10800808 	cmpgei	r2,r2,32
     a00:	1000271e 	bne	r2,zero,aa0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     a04:	0005303a 	rdctl	r2,status
     a08:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     a0c:	e0fffa17 	ldw	r3,-24(fp)
     a10:	00bfff84 	movi	r2,-2
     a14:	1884703a 	and	r2,r3,r2
     a18:	1001703a 	wrctl	status,r2
  
  return context;
     a1c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
     a20:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
     a24:	00c00074 	movhi	r3,1
     a28:	18e29604 	addi	r3,r3,-30120
     a2c:	e0bff817 	ldw	r2,-32(fp)
     a30:	100490fa 	slli	r2,r2,3
     a34:	1885883a 	add	r2,r3,r2
     a38:	e0fffe17 	ldw	r3,-8(fp)
     a3c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
     a40:	00c00074 	movhi	r3,1
     a44:	18e29604 	addi	r3,r3,-30120
     a48:	e0bff817 	ldw	r2,-32(fp)
     a4c:	100490fa 	slli	r2,r2,3
     a50:	1885883a 	add	r2,r3,r2
     a54:	10800104 	addi	r2,r2,4
     a58:	e0ffff17 	ldw	r3,-4(fp)
     a5c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
     a60:	e0bffe17 	ldw	r2,-8(fp)
     a64:	10000526 	beq	r2,zero,a7c <alt_iic_isr_register+0xb4>
     a68:	e0bff817 	ldw	r2,-32(fp)
     a6c:	e13ffc17 	ldw	r4,-16(fp)
     a70:	100b883a 	mov	r5,r2
     a74:	00008400 	call	840 <alt_ic_irq_enable>
     a78:	00000406 	br	a8c <alt_iic_isr_register+0xc4>
     a7c:	e0bff817 	ldw	r2,-32(fp)
     a80:	e13ffc17 	ldw	r4,-16(fp)
     a84:	100b883a 	mov	r5,r2
     a88:	00008dc0 	call	8dc <alt_ic_irq_disable>
     a8c:	e0bff715 	stw	r2,-36(fp)
     a90:	e0bff917 	ldw	r2,-28(fp)
     a94:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     a98:	e0bffb17 	ldw	r2,-20(fp)
     a9c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
     aa0:	e0bff717 	ldw	r2,-36(fp)
}
     aa4:	e037883a 	mov	sp,fp
     aa8:	dfc00117 	ldw	ra,4(sp)
     aac:	df000017 	ldw	fp,0(sp)
     ab0:	dec00204 	addi	sp,sp,8
     ab4:	f800283a 	ret

00000ab8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     ab8:	defffc04 	addi	sp,sp,-16
     abc:	df000315 	stw	fp,12(sp)
     ac0:	df000304 	addi	fp,sp,12
     ac4:	e13ffd15 	stw	r4,-12(fp)
     ac8:	e17ffe15 	stw	r5,-8(fp)
     acc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     ad0:	e0fffe17 	ldw	r3,-8(fp)
     ad4:	e0bffd17 	ldw	r2,-12(fp)
     ad8:	18800c26 	beq	r3,r2,b0c <alt_load_section+0x54>
  {
    while( to != end )
     adc:	00000806 	br	b00 <alt_load_section+0x48>
    {
      *to++ = *from++;
     ae0:	e0bffe17 	ldw	r2,-8(fp)
     ae4:	10c00104 	addi	r3,r2,4
     ae8:	e0fffe15 	stw	r3,-8(fp)
     aec:	e0fffd17 	ldw	r3,-12(fp)
     af0:	19000104 	addi	r4,r3,4
     af4:	e13ffd15 	stw	r4,-12(fp)
     af8:	18c00017 	ldw	r3,0(r3)
     afc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     b00:	e0fffe17 	ldw	r3,-8(fp)
     b04:	e0bfff17 	ldw	r2,-4(fp)
     b08:	18bff51e 	bne	r3,r2,ae0 <__alt_mem_onchip_memory2_0+0xfdffcae0>
    {
      *to++ = *from++;
    }
  }
}
     b0c:	e037883a 	mov	sp,fp
     b10:	df000017 	ldw	fp,0(sp)
     b14:	dec00104 	addi	sp,sp,4
     b18:	f800283a 	ret

00000b1c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     b1c:	defffe04 	addi	sp,sp,-8
     b20:	dfc00115 	stw	ra,4(sp)
     b24:	df000015 	stw	fp,0(sp)
     b28:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     b2c:	01000034 	movhi	r4,0
     b30:	211be404 	addi	r4,r4,28560
     b34:	01400034 	movhi	r5,0
     b38:	29554904 	addi	r5,r5,21796
     b3c:	01800034 	movhi	r6,0
     b40:	319be404 	addi	r6,r6,28560
     b44:	0000ab80 	call	ab8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     b48:	01000034 	movhi	r4,0
     b4c:	21000804 	addi	r4,r4,32
     b50:	01400034 	movhi	r5,0
     b54:	29400804 	addi	r5,r5,32
     b58:	01800034 	movhi	r6,0
     b5c:	31806f04 	addi	r6,r6,444
     b60:	0000ab80 	call	ab8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     b64:	01000034 	movhi	r4,0
     b68:	21152804 	addi	r4,r4,21664
     b6c:	01400034 	movhi	r5,0
     b70:	29552804 	addi	r5,r5,21664
     b74:	01800034 	movhi	r6,0
     b78:	31954904 	addi	r6,r6,21796
     b7c:	0000ab80 	call	ab8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     b80:	0001d440 	call	1d44 <alt_dcache_flush_all>
  alt_icache_flush_all();
     b84:	0001f5c0 	call	1f5c <alt_icache_flush_all>
}
     b88:	e037883a 	mov	sp,fp
     b8c:	dfc00117 	ldw	ra,4(sp)
     b90:	df000017 	ldw	fp,0(sp)
     b94:	dec00204 	addi	sp,sp,8
     b98:	f800283a 	ret

00000b9c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     b9c:	defffd04 	addi	sp,sp,-12
     ba0:	dfc00215 	stw	ra,8(sp)
     ba4:	df000115 	stw	fp,4(sp)
     ba8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     bac:	0009883a 	mov	r4,zero
     bb0:	0000ee80 	call	ee8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     bb4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     bb8:	0000f1c0 	call	f1c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     bbc:	01000034 	movhi	r4,0
     bc0:	21153b04 	addi	r4,r4,21740
     bc4:	01400034 	movhi	r5,0
     bc8:	29553b04 	addi	r5,r5,21740
     bcc:	01800034 	movhi	r6,0
     bd0:	31953b04 	addi	r6,r6,21740
     bd4:	000204c0 	call	204c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     bd8:	0001ea40 	call	1ea4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     bdc:	01000034 	movhi	r4,0
     be0:	2107c004 	addi	r4,r4,7936
     be4:	00028340 	call	2834 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     be8:	d126ad17 	ldw	r4,-25932(gp)
     bec:	d0e6ae17 	ldw	r3,-25928(gp)
     bf0:	d0a6af17 	ldw	r2,-25924(gp)
     bf4:	180b883a 	mov	r5,r3
     bf8:	100d883a 	mov	r6,r2
     bfc:	00004bc0 	call	4bc <main>
     c00:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     c04:	01000044 	movi	r4,1
     c08:	0001c7c0 	call	1c7c <close>
  exit (result);
     c0c:	e13fff17 	ldw	r4,-4(fp)
     c10:	00028480 	call	2848 <exit>

00000c14 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
     c14:	defff204 	addi	sp,sp,-56
     c18:	dfc00a15 	stw	ra,40(sp)
     c1c:	df000915 	stw	fp,36(sp)
     c20:	df000904 	addi	fp,sp,36
     c24:	e1400215 	stw	r5,8(fp)
     c28:	e1800315 	stw	r6,12(fp)
     c2c:	e1c00415 	stw	r7,16(fp)
     c30:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
     c34:	e0800204 	addi	r2,fp,8
     c38:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
     c3c:	e0bfff17 	ldw	r2,-4(fp)
     c40:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
     c44:	00007106 	br	e0c <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
     c48:	e0bff807 	ldb	r2,-32(fp)
     c4c:	10800960 	cmpeqi	r2,r2,37
     c50:	1000041e 	bne	r2,zero,c64 <alt_printf+0x50>
        {
            alt_putchar(c);
     c54:	e0bff807 	ldb	r2,-32(fp)
     c58:	1009883a 	mov	r4,r2
     c5c:	0000e3c0 	call	e3c <alt_putchar>
     c60:	00006a06 	br	e0c <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
     c64:	e0bff717 	ldw	r2,-36(fp)
     c68:	10c00044 	addi	r3,r2,1
     c6c:	e0fff715 	stw	r3,-36(fp)
     c70:	10800003 	ldbu	r2,0(r2)
     c74:	e0bff805 	stb	r2,-32(fp)
     c78:	e0bff807 	ldb	r2,-32(fp)
     c7c:	10006226 	beq	r2,zero,e08 <alt_printf+0x1f4>
            {
                if (c == '%')
     c80:	e0bff807 	ldb	r2,-32(fp)
     c84:	10800958 	cmpnei	r2,r2,37
     c88:	1000041e 	bne	r2,zero,c9c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
     c8c:	e0bff807 	ldb	r2,-32(fp)
     c90:	1009883a 	mov	r4,r2
     c94:	0000e3c0 	call	e3c <alt_putchar>
     c98:	00005c06 	br	e0c <alt_printf+0x1f8>
                } 
                else if (c == 'c')
     c9c:	e0bff807 	ldb	r2,-32(fp)
     ca0:	108018d8 	cmpnei	r2,r2,99
     ca4:	1000081e 	bne	r2,zero,cc8 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
     ca8:	e0bffe17 	ldw	r2,-8(fp)
     cac:	10c00104 	addi	r3,r2,4
     cb0:	e0fffe15 	stw	r3,-8(fp)
     cb4:	10800017 	ldw	r2,0(r2)
     cb8:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
     cbc:	e13ffb17 	ldw	r4,-20(fp)
     cc0:	0000e3c0 	call	e3c <alt_putchar>
     cc4:	00005106 	br	e0c <alt_printf+0x1f8>
                }
                else if (c == 'x')
     cc8:	e0bff807 	ldb	r2,-32(fp)
     ccc:	10801e18 	cmpnei	r2,r2,120
     cd0:	1000341e 	bne	r2,zero,da4 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
     cd4:	e0bffe17 	ldw	r2,-8(fp)
     cd8:	10c00104 	addi	r3,r2,4
     cdc:	e0fffe15 	stw	r3,-8(fp)
     ce0:	10800017 	ldw	r2,0(r2)
     ce4:	e0bffc15 	stw	r2,-16(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
     ce8:	e0bffc17 	ldw	r2,-16(fp)
     cec:	1000031e 	bne	r2,zero,cfc <alt_printf+0xe8>
                    {
                        alt_putchar('0');
     cf0:	01000c04 	movi	r4,48
     cf4:	0000e3c0 	call	e3c <alt_putchar>
                        continue;
     cf8:	00004406 	br	e0c <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
     cfc:	00800704 	movi	r2,28
     d00:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
     d04:	00000306 	br	d14 <alt_printf+0x100>
                        digit_shift -= 4;
     d08:	e0bff917 	ldw	r2,-28(fp)
     d0c:	10bfff04 	addi	r2,r2,-4
     d10:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     d14:	00c003c4 	movi	r3,15
     d18:	e0bff917 	ldw	r2,-28(fp)
     d1c:	1884983a 	sll	r2,r3,r2
     d20:	1007883a 	mov	r3,r2
     d24:	e0bffc17 	ldw	r2,-16(fp)
     d28:	1884703a 	and	r2,r3,r2
     d2c:	103ff626 	beq	r2,zero,d08 <__alt_mem_onchip_memory2_0+0xfdffcd08>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     d30:	00001906 	br	d98 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
     d34:	00c003c4 	movi	r3,15
     d38:	e0bff917 	ldw	r2,-28(fp)
     d3c:	1884983a 	sll	r2,r3,r2
     d40:	1007883a 	mov	r3,r2
     d44:	e0bffc17 	ldw	r2,-16(fp)
     d48:	1886703a 	and	r3,r3,r2
     d4c:	e0bff917 	ldw	r2,-28(fp)
     d50:	1884d83a 	srl	r2,r3,r2
     d54:	e0bffd15 	stw	r2,-12(fp)
                        if (digit <= 9)
     d58:	e0bffd17 	ldw	r2,-12(fp)
     d5c:	108002a8 	cmpgeui	r2,r2,10
     d60:	1000041e 	bne	r2,zero,d74 <alt_printf+0x160>
                            c = '0' + digit;
     d64:	e0bffd17 	ldw	r2,-12(fp)
     d68:	10800c04 	addi	r2,r2,48
     d6c:	e0bff805 	stb	r2,-32(fp)
     d70:	00000306 	br	d80 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
     d74:	e0bffd17 	ldw	r2,-12(fp)
     d78:	108015c4 	addi	r2,r2,87
     d7c:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
     d80:	e0bff807 	ldb	r2,-32(fp)
     d84:	1009883a 	mov	r4,r2
     d88:	0000e3c0 	call	e3c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     d8c:	e0bff917 	ldw	r2,-28(fp)
     d90:	10bfff04 	addi	r2,r2,-4
     d94:	e0bff915 	stw	r2,-28(fp)
     d98:	e0bff917 	ldw	r2,-28(fp)
     d9c:	103fe50e 	bge	r2,zero,d34 <__alt_mem_onchip_memory2_0+0xfdffcd34>
     da0:	00001a06 	br	e0c <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
     da4:	e0bff807 	ldb	r2,-32(fp)
     da8:	10801cd8 	cmpnei	r2,r2,115
     dac:	1000151e 	bne	r2,zero,e04 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
     db0:	e0bffe17 	ldw	r2,-8(fp)
     db4:	10c00104 	addi	r3,r2,4
     db8:	e0fffe15 	stw	r3,-8(fp)
     dbc:	10800017 	ldw	r2,0(r2)
     dc0:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
     dc4:	00000906 	br	dec <alt_printf+0x1d8>
                      alt_putchar(*s++);
     dc8:	e0bffa17 	ldw	r2,-24(fp)
     dcc:	10c00044 	addi	r3,r2,1
     dd0:	e0fffa15 	stw	r3,-24(fp)
     dd4:	10800003 	ldbu	r2,0(r2)
     dd8:	10803fcc 	andi	r2,r2,255
     ddc:	1080201c 	xori	r2,r2,128
     de0:	10bfe004 	addi	r2,r2,-128
     de4:	1009883a 	mov	r4,r2
     de8:	0000e3c0 	call	e3c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
     dec:	e0bffa17 	ldw	r2,-24(fp)
     df0:	10800003 	ldbu	r2,0(r2)
     df4:	10803fcc 	andi	r2,r2,255
     df8:	1080201c 	xori	r2,r2,128
     dfc:	10bfe004 	addi	r2,r2,-128
     e00:	103ff11e 	bne	r2,zero,dc8 <__alt_mem_onchip_memory2_0+0xfdffcdc8>
     e04:	00000106 	br	e0c <alt_printf+0x1f8>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
     e08:	00000706 	br	e28 <alt_printf+0x214>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     e0c:	e0bff717 	ldw	r2,-36(fp)
     e10:	10c00044 	addi	r3,r2,1
     e14:	e0fff715 	stw	r3,-36(fp)
     e18:	10800003 	ldbu	r2,0(r2)
     e1c:	e0bff805 	stb	r2,-32(fp)
     e20:	e0bff807 	ldb	r2,-32(fp)
     e24:	103f881e 	bne	r2,zero,c48 <__alt_mem_onchip_memory2_0+0xfdffcc48>
            {
                break;
            }
        }
    }
}
     e28:	e037883a 	mov	sp,fp
     e2c:	dfc00117 	ldw	ra,4(sp)
     e30:	df000017 	ldw	fp,0(sp)
     e34:	dec00504 	addi	sp,sp,20
     e38:	f800283a 	ret

00000e3c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
     e3c:	defffd04 	addi	sp,sp,-12
     e40:	dfc00215 	stw	ra,8(sp)
     e44:	df000115 	stw	fp,4(sp)
     e48:	df000104 	addi	fp,sp,4
     e4c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
     e50:	00800034 	movhi	r2,0
     e54:	109be004 	addi	r2,r2,28544
     e58:	10800017 	ldw	r2,0(r2)
     e5c:	10800217 	ldw	r2,8(r2)
     e60:	e13fff17 	ldw	r4,-4(fp)
     e64:	100b883a 	mov	r5,r2
     e68:	0002aa80 	call	2aa8 <putc>
#endif
}
     e6c:	e037883a 	mov	sp,fp
     e70:	dfc00117 	ldw	ra,4(sp)
     e74:	df000017 	ldw	fp,0(sp)
     e78:	dec00204 	addi	sp,sp,8
     e7c:	f800283a 	ret

00000e80 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
     e80:	defffd04 	addi	sp,sp,-12
     e84:	dfc00215 	stw	ra,8(sp)
     e88:	df000115 	stw	fp,4(sp)
     e8c:	df000104 	addi	fp,sp,4
     e90:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
     e94:	e13fff17 	ldw	r4,-4(fp)
     e98:	0001ad80 	call	1ad8 <alt_busy_sleep>
}
     e9c:	e037883a 	mov	sp,fp
     ea0:	dfc00117 	ldw	ra,4(sp)
     ea4:	df000017 	ldw	fp,0(sp)
     ea8:	dec00204 	addi	sp,sp,8
     eac:	f800283a 	ret

00000eb0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     eb0:	defffd04 	addi	sp,sp,-12
     eb4:	dfc00215 	stw	ra,8(sp)
     eb8:	df000115 	stw	fp,4(sp)
     ebc:	df000104 	addi	fp,sp,4
     ec0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     ec4:	e13fff17 	ldw	r4,-4(fp)
     ec8:	01400034 	movhi	r5,0
     ecc:	295bd904 	addi	r5,r5,28516
     ed0:	0001e040 	call	1e04 <alt_dev_llist_insert>
}
     ed4:	e037883a 	mov	sp,fp
     ed8:	dfc00117 	ldw	ra,4(sp)
     edc:	df000017 	ldw	fp,0(sp)
     ee0:	dec00204 	addi	sp,sp,8
     ee4:	f800283a 	ret

00000ee8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     ee8:	defffd04 	addi	sp,sp,-12
     eec:	dfc00215 	stw	ra,8(sp)
     ef0:	df000115 	stw	fp,4(sp)
     ef4:	df000104 	addi	fp,sp,4
     ef8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
     efc:	00025300 	call	2530 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     f00:	00800044 	movi	r2,1
     f04:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     f08:	e037883a 	mov	sp,fp
     f0c:	dfc00117 	ldw	ra,4(sp)
     f10:	df000017 	ldw	fp,0(sp)
     f14:	dec00204 	addi	sp,sp,8
     f18:	f800283a 	ret

00000f1c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     f1c:	defffe04 	addi	sp,sp,-8
     f20:	dfc00115 	stw	ra,4(sp)
     f24:	df000015 	stw	fp,0(sp)
     f28:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( ALT_TIMER_0, alt_timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
     f2c:	01000034 	movhi	r4,0
     f30:	21155304 	addi	r4,r4,21836
     f34:	000b883a 	mov	r5,zero
     f38:	01800144 	movi	r6,5
     f3c:	00010c40 	call	10c4 <altera_avalon_jtag_uart_init>
     f40:	01000034 	movhi	r4,0
     f44:	21154904 	addi	r4,r4,21796
     f48:	0000eb00 	call	eb0 <alt_dev_reg>
}
     f4c:	e037883a 	mov	sp,fp
     f50:	dfc00117 	ldw	ra,4(sp)
     f54:	df000017 	ldw	fp,0(sp)
     f58:	dec00204 	addi	sp,sp,8
     f5c:	f800283a 	ret

00000f60 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     f60:	defffa04 	addi	sp,sp,-24
     f64:	dfc00515 	stw	ra,20(sp)
     f68:	df000415 	stw	fp,16(sp)
     f6c:	df000404 	addi	fp,sp,16
     f70:	e13ffd15 	stw	r4,-12(fp)
     f74:	e17ffe15 	stw	r5,-8(fp)
     f78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     f7c:	e0bffd17 	ldw	r2,-12(fp)
     f80:	10800017 	ldw	r2,0(r2)
     f84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     f88:	e0bffc17 	ldw	r2,-16(fp)
     f8c:	10c00a04 	addi	r3,r2,40
     f90:	e0bffd17 	ldw	r2,-12(fp)
     f94:	10800217 	ldw	r2,8(r2)
     f98:	1809883a 	mov	r4,r3
     f9c:	e17ffe17 	ldw	r5,-8(fp)
     fa0:	e1bfff17 	ldw	r6,-4(fp)
     fa4:	100f883a 	mov	r7,r2
     fa8:	00015780 	call	1578 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     fac:	e037883a 	mov	sp,fp
     fb0:	dfc00117 	ldw	ra,4(sp)
     fb4:	df000017 	ldw	fp,0(sp)
     fb8:	dec00204 	addi	sp,sp,8
     fbc:	f800283a 	ret

00000fc0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     fc0:	defffa04 	addi	sp,sp,-24
     fc4:	dfc00515 	stw	ra,20(sp)
     fc8:	df000415 	stw	fp,16(sp)
     fcc:	df000404 	addi	fp,sp,16
     fd0:	e13ffd15 	stw	r4,-12(fp)
     fd4:	e17ffe15 	stw	r5,-8(fp)
     fd8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     fdc:	e0bffd17 	ldw	r2,-12(fp)
     fe0:	10800017 	ldw	r2,0(r2)
     fe4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     fe8:	e0bffc17 	ldw	r2,-16(fp)
     fec:	10c00a04 	addi	r3,r2,40
     ff0:	e0bffd17 	ldw	r2,-12(fp)
     ff4:	10800217 	ldw	r2,8(r2)
     ff8:	1809883a 	mov	r4,r3
     ffc:	e17ffe17 	ldw	r5,-8(fp)
    1000:	e1bfff17 	ldw	r6,-4(fp)
    1004:	100f883a 	mov	r7,r2
    1008:	00017800 	call	1780 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    100c:	e037883a 	mov	sp,fp
    1010:	dfc00117 	ldw	ra,4(sp)
    1014:	df000017 	ldw	fp,0(sp)
    1018:	dec00204 	addi	sp,sp,8
    101c:	f800283a 	ret

00001020 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    1020:	defffc04 	addi	sp,sp,-16
    1024:	dfc00315 	stw	ra,12(sp)
    1028:	df000215 	stw	fp,8(sp)
    102c:	df000204 	addi	fp,sp,8
    1030:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1034:	e0bfff17 	ldw	r2,-4(fp)
    1038:	10800017 	ldw	r2,0(r2)
    103c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    1040:	e0bffe17 	ldw	r2,-8(fp)
    1044:	10c00a04 	addi	r3,r2,40
    1048:	e0bfff17 	ldw	r2,-4(fp)
    104c:	10800217 	ldw	r2,8(r2)
    1050:	1809883a 	mov	r4,r3
    1054:	100b883a 	mov	r5,r2
    1058:	00014240 	call	1424 <altera_avalon_jtag_uart_close>
}
    105c:	e037883a 	mov	sp,fp
    1060:	dfc00117 	ldw	ra,4(sp)
    1064:	df000017 	ldw	fp,0(sp)
    1068:	dec00204 	addi	sp,sp,8
    106c:	f800283a 	ret

00001070 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    1070:	defffa04 	addi	sp,sp,-24
    1074:	dfc00515 	stw	ra,20(sp)
    1078:	df000415 	stw	fp,16(sp)
    107c:	df000404 	addi	fp,sp,16
    1080:	e13ffd15 	stw	r4,-12(fp)
    1084:	e17ffe15 	stw	r5,-8(fp)
    1088:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    108c:	e0bffd17 	ldw	r2,-12(fp)
    1090:	10800017 	ldw	r2,0(r2)
    1094:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    1098:	e0bffc17 	ldw	r2,-16(fp)
    109c:	10800a04 	addi	r2,r2,40
    10a0:	1009883a 	mov	r4,r2
    10a4:	e17ffe17 	ldw	r5,-8(fp)
    10a8:	e1bfff17 	ldw	r6,-4(fp)
    10ac:	000148c0 	call	148c <altera_avalon_jtag_uart_ioctl>
}
    10b0:	e037883a 	mov	sp,fp
    10b4:	dfc00117 	ldw	ra,4(sp)
    10b8:	df000017 	ldw	fp,0(sp)
    10bc:	dec00204 	addi	sp,sp,8
    10c0:	f800283a 	ret

000010c4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    10c4:	defffa04 	addi	sp,sp,-24
    10c8:	dfc00515 	stw	ra,20(sp)
    10cc:	df000415 	stw	fp,16(sp)
    10d0:	df000404 	addi	fp,sp,16
    10d4:	e13ffd15 	stw	r4,-12(fp)
    10d8:	e17ffe15 	stw	r5,-8(fp)
    10dc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    10e0:	e0bffd17 	ldw	r2,-12(fp)
    10e4:	00c00044 	movi	r3,1
    10e8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    10ec:	e0bffd17 	ldw	r2,-12(fp)
    10f0:	10800017 	ldw	r2,0(r2)
    10f4:	10800104 	addi	r2,r2,4
    10f8:	e0fffd17 	ldw	r3,-12(fp)
    10fc:	18c00817 	ldw	r3,32(r3)
    1100:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    1104:	e0fffe17 	ldw	r3,-8(fp)
    1108:	e0bfff17 	ldw	r2,-4(fp)
    110c:	d8000015 	stw	zero,0(sp)
    1110:	1809883a 	mov	r4,r3
    1114:	100b883a 	mov	r5,r2
    1118:	01800034 	movhi	r6,0
    111c:	31846104 	addi	r6,r6,4484
    1120:	e1fffd17 	ldw	r7,-12(fp)
    1124:	00007f00 	call	7f0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    1128:	e0bffd17 	ldw	r2,-12(fp)
    112c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    1130:	e0bffd17 	ldw	r2,-12(fp)
    1134:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    1138:	00800074 	movhi	r2,1
    113c:	10a28604 	addi	r2,r2,-30184
    1140:	10800017 	ldw	r2,0(r2)
    1144:	1809883a 	mov	r4,r3
    1148:	100b883a 	mov	r5,r2
    114c:	01800034 	movhi	r6,0
    1150:	3184e004 	addi	r6,r6,4992
    1154:	e1fffd17 	ldw	r7,-12(fp)
    1158:	00019980 	call	1998 <alt_alarm_start>
    115c:	1000040e 	bge	r2,zero,1170 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    1160:	e0bffd17 	ldw	r2,-12(fp)
    1164:	00e00034 	movhi	r3,32768
    1168:	18ffffc4 	addi	r3,r3,-1
    116c:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    1170:	e037883a 	mov	sp,fp
    1174:	dfc00117 	ldw	ra,4(sp)
    1178:	df000017 	ldw	fp,0(sp)
    117c:	dec00204 	addi	sp,sp,8
    1180:	f800283a 	ret

00001184 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    1184:	defff804 	addi	sp,sp,-32
    1188:	df000715 	stw	fp,28(sp)
    118c:	df000704 	addi	fp,sp,28
    1190:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    1194:	e0bfff17 	ldw	r2,-4(fp)
    1198:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    119c:	e0bffb17 	ldw	r2,-20(fp)
    11a0:	10800017 	ldw	r2,0(r2)
    11a4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    11a8:	e0bffc17 	ldw	r2,-16(fp)
    11ac:	10800104 	addi	r2,r2,4
    11b0:	10800037 	ldwio	r2,0(r2)
    11b4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    11b8:	e0bffd17 	ldw	r2,-12(fp)
    11bc:	1080c00c 	andi	r2,r2,768
    11c0:	1000011e 	bne	r2,zero,11c8 <altera_avalon_jtag_uart_irq+0x44>
      break;
    11c4:	00006a06 	br	1370 <altera_avalon_jtag_uart_irq+0x1ec>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    11c8:	e0bffd17 	ldw	r2,-12(fp)
    11cc:	1080400c 	andi	r2,r2,256
    11d0:	10003226 	beq	r2,zero,129c <altera_avalon_jtag_uart_irq+0x118>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    11d4:	00800074 	movhi	r2,1
    11d8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    11dc:	e0bffb17 	ldw	r2,-20(fp)
    11e0:	10800a17 	ldw	r2,40(r2)
    11e4:	10800044 	addi	r2,r2,1
    11e8:	1081ffcc 	andi	r2,r2,2047
    11ec:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    11f0:	e0bffb17 	ldw	r2,-20(fp)
    11f4:	10c00b17 	ldw	r3,44(r2)
    11f8:	e0bffe17 	ldw	r2,-8(fp)
    11fc:	1880011e 	bne	r3,r2,1204 <altera_avalon_jtag_uart_irq+0x80>
          break;
    1200:	00001506 	br	1258 <altera_avalon_jtag_uart_irq+0xd4>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    1204:	e0bffc17 	ldw	r2,-16(fp)
    1208:	10800037 	ldwio	r2,0(r2)
    120c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    1210:	e0bff917 	ldw	r2,-28(fp)
    1214:	10a0000c 	andi	r2,r2,32768
    1218:	1000011e 	bne	r2,zero,1220 <altera_avalon_jtag_uart_irq+0x9c>
          break;
    121c:	00000e06 	br	1258 <altera_avalon_jtag_uart_irq+0xd4>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    1220:	e0bffb17 	ldw	r2,-20(fp)
    1224:	10800a17 	ldw	r2,40(r2)
    1228:	e0fff917 	ldw	r3,-28(fp)
    122c:	e13ffb17 	ldw	r4,-20(fp)
    1230:	2085883a 	add	r2,r4,r2
    1234:	10800e04 	addi	r2,r2,56
    1238:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    123c:	e0bffb17 	ldw	r2,-20(fp)
    1240:	10800a17 	ldw	r2,40(r2)
    1244:	10800044 	addi	r2,r2,1
    1248:	10c1ffcc 	andi	r3,r2,2047
    124c:	e0bffb17 	ldw	r2,-20(fp)
    1250:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    1254:	003fe106 	br	11dc <__alt_mem_onchip_memory2_0+0xfdffd1dc>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    1258:	e0bff917 	ldw	r2,-28(fp)
    125c:	10bfffec 	andhi	r2,r2,65535
    1260:	10000e26 	beq	r2,zero,129c <altera_avalon_jtag_uart_irq+0x118>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1264:	e0bffb17 	ldw	r2,-20(fp)
    1268:	10c00817 	ldw	r3,32(r2)
    126c:	00bfff84 	movi	r2,-2
    1270:	1886703a 	and	r3,r3,r2
    1274:	e0bffb17 	ldw	r2,-20(fp)
    1278:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    127c:	e0bffc17 	ldw	r2,-16(fp)
    1280:	10800104 	addi	r2,r2,4
    1284:	e0fffb17 	ldw	r3,-20(fp)
    1288:	18c00817 	ldw	r3,32(r3)
    128c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1290:	e0bffc17 	ldw	r2,-16(fp)
    1294:	10800104 	addi	r2,r2,4
    1298:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    129c:	e0bffd17 	ldw	r2,-12(fp)
    12a0:	1080800c 	andi	r2,r2,512
    12a4:	10003126 	beq	r2,zero,136c <altera_avalon_jtag_uart_irq+0x1e8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    12a8:	e0bffd17 	ldw	r2,-12(fp)
    12ac:	1004d43a 	srli	r2,r2,16
    12b0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    12b4:	00001406 	br	1308 <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    12b8:	e0bffc17 	ldw	r2,-16(fp)
    12bc:	e0fffb17 	ldw	r3,-20(fp)
    12c0:	18c00d17 	ldw	r3,52(r3)
    12c4:	e13ffb17 	ldw	r4,-20(fp)
    12c8:	20c7883a 	add	r3,r4,r3
    12cc:	18c20e04 	addi	r3,r3,2104
    12d0:	18c00003 	ldbu	r3,0(r3)
    12d4:	18c03fcc 	andi	r3,r3,255
    12d8:	18c0201c 	xori	r3,r3,128
    12dc:	18ffe004 	addi	r3,r3,-128
    12e0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    12e4:	e0bffb17 	ldw	r2,-20(fp)
    12e8:	10800d17 	ldw	r2,52(r2)
    12ec:	10800044 	addi	r2,r2,1
    12f0:	10c1ffcc 	andi	r3,r2,2047
    12f4:	e0bffb17 	ldw	r2,-20(fp)
    12f8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    12fc:	e0bffa17 	ldw	r2,-24(fp)
    1300:	10bfffc4 	addi	r2,r2,-1
    1304:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    1308:	e0bffa17 	ldw	r2,-24(fp)
    130c:	10000526 	beq	r2,zero,1324 <altera_avalon_jtag_uart_irq+0x1a0>
    1310:	e0bffb17 	ldw	r2,-20(fp)
    1314:	10c00d17 	ldw	r3,52(r2)
    1318:	e0bffb17 	ldw	r2,-20(fp)
    131c:	10800c17 	ldw	r2,48(r2)
    1320:	18bfe51e 	bne	r3,r2,12b8 <__alt_mem_onchip_memory2_0+0xfdffd2b8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    1324:	e0bffa17 	ldw	r2,-24(fp)
    1328:	10001026 	beq	r2,zero,136c <altera_avalon_jtag_uart_irq+0x1e8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    132c:	e0bffb17 	ldw	r2,-20(fp)
    1330:	10c00817 	ldw	r3,32(r2)
    1334:	00bfff44 	movi	r2,-3
    1338:	1886703a 	and	r3,r3,r2
    133c:	e0bffb17 	ldw	r2,-20(fp)
    1340:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1344:	e0bffb17 	ldw	r2,-20(fp)
    1348:	10800017 	ldw	r2,0(r2)
    134c:	10800104 	addi	r2,r2,4
    1350:	e0fffb17 	ldw	r3,-20(fp)
    1354:	18c00817 	ldw	r3,32(r3)
    1358:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    135c:	e0bffc17 	ldw	r2,-16(fp)
    1360:	10800104 	addi	r2,r2,4
    1364:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    1368:	003f8f06 	br	11a8 <__alt_mem_onchip_memory2_0+0xfdffd1a8>
    136c:	003f8e06 	br	11a8 <__alt_mem_onchip_memory2_0+0xfdffd1a8>
}
    1370:	e037883a 	mov	sp,fp
    1374:	df000017 	ldw	fp,0(sp)
    1378:	dec00104 	addi	sp,sp,4
    137c:	f800283a 	ret

00001380 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    1380:	defff804 	addi	sp,sp,-32
    1384:	df000715 	stw	fp,28(sp)
    1388:	df000704 	addi	fp,sp,28
    138c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    1390:	e0bffb17 	ldw	r2,-20(fp)
    1394:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    1398:	e0bff917 	ldw	r2,-28(fp)
    139c:	10800017 	ldw	r2,0(r2)
    13a0:	10800104 	addi	r2,r2,4
    13a4:	10800037 	ldwio	r2,0(r2)
    13a8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    13ac:	e0bffa17 	ldw	r2,-24(fp)
    13b0:	1081000c 	andi	r2,r2,1024
    13b4:	10000a26 	beq	r2,zero,13e0 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    13b8:	e0bff917 	ldw	r2,-28(fp)
    13bc:	10800017 	ldw	r2,0(r2)
    13c0:	10800104 	addi	r2,r2,4
    13c4:	e0fff917 	ldw	r3,-28(fp)
    13c8:	18c00817 	ldw	r3,32(r3)
    13cc:	18c10014 	ori	r3,r3,1024
    13d0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    13d4:	e0bff917 	ldw	r2,-28(fp)
    13d8:	10000915 	stw	zero,36(r2)
    13dc:	00000a06 	br	1408 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    13e0:	e0bff917 	ldw	r2,-28(fp)
    13e4:	10800917 	ldw	r2,36(r2)
    13e8:	00e00034 	movhi	r3,32768
    13ec:	18ffff04 	addi	r3,r3,-4
    13f0:	18800536 	bltu	r3,r2,1408 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
    13f4:	e0bff917 	ldw	r2,-28(fp)
    13f8:	10800917 	ldw	r2,36(r2)
    13fc:	10c00044 	addi	r3,r2,1
    1400:	e0bff917 	ldw	r2,-28(fp)
    1404:	10c00915 	stw	r3,36(r2)
    1408:	00800074 	movhi	r2,1
    140c:	10a28604 	addi	r2,r2,-30184
    1410:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    1414:	e037883a 	mov	sp,fp
    1418:	df000017 	ldw	fp,0(sp)
    141c:	dec00104 	addi	sp,sp,4
    1420:	f800283a 	ret

00001424 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    1424:	defffd04 	addi	sp,sp,-12
    1428:	df000215 	stw	fp,8(sp)
    142c:	df000204 	addi	fp,sp,8
    1430:	e13ffe15 	stw	r4,-8(fp)
    1434:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    1438:	00000506 	br	1450 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    143c:	e0bfff17 	ldw	r2,-4(fp)
    1440:	1090000c 	andi	r2,r2,16384
    1444:	10000226 	beq	r2,zero,1450 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    1448:	00bffd44 	movi	r2,-11
    144c:	00000b06 	br	147c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    1450:	e0bffe17 	ldw	r2,-8(fp)
    1454:	10c00d17 	ldw	r3,52(r2)
    1458:	e0bffe17 	ldw	r2,-8(fp)
    145c:	10800c17 	ldw	r2,48(r2)
    1460:	18800526 	beq	r3,r2,1478 <altera_avalon_jtag_uart_close+0x54>
    1464:	e0bffe17 	ldw	r2,-8(fp)
    1468:	10c00917 	ldw	r3,36(r2)
    146c:	e0bffe17 	ldw	r2,-8(fp)
    1470:	10800117 	ldw	r2,4(r2)
    1474:	18bff136 	bltu	r3,r2,143c <__alt_mem_onchip_memory2_0+0xfdffd43c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    1478:	0005883a 	mov	r2,zero
}
    147c:	e037883a 	mov	sp,fp
    1480:	df000017 	ldw	fp,0(sp)
    1484:	dec00104 	addi	sp,sp,4
    1488:	f800283a 	ret

0000148c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    148c:	defffa04 	addi	sp,sp,-24
    1490:	df000515 	stw	fp,20(sp)
    1494:	df000504 	addi	fp,sp,20
    1498:	e13ffd15 	stw	r4,-12(fp)
    149c:	e17ffe15 	stw	r5,-8(fp)
    14a0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    14a4:	00bff9c4 	movi	r2,-25
    14a8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    14ac:	e0bffe17 	ldw	r2,-8(fp)
    14b0:	10da8060 	cmpeqi	r3,r2,27137
    14b4:	1800031e 	bne	r3,zero,14c4 <altera_avalon_jtag_uart_ioctl+0x38>
    14b8:	109a80a0 	cmpeqi	r2,r2,27138
    14bc:	1000191e 	bne	r2,zero,1524 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    14c0:	00002806 	br	1564 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    14c4:	e0bffd17 	ldw	r2,-12(fp)
    14c8:	10c00117 	ldw	r3,4(r2)
    14cc:	00a00034 	movhi	r2,32768
    14d0:	10bfffc4 	addi	r2,r2,-1
    14d4:	18801226 	beq	r3,r2,1520 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
    14d8:	e0bfff17 	ldw	r2,-4(fp)
    14dc:	10800017 	ldw	r2,0(r2)
    14e0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    14e4:	e0bffc17 	ldw	r2,-16(fp)
    14e8:	10800090 	cmplti	r2,r2,2
    14ec:	1000061e 	bne	r2,zero,1508 <altera_avalon_jtag_uart_ioctl+0x7c>
    14f0:	e0fffc17 	ldw	r3,-16(fp)
    14f4:	00a00034 	movhi	r2,32768
    14f8:	10bfffc4 	addi	r2,r2,-1
    14fc:	18800226 	beq	r3,r2,1508 <altera_avalon_jtag_uart_ioctl+0x7c>
    1500:	e0bffc17 	ldw	r2,-16(fp)
    1504:	00000206 	br	1510 <altera_avalon_jtag_uart_ioctl+0x84>
    1508:	00a00034 	movhi	r2,32768
    150c:	10bfff84 	addi	r2,r2,-2
    1510:	e0fffd17 	ldw	r3,-12(fp)
    1514:	18800115 	stw	r2,4(r3)
      rc = 0;
    1518:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    151c:	00001106 	br	1564 <altera_avalon_jtag_uart_ioctl+0xd8>
    1520:	00001006 	br	1564 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    1524:	e0bffd17 	ldw	r2,-12(fp)
    1528:	10c00117 	ldw	r3,4(r2)
    152c:	00a00034 	movhi	r2,32768
    1530:	10bfffc4 	addi	r2,r2,-1
    1534:	18800a26 	beq	r3,r2,1560 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    1538:	e0bffd17 	ldw	r2,-12(fp)
    153c:	10c00917 	ldw	r3,36(r2)
    1540:	e0bffd17 	ldw	r2,-12(fp)
    1544:	10800117 	ldw	r2,4(r2)
    1548:	1885803a 	cmpltu	r2,r3,r2
    154c:	10c03fcc 	andi	r3,r2,255
    1550:	e0bfff17 	ldw	r2,-4(fp)
    1554:	10c00015 	stw	r3,0(r2)
      rc = 0;
    1558:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    155c:	00000006 	br	1560 <altera_avalon_jtag_uart_ioctl+0xd4>
    1560:	0001883a 	nop

  default:
    break;
  }

  return rc;
    1564:	e0bffb17 	ldw	r2,-20(fp)
}
    1568:	e037883a 	mov	sp,fp
    156c:	df000017 	ldw	fp,0(sp)
    1570:	dec00104 	addi	sp,sp,4
    1574:	f800283a 	ret

00001578 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    1578:	defff304 	addi	sp,sp,-52
    157c:	dfc00c15 	stw	ra,48(sp)
    1580:	df000b15 	stw	fp,44(sp)
    1584:	df000b04 	addi	fp,sp,44
    1588:	e13ffc15 	stw	r4,-16(fp)
    158c:	e17ffd15 	stw	r5,-12(fp)
    1590:	e1bffe15 	stw	r6,-8(fp)
    1594:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    1598:	e0bffd17 	ldw	r2,-12(fp)
    159c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    15a0:	00004906 	br	16c8 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    15a4:	e0bffc17 	ldw	r2,-16(fp)
    15a8:	10800a17 	ldw	r2,40(r2)
    15ac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    15b0:	e0bffc17 	ldw	r2,-16(fp)
    15b4:	10800b17 	ldw	r2,44(r2)
    15b8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    15bc:	e0fff717 	ldw	r3,-36(fp)
    15c0:	e0bff817 	ldw	r2,-32(fp)
    15c4:	18800536 	bltu	r3,r2,15dc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    15c8:	e0fff717 	ldw	r3,-36(fp)
    15cc:	e0bff817 	ldw	r2,-32(fp)
    15d0:	1885c83a 	sub	r2,r3,r2
    15d4:	e0bff615 	stw	r2,-40(fp)
    15d8:	00000406 	br	15ec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    15dc:	00c20004 	movi	r3,2048
    15e0:	e0bff817 	ldw	r2,-32(fp)
    15e4:	1885c83a 	sub	r2,r3,r2
    15e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    15ec:	e0bff617 	ldw	r2,-40(fp)
    15f0:	1000011e 	bne	r2,zero,15f8 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
    15f4:	00001d06 	br	166c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
    15f8:	e0fffe17 	ldw	r3,-8(fp)
    15fc:	e0bff617 	ldw	r2,-40(fp)
    1600:	1880022e 	bgeu	r3,r2,160c <altera_avalon_jtag_uart_read+0x94>
        n = space;
    1604:	e0bffe17 	ldw	r2,-8(fp)
    1608:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    160c:	e0bff817 	ldw	r2,-32(fp)
    1610:	10800e04 	addi	r2,r2,56
    1614:	e0fffc17 	ldw	r3,-16(fp)
    1618:	1885883a 	add	r2,r3,r2
    161c:	e13ff517 	ldw	r4,-44(fp)
    1620:	100b883a 	mov	r5,r2
    1624:	e1bff617 	ldw	r6,-40(fp)
    1628:	00028fc0 	call	28fc <memcpy>
      ptr   += n;
    162c:	e0fff517 	ldw	r3,-44(fp)
    1630:	e0bff617 	ldw	r2,-40(fp)
    1634:	1885883a 	add	r2,r3,r2
    1638:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    163c:	e0fffe17 	ldw	r3,-8(fp)
    1640:	e0bff617 	ldw	r2,-40(fp)
    1644:	1885c83a 	sub	r2,r3,r2
    1648:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    164c:	e0fff817 	ldw	r3,-32(fp)
    1650:	e0bff617 	ldw	r2,-40(fp)
    1654:	1885883a 	add	r2,r3,r2
    1658:	10c1ffcc 	andi	r3,r2,2047
    165c:	e0bffc17 	ldw	r2,-16(fp)
    1660:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    1664:	e0bffe17 	ldw	r2,-8(fp)
    1668:	00bfce16 	blt	zero,r2,15a4 <__alt_mem_onchip_memory2_0+0xfdffd5a4>

    /* If we read any data then return it */
    if (ptr != buffer)
    166c:	e0fff517 	ldw	r3,-44(fp)
    1670:	e0bffd17 	ldw	r2,-12(fp)
    1674:	18800126 	beq	r3,r2,167c <altera_avalon_jtag_uart_read+0x104>
      break;
    1678:	00001506 	br	16d0 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    167c:	e0bfff17 	ldw	r2,-4(fp)
    1680:	1090000c 	andi	r2,r2,16384
    1684:	10000126 	beq	r2,zero,168c <altera_avalon_jtag_uart_read+0x114>
      break;
    1688:	00001106 	br	16d0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    168c:	0001883a 	nop
    1690:	e0bffc17 	ldw	r2,-16(fp)
    1694:	10c00a17 	ldw	r3,40(r2)
    1698:	e0bff717 	ldw	r2,-36(fp)
    169c:	1880051e 	bne	r3,r2,16b4 <altera_avalon_jtag_uart_read+0x13c>
    16a0:	e0bffc17 	ldw	r2,-16(fp)
    16a4:	10c00917 	ldw	r3,36(r2)
    16a8:	e0bffc17 	ldw	r2,-16(fp)
    16ac:	10800117 	ldw	r2,4(r2)
    16b0:	18bff736 	bltu	r3,r2,1690 <__alt_mem_onchip_memory2_0+0xfdffd690>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    16b4:	e0bffc17 	ldw	r2,-16(fp)
    16b8:	10c00a17 	ldw	r3,40(r2)
    16bc:	e0bff717 	ldw	r2,-36(fp)
    16c0:	1880011e 	bne	r3,r2,16c8 <altera_avalon_jtag_uart_read+0x150>
      break;
    16c4:	00000206 	br	16d0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    16c8:	e0bffe17 	ldw	r2,-8(fp)
    16cc:	00bfb516 	blt	zero,r2,15a4 <__alt_mem_onchip_memory2_0+0xfdffd5a4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    16d0:	e0fff517 	ldw	r3,-44(fp)
    16d4:	e0bffd17 	ldw	r2,-12(fp)
    16d8:	18801726 	beq	r3,r2,1738 <altera_avalon_jtag_uart_read+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    16dc:	0005303a 	rdctl	r2,status
    16e0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    16e4:	e0fffa17 	ldw	r3,-24(fp)
    16e8:	00bfff84 	movi	r2,-2
    16ec:	1884703a 	and	r2,r3,r2
    16f0:	1001703a 	wrctl	status,r2
  
  return context;
    16f4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    16f8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    16fc:	e0bffc17 	ldw	r2,-16(fp)
    1700:	10800817 	ldw	r2,32(r2)
    1704:	10c00054 	ori	r3,r2,1
    1708:	e0bffc17 	ldw	r2,-16(fp)
    170c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1710:	e0bffc17 	ldw	r2,-16(fp)
    1714:	10800017 	ldw	r2,0(r2)
    1718:	10800104 	addi	r2,r2,4
    171c:	e0fffc17 	ldw	r3,-16(fp)
    1720:	18c00817 	ldw	r3,32(r3)
    1724:	10c00035 	stwio	r3,0(r2)
    1728:	e0bff917 	ldw	r2,-28(fp)
    172c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1730:	e0bffb17 	ldw	r2,-20(fp)
    1734:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    1738:	e0fff517 	ldw	r3,-44(fp)
    173c:	e0bffd17 	ldw	r2,-12(fp)
    1740:	18800426 	beq	r3,r2,1754 <altera_avalon_jtag_uart_read+0x1dc>
    return ptr - buffer;
    1744:	e0fff517 	ldw	r3,-44(fp)
    1748:	e0bffd17 	ldw	r2,-12(fp)
    174c:	1885c83a 	sub	r2,r3,r2
    1750:	00000606 	br	176c <altera_avalon_jtag_uart_read+0x1f4>
  else if (flags & O_NONBLOCK)
    1754:	e0bfff17 	ldw	r2,-4(fp)
    1758:	1090000c 	andi	r2,r2,16384
    175c:	10000226 	beq	r2,zero,1768 <altera_avalon_jtag_uart_read+0x1f0>
    return -EWOULDBLOCK;
    1760:	00bffd44 	movi	r2,-11
    1764:	00000106 	br	176c <altera_avalon_jtag_uart_read+0x1f4>
  else
    return -EIO;
    1768:	00bffec4 	movi	r2,-5
}
    176c:	e037883a 	mov	sp,fp
    1770:	dfc00117 	ldw	ra,4(sp)
    1774:	df000017 	ldw	fp,0(sp)
    1778:	dec00204 	addi	sp,sp,8
    177c:	f800283a 	ret

00001780 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1780:	defff304 	addi	sp,sp,-52
    1784:	dfc00c15 	stw	ra,48(sp)
    1788:	df000b15 	stw	fp,44(sp)
    178c:	df000b04 	addi	fp,sp,44
    1790:	e13ffc15 	stw	r4,-16(fp)
    1794:	e17ffd15 	stw	r5,-12(fp)
    1798:	e1bffe15 	stw	r6,-8(fp)
    179c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    17a0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    17a4:	e0bffd17 	ldw	r2,-12(fp)
    17a8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    17ac:	00003906 	br	1894 <altera_avalon_jtag_uart_write+0x114>
    17b0:	00003806 	br	1894 <altera_avalon_jtag_uart_write+0x114>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    17b4:	e0bffc17 	ldw	r2,-16(fp)
    17b8:	10800c17 	ldw	r2,48(r2)
    17bc:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
    17c0:	e0bffc17 	ldw	r2,-16(fp)
    17c4:	10800d17 	ldw	r2,52(r2)
    17c8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    17cc:	e0fff817 	ldw	r3,-32(fp)
    17d0:	e0bff517 	ldw	r2,-44(fp)
    17d4:	1880062e 	bgeu	r3,r2,17f0 <altera_avalon_jtag_uart_write+0x70>
        n = out - 1 - in;
    17d8:	e0fff517 	ldw	r3,-44(fp)
    17dc:	e0bff817 	ldw	r2,-32(fp)
    17e0:	1885c83a 	sub	r2,r3,r2
    17e4:	10bfffc4 	addi	r2,r2,-1
    17e8:	e0bff615 	stw	r2,-40(fp)
    17ec:	00000b06 	br	181c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    17f0:	e0bff517 	ldw	r2,-44(fp)
    17f4:	10000526 	beq	r2,zero,180c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    17f8:	00c20004 	movi	r3,2048
    17fc:	e0bff817 	ldw	r2,-32(fp)
    1800:	1885c83a 	sub	r2,r3,r2
    1804:	e0bff615 	stw	r2,-40(fp)
    1808:	00000406 	br	181c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    180c:	00c1ffc4 	movi	r3,2047
    1810:	e0bff817 	ldw	r2,-32(fp)
    1814:	1885c83a 	sub	r2,r3,r2
    1818:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    181c:	e0bff617 	ldw	r2,-40(fp)
    1820:	1000011e 	bne	r2,zero,1828 <altera_avalon_jtag_uart_write+0xa8>
        break;
    1824:	00001d06 	br	189c <altera_avalon_jtag_uart_write+0x11c>

      if (n > count)
    1828:	e0fffe17 	ldw	r3,-8(fp)
    182c:	e0bff617 	ldw	r2,-40(fp)
    1830:	1880022e 	bgeu	r3,r2,183c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    1834:	e0bffe17 	ldw	r2,-8(fp)
    1838:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    183c:	e0bff817 	ldw	r2,-32(fp)
    1840:	10820e04 	addi	r2,r2,2104
    1844:	e0fffc17 	ldw	r3,-16(fp)
    1848:	1885883a 	add	r2,r3,r2
    184c:	1009883a 	mov	r4,r2
    1850:	e17ffd17 	ldw	r5,-12(fp)
    1854:	e1bff617 	ldw	r6,-40(fp)
    1858:	00028fc0 	call	28fc <memcpy>
      ptr   += n;
    185c:	e0fffd17 	ldw	r3,-12(fp)
    1860:	e0bff617 	ldw	r2,-40(fp)
    1864:	1885883a 	add	r2,r3,r2
    1868:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    186c:	e0fffe17 	ldw	r3,-8(fp)
    1870:	e0bff617 	ldw	r2,-40(fp)
    1874:	1885c83a 	sub	r2,r3,r2
    1878:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    187c:	e0fff817 	ldw	r3,-32(fp)
    1880:	e0bff617 	ldw	r2,-40(fp)
    1884:	1885883a 	add	r2,r3,r2
    1888:	10c1ffcc 	andi	r3,r2,2047
    188c:	e0bffc17 	ldw	r2,-16(fp)
    1890:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1894:	e0bffe17 	ldw	r2,-8(fp)
    1898:	00bfc616 	blt	zero,r2,17b4 <__alt_mem_onchip_memory2_0+0xfdffd7b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    189c:	0005303a 	rdctl	r2,status
    18a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    18a4:	e0fffa17 	ldw	r3,-24(fp)
    18a8:	00bfff84 	movi	r2,-2
    18ac:	1884703a 	and	r2,r3,r2
    18b0:	1001703a 	wrctl	status,r2
  
  return context;
    18b4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    18b8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    18bc:	e0bffc17 	ldw	r2,-16(fp)
    18c0:	10800817 	ldw	r2,32(r2)
    18c4:	10c00094 	ori	r3,r2,2
    18c8:	e0bffc17 	ldw	r2,-16(fp)
    18cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    18d0:	e0bffc17 	ldw	r2,-16(fp)
    18d4:	10800017 	ldw	r2,0(r2)
    18d8:	10800104 	addi	r2,r2,4
    18dc:	e0fffc17 	ldw	r3,-16(fp)
    18e0:	18c00817 	ldw	r3,32(r3)
    18e4:	10c00035 	stwio	r3,0(r2)
    18e8:	e0bff917 	ldw	r2,-28(fp)
    18ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    18f0:	e0bffb17 	ldw	r2,-20(fp)
    18f4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    18f8:	e0bffe17 	ldw	r2,-8(fp)
    18fc:	0080120e 	bge	zero,r2,1948 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
    1900:	e0bfff17 	ldw	r2,-4(fp)
    1904:	1090000c 	andi	r2,r2,16384
    1908:	10000126 	beq	r2,zero,1910 <altera_avalon_jtag_uart_write+0x190>
        break;
    190c:	00001006 	br	1950 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    1910:	0001883a 	nop
    1914:	e0bffc17 	ldw	r2,-16(fp)
    1918:	10c00d17 	ldw	r3,52(r2)
    191c:	e0bff517 	ldw	r2,-44(fp)
    1920:	1880051e 	bne	r3,r2,1938 <altera_avalon_jtag_uart_write+0x1b8>
    1924:	e0bffc17 	ldw	r2,-16(fp)
    1928:	10c00917 	ldw	r3,36(r2)
    192c:	e0bffc17 	ldw	r2,-16(fp)
    1930:	10800117 	ldw	r2,4(r2)
    1934:	18bff736 	bltu	r3,r2,1914 <__alt_mem_onchip_memory2_0+0xfdffd914>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    1938:	e0bffc17 	ldw	r2,-16(fp)
    193c:	10800917 	ldw	r2,36(r2)
    1940:	10000126 	beq	r2,zero,1948 <altera_avalon_jtag_uart_write+0x1c8>
         break;
    1944:	00000206 	br	1950 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
    1948:	e0bffe17 	ldw	r2,-8(fp)
    194c:	00bf9816 	blt	zero,r2,17b0 <__alt_mem_onchip_memory2_0+0xfdffd7b0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    1950:	e0fffd17 	ldw	r3,-12(fp)
    1954:	e0bff717 	ldw	r2,-36(fp)
    1958:	18800426 	beq	r3,r2,196c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
    195c:	e0fffd17 	ldw	r3,-12(fp)
    1960:	e0bff717 	ldw	r2,-36(fp)
    1964:	1885c83a 	sub	r2,r3,r2
    1968:	00000606 	br	1984 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
    196c:	e0bfff17 	ldw	r2,-4(fp)
    1970:	1090000c 	andi	r2,r2,16384
    1974:	10000226 	beq	r2,zero,1980 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
    1978:	00bffd44 	movi	r2,-11
    197c:	00000106 	br	1984 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    1980:	00bffec4 	movi	r2,-5
}
    1984:	e037883a 	mov	sp,fp
    1988:	dfc00117 	ldw	ra,4(sp)
    198c:	df000017 	ldw	fp,0(sp)
    1990:	dec00204 	addi	sp,sp,8
    1994:	f800283a 	ret

00001998 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    1998:	defff504 	addi	sp,sp,-44
    199c:	df000a15 	stw	fp,40(sp)
    19a0:	df000a04 	addi	fp,sp,40
    19a4:	e13ffc15 	stw	r4,-16(fp)
    19a8:	e17ffd15 	stw	r5,-12(fp)
    19ac:	e1bffe15 	stw	r6,-8(fp)
    19b0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    19b4:	e03ff615 	stw	zero,-40(fp)
    19b8:	00800074 	movhi	r2,1
    19bc:	10a28604 	addi	r2,r2,-30184
    19c0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    19c4:	10003f26 	beq	r2,zero,1ac4 <alt_alarm_start+0x12c>
  {
    if (alarm)
    19c8:	e0bffc17 	ldw	r2,-16(fp)
    19cc:	10003b26 	beq	r2,zero,1abc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    19d0:	e0bffc17 	ldw	r2,-16(fp)
    19d4:	e0fffe17 	ldw	r3,-8(fp)
    19d8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    19dc:	e0bffc17 	ldw	r2,-16(fp)
    19e0:	e0ffff17 	ldw	r3,-4(fp)
    19e4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    19e8:	0005303a 	rdctl	r2,status
    19ec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    19f0:	e0fff817 	ldw	r3,-32(fp)
    19f4:	00bfff84 	movi	r2,-2
    19f8:	1884703a 	and	r2,r3,r2
    19fc:	1001703a 	wrctl	status,r2
  
  return context;
    1a00:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    1a04:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    1a08:	00800074 	movhi	r2,1
    1a0c:	10a28704 	addi	r2,r2,-30180
    1a10:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    1a14:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    1a18:	e0fffd17 	ldw	r3,-12(fp)
    1a1c:	e0bff617 	ldw	r2,-40(fp)
    1a20:	1885883a 	add	r2,r3,r2
    1a24:	10c00044 	addi	r3,r2,1
    1a28:	e0bffc17 	ldw	r2,-16(fp)
    1a2c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    1a30:	e0bffc17 	ldw	r2,-16(fp)
    1a34:	10c00217 	ldw	r3,8(r2)
    1a38:	e0bff617 	ldw	r2,-40(fp)
    1a3c:	1880042e 	bgeu	r3,r2,1a50 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    1a40:	e0bffc17 	ldw	r2,-16(fp)
    1a44:	00c00044 	movi	r3,1
    1a48:	10c00405 	stb	r3,16(r2)
    1a4c:	00000206 	br	1a58 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    1a50:	e0bffc17 	ldw	r2,-16(fp)
    1a54:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    1a58:	e0bffc17 	ldw	r2,-16(fp)
    1a5c:	00c00034 	movhi	r3,0
    1a60:	18dbdd04 	addi	r3,r3,28532
    1a64:	e0fff915 	stw	r3,-28(fp)
    1a68:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1a6c:	e0bffa17 	ldw	r2,-24(fp)
    1a70:	e0fff917 	ldw	r3,-28(fp)
    1a74:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    1a78:	e0bff917 	ldw	r2,-28(fp)
    1a7c:	10c00017 	ldw	r3,0(r2)
    1a80:	e0bffa17 	ldw	r2,-24(fp)
    1a84:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1a88:	e0bff917 	ldw	r2,-28(fp)
    1a8c:	10800017 	ldw	r2,0(r2)
    1a90:	e0fffa17 	ldw	r3,-24(fp)
    1a94:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    1a98:	e0bff917 	ldw	r2,-28(fp)
    1a9c:	e0fffa17 	ldw	r3,-24(fp)
    1aa0:	10c00015 	stw	r3,0(r2)
    1aa4:	e0bff717 	ldw	r2,-36(fp)
    1aa8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1aac:	e0bffb17 	ldw	r2,-20(fp)
    1ab0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    1ab4:	0005883a 	mov	r2,zero
    1ab8:	00000306 	br	1ac8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    1abc:	00bffa84 	movi	r2,-22
    1ac0:	00000106 	br	1ac8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    1ac4:	00bfde84 	movi	r2,-134
  }
}
    1ac8:	e037883a 	mov	sp,fp
    1acc:	df000017 	ldw	fp,0(sp)
    1ad0:	dec00104 	addi	sp,sp,4
    1ad4:	f800283a 	ret

00001ad8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    1ad8:	defffa04 	addi	sp,sp,-24
    1adc:	dfc00515 	stw	ra,20(sp)
    1ae0:	df000415 	stw	fp,16(sp)
    1ae4:	df000404 	addi	fp,sp,16
    1ae8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    1aec:	008000c4 	movi	r2,3
    1af0:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    1af4:	e0fffd17 	ldw	r3,-12(fp)
    1af8:	008003f4 	movhi	r2,15
    1afc:	10909004 	addi	r2,r2,16960
    1b00:	1885383a 	mul	r2,r3,r2
    1b04:	0100bef4 	movhi	r4,763
    1b08:	213c2004 	addi	r4,r4,-3968
    1b0c:	100b883a 	mov	r5,r2
    1b10:	0004de40 	call	4de4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1b14:	01200034 	movhi	r4,32768
    1b18:	213fffc4 	addi	r4,r4,-1
    1b1c:	100b883a 	mov	r5,r2
    1b20:	0004de40 	call	4de4 <__udivsi3>
    1b24:	e13fff17 	ldw	r4,-4(fp)
    1b28:	100b883a 	mov	r5,r2
    1b2c:	0004de40 	call	4de4 <__udivsi3>
    1b30:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    1b34:	e0bffe17 	ldw	r2,-8(fp)
    1b38:	10002926 	beq	r2,zero,1be0 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
    1b3c:	e03ffc15 	stw	zero,-16(fp)
    1b40:	00001606 	br	1b9c <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1b44:	00a00034 	movhi	r2,32768
    1b48:	10bfffc4 	addi	r2,r2,-1
    1b4c:	10bfffc4 	addi	r2,r2,-1
    1b50:	103ffe1e 	bne	r2,zero,1b4c <__alt_mem_onchip_memory2_0+0xfdffdb4c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    1b54:	e0fffd17 	ldw	r3,-12(fp)
    1b58:	008003f4 	movhi	r2,15
    1b5c:	10909004 	addi	r2,r2,16960
    1b60:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1b64:	0100bef4 	movhi	r4,763
    1b68:	213c2004 	addi	r4,r4,-3968
    1b6c:	100b883a 	mov	r5,r2
    1b70:	0004de40 	call	4de4 <__udivsi3>
    1b74:	01200034 	movhi	r4,32768
    1b78:	213fffc4 	addi	r4,r4,-1
    1b7c:	100b883a 	mov	r5,r2
    1b80:	0004de40 	call	4de4 <__udivsi3>
    1b84:	e0ffff17 	ldw	r3,-4(fp)
    1b88:	1885c83a 	sub	r2,r3,r2
    1b8c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    1b90:	e0bffc17 	ldw	r2,-16(fp)
    1b94:	10800044 	addi	r2,r2,1
    1b98:	e0bffc15 	stw	r2,-16(fp)
    1b9c:	e0fffc17 	ldw	r3,-16(fp)
    1ba0:	e0bffe17 	ldw	r2,-8(fp)
    1ba4:	18bfe716 	blt	r3,r2,1b44 <__alt_mem_onchip_memory2_0+0xfdffdb44>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    1ba8:	e0fffd17 	ldw	r3,-12(fp)
    1bac:	008003f4 	movhi	r2,15
    1bb0:	10909004 	addi	r2,r2,16960
    1bb4:	1885383a 	mul	r2,r3,r2
    1bb8:	0100bef4 	movhi	r4,763
    1bbc:	213c2004 	addi	r4,r4,-3968
    1bc0:	100b883a 	mov	r5,r2
    1bc4:	0004de40 	call	4de4 <__udivsi3>
    1bc8:	1007883a 	mov	r3,r2
    1bcc:	e0bfff17 	ldw	r2,-4(fp)
    1bd0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1bd4:	10bfffc4 	addi	r2,r2,-1
    1bd8:	103ffe1e 	bne	r2,zero,1bd4 <__alt_mem_onchip_memory2_0+0xfdffdbd4>
    1bdc:	00000d06 	br	1c14 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    1be0:	e0fffd17 	ldw	r3,-12(fp)
    1be4:	008003f4 	movhi	r2,15
    1be8:	10909004 	addi	r2,r2,16960
    1bec:	1885383a 	mul	r2,r3,r2
    1bf0:	0100bef4 	movhi	r4,763
    1bf4:	213c2004 	addi	r4,r4,-3968
    1bf8:	100b883a 	mov	r5,r2
    1bfc:	0004de40 	call	4de4 <__udivsi3>
    1c00:	1007883a 	mov	r3,r2
    1c04:	e0bfff17 	ldw	r2,-4(fp)
    1c08:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1c0c:	10bfffc4 	addi	r2,r2,-1
    1c10:	00bffe16 	blt	zero,r2,1c0c <__alt_mem_onchip_memory2_0+0xfdffdc0c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    1c14:	0005883a 	mov	r2,zero
}
    1c18:	e037883a 	mov	sp,fp
    1c1c:	dfc00117 	ldw	ra,4(sp)
    1c20:	df000017 	ldw	fp,0(sp)
    1c24:	dec00204 	addi	sp,sp,8
    1c28:	f800283a 	ret

00001c2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1c2c:	defffe04 	addi	sp,sp,-8
    1c30:	dfc00115 	stw	ra,4(sp)
    1c34:	df000015 	stw	fp,0(sp)
    1c38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1c3c:	00800034 	movhi	r2,0
    1c40:	109bdc04 	addi	r2,r2,28528
    1c44:	10800017 	ldw	r2,0(r2)
    1c48:	10000526 	beq	r2,zero,1c60 <alt_get_errno+0x34>
    1c4c:	00800034 	movhi	r2,0
    1c50:	109bdc04 	addi	r2,r2,28528
    1c54:	10800017 	ldw	r2,0(r2)
    1c58:	103ee83a 	callr	r2
    1c5c:	00000206 	br	1c68 <alt_get_errno+0x3c>
    1c60:	00800074 	movhi	r2,1
    1c64:	10a28804 	addi	r2,r2,-30176
}
    1c68:	e037883a 	mov	sp,fp
    1c6c:	dfc00117 	ldw	ra,4(sp)
    1c70:	df000017 	ldw	fp,0(sp)
    1c74:	dec00204 	addi	sp,sp,8
    1c78:	f800283a 	ret

00001c7c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    1c7c:	defffb04 	addi	sp,sp,-20
    1c80:	dfc00415 	stw	ra,16(sp)
    1c84:	df000315 	stw	fp,12(sp)
    1c88:	df000304 	addi	fp,sp,12
    1c8c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    1c90:	e0bfff17 	ldw	r2,-4(fp)
    1c94:	10000616 	blt	r2,zero,1cb0 <close+0x34>
    1c98:	e0bfff17 	ldw	r2,-4(fp)
    1c9c:	10c00324 	muli	r3,r2,12
    1ca0:	00800034 	movhi	r2,0
    1ca4:	10996b04 	addi	r2,r2,26028
    1ca8:	1885883a 	add	r2,r3,r2
    1cac:	00000106 	br	1cb4 <close+0x38>
    1cb0:	0005883a 	mov	r2,zero
    1cb4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    1cb8:	e0bffd17 	ldw	r2,-12(fp)
    1cbc:	10001826 	beq	r2,zero,1d20 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    1cc0:	e0bffd17 	ldw	r2,-12(fp)
    1cc4:	10800017 	ldw	r2,0(r2)
    1cc8:	10800417 	ldw	r2,16(r2)
    1ccc:	10000626 	beq	r2,zero,1ce8 <close+0x6c>
    1cd0:	e0bffd17 	ldw	r2,-12(fp)
    1cd4:	10800017 	ldw	r2,0(r2)
    1cd8:	10800417 	ldw	r2,16(r2)
    1cdc:	e13ffd17 	ldw	r4,-12(fp)
    1ce0:	103ee83a 	callr	r2
    1ce4:	00000106 	br	1cec <close+0x70>
    1ce8:	0005883a 	mov	r2,zero
    1cec:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    1cf0:	e13fff17 	ldw	r4,-4(fp)
    1cf4:	00023340 	call	2334 <alt_release_fd>
    if (rval < 0)
    1cf8:	e0bffe17 	ldw	r2,-8(fp)
    1cfc:	1000060e 	bge	r2,zero,1d18 <close+0x9c>
    {
      ALT_ERRNO = -rval;
    1d00:	0001c2c0 	call	1c2c <alt_get_errno>
    1d04:	e0fffe17 	ldw	r3,-8(fp)
    1d08:	00c7c83a 	sub	r3,zero,r3
    1d0c:	10c00015 	stw	r3,0(r2)
      return -1;
    1d10:	00bfffc4 	movi	r2,-1
    1d14:	00000606 	br	1d30 <close+0xb4>
    }
    return 0;
    1d18:	0005883a 	mov	r2,zero
    1d1c:	00000406 	br	1d30 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    1d20:	0001c2c0 	call	1c2c <alt_get_errno>
    1d24:	00c01444 	movi	r3,81
    1d28:	10c00015 	stw	r3,0(r2)
    return -1;
    1d2c:	00bfffc4 	movi	r2,-1
  }
}
    1d30:	e037883a 	mov	sp,fp
    1d34:	dfc00117 	ldw	ra,4(sp)
    1d38:	df000017 	ldw	fp,0(sp)
    1d3c:	dec00204 	addi	sp,sp,8
    1d40:	f800283a 	ret

00001d44 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1d44:	defffe04 	addi	sp,sp,-8
    1d48:	df000115 	stw	fp,4(sp)
    1d4c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    1d50:	e03fff15 	stw	zero,-4(fp)
    1d54:	00000506 	br	1d6c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    1d58:	e0bfff17 	ldw	r2,-4(fp)
    1d5c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    1d60:	e0bfff17 	ldw	r2,-4(fp)
    1d64:	10800804 	addi	r2,r2,32
    1d68:	e0bfff15 	stw	r2,-4(fp)
    1d6c:	e0bfff17 	ldw	r2,-4(fp)
    1d70:	10820030 	cmpltui	r2,r2,2048
    1d74:	103ff81e 	bne	r2,zero,1d58 <__alt_mem_onchip_memory2_0+0xfdffdd58>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    1d78:	e037883a 	mov	sp,fp
    1d7c:	df000017 	ldw	fp,0(sp)
    1d80:	dec00104 	addi	sp,sp,4
    1d84:	f800283a 	ret

00001d88 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    1d88:	defffc04 	addi	sp,sp,-16
    1d8c:	df000315 	stw	fp,12(sp)
    1d90:	df000304 	addi	fp,sp,12
    1d94:	e13ffd15 	stw	r4,-12(fp)
    1d98:	e17ffe15 	stw	r5,-8(fp)
    1d9c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    1da0:	e0bfff17 	ldw	r2,-4(fp)
}
    1da4:	e037883a 	mov	sp,fp
    1da8:	df000017 	ldw	fp,0(sp)
    1dac:	dec00104 	addi	sp,sp,4
    1db0:	f800283a 	ret

00001db4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1db4:	defffe04 	addi	sp,sp,-8
    1db8:	dfc00115 	stw	ra,4(sp)
    1dbc:	df000015 	stw	fp,0(sp)
    1dc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1dc4:	00800034 	movhi	r2,0
    1dc8:	109bdc04 	addi	r2,r2,28528
    1dcc:	10800017 	ldw	r2,0(r2)
    1dd0:	10000526 	beq	r2,zero,1de8 <alt_get_errno+0x34>
    1dd4:	00800034 	movhi	r2,0
    1dd8:	109bdc04 	addi	r2,r2,28528
    1ddc:	10800017 	ldw	r2,0(r2)
    1de0:	103ee83a 	callr	r2
    1de4:	00000206 	br	1df0 <alt_get_errno+0x3c>
    1de8:	00800074 	movhi	r2,1
    1dec:	10a28804 	addi	r2,r2,-30176
}
    1df0:	e037883a 	mov	sp,fp
    1df4:	dfc00117 	ldw	ra,4(sp)
    1df8:	df000017 	ldw	fp,0(sp)
    1dfc:	dec00204 	addi	sp,sp,8
    1e00:	f800283a 	ret

00001e04 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    1e04:	defffa04 	addi	sp,sp,-24
    1e08:	dfc00515 	stw	ra,20(sp)
    1e0c:	df000415 	stw	fp,16(sp)
    1e10:	df000404 	addi	fp,sp,16
    1e14:	e13ffe15 	stw	r4,-8(fp)
    1e18:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    1e1c:	e0bffe17 	ldw	r2,-8(fp)
    1e20:	10000326 	beq	r2,zero,1e30 <alt_dev_llist_insert+0x2c>
    1e24:	e0bffe17 	ldw	r2,-8(fp)
    1e28:	10800217 	ldw	r2,8(r2)
    1e2c:	1000051e 	bne	r2,zero,1e44 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    1e30:	0001db40 	call	1db4 <alt_get_errno>
    1e34:	00c00584 	movi	r3,22
    1e38:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    1e3c:	00bffa84 	movi	r2,-22
    1e40:	00001306 	br	1e90 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    1e44:	e0bffe17 	ldw	r2,-8(fp)
    1e48:	e0ffff17 	ldw	r3,-4(fp)
    1e4c:	e0fffc15 	stw	r3,-16(fp)
    1e50:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1e54:	e0bffd17 	ldw	r2,-12(fp)
    1e58:	e0fffc17 	ldw	r3,-16(fp)
    1e5c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    1e60:	e0bffc17 	ldw	r2,-16(fp)
    1e64:	10c00017 	ldw	r3,0(r2)
    1e68:	e0bffd17 	ldw	r2,-12(fp)
    1e6c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1e70:	e0bffc17 	ldw	r2,-16(fp)
    1e74:	10800017 	ldw	r2,0(r2)
    1e78:	e0fffd17 	ldw	r3,-12(fp)
    1e7c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    1e80:	e0bffc17 	ldw	r2,-16(fp)
    1e84:	e0fffd17 	ldw	r3,-12(fp)
    1e88:	10c00015 	stw	r3,0(r2)

  return 0;  
    1e8c:	0005883a 	mov	r2,zero
}
    1e90:	e037883a 	mov	sp,fp
    1e94:	dfc00117 	ldw	ra,4(sp)
    1e98:	df000017 	ldw	fp,0(sp)
    1e9c:	dec00204 	addi	sp,sp,8
    1ea0:	f800283a 	ret

00001ea4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    1ea4:	defffd04 	addi	sp,sp,-12
    1ea8:	dfc00215 	stw	ra,8(sp)
    1eac:	df000115 	stw	fp,4(sp)
    1eb0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    1eb4:	00800034 	movhi	r2,0
    1eb8:	10952704 	addi	r2,r2,21660
    1ebc:	e0bfff15 	stw	r2,-4(fp)
    1ec0:	00000606 	br	1edc <_do_ctors+0x38>
        (*ctor) (); 
    1ec4:	e0bfff17 	ldw	r2,-4(fp)
    1ec8:	10800017 	ldw	r2,0(r2)
    1ecc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    1ed0:	e0bfff17 	ldw	r2,-4(fp)
    1ed4:	10bfff04 	addi	r2,r2,-4
    1ed8:	e0bfff15 	stw	r2,-4(fp)
    1edc:	e0ffff17 	ldw	r3,-4(fp)
    1ee0:	00800034 	movhi	r2,0
    1ee4:	10952804 	addi	r2,r2,21664
    1ee8:	18bff62e 	bgeu	r3,r2,1ec4 <__alt_mem_onchip_memory2_0+0xfdffdec4>
        (*ctor) (); 
}
    1eec:	e037883a 	mov	sp,fp
    1ef0:	dfc00117 	ldw	ra,4(sp)
    1ef4:	df000017 	ldw	fp,0(sp)
    1ef8:	dec00204 	addi	sp,sp,8
    1efc:	f800283a 	ret

00001f00 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    1f00:	defffd04 	addi	sp,sp,-12
    1f04:	dfc00215 	stw	ra,8(sp)
    1f08:	df000115 	stw	fp,4(sp)
    1f0c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    1f10:	00800034 	movhi	r2,0
    1f14:	10952704 	addi	r2,r2,21660
    1f18:	e0bfff15 	stw	r2,-4(fp)
    1f1c:	00000606 	br	1f38 <_do_dtors+0x38>
        (*dtor) (); 
    1f20:	e0bfff17 	ldw	r2,-4(fp)
    1f24:	10800017 	ldw	r2,0(r2)
    1f28:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    1f2c:	e0bfff17 	ldw	r2,-4(fp)
    1f30:	10bfff04 	addi	r2,r2,-4
    1f34:	e0bfff15 	stw	r2,-4(fp)
    1f38:	e0ffff17 	ldw	r3,-4(fp)
    1f3c:	00800034 	movhi	r2,0
    1f40:	10952804 	addi	r2,r2,21664
    1f44:	18bff62e 	bgeu	r3,r2,1f20 <__alt_mem_onchip_memory2_0+0xfdffdf20>
        (*dtor) (); 
}
    1f48:	e037883a 	mov	sp,fp
    1f4c:	dfc00117 	ldw	ra,4(sp)
    1f50:	df000017 	ldw	fp,0(sp)
    1f54:	dec00204 	addi	sp,sp,8
    1f58:	f800283a 	ret

00001f5c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1f5c:	defffe04 	addi	sp,sp,-8
    1f60:	dfc00115 	stw	ra,4(sp)
    1f64:	df000015 	stw	fp,0(sp)
    1f68:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    1f6c:	0009883a 	mov	r4,zero
    1f70:	01440004 	movi	r5,4096
    1f74:	00027a80 	call	27a8 <alt_icache_flush>
#endif
}
    1f78:	e037883a 	mov	sp,fp
    1f7c:	dfc00117 	ldw	ra,4(sp)
    1f80:	df000017 	ldw	fp,0(sp)
    1f84:	dec00204 	addi	sp,sp,8
    1f88:	f800283a 	ret

00001f8c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    1f8c:	defff904 	addi	sp,sp,-28
    1f90:	dfc00615 	stw	ra,24(sp)
    1f94:	df000515 	stw	fp,20(sp)
    1f98:	df000504 	addi	fp,sp,20
    1f9c:	e13ffc15 	stw	r4,-16(fp)
    1fa0:	e17ffd15 	stw	r5,-12(fp)
    1fa4:	e1bffe15 	stw	r6,-8(fp)
    1fa8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    1fac:	e13ffd17 	ldw	r4,-12(fp)
    1fb0:	e17ffe17 	ldw	r5,-8(fp)
    1fb4:	e1bfff17 	ldw	r6,-4(fp)
    1fb8:	00021e00 	call	21e0 <open>
    1fbc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    1fc0:	e0bffb17 	ldw	r2,-20(fp)
    1fc4:	10001c16 	blt	r2,zero,2038 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    1fc8:	00c00034 	movhi	r3,0
    1fcc:	18d96b04 	addi	r3,r3,26028
    1fd0:	e0bffb17 	ldw	r2,-20(fp)
    1fd4:	10800324 	muli	r2,r2,12
    1fd8:	1885883a 	add	r2,r3,r2
    1fdc:	10c00017 	ldw	r3,0(r2)
    1fe0:	e0bffc17 	ldw	r2,-16(fp)
    1fe4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    1fe8:	00c00034 	movhi	r3,0
    1fec:	18d96b04 	addi	r3,r3,26028
    1ff0:	e0bffb17 	ldw	r2,-20(fp)
    1ff4:	10800324 	muli	r2,r2,12
    1ff8:	1885883a 	add	r2,r3,r2
    1ffc:	10800104 	addi	r2,r2,4
    2000:	10c00017 	ldw	r3,0(r2)
    2004:	e0bffc17 	ldw	r2,-16(fp)
    2008:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    200c:	00c00034 	movhi	r3,0
    2010:	18d96b04 	addi	r3,r3,26028
    2014:	e0bffb17 	ldw	r2,-20(fp)
    2018:	10800324 	muli	r2,r2,12
    201c:	1885883a 	add	r2,r3,r2
    2020:	10800204 	addi	r2,r2,8
    2024:	10c00017 	ldw	r3,0(r2)
    2028:	e0bffc17 	ldw	r2,-16(fp)
    202c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    2030:	e13ffb17 	ldw	r4,-20(fp)
    2034:	00023340 	call	2334 <alt_release_fd>
  }
} 
    2038:	e037883a 	mov	sp,fp
    203c:	dfc00117 	ldw	ra,4(sp)
    2040:	df000017 	ldw	fp,0(sp)
    2044:	dec00204 	addi	sp,sp,8
    2048:	f800283a 	ret

0000204c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    204c:	defffb04 	addi	sp,sp,-20
    2050:	dfc00415 	stw	ra,16(sp)
    2054:	df000315 	stw	fp,12(sp)
    2058:	df000304 	addi	fp,sp,12
    205c:	e13ffd15 	stw	r4,-12(fp)
    2060:	e17ffe15 	stw	r5,-8(fp)
    2064:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    2068:	01000034 	movhi	r4,0
    206c:	21196e04 	addi	r4,r4,26040
    2070:	e17ffd17 	ldw	r5,-12(fp)
    2074:	01800044 	movi	r6,1
    2078:	01c07fc4 	movi	r7,511
    207c:	0001f8c0 	call	1f8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    2080:	01000034 	movhi	r4,0
    2084:	21196b04 	addi	r4,r4,26028
    2088:	e17ffe17 	ldw	r5,-8(fp)
    208c:	000d883a 	mov	r6,zero
    2090:	01c07fc4 	movi	r7,511
    2094:	0001f8c0 	call	1f8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    2098:	01000034 	movhi	r4,0
    209c:	21197104 	addi	r4,r4,26052
    20a0:	e17fff17 	ldw	r5,-4(fp)
    20a4:	01800044 	movi	r6,1
    20a8:	01c07fc4 	movi	r7,511
    20ac:	0001f8c0 	call	1f8c <alt_open_fd>
}  
    20b0:	e037883a 	mov	sp,fp
    20b4:	dfc00117 	ldw	ra,4(sp)
    20b8:	df000017 	ldw	fp,0(sp)
    20bc:	dec00204 	addi	sp,sp,8
    20c0:	f800283a 	ret

000020c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    20c4:	defffe04 	addi	sp,sp,-8
    20c8:	dfc00115 	stw	ra,4(sp)
    20cc:	df000015 	stw	fp,0(sp)
    20d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    20d4:	00800034 	movhi	r2,0
    20d8:	109bdc04 	addi	r2,r2,28528
    20dc:	10800017 	ldw	r2,0(r2)
    20e0:	10000526 	beq	r2,zero,20f8 <alt_get_errno+0x34>
    20e4:	00800034 	movhi	r2,0
    20e8:	109bdc04 	addi	r2,r2,28528
    20ec:	10800017 	ldw	r2,0(r2)
    20f0:	103ee83a 	callr	r2
    20f4:	00000206 	br	2100 <alt_get_errno+0x3c>
    20f8:	00800074 	movhi	r2,1
    20fc:	10a28804 	addi	r2,r2,-30176
}
    2100:	e037883a 	mov	sp,fp
    2104:	dfc00117 	ldw	ra,4(sp)
    2108:	df000017 	ldw	fp,0(sp)
    210c:	dec00204 	addi	sp,sp,8
    2110:	f800283a 	ret

00002114 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    2114:	defffd04 	addi	sp,sp,-12
    2118:	df000215 	stw	fp,8(sp)
    211c:	df000204 	addi	fp,sp,8
    2120:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    2124:	e0bfff17 	ldw	r2,-4(fp)
    2128:	10800217 	ldw	r2,8(r2)
    212c:	10d00034 	orhi	r3,r2,16384
    2130:	e0bfff17 	ldw	r2,-4(fp)
    2134:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2138:	e03ffe15 	stw	zero,-8(fp)
    213c:	00001d06 	br	21b4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2140:	00c00034 	movhi	r3,0
    2144:	18d96b04 	addi	r3,r3,26028
    2148:	e0bffe17 	ldw	r2,-8(fp)
    214c:	10800324 	muli	r2,r2,12
    2150:	1885883a 	add	r2,r3,r2
    2154:	10c00017 	ldw	r3,0(r2)
    2158:	e0bfff17 	ldw	r2,-4(fp)
    215c:	10800017 	ldw	r2,0(r2)
    2160:	1880111e 	bne	r3,r2,21a8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    2164:	00c00034 	movhi	r3,0
    2168:	18d96b04 	addi	r3,r3,26028
    216c:	e0bffe17 	ldw	r2,-8(fp)
    2170:	10800324 	muli	r2,r2,12
    2174:	1885883a 	add	r2,r3,r2
    2178:	10800204 	addi	r2,r2,8
    217c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2180:	1000090e 	bge	r2,zero,21a8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    2184:	e0bffe17 	ldw	r2,-8(fp)
    2188:	10c00324 	muli	r3,r2,12
    218c:	00800034 	movhi	r2,0
    2190:	10996b04 	addi	r2,r2,26028
    2194:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    2198:	e0bfff17 	ldw	r2,-4(fp)
    219c:	18800226 	beq	r3,r2,21a8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    21a0:	00bffcc4 	movi	r2,-13
    21a4:	00000a06 	br	21d0 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    21a8:	e0bffe17 	ldw	r2,-8(fp)
    21ac:	10800044 	addi	r2,r2,1
    21b0:	e0bffe15 	stw	r2,-8(fp)
    21b4:	00800034 	movhi	r2,0
    21b8:	109bdb04 	addi	r2,r2,28524
    21bc:	10800017 	ldw	r2,0(r2)
    21c0:	1007883a 	mov	r3,r2
    21c4:	e0bffe17 	ldw	r2,-8(fp)
    21c8:	18bfdd2e 	bgeu	r3,r2,2140 <__alt_mem_onchip_memory2_0+0xfdffe140>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    21cc:	0005883a 	mov	r2,zero
}
    21d0:	e037883a 	mov	sp,fp
    21d4:	df000017 	ldw	fp,0(sp)
    21d8:	dec00104 	addi	sp,sp,4
    21dc:	f800283a 	ret

000021e0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    21e0:	defff604 	addi	sp,sp,-40
    21e4:	dfc00915 	stw	ra,36(sp)
    21e8:	df000815 	stw	fp,32(sp)
    21ec:	df000804 	addi	fp,sp,32
    21f0:	e13ffd15 	stw	r4,-12(fp)
    21f4:	e17ffe15 	stw	r5,-8(fp)
    21f8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    21fc:	00bfffc4 	movi	r2,-1
    2200:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    2204:	00bffb44 	movi	r2,-19
    2208:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    220c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    2210:	e13ffd17 	ldw	r4,-12(fp)
    2214:	01400034 	movhi	r5,0
    2218:	295bd904 	addi	r5,r5,28516
    221c:	00025500 	call	2550 <alt_find_dev>
    2220:	e0bff815 	stw	r2,-32(fp)
    2224:	e0bff817 	ldw	r2,-32(fp)
    2228:	1000051e 	bne	r2,zero,2240 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    222c:	e13ffd17 	ldw	r4,-12(fp)
    2230:	00025e00 	call	25e0 <alt_find_file>
    2234:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    2238:	00800044 	movi	r2,1
    223c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2240:	e0bff817 	ldw	r2,-32(fp)
    2244:	10002926 	beq	r2,zero,22ec <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    2248:	e13ff817 	ldw	r4,-32(fp)
    224c:	00026f40 	call	26f4 <alt_get_fd>
    2250:	e0bff915 	stw	r2,-28(fp)
    2254:	e0bff917 	ldw	r2,-28(fp)
    2258:	1000030e 	bge	r2,zero,2268 <open+0x88>
    {
      status = index;
    225c:	e0bff917 	ldw	r2,-28(fp)
    2260:	e0bffa15 	stw	r2,-24(fp)
    2264:	00002306 	br	22f4 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    2268:	e0bff917 	ldw	r2,-28(fp)
    226c:	10c00324 	muli	r3,r2,12
    2270:	00800034 	movhi	r2,0
    2274:	10996b04 	addi	r2,r2,26028
    2278:	1885883a 	add	r2,r3,r2
    227c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    2280:	e0fffe17 	ldw	r3,-8(fp)
    2284:	00900034 	movhi	r2,16384
    2288:	10bfffc4 	addi	r2,r2,-1
    228c:	1886703a 	and	r3,r3,r2
    2290:	e0bffc17 	ldw	r2,-16(fp)
    2294:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    2298:	e0bffb17 	ldw	r2,-20(fp)
    229c:	1000051e 	bne	r2,zero,22b4 <open+0xd4>
    22a0:	e13ffc17 	ldw	r4,-16(fp)
    22a4:	00021140 	call	2114 <alt_file_locked>
    22a8:	e0bffa15 	stw	r2,-24(fp)
    22ac:	e0bffa17 	ldw	r2,-24(fp)
    22b0:	10001016 	blt	r2,zero,22f4 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    22b4:	e0bff817 	ldw	r2,-32(fp)
    22b8:	10800317 	ldw	r2,12(r2)
    22bc:	10000826 	beq	r2,zero,22e0 <open+0x100>
    22c0:	e0bff817 	ldw	r2,-32(fp)
    22c4:	10800317 	ldw	r2,12(r2)
    22c8:	e13ffc17 	ldw	r4,-16(fp)
    22cc:	e17ffd17 	ldw	r5,-12(fp)
    22d0:	e1bffe17 	ldw	r6,-8(fp)
    22d4:	e1ffff17 	ldw	r7,-4(fp)
    22d8:	103ee83a 	callr	r2
    22dc:	00000106 	br	22e4 <open+0x104>
    22e0:	0005883a 	mov	r2,zero
    22e4:	e0bffa15 	stw	r2,-24(fp)
    22e8:	00000206 	br	22f4 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    22ec:	00bffb44 	movi	r2,-19
    22f0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    22f4:	e0bffa17 	ldw	r2,-24(fp)
    22f8:	1000080e 	bge	r2,zero,231c <open+0x13c>
  {
    alt_release_fd (index);  
    22fc:	e13ff917 	ldw	r4,-28(fp)
    2300:	00023340 	call	2334 <alt_release_fd>
    ALT_ERRNO = -status;
    2304:	00020c40 	call	20c4 <alt_get_errno>
    2308:	e0fffa17 	ldw	r3,-24(fp)
    230c:	00c7c83a 	sub	r3,zero,r3
    2310:	10c00015 	stw	r3,0(r2)
    return -1;
    2314:	00bfffc4 	movi	r2,-1
    2318:	00000106 	br	2320 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    231c:	e0bff917 	ldw	r2,-28(fp)
}
    2320:	e037883a 	mov	sp,fp
    2324:	dfc00117 	ldw	ra,4(sp)
    2328:	df000017 	ldw	fp,0(sp)
    232c:	dec00204 	addi	sp,sp,8
    2330:	f800283a 	ret

00002334 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    2334:	defffe04 	addi	sp,sp,-8
    2338:	df000115 	stw	fp,4(sp)
    233c:	df000104 	addi	fp,sp,4
    2340:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    2344:	e0bfff17 	ldw	r2,-4(fp)
    2348:	108000d0 	cmplti	r2,r2,3
    234c:	10000d1e 	bne	r2,zero,2384 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    2350:	00c00034 	movhi	r3,0
    2354:	18d96b04 	addi	r3,r3,26028
    2358:	e0bfff17 	ldw	r2,-4(fp)
    235c:	10800324 	muli	r2,r2,12
    2360:	1885883a 	add	r2,r3,r2
    2364:	10800204 	addi	r2,r2,8
    2368:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    236c:	00c00034 	movhi	r3,0
    2370:	18d96b04 	addi	r3,r3,26028
    2374:	e0bfff17 	ldw	r2,-4(fp)
    2378:	10800324 	muli	r2,r2,12
    237c:	1885883a 	add	r2,r3,r2
    2380:	10000015 	stw	zero,0(r2)
  }
}
    2384:	e037883a 	mov	sp,fp
    2388:	df000017 	ldw	fp,0(sp)
    238c:	dec00104 	addi	sp,sp,4
    2390:	f800283a 	ret

00002394 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    2394:	defffa04 	addi	sp,sp,-24
    2398:	df000515 	stw	fp,20(sp)
    239c:	df000504 	addi	fp,sp,20
    23a0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    23a4:	0005303a 	rdctl	r2,status
    23a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    23ac:	e0fffc17 	ldw	r3,-16(fp)
    23b0:	00bfff84 	movi	r2,-2
    23b4:	1884703a 	and	r2,r3,r2
    23b8:	1001703a 	wrctl	status,r2
  
  return context;
    23bc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    23c0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    23c4:	e0bfff17 	ldw	r2,-4(fp)
    23c8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    23cc:	e0bffd17 	ldw	r2,-12(fp)
    23d0:	10800017 	ldw	r2,0(r2)
    23d4:	e0fffd17 	ldw	r3,-12(fp)
    23d8:	18c00117 	ldw	r3,4(r3)
    23dc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    23e0:	e0bffd17 	ldw	r2,-12(fp)
    23e4:	10800117 	ldw	r2,4(r2)
    23e8:	e0fffd17 	ldw	r3,-12(fp)
    23ec:	18c00017 	ldw	r3,0(r3)
    23f0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    23f4:	e0bffd17 	ldw	r2,-12(fp)
    23f8:	e0fffd17 	ldw	r3,-12(fp)
    23fc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    2400:	e0bffd17 	ldw	r2,-12(fp)
    2404:	e0fffd17 	ldw	r3,-12(fp)
    2408:	10c00015 	stw	r3,0(r2)
    240c:	e0bffb17 	ldw	r2,-20(fp)
    2410:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2414:	e0bffe17 	ldw	r2,-8(fp)
    2418:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    241c:	e037883a 	mov	sp,fp
    2420:	df000017 	ldw	fp,0(sp)
    2424:	dec00104 	addi	sp,sp,4
    2428:	f800283a 	ret

0000242c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    242c:	defffb04 	addi	sp,sp,-20
    2430:	dfc00415 	stw	ra,16(sp)
    2434:	df000315 	stw	fp,12(sp)
    2438:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    243c:	d0a00717 	ldw	r2,-32740(gp)
    2440:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    2444:	d0a6b117 	ldw	r2,-25916(gp)
    2448:	10800044 	addi	r2,r2,1
    244c:	d0a6b115 	stw	r2,-25916(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2450:	00002e06 	br	250c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    2454:	e0bffd17 	ldw	r2,-12(fp)
    2458:	10800017 	ldw	r2,0(r2)
    245c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    2460:	e0bffd17 	ldw	r2,-12(fp)
    2464:	10800403 	ldbu	r2,16(r2)
    2468:	10803fcc 	andi	r2,r2,255
    246c:	10000426 	beq	r2,zero,2480 <alt_tick+0x54>
    2470:	d0a6b117 	ldw	r2,-25916(gp)
    2474:	1000021e 	bne	r2,zero,2480 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    2478:	e0bffd17 	ldw	r2,-12(fp)
    247c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    2480:	e0bffd17 	ldw	r2,-12(fp)
    2484:	10800217 	ldw	r2,8(r2)
    2488:	d0e6b117 	ldw	r3,-25916(gp)
    248c:	18801d36 	bltu	r3,r2,2504 <alt_tick+0xd8>
    2490:	e0bffd17 	ldw	r2,-12(fp)
    2494:	10800403 	ldbu	r2,16(r2)
    2498:	10803fcc 	andi	r2,r2,255
    249c:	1000191e 	bne	r2,zero,2504 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    24a0:	e0bffd17 	ldw	r2,-12(fp)
    24a4:	10800317 	ldw	r2,12(r2)
    24a8:	e0fffd17 	ldw	r3,-12(fp)
    24ac:	18c00517 	ldw	r3,20(r3)
    24b0:	1809883a 	mov	r4,r3
    24b4:	103ee83a 	callr	r2
    24b8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    24bc:	e0bfff17 	ldw	r2,-4(fp)
    24c0:	1000031e 	bne	r2,zero,24d0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    24c4:	e13ffd17 	ldw	r4,-12(fp)
    24c8:	00023940 	call	2394 <alt_alarm_stop>
    24cc:	00000d06 	br	2504 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    24d0:	e0bffd17 	ldw	r2,-12(fp)
    24d4:	10c00217 	ldw	r3,8(r2)
    24d8:	e0bfff17 	ldw	r2,-4(fp)
    24dc:	1887883a 	add	r3,r3,r2
    24e0:	e0bffd17 	ldw	r2,-12(fp)
    24e4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    24e8:	e0bffd17 	ldw	r2,-12(fp)
    24ec:	10c00217 	ldw	r3,8(r2)
    24f0:	d0a6b117 	ldw	r2,-25916(gp)
    24f4:	1880032e 	bgeu	r3,r2,2504 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    24f8:	e0bffd17 	ldw	r2,-12(fp)
    24fc:	00c00044 	movi	r3,1
    2500:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    2504:	e0bffe17 	ldw	r2,-8(fp)
    2508:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    250c:	e0fffd17 	ldw	r3,-12(fp)
    2510:	d0a00704 	addi	r2,gp,-32740
    2514:	18bfcf1e 	bne	r3,r2,2454 <__alt_mem_onchip_memory2_0+0xfdffe454>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    2518:	0001883a 	nop
}
    251c:	e037883a 	mov	sp,fp
    2520:	dfc00117 	ldw	ra,4(sp)
    2524:	df000017 	ldw	fp,0(sp)
    2528:	dec00204 	addi	sp,sp,8
    252c:	f800283a 	ret

00002530 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    2530:	deffff04 	addi	sp,sp,-4
    2534:	df000015 	stw	fp,0(sp)
    2538:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    253c:	000170fa 	wrctl	ienable,zero
}
    2540:	e037883a 	mov	sp,fp
    2544:	df000017 	ldw	fp,0(sp)
    2548:	dec00104 	addi	sp,sp,4
    254c:	f800283a 	ret

00002550 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    2550:	defffa04 	addi	sp,sp,-24
    2554:	dfc00515 	stw	ra,20(sp)
    2558:	df000415 	stw	fp,16(sp)
    255c:	df000404 	addi	fp,sp,16
    2560:	e13ffe15 	stw	r4,-8(fp)
    2564:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    2568:	e0bfff17 	ldw	r2,-4(fp)
    256c:	10800017 	ldw	r2,0(r2)
    2570:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    2574:	e13ffe17 	ldw	r4,-8(fp)
    2578:	0002b740 	call	2b74 <strlen>
    257c:	10800044 	addi	r2,r2,1
    2580:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2584:	00000d06 	br	25bc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    2588:	e0bffc17 	ldw	r2,-16(fp)
    258c:	10c00217 	ldw	r3,8(r2)
    2590:	e0bffd17 	ldw	r2,-12(fp)
    2594:	1809883a 	mov	r4,r3
    2598:	e17ffe17 	ldw	r5,-8(fp)
    259c:	100d883a 	mov	r6,r2
    25a0:	00028800 	call	2880 <memcmp>
    25a4:	1000021e 	bne	r2,zero,25b0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    25a8:	e0bffc17 	ldw	r2,-16(fp)
    25ac:	00000706 	br	25cc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    25b0:	e0bffc17 	ldw	r2,-16(fp)
    25b4:	10800017 	ldw	r2,0(r2)
    25b8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    25bc:	e0fffc17 	ldw	r3,-16(fp)
    25c0:	e0bfff17 	ldw	r2,-4(fp)
    25c4:	18bff01e 	bne	r3,r2,2588 <__alt_mem_onchip_memory2_0+0xfdffe588>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    25c8:	0005883a 	mov	r2,zero
}
    25cc:	e037883a 	mov	sp,fp
    25d0:	dfc00117 	ldw	ra,4(sp)
    25d4:	df000017 	ldw	fp,0(sp)
    25d8:	dec00204 	addi	sp,sp,8
    25dc:	f800283a 	ret

000025e0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    25e0:	defffb04 	addi	sp,sp,-20
    25e4:	dfc00415 	stw	ra,16(sp)
    25e8:	df000315 	stw	fp,12(sp)
    25ec:	df000304 	addi	fp,sp,12
    25f0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    25f4:	00800034 	movhi	r2,0
    25f8:	109bd704 	addi	r2,r2,28508
    25fc:	10800017 	ldw	r2,0(r2)
    2600:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2604:	00003106 	br	26cc <alt_find_file+0xec>
  {
    len = strlen(next->name);
    2608:	e0bffd17 	ldw	r2,-12(fp)
    260c:	10800217 	ldw	r2,8(r2)
    2610:	1009883a 	mov	r4,r2
    2614:	0002b740 	call	2b74 <strlen>
    2618:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    261c:	e0bffd17 	ldw	r2,-12(fp)
    2620:	10c00217 	ldw	r3,8(r2)
    2624:	e0bffe17 	ldw	r2,-8(fp)
    2628:	10bfffc4 	addi	r2,r2,-1
    262c:	1885883a 	add	r2,r3,r2
    2630:	10800003 	ldbu	r2,0(r2)
    2634:	10803fcc 	andi	r2,r2,255
    2638:	1080201c 	xori	r2,r2,128
    263c:	10bfe004 	addi	r2,r2,-128
    2640:	10800bd8 	cmpnei	r2,r2,47
    2644:	1000031e 	bne	r2,zero,2654 <alt_find_file+0x74>
    {
      len -= 1;
    2648:	e0bffe17 	ldw	r2,-8(fp)
    264c:	10bfffc4 	addi	r2,r2,-1
    2650:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    2654:	e0bffe17 	ldw	r2,-8(fp)
    2658:	e0ffff17 	ldw	r3,-4(fp)
    265c:	1885883a 	add	r2,r3,r2
    2660:	10800003 	ldbu	r2,0(r2)
    2664:	10803fcc 	andi	r2,r2,255
    2668:	1080201c 	xori	r2,r2,128
    266c:	10bfe004 	addi	r2,r2,-128
    2670:	10800be0 	cmpeqi	r2,r2,47
    2674:	1000081e 	bne	r2,zero,2698 <alt_find_file+0xb8>
    2678:	e0bffe17 	ldw	r2,-8(fp)
    267c:	e0ffff17 	ldw	r3,-4(fp)
    2680:	1885883a 	add	r2,r3,r2
    2684:	10800003 	ldbu	r2,0(r2)
    2688:	10803fcc 	andi	r2,r2,255
    268c:	1080201c 	xori	r2,r2,128
    2690:	10bfe004 	addi	r2,r2,-128
    2694:	10000a1e 	bne	r2,zero,26c0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    2698:	e0bffd17 	ldw	r2,-12(fp)
    269c:	10c00217 	ldw	r3,8(r2)
    26a0:	e0bffe17 	ldw	r2,-8(fp)
    26a4:	1809883a 	mov	r4,r3
    26a8:	e17fff17 	ldw	r5,-4(fp)
    26ac:	100d883a 	mov	r6,r2
    26b0:	00028800 	call	2880 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    26b4:	1000021e 	bne	r2,zero,26c0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    26b8:	e0bffd17 	ldw	r2,-12(fp)
    26bc:	00000806 	br	26e0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    26c0:	e0bffd17 	ldw	r2,-12(fp)
    26c4:	10800017 	ldw	r2,0(r2)
    26c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    26cc:	e0fffd17 	ldw	r3,-12(fp)
    26d0:	00800034 	movhi	r2,0
    26d4:	109bd704 	addi	r2,r2,28508
    26d8:	18bfcb1e 	bne	r3,r2,2608 <__alt_mem_onchip_memory2_0+0xfdffe608>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    26dc:	0005883a 	mov	r2,zero
}
    26e0:	e037883a 	mov	sp,fp
    26e4:	dfc00117 	ldw	ra,4(sp)
    26e8:	df000017 	ldw	fp,0(sp)
    26ec:	dec00204 	addi	sp,sp,8
    26f0:	f800283a 	ret

000026f4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    26f4:	defffc04 	addi	sp,sp,-16
    26f8:	df000315 	stw	fp,12(sp)
    26fc:	df000304 	addi	fp,sp,12
    2700:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    2704:	00bffa04 	movi	r2,-24
    2708:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    270c:	e03ffd15 	stw	zero,-12(fp)
    2710:	00001d06 	br	2788 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    2714:	00c00034 	movhi	r3,0
    2718:	18d96b04 	addi	r3,r3,26028
    271c:	e0bffd17 	ldw	r2,-12(fp)
    2720:	10800324 	muli	r2,r2,12
    2724:	1885883a 	add	r2,r3,r2
    2728:	10800017 	ldw	r2,0(r2)
    272c:	1000131e 	bne	r2,zero,277c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    2730:	00c00034 	movhi	r3,0
    2734:	18d96b04 	addi	r3,r3,26028
    2738:	e0bffd17 	ldw	r2,-12(fp)
    273c:	10800324 	muli	r2,r2,12
    2740:	1885883a 	add	r2,r3,r2
    2744:	e0ffff17 	ldw	r3,-4(fp)
    2748:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    274c:	00800034 	movhi	r2,0
    2750:	109bdb04 	addi	r2,r2,28524
    2754:	10c00017 	ldw	r3,0(r2)
    2758:	e0bffd17 	ldw	r2,-12(fp)
    275c:	1880040e 	bge	r3,r2,2770 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    2760:	00800034 	movhi	r2,0
    2764:	109bdb04 	addi	r2,r2,28524
    2768:	e0fffd17 	ldw	r3,-12(fp)
    276c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    2770:	e0bffd17 	ldw	r2,-12(fp)
    2774:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    2778:	00000606 	br	2794 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    277c:	e0bffd17 	ldw	r2,-12(fp)
    2780:	10800044 	addi	r2,r2,1
    2784:	e0bffd15 	stw	r2,-12(fp)
    2788:	e0bffd17 	ldw	r2,-12(fp)
    278c:	10800810 	cmplti	r2,r2,32
    2790:	103fe01e 	bne	r2,zero,2714 <__alt_mem_onchip_memory2_0+0xfdffe714>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    2794:	e0bffe17 	ldw	r2,-8(fp)
}
    2798:	e037883a 	mov	sp,fp
    279c:	df000017 	ldw	fp,0(sp)
    27a0:	dec00104 	addi	sp,sp,4
    27a4:	f800283a 	ret

000027a8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    27a8:	defffb04 	addi	sp,sp,-20
    27ac:	df000415 	stw	fp,16(sp)
    27b0:	df000404 	addi	fp,sp,16
    27b4:	e13ffe15 	stw	r4,-8(fp)
    27b8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    27bc:	e0bfff17 	ldw	r2,-4(fp)
    27c0:	10840070 	cmpltui	r2,r2,4097
    27c4:	1000021e 	bne	r2,zero,27d0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    27c8:	00840004 	movi	r2,4096
    27cc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    27d0:	e0fffe17 	ldw	r3,-8(fp)
    27d4:	e0bfff17 	ldw	r2,-4(fp)
    27d8:	1885883a 	add	r2,r3,r2
    27dc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    27e0:	e0bffe17 	ldw	r2,-8(fp)
    27e4:	e0bffc15 	stw	r2,-16(fp)
    27e8:	00000506 	br	2800 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    27ec:	e0bffc17 	ldw	r2,-16(fp)
    27f0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    27f4:	e0bffc17 	ldw	r2,-16(fp)
    27f8:	10800804 	addi	r2,r2,32
    27fc:	e0bffc15 	stw	r2,-16(fp)
    2800:	e0fffc17 	ldw	r3,-16(fp)
    2804:	e0bffd17 	ldw	r2,-12(fp)
    2808:	18bff836 	bltu	r3,r2,27ec <__alt_mem_onchip_memory2_0+0xfdffe7ec>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    280c:	e0bffe17 	ldw	r2,-8(fp)
    2810:	108007cc 	andi	r2,r2,31
    2814:	10000226 	beq	r2,zero,2820 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    2818:	e0bffc17 	ldw	r2,-16(fp)
    281c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    2820:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    2824:	e037883a 	mov	sp,fp
    2828:	df000017 	ldw	fp,0(sp)
    282c:	dec00104 	addi	sp,sp,4
    2830:	f800283a 	ret

00002834 <atexit>:
    2834:	200b883a 	mov	r5,r4
    2838:	000d883a 	mov	r6,zero
    283c:	0009883a 	mov	r4,zero
    2840:	000f883a 	mov	r7,zero
    2844:	0002ed41 	jmpi	2ed4 <__register_exitproc>

00002848 <exit>:
    2848:	defffe04 	addi	sp,sp,-8
    284c:	000b883a 	mov	r5,zero
    2850:	dc000015 	stw	r16,0(sp)
    2854:	dfc00115 	stw	ra,4(sp)
    2858:	2021883a 	mov	r16,r4
    285c:	0002ff00 	call	2ff0 <__call_exitprocs>
    2860:	00800034 	movhi	r2,0
    2864:	109bdf04 	addi	r2,r2,28540
    2868:	11000017 	ldw	r4,0(r2)
    286c:	20800f17 	ldw	r2,60(r4)
    2870:	10000126 	beq	r2,zero,2878 <exit+0x30>
    2874:	103ee83a 	callr	r2
    2878:	8009883a 	mov	r4,r16
    287c:	0004df40 	call	4df4 <_exit>

00002880 <memcmp>:
    2880:	01c000c4 	movi	r7,3
    2884:	3980192e 	bgeu	r7,r6,28ec <memcmp+0x6c>
    2888:	2144b03a 	or	r2,r4,r5
    288c:	11c4703a 	and	r2,r2,r7
    2890:	10000f26 	beq	r2,zero,28d0 <memcmp+0x50>
    2894:	21c00003 	ldbu	r7,0(r4)
    2898:	28800003 	ldbu	r2,0(r5)
    289c:	3880151e 	bne	r7,r2,28f4 <memcmp+0x74>
    28a0:	30ffff84 	addi	r3,r6,-2
    28a4:	01bfffc4 	movi	r6,-1
    28a8:	00000406 	br	28bc <memcmp+0x3c>
    28ac:	21c00003 	ldbu	r7,0(r4)
    28b0:	28800003 	ldbu	r2,0(r5)
    28b4:	18ffffc4 	addi	r3,r3,-1
    28b8:	38800e1e 	bne	r7,r2,28f4 <memcmp+0x74>
    28bc:	21000044 	addi	r4,r4,1
    28c0:	29400044 	addi	r5,r5,1
    28c4:	19bff91e 	bne	r3,r6,28ac <__alt_mem_onchip_memory2_0+0xfdffe8ac>
    28c8:	0005883a 	mov	r2,zero
    28cc:	f800283a 	ret
    28d0:	20c00017 	ldw	r3,0(r4)
    28d4:	28800017 	ldw	r2,0(r5)
    28d8:	1880041e 	bne	r3,r2,28ec <memcmp+0x6c>
    28dc:	31bfff04 	addi	r6,r6,-4
    28e0:	21000104 	addi	r4,r4,4
    28e4:	29400104 	addi	r5,r5,4
    28e8:	39bff936 	bltu	r7,r6,28d0 <__alt_mem_onchip_memory2_0+0xfdffe8d0>
    28ec:	303fe91e 	bne	r6,zero,2894 <__alt_mem_onchip_memory2_0+0xfdffe894>
    28f0:	003ff506 	br	28c8 <__alt_mem_onchip_memory2_0+0xfdffe8c8>
    28f4:	3885c83a 	sub	r2,r7,r2
    28f8:	f800283a 	ret

000028fc <memcpy>:
    28fc:	00c003c4 	movi	r3,15
    2900:	2005883a 	mov	r2,r4
    2904:	1980372e 	bgeu	r3,r6,29e4 <memcpy+0xe8>
    2908:	2146b03a 	or	r3,r4,r5
    290c:	18c000cc 	andi	r3,r3,3
    2910:	1800371e 	bne	r3,zero,29f0 <memcpy+0xf4>
    2914:	327ffc04 	addi	r9,r6,-16
    2918:	4812d13a 	srli	r9,r9,4
    291c:	2007883a 	mov	r3,r4
    2920:	280f883a 	mov	r7,r5
    2924:	4808913a 	slli	r4,r9,4
    2928:	1109883a 	add	r4,r2,r4
    292c:	21000404 	addi	r4,r4,16
    2930:	3a000017 	ldw	r8,0(r7)
    2934:	18c00404 	addi	r3,r3,16
    2938:	39c00404 	addi	r7,r7,16
    293c:	1a3ffc15 	stw	r8,-16(r3)
    2940:	3a3ffd17 	ldw	r8,-12(r7)
    2944:	1a3ffd15 	stw	r8,-12(r3)
    2948:	3a3ffe17 	ldw	r8,-8(r7)
    294c:	1a3ffe15 	stw	r8,-8(r3)
    2950:	3a3fff17 	ldw	r8,-4(r7)
    2954:	1a3fff15 	stw	r8,-4(r3)
    2958:	193ff51e 	bne	r3,r4,2930 <__alt_mem_onchip_memory2_0+0xfdffe930>
    295c:	49000044 	addi	r4,r9,1
    2960:	2008913a 	slli	r4,r4,4
    2964:	328003cc 	andi	r10,r6,15
    2968:	1107883a 	add	r3,r2,r4
    296c:	290b883a 	add	r5,r5,r4
    2970:	010000c4 	movi	r4,3
    2974:	2280212e 	bgeu	r4,r10,29fc <memcpy+0x100>
    2978:	52bfff04 	addi	r10,r10,-4
    297c:	5014d0ba 	srli	r10,r10,2
    2980:	180f883a 	mov	r7,r3
    2984:	2811883a 	mov	r8,r5
    2988:	5289883a 	add	r4,r10,r10
    298c:	2109883a 	add	r4,r4,r4
    2990:	21000104 	addi	r4,r4,4
    2994:	1909883a 	add	r4,r3,r4
    2998:	42400017 	ldw	r9,0(r8)
    299c:	39c00104 	addi	r7,r7,4
    29a0:	42000104 	addi	r8,r8,4
    29a4:	3a7fff15 	stw	r9,-4(r7)
    29a8:	393ffb1e 	bne	r7,r4,2998 <__alt_mem_onchip_memory2_0+0xfdffe998>
    29ac:	51000044 	addi	r4,r10,1
    29b0:	2109883a 	add	r4,r4,r4
    29b4:	2109883a 	add	r4,r4,r4
    29b8:	318000cc 	andi	r6,r6,3
    29bc:	1907883a 	add	r3,r3,r4
    29c0:	290b883a 	add	r5,r5,r4
    29c4:	30000c26 	beq	r6,zero,29f8 <memcpy+0xfc>
    29c8:	298d883a 	add	r6,r5,r6
    29cc:	29c00003 	ldbu	r7,0(r5)
    29d0:	18c00044 	addi	r3,r3,1
    29d4:	29400044 	addi	r5,r5,1
    29d8:	19ffffc5 	stb	r7,-1(r3)
    29dc:	29bffb1e 	bne	r5,r6,29cc <__alt_mem_onchip_memory2_0+0xfdffe9cc>
    29e0:	f800283a 	ret
    29e4:	2007883a 	mov	r3,r4
    29e8:	303ff71e 	bne	r6,zero,29c8 <__alt_mem_onchip_memory2_0+0xfdffe9c8>
    29ec:	00000206 	br	29f8 <memcpy+0xfc>
    29f0:	2007883a 	mov	r3,r4
    29f4:	003ff406 	br	29c8 <__alt_mem_onchip_memory2_0+0xfdffe9c8>
    29f8:	f800283a 	ret
    29fc:	500d883a 	mov	r6,r10
    2a00:	303ff11e 	bne	r6,zero,29c8 <__alt_mem_onchip_memory2_0+0xfdffe9c8>
    2a04:	003ffc06 	br	29f8 <__alt_mem_onchip_memory2_0+0xfdffe9f8>

00002a08 <_putc_r>:
    2a08:	defffc04 	addi	sp,sp,-16
    2a0c:	dc000215 	stw	r16,8(sp)
    2a10:	dfc00315 	stw	ra,12(sp)
    2a14:	2021883a 	mov	r16,r4
    2a18:	20000226 	beq	r4,zero,2a24 <_putc_r+0x1c>
    2a1c:	20800e17 	ldw	r2,56(r4)
    2a20:	10001b26 	beq	r2,zero,2a90 <_putc_r+0x88>
    2a24:	30800217 	ldw	r2,8(r6)
    2a28:	10bfffc4 	addi	r2,r2,-1
    2a2c:	30800215 	stw	r2,8(r6)
    2a30:	10000a16 	blt	r2,zero,2a5c <_putc_r+0x54>
    2a34:	30800017 	ldw	r2,0(r6)
    2a38:	11400005 	stb	r5,0(r2)
    2a3c:	30800017 	ldw	r2,0(r6)
    2a40:	10c00044 	addi	r3,r2,1
    2a44:	30c00015 	stw	r3,0(r6)
    2a48:	10800003 	ldbu	r2,0(r2)
    2a4c:	dfc00317 	ldw	ra,12(sp)
    2a50:	dc000217 	ldw	r16,8(sp)
    2a54:	dec00404 	addi	sp,sp,16
    2a58:	f800283a 	ret
    2a5c:	30c00617 	ldw	r3,24(r6)
    2a60:	10c00616 	blt	r2,r3,2a7c <_putc_r+0x74>
    2a64:	30800017 	ldw	r2,0(r6)
    2a68:	00c00284 	movi	r3,10
    2a6c:	11400005 	stb	r5,0(r2)
    2a70:	30800017 	ldw	r2,0(r6)
    2a74:	11400003 	ldbu	r5,0(r2)
    2a78:	28fff11e 	bne	r5,r3,2a40 <__alt_mem_onchip_memory2_0+0xfdffea40>
    2a7c:	8009883a 	mov	r4,r16
    2a80:	dfc00317 	ldw	ra,12(sp)
    2a84:	dc000217 	ldw	r16,8(sp)
    2a88:	dec00404 	addi	sp,sp,16
    2a8c:	0002c001 	jmpi	2c00 <__swbuf_r>
    2a90:	d9400015 	stw	r5,0(sp)
    2a94:	d9800115 	stw	r6,4(sp)
    2a98:	00034a00 	call	34a0 <__sinit>
    2a9c:	d9800117 	ldw	r6,4(sp)
    2aa0:	d9400017 	ldw	r5,0(sp)
    2aa4:	003fdf06 	br	2a24 <__alt_mem_onchip_memory2_0+0xfdffea24>

00002aa8 <putc>:
    2aa8:	defffc04 	addi	sp,sp,-16
    2aac:	dc400115 	stw	r17,4(sp)
    2ab0:	04400034 	movhi	r17,0
    2ab4:	8c5be004 	addi	r17,r17,28544
    2ab8:	88800017 	ldw	r2,0(r17)
    2abc:	dc800215 	stw	r18,8(sp)
    2ac0:	dc000015 	stw	r16,0(sp)
    2ac4:	dfc00315 	stw	ra,12(sp)
    2ac8:	2025883a 	mov	r18,r4
    2acc:	2821883a 	mov	r16,r5
    2ad0:	10000226 	beq	r2,zero,2adc <putc+0x34>
    2ad4:	10c00e17 	ldw	r3,56(r2)
    2ad8:	18001a26 	beq	r3,zero,2b44 <putc+0x9c>
    2adc:	80800217 	ldw	r2,8(r16)
    2ae0:	10bfffc4 	addi	r2,r2,-1
    2ae4:	80800215 	stw	r2,8(r16)
    2ae8:	10000c16 	blt	r2,zero,2b1c <putc+0x74>
    2aec:	80800017 	ldw	r2,0(r16)
    2af0:	14800005 	stb	r18,0(r2)
    2af4:	80800017 	ldw	r2,0(r16)
    2af8:	10c00044 	addi	r3,r2,1
    2afc:	80c00015 	stw	r3,0(r16)
    2b00:	10800003 	ldbu	r2,0(r2)
    2b04:	dfc00317 	ldw	ra,12(sp)
    2b08:	dc800217 	ldw	r18,8(sp)
    2b0c:	dc400117 	ldw	r17,4(sp)
    2b10:	dc000017 	ldw	r16,0(sp)
    2b14:	dec00404 	addi	sp,sp,16
    2b18:	f800283a 	ret
    2b1c:	80c00617 	ldw	r3,24(r16)
    2b20:	10c00b16 	blt	r2,r3,2b50 <putc+0xa8>
    2b24:	80800017 	ldw	r2,0(r16)
    2b28:	00c00284 	movi	r3,10
    2b2c:	14800005 	stb	r18,0(r2)
    2b30:	80800017 	ldw	r2,0(r16)
    2b34:	11400003 	ldbu	r5,0(r2)
    2b38:	28ffef1e 	bne	r5,r3,2af8 <__alt_mem_onchip_memory2_0+0xfdffeaf8>
    2b3c:	89000017 	ldw	r4,0(r17)
    2b40:	00000506 	br	2b58 <putc+0xb0>
    2b44:	1009883a 	mov	r4,r2
    2b48:	00034a00 	call	34a0 <__sinit>
    2b4c:	003fe306 	br	2adc <__alt_mem_onchip_memory2_0+0xfdffeadc>
    2b50:	89000017 	ldw	r4,0(r17)
    2b54:	900b883a 	mov	r5,r18
    2b58:	800d883a 	mov	r6,r16
    2b5c:	dfc00317 	ldw	ra,12(sp)
    2b60:	dc800217 	ldw	r18,8(sp)
    2b64:	dc400117 	ldw	r17,4(sp)
    2b68:	dc000017 	ldw	r16,0(sp)
    2b6c:	dec00404 	addi	sp,sp,16
    2b70:	0002c001 	jmpi	2c00 <__swbuf_r>

00002b74 <strlen>:
    2b74:	208000cc 	andi	r2,r4,3
    2b78:	10001d26 	beq	r2,zero,2bf0 <strlen+0x7c>
    2b7c:	20800007 	ldb	r2,0(r4)
    2b80:	10001d26 	beq	r2,zero,2bf8 <strlen+0x84>
    2b84:	2005883a 	mov	r2,r4
    2b88:	00000206 	br	2b94 <strlen+0x20>
    2b8c:	10c00007 	ldb	r3,0(r2)
    2b90:	18001526 	beq	r3,zero,2be8 <strlen+0x74>
    2b94:	10800044 	addi	r2,r2,1
    2b98:	10c000cc 	andi	r3,r2,3
    2b9c:	183ffb1e 	bne	r3,zero,2b8c <__alt_mem_onchip_memory2_0+0xfdffeb8c>
    2ba0:	10c00017 	ldw	r3,0(r2)
    2ba4:	01ffbff4 	movhi	r7,65279
    2ba8:	39ffbfc4 	addi	r7,r7,-257
    2bac:	01a02074 	movhi	r6,32897
    2bb0:	31a02004 	addi	r6,r6,-32640
    2bb4:	00000206 	br	2bc0 <strlen+0x4c>
    2bb8:	10800104 	addi	r2,r2,4
    2bbc:	10c00017 	ldw	r3,0(r2)
    2bc0:	19cb883a 	add	r5,r3,r7
    2bc4:	00c6303a 	nor	r3,zero,r3
    2bc8:	28c6703a 	and	r3,r5,r3
    2bcc:	1986703a 	and	r3,r3,r6
    2bd0:	183ff926 	beq	r3,zero,2bb8 <__alt_mem_onchip_memory2_0+0xfdffebb8>
    2bd4:	10c00007 	ldb	r3,0(r2)
    2bd8:	18000326 	beq	r3,zero,2be8 <strlen+0x74>
    2bdc:	10800044 	addi	r2,r2,1
    2be0:	10c00007 	ldb	r3,0(r2)
    2be4:	183ffd1e 	bne	r3,zero,2bdc <__alt_mem_onchip_memory2_0+0xfdffebdc>
    2be8:	1105c83a 	sub	r2,r2,r4
    2bec:	f800283a 	ret
    2bf0:	2005883a 	mov	r2,r4
    2bf4:	003fea06 	br	2ba0 <__alt_mem_onchip_memory2_0+0xfdffeba0>
    2bf8:	0005883a 	mov	r2,zero
    2bfc:	f800283a 	ret

00002c00 <__swbuf_r>:
    2c00:	defffc04 	addi	sp,sp,-16
    2c04:	dc800215 	stw	r18,8(sp)
    2c08:	dc400115 	stw	r17,4(sp)
    2c0c:	dc000015 	stw	r16,0(sp)
    2c10:	dfc00315 	stw	ra,12(sp)
    2c14:	2023883a 	mov	r17,r4
    2c18:	2825883a 	mov	r18,r5
    2c1c:	3021883a 	mov	r16,r6
    2c20:	20000226 	beq	r4,zero,2c2c <__swbuf_r+0x2c>
    2c24:	20800e17 	ldw	r2,56(r4)
    2c28:	10004d26 	beq	r2,zero,2d60 <__swbuf_r+0x160>
    2c2c:	80800617 	ldw	r2,24(r16)
    2c30:	80c0030b 	ldhu	r3,12(r16)
    2c34:	80800215 	stw	r2,8(r16)
    2c38:	1880020c 	andi	r2,r3,8
    2c3c:	10004126 	beq	r2,zero,2d44 <__swbuf_r+0x144>
    2c40:	80800417 	ldw	r2,16(r16)
    2c44:	10003f26 	beq	r2,zero,2d44 <__swbuf_r+0x144>
    2c48:	1908000c 	andi	r4,r3,8192
    2c4c:	94803fcc 	andi	r18,r18,255
    2c50:	20001726 	beq	r4,zero,2cb0 <__swbuf_r+0xb0>
    2c54:	80c00017 	ldw	r3,0(r16)
    2c58:	81000517 	ldw	r4,20(r16)
    2c5c:	1885c83a 	sub	r2,r3,r2
    2c60:	11001d0e 	bge	r2,r4,2cd8 <__swbuf_r+0xd8>
    2c64:	81000217 	ldw	r4,8(r16)
    2c68:	19400044 	addi	r5,r3,1
    2c6c:	81400015 	stw	r5,0(r16)
    2c70:	213fffc4 	addi	r4,r4,-1
    2c74:	81000215 	stw	r4,8(r16)
    2c78:	1c800005 	stb	r18,0(r3)
    2c7c:	80c00517 	ldw	r3,20(r16)
    2c80:	10800044 	addi	r2,r2,1
    2c84:	18802226 	beq	r3,r2,2d10 <__swbuf_r+0x110>
    2c88:	8080030b 	ldhu	r2,12(r16)
    2c8c:	1080004c 	andi	r2,r2,1
    2c90:	1000251e 	bne	r2,zero,2d28 <__swbuf_r+0x128>
    2c94:	9005883a 	mov	r2,r18
    2c98:	dfc00317 	ldw	ra,12(sp)
    2c9c:	dc800217 	ldw	r18,8(sp)
    2ca0:	dc400117 	ldw	r17,4(sp)
    2ca4:	dc000017 	ldw	r16,0(sp)
    2ca8:	dec00404 	addi	sp,sp,16
    2cac:	f800283a 	ret
    2cb0:	81401917 	ldw	r5,100(r16)
    2cb4:	18c80014 	ori	r3,r3,8192
    2cb8:	0137ffc4 	movi	r4,-8193
    2cbc:	2908703a 	and	r4,r5,r4
    2cc0:	80c0030d 	sth	r3,12(r16)
    2cc4:	80c00017 	ldw	r3,0(r16)
    2cc8:	81001915 	stw	r4,100(r16)
    2ccc:	81000517 	ldw	r4,20(r16)
    2cd0:	1885c83a 	sub	r2,r3,r2
    2cd4:	113fe316 	blt	r2,r4,2c64 <__alt_mem_onchip_memory2_0+0xfdffec64>
    2cd8:	8809883a 	mov	r4,r17
    2cdc:	800b883a 	mov	r5,r16
    2ce0:	00031940 	call	3194 <_fflush_r>
    2ce4:	10000e1e 	bne	r2,zero,2d20 <__swbuf_r+0x120>
    2ce8:	80c00017 	ldw	r3,0(r16)
    2cec:	81000217 	ldw	r4,8(r16)
    2cf0:	00800044 	movi	r2,1
    2cf4:	19400044 	addi	r5,r3,1
    2cf8:	213fffc4 	addi	r4,r4,-1
    2cfc:	81400015 	stw	r5,0(r16)
    2d00:	81000215 	stw	r4,8(r16)
    2d04:	1c800005 	stb	r18,0(r3)
    2d08:	80c00517 	ldw	r3,20(r16)
    2d0c:	18bfde1e 	bne	r3,r2,2c88 <__alt_mem_onchip_memory2_0+0xfdffec88>
    2d10:	8809883a 	mov	r4,r17
    2d14:	800b883a 	mov	r5,r16
    2d18:	00031940 	call	3194 <_fflush_r>
    2d1c:	103fdd26 	beq	r2,zero,2c94 <__alt_mem_onchip_memory2_0+0xfdffec94>
    2d20:	00bfffc4 	movi	r2,-1
    2d24:	003fdc06 	br	2c98 <__alt_mem_onchip_memory2_0+0xfdffec98>
    2d28:	00800284 	movi	r2,10
    2d2c:	90bfd91e 	bne	r18,r2,2c94 <__alt_mem_onchip_memory2_0+0xfdffec94>
    2d30:	8809883a 	mov	r4,r17
    2d34:	800b883a 	mov	r5,r16
    2d38:	00031940 	call	3194 <_fflush_r>
    2d3c:	103fd526 	beq	r2,zero,2c94 <__alt_mem_onchip_memory2_0+0xfdffec94>
    2d40:	003ff706 	br	2d20 <__alt_mem_onchip_memory2_0+0xfdffed20>
    2d44:	8809883a 	mov	r4,r17
    2d48:	800b883a 	mov	r5,r16
    2d4c:	0002d9c0 	call	2d9c <__swsetup_r>
    2d50:	80c0030b 	ldhu	r3,12(r16)
    2d54:	1000041e 	bne	r2,zero,2d68 <__swbuf_r+0x168>
    2d58:	80800417 	ldw	r2,16(r16)
    2d5c:	003fba06 	br	2c48 <__alt_mem_onchip_memory2_0+0xfdffec48>
    2d60:	00034a00 	call	34a0 <__sinit>
    2d64:	003fb106 	br	2c2c <__alt_mem_onchip_memory2_0+0xfdffec2c>
    2d68:	18c01014 	ori	r3,r3,64
    2d6c:	80c0030d 	sth	r3,12(r16)
    2d70:	00c00244 	movi	r3,9
    2d74:	00bfffc4 	movi	r2,-1
    2d78:	88c00015 	stw	r3,0(r17)
    2d7c:	003fc606 	br	2c98 <__alt_mem_onchip_memory2_0+0xfdffec98>

00002d80 <__swbuf>:
    2d80:	00c00034 	movhi	r3,0
    2d84:	18dbe004 	addi	r3,r3,28544
    2d88:	2005883a 	mov	r2,r4
    2d8c:	19000017 	ldw	r4,0(r3)
    2d90:	280d883a 	mov	r6,r5
    2d94:	100b883a 	mov	r5,r2
    2d98:	0002c001 	jmpi	2c00 <__swbuf_r>

00002d9c <__swsetup_r>:
    2d9c:	00800034 	movhi	r2,0
    2da0:	109be004 	addi	r2,r2,28544
    2da4:	10800017 	ldw	r2,0(r2)
    2da8:	defffd04 	addi	sp,sp,-12
    2dac:	dc400115 	stw	r17,4(sp)
    2db0:	dc000015 	stw	r16,0(sp)
    2db4:	dfc00215 	stw	ra,8(sp)
    2db8:	2023883a 	mov	r17,r4
    2dbc:	2821883a 	mov	r16,r5
    2dc0:	10000226 	beq	r2,zero,2dcc <__swsetup_r+0x30>
    2dc4:	10c00e17 	ldw	r3,56(r2)
    2dc8:	18002e26 	beq	r3,zero,2e84 <__swsetup_r+0xe8>
    2dcc:	8080030b 	ldhu	r2,12(r16)
    2dd0:	10c0020c 	andi	r3,r2,8
    2dd4:	100d883a 	mov	r6,r2
    2dd8:	18000f26 	beq	r3,zero,2e18 <__swsetup_r+0x7c>
    2ddc:	80c00417 	ldw	r3,16(r16)
    2de0:	18001526 	beq	r3,zero,2e38 <__swsetup_r+0x9c>
    2de4:	1100004c 	andi	r4,r2,1
    2de8:	20001c1e 	bne	r4,zero,2e5c <__swsetup_r+0xc0>
    2dec:	1080008c 	andi	r2,r2,2
    2df0:	1000271e 	bne	r2,zero,2e90 <__swsetup_r+0xf4>
    2df4:	80800517 	ldw	r2,20(r16)
    2df8:	80800215 	stw	r2,8(r16)
    2dfc:	18001c26 	beq	r3,zero,2e70 <__swsetup_r+0xd4>
    2e00:	0005883a 	mov	r2,zero
    2e04:	dfc00217 	ldw	ra,8(sp)
    2e08:	dc400117 	ldw	r17,4(sp)
    2e0c:	dc000017 	ldw	r16,0(sp)
    2e10:	dec00304 	addi	sp,sp,12
    2e14:	f800283a 	ret
    2e18:	3080040c 	andi	r2,r6,16
    2e1c:	10001726 	beq	r2,zero,2e7c <__swsetup_r+0xe0>
    2e20:	3080010c 	andi	r2,r6,4
    2e24:	10001d1e 	bne	r2,zero,2e9c <__swsetup_r+0x100>
    2e28:	80c00417 	ldw	r3,16(r16)
    2e2c:	30800214 	ori	r2,r6,8
    2e30:	8080030d 	sth	r2,12(r16)
    2e34:	183feb1e 	bne	r3,zero,2de4 <__alt_mem_onchip_memory2_0+0xfdffede4>
    2e38:	1140a00c 	andi	r5,r2,640
    2e3c:	01008004 	movi	r4,512
    2e40:	293fe826 	beq	r5,r4,2de4 <__alt_mem_onchip_memory2_0+0xfdffede4>
    2e44:	8809883a 	mov	r4,r17
    2e48:	800b883a 	mov	r5,r16
    2e4c:	0003d040 	call	3d04 <__smakebuf_r>
    2e50:	8080030b 	ldhu	r2,12(r16)
    2e54:	80c00417 	ldw	r3,16(r16)
    2e58:	003fe206 	br	2de4 <__alt_mem_onchip_memory2_0+0xfdffede4>
    2e5c:	80800517 	ldw	r2,20(r16)
    2e60:	80000215 	stw	zero,8(r16)
    2e64:	0085c83a 	sub	r2,zero,r2
    2e68:	80800615 	stw	r2,24(r16)
    2e6c:	183fe41e 	bne	r3,zero,2e00 <__alt_mem_onchip_memory2_0+0xfdffee00>
    2e70:	8080030b 	ldhu	r2,12(r16)
    2e74:	1080200c 	andi	r2,r2,128
    2e78:	103fe226 	beq	r2,zero,2e04 <__alt_mem_onchip_memory2_0+0xfdffee04>
    2e7c:	00bfffc4 	movi	r2,-1
    2e80:	003fe006 	br	2e04 <__alt_mem_onchip_memory2_0+0xfdffee04>
    2e84:	1009883a 	mov	r4,r2
    2e88:	00034a00 	call	34a0 <__sinit>
    2e8c:	003fcf06 	br	2dcc <__alt_mem_onchip_memory2_0+0xfdffedcc>
    2e90:	0005883a 	mov	r2,zero
    2e94:	80800215 	stw	r2,8(r16)
    2e98:	003fd806 	br	2dfc <__alt_mem_onchip_memory2_0+0xfdffedfc>
    2e9c:	81400c17 	ldw	r5,48(r16)
    2ea0:	28000626 	beq	r5,zero,2ebc <__swsetup_r+0x120>
    2ea4:	80801004 	addi	r2,r16,64
    2ea8:	28800326 	beq	r5,r2,2eb8 <__swsetup_r+0x11c>
    2eac:	8809883a 	mov	r4,r17
    2eb0:	00038d40 	call	38d4 <_free_r>
    2eb4:	8180030b 	ldhu	r6,12(r16)
    2eb8:	80000c15 	stw	zero,48(r16)
    2ebc:	80c00417 	ldw	r3,16(r16)
    2ec0:	00bff6c4 	movi	r2,-37
    2ec4:	118c703a 	and	r6,r2,r6
    2ec8:	80000115 	stw	zero,4(r16)
    2ecc:	80c00015 	stw	r3,0(r16)
    2ed0:	003fd606 	br	2e2c <__alt_mem_onchip_memory2_0+0xfdffee2c>

00002ed4 <__register_exitproc>:
    2ed4:	defffa04 	addi	sp,sp,-24
    2ed8:	00800034 	movhi	r2,0
    2edc:	109bdf04 	addi	r2,r2,28540
    2ee0:	dc000315 	stw	r16,12(sp)
    2ee4:	14000017 	ldw	r16,0(r2)
    2ee8:	dc400415 	stw	r17,16(sp)
    2eec:	dfc00515 	stw	ra,20(sp)
    2ef0:	80805217 	ldw	r2,328(r16)
    2ef4:	2023883a 	mov	r17,r4
    2ef8:	10003a26 	beq	r2,zero,2fe4 <__register_exitproc+0x110>
    2efc:	10c00117 	ldw	r3,4(r2)
    2f00:	020007c4 	movi	r8,31
    2f04:	40c0190e 	bge	r8,r3,2f6c <__register_exitproc+0x98>
    2f08:	00800034 	movhi	r2,0
    2f0c:	10800004 	addi	r2,r2,0
    2f10:	1000061e 	bne	r2,zero,2f2c <__register_exitproc+0x58>
    2f14:	00bfffc4 	movi	r2,-1
    2f18:	dfc00517 	ldw	ra,20(sp)
    2f1c:	dc400417 	ldw	r17,16(sp)
    2f20:	dc000317 	ldw	r16,12(sp)
    2f24:	dec00604 	addi	sp,sp,24
    2f28:	f800283a 	ret
    2f2c:	01006404 	movi	r4,400
    2f30:	d9400015 	stw	r5,0(sp)
    2f34:	d9800115 	stw	r6,4(sp)
    2f38:	d9c00215 	stw	r7,8(sp)
    2f3c:	00000000 	call	0 <__reset>
    2f40:	d9400017 	ldw	r5,0(sp)
    2f44:	d9800117 	ldw	r6,4(sp)
    2f48:	d9c00217 	ldw	r7,8(sp)
    2f4c:	103ff126 	beq	r2,zero,2f14 <__alt_mem_onchip_memory2_0+0xfdffef14>
    2f50:	81005217 	ldw	r4,328(r16)
    2f54:	10000115 	stw	zero,4(r2)
    2f58:	0007883a 	mov	r3,zero
    2f5c:	11000015 	stw	r4,0(r2)
    2f60:	80805215 	stw	r2,328(r16)
    2f64:	10006215 	stw	zero,392(r2)
    2f68:	10006315 	stw	zero,396(r2)
    2f6c:	88000d1e 	bne	r17,zero,2fa4 <__register_exitproc+0xd0>
    2f70:	19000084 	addi	r4,r3,2
    2f74:	2109883a 	add	r4,r4,r4
    2f78:	18c00044 	addi	r3,r3,1
    2f7c:	2109883a 	add	r4,r4,r4
    2f80:	10c00115 	stw	r3,4(r2)
    2f84:	1105883a 	add	r2,r2,r4
    2f88:	11400015 	stw	r5,0(r2)
    2f8c:	0005883a 	mov	r2,zero
    2f90:	dfc00517 	ldw	ra,20(sp)
    2f94:	dc400417 	ldw	r17,16(sp)
    2f98:	dc000317 	ldw	r16,12(sp)
    2f9c:	dec00604 	addi	sp,sp,24
    2fa0:	f800283a 	ret
    2fa4:	18c9883a 	add	r4,r3,r3
    2fa8:	2109883a 	add	r4,r4,r4
    2fac:	1109883a 	add	r4,r2,r4
    2fb0:	21802215 	stw	r6,136(r4)
    2fb4:	01800044 	movi	r6,1
    2fb8:	12006217 	ldw	r8,392(r2)
    2fbc:	30cc983a 	sll	r6,r6,r3
    2fc0:	4190b03a 	or	r8,r8,r6
    2fc4:	12006215 	stw	r8,392(r2)
    2fc8:	21c04215 	stw	r7,264(r4)
    2fcc:	01000084 	movi	r4,2
    2fd0:	893fe71e 	bne	r17,r4,2f70 <__alt_mem_onchip_memory2_0+0xfdffef70>
    2fd4:	11006317 	ldw	r4,396(r2)
    2fd8:	218cb03a 	or	r6,r4,r6
    2fdc:	11806315 	stw	r6,396(r2)
    2fe0:	003fe306 	br	2f70 <__alt_mem_onchip_memory2_0+0xfdffef70>
    2fe4:	80805304 	addi	r2,r16,332
    2fe8:	80805215 	stw	r2,328(r16)
    2fec:	003fc306 	br	2efc <__alt_mem_onchip_memory2_0+0xfdffeefc>

00002ff0 <__call_exitprocs>:
    2ff0:	00800034 	movhi	r2,0
    2ff4:	109bdf04 	addi	r2,r2,28540
    2ff8:	10800017 	ldw	r2,0(r2)
    2ffc:	defff304 	addi	sp,sp,-52
    3000:	df000b15 	stw	fp,44(sp)
    3004:	d8800015 	stw	r2,0(sp)
    3008:	10805204 	addi	r2,r2,328
    300c:	dd400815 	stw	r21,32(sp)
    3010:	dfc00c15 	stw	ra,48(sp)
    3014:	ddc00a15 	stw	r23,40(sp)
    3018:	dd800915 	stw	r22,36(sp)
    301c:	dd000715 	stw	r20,28(sp)
    3020:	dcc00615 	stw	r19,24(sp)
    3024:	dc800515 	stw	r18,20(sp)
    3028:	dc400415 	stw	r17,16(sp)
    302c:	dc000315 	stw	r16,12(sp)
    3030:	d9000115 	stw	r4,4(sp)
    3034:	2839883a 	mov	fp,r5
    3038:	d8800215 	stw	r2,8(sp)
    303c:	057fffc4 	movi	r21,-1
    3040:	d8800017 	ldw	r2,0(sp)
    3044:	14805217 	ldw	r18,328(r2)
    3048:	90001826 	beq	r18,zero,30ac <__call_exitprocs+0xbc>
    304c:	ddc00217 	ldw	r23,8(sp)
    3050:	90c00117 	ldw	r3,4(r18)
    3054:	1c3fffc4 	addi	r16,r3,-1
    3058:	80001116 	blt	r16,zero,30a0 <__call_exitprocs+0xb0>
    305c:	18c00044 	addi	r3,r3,1
    3060:	8427883a 	add	r19,r16,r16
    3064:	18c7883a 	add	r3,r3,r3
    3068:	95802204 	addi	r22,r18,136
    306c:	9ce7883a 	add	r19,r19,r19
    3070:	18c7883a 	add	r3,r3,r3
    3074:	b4e7883a 	add	r19,r22,r19
    3078:	90e3883a 	add	r17,r18,r3
    307c:	e0001726 	beq	fp,zero,30dc <__call_exitprocs+0xec>
    3080:	8c87c83a 	sub	r3,r17,r18
    3084:	b0c7883a 	add	r3,r22,r3
    3088:	18c01e17 	ldw	r3,120(r3)
    308c:	1f001326 	beq	r3,fp,30dc <__call_exitprocs+0xec>
    3090:	843fffc4 	addi	r16,r16,-1
    3094:	9cffff04 	addi	r19,r19,-4
    3098:	8c7fff04 	addi	r17,r17,-4
    309c:	857ff71e 	bne	r16,r21,307c <__alt_mem_onchip_memory2_0+0xfdfff07c>
    30a0:	00800034 	movhi	r2,0
    30a4:	10800004 	addi	r2,r2,0
    30a8:	10002a1e 	bne	r2,zero,3154 <__call_exitprocs+0x164>
    30ac:	dfc00c17 	ldw	ra,48(sp)
    30b0:	df000b17 	ldw	fp,44(sp)
    30b4:	ddc00a17 	ldw	r23,40(sp)
    30b8:	dd800917 	ldw	r22,36(sp)
    30bc:	dd400817 	ldw	r21,32(sp)
    30c0:	dd000717 	ldw	r20,28(sp)
    30c4:	dcc00617 	ldw	r19,24(sp)
    30c8:	dc800517 	ldw	r18,20(sp)
    30cc:	dc400417 	ldw	r17,16(sp)
    30d0:	dc000317 	ldw	r16,12(sp)
    30d4:	dec00d04 	addi	sp,sp,52
    30d8:	f800283a 	ret
    30dc:	91000117 	ldw	r4,4(r18)
    30e0:	88c00017 	ldw	r3,0(r17)
    30e4:	213fffc4 	addi	r4,r4,-1
    30e8:	24001526 	beq	r4,r16,3140 <__call_exitprocs+0x150>
    30ec:	88000015 	stw	zero,0(r17)
    30f0:	183fe726 	beq	r3,zero,3090 <__alt_mem_onchip_memory2_0+0xfdfff090>
    30f4:	00800044 	movi	r2,1
    30f8:	1408983a 	sll	r4,r2,r16
    30fc:	91406217 	ldw	r5,392(r18)
    3100:	95000117 	ldw	r20,4(r18)
    3104:	214a703a 	and	r5,r4,r5
    3108:	28000b26 	beq	r5,zero,3138 <__call_exitprocs+0x148>
    310c:	91406317 	ldw	r5,396(r18)
    3110:	2148703a 	and	r4,r4,r5
    3114:	20000c1e 	bne	r4,zero,3148 <__call_exitprocs+0x158>
    3118:	99400017 	ldw	r5,0(r19)
    311c:	d9000117 	ldw	r4,4(sp)
    3120:	183ee83a 	callr	r3
    3124:	90c00117 	ldw	r3,4(r18)
    3128:	1d3fc51e 	bne	r3,r20,3040 <__alt_mem_onchip_memory2_0+0xfdfff040>
    312c:	b8c00017 	ldw	r3,0(r23)
    3130:	1cbfd726 	beq	r3,r18,3090 <__alt_mem_onchip_memory2_0+0xfdfff090>
    3134:	003fc206 	br	3040 <__alt_mem_onchip_memory2_0+0xfdfff040>
    3138:	183ee83a 	callr	r3
    313c:	003ff906 	br	3124 <__alt_mem_onchip_memory2_0+0xfdfff124>
    3140:	94000115 	stw	r16,4(r18)
    3144:	003fea06 	br	30f0 <__alt_mem_onchip_memory2_0+0xfdfff0f0>
    3148:	99000017 	ldw	r4,0(r19)
    314c:	183ee83a 	callr	r3
    3150:	003ff406 	br	3124 <__alt_mem_onchip_memory2_0+0xfdfff124>
    3154:	90c00117 	ldw	r3,4(r18)
    3158:	1800081e 	bne	r3,zero,317c <__call_exitprocs+0x18c>
    315c:	90c00017 	ldw	r3,0(r18)
    3160:	18000a26 	beq	r3,zero,318c <__call_exitprocs+0x19c>
    3164:	9009883a 	mov	r4,r18
    3168:	b8c00015 	stw	r3,0(r23)
    316c:	00000000 	call	0 <__reset>
    3170:	bc800017 	ldw	r18,0(r23)
    3174:	903fb61e 	bne	r18,zero,3050 <__alt_mem_onchip_memory2_0+0xfdfff050>
    3178:	003fcc06 	br	30ac <__alt_mem_onchip_memory2_0+0xfdfff0ac>
    317c:	90c00017 	ldw	r3,0(r18)
    3180:	902f883a 	mov	r23,r18
    3184:	1825883a 	mov	r18,r3
    3188:	003ffa06 	br	3174 <__alt_mem_onchip_memory2_0+0xfdfff174>
    318c:	0007883a 	mov	r3,zero
    3190:	003ffb06 	br	3180 <__alt_mem_onchip_memory2_0+0xfdfff180>

00003194 <_fflush_r>:
    3194:	defffb04 	addi	sp,sp,-20
    3198:	dcc00315 	stw	r19,12(sp)
    319c:	dc400115 	stw	r17,4(sp)
    31a0:	dfc00415 	stw	ra,16(sp)
    31a4:	dc800215 	stw	r18,8(sp)
    31a8:	dc000015 	stw	r16,0(sp)
    31ac:	2027883a 	mov	r19,r4
    31b0:	2823883a 	mov	r17,r5
    31b4:	20000226 	beq	r4,zero,31c0 <_fflush_r+0x2c>
    31b8:	20800e17 	ldw	r2,56(r4)
    31bc:	10005826 	beq	r2,zero,3320 <_fflush_r+0x18c>
    31c0:	8880030b 	ldhu	r2,12(r17)
    31c4:	10ffffcc 	andi	r3,r2,65535
    31c8:	18e0001c 	xori	r3,r3,32768
    31cc:	18e00004 	addi	r3,r3,-32768
    31d0:	18002b26 	beq	r3,zero,3280 <_fflush_r+0xec>
    31d4:	10c0020c 	andi	r3,r2,8
    31d8:	1800311e 	bne	r3,zero,32a0 <_fflush_r+0x10c>
    31dc:	88c00117 	ldw	r3,4(r17)
    31e0:	10820014 	ori	r2,r2,2048
    31e4:	8880030d 	sth	r2,12(r17)
    31e8:	00c05c0e 	bge	zero,r3,335c <_fflush_r+0x1c8>
    31ec:	88c00a17 	ldw	r3,40(r17)
    31f0:	18002326 	beq	r3,zero,3280 <_fflush_r+0xec>
    31f4:	9c000017 	ldw	r16,0(r19)
    31f8:	1104000c 	andi	r4,r2,4096
    31fc:	98000015 	stw	zero,0(r19)
    3200:	20004b26 	beq	r4,zero,3330 <_fflush_r+0x19c>
    3204:	89801417 	ldw	r6,80(r17)
    3208:	1080010c 	andi	r2,r2,4
    320c:	10000626 	beq	r2,zero,3228 <_fflush_r+0x94>
    3210:	89000117 	ldw	r4,4(r17)
    3214:	88800c17 	ldw	r2,48(r17)
    3218:	310dc83a 	sub	r6,r6,r4
    321c:	10000226 	beq	r2,zero,3228 <_fflush_r+0x94>
    3220:	88800f17 	ldw	r2,60(r17)
    3224:	308dc83a 	sub	r6,r6,r2
    3228:	89400717 	ldw	r5,28(r17)
    322c:	9809883a 	mov	r4,r19
    3230:	000f883a 	mov	r7,zero
    3234:	183ee83a 	callr	r3
    3238:	00ffffc4 	movi	r3,-1
    323c:	10c04a26 	beq	r2,r3,3368 <_fflush_r+0x1d4>
    3240:	88c0030b 	ldhu	r3,12(r17)
    3244:	89000417 	ldw	r4,16(r17)
    3248:	88000115 	stw	zero,4(r17)
    324c:	197dffcc 	andi	r5,r3,63487
    3250:	8940030d 	sth	r5,12(r17)
    3254:	89000015 	stw	r4,0(r17)
    3258:	18c4000c 	andi	r3,r3,4096
    325c:	1800581e 	bne	r3,zero,33c0 <_fflush_r+0x22c>
    3260:	89400c17 	ldw	r5,48(r17)
    3264:	9c000015 	stw	r16,0(r19)
    3268:	28000526 	beq	r5,zero,3280 <_fflush_r+0xec>
    326c:	88801004 	addi	r2,r17,64
    3270:	28800226 	beq	r5,r2,327c <_fflush_r+0xe8>
    3274:	9809883a 	mov	r4,r19
    3278:	00038d40 	call	38d4 <_free_r>
    327c:	88000c15 	stw	zero,48(r17)
    3280:	0005883a 	mov	r2,zero
    3284:	dfc00417 	ldw	ra,16(sp)
    3288:	dcc00317 	ldw	r19,12(sp)
    328c:	dc800217 	ldw	r18,8(sp)
    3290:	dc400117 	ldw	r17,4(sp)
    3294:	dc000017 	ldw	r16,0(sp)
    3298:	dec00504 	addi	sp,sp,20
    329c:	f800283a 	ret
    32a0:	8c800417 	ldw	r18,16(r17)
    32a4:	903ff626 	beq	r18,zero,3280 <__alt_mem_onchip_memory2_0+0xfdfff280>
    32a8:	8c000017 	ldw	r16,0(r17)
    32ac:	108000cc 	andi	r2,r2,3
    32b0:	8c800015 	stw	r18,0(r17)
    32b4:	84a1c83a 	sub	r16,r16,r18
    32b8:	10001b26 	beq	r2,zero,3328 <_fflush_r+0x194>
    32bc:	0005883a 	mov	r2,zero
    32c0:	88800215 	stw	r2,8(r17)
    32c4:	04000316 	blt	zero,r16,32d4 <_fflush_r+0x140>
    32c8:	003fed06 	br	3280 <__alt_mem_onchip_memory2_0+0xfdfff280>
    32cc:	90a5883a 	add	r18,r18,r2
    32d0:	043feb0e 	bge	zero,r16,3280 <__alt_mem_onchip_memory2_0+0xfdfff280>
    32d4:	88800917 	ldw	r2,36(r17)
    32d8:	89400717 	ldw	r5,28(r17)
    32dc:	800f883a 	mov	r7,r16
    32e0:	900d883a 	mov	r6,r18
    32e4:	9809883a 	mov	r4,r19
    32e8:	103ee83a 	callr	r2
    32ec:	80a1c83a 	sub	r16,r16,r2
    32f0:	00bff616 	blt	zero,r2,32cc <__alt_mem_onchip_memory2_0+0xfdfff2cc>
    32f4:	88c0030b 	ldhu	r3,12(r17)
    32f8:	00bfffc4 	movi	r2,-1
    32fc:	18c01014 	ori	r3,r3,64
    3300:	88c0030d 	sth	r3,12(r17)
    3304:	dfc00417 	ldw	ra,16(sp)
    3308:	dcc00317 	ldw	r19,12(sp)
    330c:	dc800217 	ldw	r18,8(sp)
    3310:	dc400117 	ldw	r17,4(sp)
    3314:	dc000017 	ldw	r16,0(sp)
    3318:	dec00504 	addi	sp,sp,20
    331c:	f800283a 	ret
    3320:	00034a00 	call	34a0 <__sinit>
    3324:	003fa606 	br	31c0 <__alt_mem_onchip_memory2_0+0xfdfff1c0>
    3328:	88800517 	ldw	r2,20(r17)
    332c:	003fe406 	br	32c0 <__alt_mem_onchip_memory2_0+0xfdfff2c0>
    3330:	89400717 	ldw	r5,28(r17)
    3334:	000d883a 	mov	r6,zero
    3338:	9809883a 	mov	r4,r19
    333c:	01c00044 	movi	r7,1
    3340:	183ee83a 	callr	r3
    3344:	100d883a 	mov	r6,r2
    3348:	00bfffc4 	movi	r2,-1
    334c:	30801326 	beq	r6,r2,339c <_fflush_r+0x208>
    3350:	8880030b 	ldhu	r2,12(r17)
    3354:	88c00a17 	ldw	r3,40(r17)
    3358:	003fab06 	br	3208 <__alt_mem_onchip_memory2_0+0xfdfff208>
    335c:	88c00f17 	ldw	r3,60(r17)
    3360:	00ffa216 	blt	zero,r3,31ec <__alt_mem_onchip_memory2_0+0xfdfff1ec>
    3364:	003fc606 	br	3280 <__alt_mem_onchip_memory2_0+0xfdfff280>
    3368:	98c00017 	ldw	r3,0(r19)
    336c:	183fb426 	beq	r3,zero,3240 <__alt_mem_onchip_memory2_0+0xfdfff240>
    3370:	01000744 	movi	r4,29
    3374:	19000226 	beq	r3,r4,3380 <_fflush_r+0x1ec>
    3378:	01000584 	movi	r4,22
    337c:	1900121e 	bne	r3,r4,33c8 <_fflush_r+0x234>
    3380:	88c0030b 	ldhu	r3,12(r17)
    3384:	88800417 	ldw	r2,16(r17)
    3388:	88000115 	stw	zero,4(r17)
    338c:	18fdffcc 	andi	r3,r3,63487
    3390:	88c0030d 	sth	r3,12(r17)
    3394:	88800015 	stw	r2,0(r17)
    3398:	003fb106 	br	3260 <__alt_mem_onchip_memory2_0+0xfdfff260>
    339c:	98800017 	ldw	r2,0(r19)
    33a0:	103feb26 	beq	r2,zero,3350 <__alt_mem_onchip_memory2_0+0xfdfff350>
    33a4:	00c00744 	movi	r3,29
    33a8:	10c00226 	beq	r2,r3,33b4 <_fflush_r+0x220>
    33ac:	00c00584 	movi	r3,22
    33b0:	10ffd01e 	bne	r2,r3,32f4 <__alt_mem_onchip_memory2_0+0xfdfff2f4>
    33b4:	9c000015 	stw	r16,0(r19)
    33b8:	0005883a 	mov	r2,zero
    33bc:	003fb106 	br	3284 <__alt_mem_onchip_memory2_0+0xfdfff284>
    33c0:	88801415 	stw	r2,80(r17)
    33c4:	003fa606 	br	3260 <__alt_mem_onchip_memory2_0+0xfdfff260>
    33c8:	88c0030b 	ldhu	r3,12(r17)
    33cc:	18c01014 	ori	r3,r3,64
    33d0:	88c0030d 	sth	r3,12(r17)
    33d4:	003fab06 	br	3284 <__alt_mem_onchip_memory2_0+0xfdfff284>

000033d8 <fflush>:
    33d8:	200b883a 	mov	r5,r4
    33dc:	20000426 	beq	r4,zero,33f0 <fflush+0x18>
    33e0:	00800034 	movhi	r2,0
    33e4:	109be004 	addi	r2,r2,28544
    33e8:	11000017 	ldw	r4,0(r2)
    33ec:	00031941 	jmpi	3194 <_fflush_r>
    33f0:	00800034 	movhi	r2,0
    33f4:	109bdf04 	addi	r2,r2,28540
    33f8:	11000017 	ldw	r4,0(r2)
    33fc:	01400034 	movhi	r5,0
    3400:	294c6504 	addi	r5,r5,12692
    3404:	0003c4c1 	jmpi	3c4c <_fwalk_reent>

00003408 <__fp_lock>:
    3408:	0005883a 	mov	r2,zero
    340c:	f800283a 	ret

00003410 <__fp_unlock>:
    3410:	0005883a 	mov	r2,zero
    3414:	f800283a 	ret

00003418 <_cleanup_r>:
    3418:	01400034 	movhi	r5,0
    341c:	2952ca04 	addi	r5,r5,19240
    3420:	0003ba41 	jmpi	3ba4 <_fwalk>

00003424 <__sfmoreglue>:
    3424:	defffc04 	addi	sp,sp,-16
    3428:	dc400115 	stw	r17,4(sp)
    342c:	2c401a24 	muli	r17,r5,104
    3430:	dc800215 	stw	r18,8(sp)
    3434:	2825883a 	mov	r18,r5
    3438:	89400304 	addi	r5,r17,12
    343c:	dc000015 	stw	r16,0(sp)
    3440:	dfc00315 	stw	ra,12(sp)
    3444:	0003eb80 	call	3eb8 <_malloc_r>
    3448:	1021883a 	mov	r16,r2
    344c:	10000726 	beq	r2,zero,346c <__sfmoreglue+0x48>
    3450:	11000304 	addi	r4,r2,12
    3454:	10000015 	stw	zero,0(r2)
    3458:	14800115 	stw	r18,4(r2)
    345c:	11000215 	stw	r4,8(r2)
    3460:	000b883a 	mov	r5,zero
    3464:	880d883a 	mov	r6,r17
    3468:	000467c0 	call	467c <memset>
    346c:	8005883a 	mov	r2,r16
    3470:	dfc00317 	ldw	ra,12(sp)
    3474:	dc800217 	ldw	r18,8(sp)
    3478:	dc400117 	ldw	r17,4(sp)
    347c:	dc000017 	ldw	r16,0(sp)
    3480:	dec00404 	addi	sp,sp,16
    3484:	f800283a 	ret

00003488 <_cleanup>:
    3488:	00800034 	movhi	r2,0
    348c:	109bdf04 	addi	r2,r2,28540
    3490:	11000017 	ldw	r4,0(r2)
    3494:	01400034 	movhi	r5,0
    3498:	2952ca04 	addi	r5,r5,19240
    349c:	0003ba41 	jmpi	3ba4 <_fwalk>

000034a0 <__sinit>:
    34a0:	20800e17 	ldw	r2,56(r4)
    34a4:	defff704 	addi	sp,sp,-36
    34a8:	dc800215 	stw	r18,8(sp)
    34ac:	dfc00815 	stw	ra,32(sp)
    34b0:	ddc00715 	stw	r23,28(sp)
    34b4:	dd800615 	stw	r22,24(sp)
    34b8:	dd400515 	stw	r21,20(sp)
    34bc:	dd000415 	stw	r20,16(sp)
    34c0:	dcc00315 	stw	r19,12(sp)
    34c4:	dc400115 	stw	r17,4(sp)
    34c8:	dc000015 	stw	r16,0(sp)
    34cc:	2025883a 	mov	r18,r4
    34d0:	10004f1e 	bne	r2,zero,3610 <__sinit+0x170>
    34d4:	24000117 	ldw	r16,4(r4)
    34d8:	00c00034 	movhi	r3,0
    34dc:	18cd0604 	addi	r3,r3,13336
    34e0:	20c00f15 	stw	r3,60(r4)
    34e4:	2080bb04 	addi	r2,r4,748
    34e8:	00c000c4 	movi	r3,3
    34ec:	05c00044 	movi	r23,1
    34f0:	20c0b915 	stw	r3,740(r4)
    34f4:	2080ba15 	stw	r2,744(r4)
    34f8:	25c00e15 	stw	r23,56(r4)
    34fc:	2000b815 	stw	zero,736(r4)
    3500:	00800104 	movi	r2,4
    3504:	81001704 	addi	r4,r16,92
    3508:	000b883a 	mov	r5,zero
    350c:	01800204 	movi	r6,8
    3510:	80000015 	stw	zero,0(r16)
    3514:	80000115 	stw	zero,4(r16)
    3518:	80000215 	stw	zero,8(r16)
    351c:	8080030d 	sth	r2,12(r16)
    3520:	80001915 	stw	zero,100(r16)
    3524:	8000038d 	sth	zero,14(r16)
    3528:	80000415 	stw	zero,16(r16)
    352c:	80000515 	stw	zero,20(r16)
    3530:	80000615 	stw	zero,24(r16)
    3534:	000467c0 	call	467c <memset>
    3538:	94400217 	ldw	r17,8(r18)
    353c:	05800034 	movhi	r22,0
    3540:	b591fd04 	addi	r22,r22,18420
    3544:	05400034 	movhi	r21,0
    3548:	ad521404 	addi	r21,r21,18512
    354c:	05000034 	movhi	r20,0
    3550:	a5123304 	addi	r20,r20,18636
    3554:	04c00034 	movhi	r19,0
    3558:	9cd24a04 	addi	r19,r19,18728
    355c:	84000715 	stw	r16,28(r16)
    3560:	85800815 	stw	r22,32(r16)
    3564:	85400915 	stw	r21,36(r16)
    3568:	85000a15 	stw	r20,40(r16)
    356c:	84c00b15 	stw	r19,44(r16)
    3570:	00800284 	movi	r2,10
    3574:	89001704 	addi	r4,r17,92
    3578:	000b883a 	mov	r5,zero
    357c:	01800204 	movi	r6,8
    3580:	88000015 	stw	zero,0(r17)
    3584:	88000115 	stw	zero,4(r17)
    3588:	88000215 	stw	zero,8(r17)
    358c:	8880030d 	sth	r2,12(r17)
    3590:	88001915 	stw	zero,100(r17)
    3594:	8dc0038d 	sth	r23,14(r17)
    3598:	88000415 	stw	zero,16(r17)
    359c:	88000515 	stw	zero,20(r17)
    35a0:	88000615 	stw	zero,24(r17)
    35a4:	000467c0 	call	467c <memset>
    35a8:	94000317 	ldw	r16,12(r18)
    35ac:	00800484 	movi	r2,18
    35b0:	8c400715 	stw	r17,28(r17)
    35b4:	8d800815 	stw	r22,32(r17)
    35b8:	8d400915 	stw	r21,36(r17)
    35bc:	8d000a15 	stw	r20,40(r17)
    35c0:	8cc00b15 	stw	r19,44(r17)
    35c4:	8080030d 	sth	r2,12(r16)
    35c8:	00800084 	movi	r2,2
    35cc:	80000015 	stw	zero,0(r16)
    35d0:	80000115 	stw	zero,4(r16)
    35d4:	80000215 	stw	zero,8(r16)
    35d8:	80001915 	stw	zero,100(r16)
    35dc:	8080038d 	sth	r2,14(r16)
    35e0:	80000415 	stw	zero,16(r16)
    35e4:	80000515 	stw	zero,20(r16)
    35e8:	80000615 	stw	zero,24(r16)
    35ec:	81001704 	addi	r4,r16,92
    35f0:	000b883a 	mov	r5,zero
    35f4:	01800204 	movi	r6,8
    35f8:	000467c0 	call	467c <memset>
    35fc:	84000715 	stw	r16,28(r16)
    3600:	85800815 	stw	r22,32(r16)
    3604:	85400915 	stw	r21,36(r16)
    3608:	85000a15 	stw	r20,40(r16)
    360c:	84c00b15 	stw	r19,44(r16)
    3610:	dfc00817 	ldw	ra,32(sp)
    3614:	ddc00717 	ldw	r23,28(sp)
    3618:	dd800617 	ldw	r22,24(sp)
    361c:	dd400517 	ldw	r21,20(sp)
    3620:	dd000417 	ldw	r20,16(sp)
    3624:	dcc00317 	ldw	r19,12(sp)
    3628:	dc800217 	ldw	r18,8(sp)
    362c:	dc400117 	ldw	r17,4(sp)
    3630:	dc000017 	ldw	r16,0(sp)
    3634:	dec00904 	addi	sp,sp,36
    3638:	f800283a 	ret

0000363c <__sfp>:
    363c:	defffb04 	addi	sp,sp,-20
    3640:	00800034 	movhi	r2,0
    3644:	109bdf04 	addi	r2,r2,28540
    3648:	dc800215 	stw	r18,8(sp)
    364c:	14800017 	ldw	r18,0(r2)
    3650:	dcc00315 	stw	r19,12(sp)
    3654:	dfc00415 	stw	ra,16(sp)
    3658:	90800e17 	ldw	r2,56(r18)
    365c:	dc400115 	stw	r17,4(sp)
    3660:	dc000015 	stw	r16,0(sp)
    3664:	2027883a 	mov	r19,r4
    3668:	10002f26 	beq	r2,zero,3728 <__sfp+0xec>
    366c:	9480b804 	addi	r18,r18,736
    3670:	047fffc4 	movi	r17,-1
    3674:	91400117 	ldw	r5,4(r18)
    3678:	94000217 	ldw	r16,8(r18)
    367c:	297fffc4 	addi	r5,r5,-1
    3680:	28000a16 	blt	r5,zero,36ac <__sfp+0x70>
    3684:	8080030f 	ldh	r2,12(r16)
    3688:	10000c26 	beq	r2,zero,36bc <__sfp+0x80>
    368c:	80c01d04 	addi	r3,r16,116
    3690:	00000206 	br	369c <__sfp+0x60>
    3694:	18bfe60f 	ldh	r2,-104(r3)
    3698:	10000826 	beq	r2,zero,36bc <__sfp+0x80>
    369c:	297fffc4 	addi	r5,r5,-1
    36a0:	1c3ffd04 	addi	r16,r3,-12
    36a4:	18c01a04 	addi	r3,r3,104
    36a8:	2c7ffa1e 	bne	r5,r17,3694 <__alt_mem_onchip_memory2_0+0xfdfff694>
    36ac:	90800017 	ldw	r2,0(r18)
    36b0:	10002026 	beq	r2,zero,3734 <__sfp+0xf8>
    36b4:	1025883a 	mov	r18,r2
    36b8:	003fee06 	br	3674 <__alt_mem_onchip_memory2_0+0xfdfff674>
    36bc:	00bfffc4 	movi	r2,-1
    36c0:	8080038d 	sth	r2,14(r16)
    36c4:	00800044 	movi	r2,1
    36c8:	8080030d 	sth	r2,12(r16)
    36cc:	80001915 	stw	zero,100(r16)
    36d0:	80000015 	stw	zero,0(r16)
    36d4:	80000215 	stw	zero,8(r16)
    36d8:	80000115 	stw	zero,4(r16)
    36dc:	80000415 	stw	zero,16(r16)
    36e0:	80000515 	stw	zero,20(r16)
    36e4:	80000615 	stw	zero,24(r16)
    36e8:	81001704 	addi	r4,r16,92
    36ec:	000b883a 	mov	r5,zero
    36f0:	01800204 	movi	r6,8
    36f4:	000467c0 	call	467c <memset>
    36f8:	8005883a 	mov	r2,r16
    36fc:	80000c15 	stw	zero,48(r16)
    3700:	80000d15 	stw	zero,52(r16)
    3704:	80001115 	stw	zero,68(r16)
    3708:	80001215 	stw	zero,72(r16)
    370c:	dfc00417 	ldw	ra,16(sp)
    3710:	dcc00317 	ldw	r19,12(sp)
    3714:	dc800217 	ldw	r18,8(sp)
    3718:	dc400117 	ldw	r17,4(sp)
    371c:	dc000017 	ldw	r16,0(sp)
    3720:	dec00504 	addi	sp,sp,20
    3724:	f800283a 	ret
    3728:	9009883a 	mov	r4,r18
    372c:	00034a00 	call	34a0 <__sinit>
    3730:	003fce06 	br	366c <__alt_mem_onchip_memory2_0+0xfdfff66c>
    3734:	9809883a 	mov	r4,r19
    3738:	01400104 	movi	r5,4
    373c:	00034240 	call	3424 <__sfmoreglue>
    3740:	90800015 	stw	r2,0(r18)
    3744:	103fdb1e 	bne	r2,zero,36b4 <__alt_mem_onchip_memory2_0+0xfdfff6b4>
    3748:	00800304 	movi	r2,12
    374c:	98800015 	stw	r2,0(r19)
    3750:	0005883a 	mov	r2,zero
    3754:	003fed06 	br	370c <__alt_mem_onchip_memory2_0+0xfdfff70c>

00003758 <__sfp_lock_acquire>:
    3758:	f800283a 	ret

0000375c <__sfp_lock_release>:
    375c:	f800283a 	ret

00003760 <__sinit_lock_acquire>:
    3760:	f800283a 	ret

00003764 <__sinit_lock_release>:
    3764:	f800283a 	ret

00003768 <__fp_lock_all>:
    3768:	00800034 	movhi	r2,0
    376c:	109be004 	addi	r2,r2,28544
    3770:	11000017 	ldw	r4,0(r2)
    3774:	01400034 	movhi	r5,0
    3778:	294d0204 	addi	r5,r5,13320
    377c:	0003ba41 	jmpi	3ba4 <_fwalk>

00003780 <__fp_unlock_all>:
    3780:	00800034 	movhi	r2,0
    3784:	109be004 	addi	r2,r2,28544
    3788:	11000017 	ldw	r4,0(r2)
    378c:	01400034 	movhi	r5,0
    3790:	294d0404 	addi	r5,r5,13328
    3794:	0003ba41 	jmpi	3ba4 <_fwalk>

00003798 <_malloc_trim_r>:
    3798:	defffb04 	addi	sp,sp,-20
    379c:	dcc00315 	stw	r19,12(sp)
    37a0:	dc800215 	stw	r18,8(sp)
    37a4:	dc400115 	stw	r17,4(sp)
    37a8:	dc000015 	stw	r16,0(sp)
    37ac:	2827883a 	mov	r19,r5
    37b0:	dfc00415 	stw	ra,16(sp)
    37b4:	04400034 	movhi	r17,0
    37b8:	8c5ad404 	addi	r17,r17,27472
    37bc:	2021883a 	mov	r16,r4
    37c0:	00051340 	call	5134 <__malloc_lock>
    37c4:	88800217 	ldw	r2,8(r17)
    37c8:	14800117 	ldw	r18,4(r2)
    37cc:	00bfff04 	movi	r2,-4
    37d0:	90a4703a 	and	r18,r18,r2
    37d4:	94e7c83a 	sub	r19,r18,r19
    37d8:	9cc3fbc4 	addi	r19,r19,4079
    37dc:	9826d33a 	srli	r19,r19,12
    37e0:	0083ffc4 	movi	r2,4095
    37e4:	9cffffc4 	addi	r19,r19,-1
    37e8:	9826933a 	slli	r19,r19,12
    37ec:	14c0060e 	bge	r2,r19,3808 <_malloc_trim_r+0x70>
    37f0:	8009883a 	mov	r4,r16
    37f4:	000b883a 	mov	r5,zero
    37f8:	00047900 	call	4790 <_sbrk_r>
    37fc:	88c00217 	ldw	r3,8(r17)
    3800:	1c87883a 	add	r3,r3,r18
    3804:	10c00a26 	beq	r2,r3,3830 <_malloc_trim_r+0x98>
    3808:	8009883a 	mov	r4,r16
    380c:	00051540 	call	5154 <__malloc_unlock>
    3810:	0005883a 	mov	r2,zero
    3814:	dfc00417 	ldw	ra,16(sp)
    3818:	dcc00317 	ldw	r19,12(sp)
    381c:	dc800217 	ldw	r18,8(sp)
    3820:	dc400117 	ldw	r17,4(sp)
    3824:	dc000017 	ldw	r16,0(sp)
    3828:	dec00504 	addi	sp,sp,20
    382c:	f800283a 	ret
    3830:	8009883a 	mov	r4,r16
    3834:	04cbc83a 	sub	r5,zero,r19
    3838:	00047900 	call	4790 <_sbrk_r>
    383c:	00ffffc4 	movi	r3,-1
    3840:	10c01326 	beq	r2,r3,3890 <_malloc_trim_r+0xf8>
    3844:	00800074 	movhi	r2,1
    3848:	10a28c04 	addi	r2,r2,-30160
    384c:	11000017 	ldw	r4,0(r2)
    3850:	88c00217 	ldw	r3,8(r17)
    3854:	94e5c83a 	sub	r18,r18,r19
    3858:	94800054 	ori	r18,r18,1
    385c:	24e7c83a 	sub	r19,r4,r19
    3860:	1c800115 	stw	r18,4(r3)
    3864:	8009883a 	mov	r4,r16
    3868:	14c00015 	stw	r19,0(r2)
    386c:	00051540 	call	5154 <__malloc_unlock>
    3870:	00800044 	movi	r2,1
    3874:	dfc00417 	ldw	ra,16(sp)
    3878:	dcc00317 	ldw	r19,12(sp)
    387c:	dc800217 	ldw	r18,8(sp)
    3880:	dc400117 	ldw	r17,4(sp)
    3884:	dc000017 	ldw	r16,0(sp)
    3888:	dec00504 	addi	sp,sp,20
    388c:	f800283a 	ret
    3890:	8009883a 	mov	r4,r16
    3894:	000b883a 	mov	r5,zero
    3898:	00047900 	call	4790 <_sbrk_r>
    389c:	88c00217 	ldw	r3,8(r17)
    38a0:	014003c4 	movi	r5,15
    38a4:	10c9c83a 	sub	r4,r2,r3
    38a8:	293fd70e 	bge	r5,r4,3808 <__alt_mem_onchip_memory2_0+0xfdfff808>
    38ac:	01400034 	movhi	r5,0
    38b0:	295be104 	addi	r5,r5,28548
    38b4:	29400017 	ldw	r5,0(r5)
    38b8:	21000054 	ori	r4,r4,1
    38bc:	19000115 	stw	r4,4(r3)
    38c0:	1145c83a 	sub	r2,r2,r5
    38c4:	01400074 	movhi	r5,1
    38c8:	29628c04 	addi	r5,r5,-30160
    38cc:	28800015 	stw	r2,0(r5)
    38d0:	003fcd06 	br	3808 <__alt_mem_onchip_memory2_0+0xfdfff808>

000038d4 <_free_r>:
    38d4:	defffd04 	addi	sp,sp,-12
    38d8:	dc000015 	stw	r16,0(sp)
    38dc:	dfc00215 	stw	ra,8(sp)
    38e0:	dc400115 	stw	r17,4(sp)
    38e4:	2821883a 	mov	r16,r5
    38e8:	28004c26 	beq	r5,zero,3a1c <_free_r+0x148>
    38ec:	2023883a 	mov	r17,r4
    38f0:	00051340 	call	5134 <__malloc_lock>
    38f4:	823fff17 	ldw	r8,-4(r16)
    38f8:	00bfff84 	movi	r2,-2
    38fc:	81bffe04 	addi	r6,r16,-8
    3900:	4084703a 	and	r2,r8,r2
    3904:	3087883a 	add	r3,r6,r2
    3908:	01400034 	movhi	r5,0
    390c:	295ad404 	addi	r5,r5,27472
    3910:	1a400117 	ldw	r9,4(r3)
    3914:	29000217 	ldw	r4,8(r5)
    3918:	01ffff04 	movi	r7,-4
    391c:	49ce703a 	and	r7,r9,r7
    3920:	20c06526 	beq	r4,r3,3ab8 <_free_r+0x1e4>
    3924:	19c00115 	stw	r7,4(r3)
    3928:	4200004c 	andi	r8,r8,1
    392c:	40003026 	beq	r8,zero,39f0 <_free_r+0x11c>
    3930:	0009883a 	mov	r4,zero
    3934:	19d1883a 	add	r8,r3,r7
    3938:	42000117 	ldw	r8,4(r8)
    393c:	4200004c 	andi	r8,r8,1
    3940:	4000061e 	bne	r8,zero,395c <_free_r+0x88>
    3944:	11c5883a 	add	r2,r2,r7
    3948:	19c00217 	ldw	r7,8(r3)
    394c:	20004e26 	beq	r4,zero,3a88 <_free_r+0x1b4>
    3950:	18c00317 	ldw	r3,12(r3)
    3954:	38c00315 	stw	r3,12(r7)
    3958:	19c00215 	stw	r7,8(r3)
    395c:	10c00054 	ori	r3,r2,1
    3960:	30c00115 	stw	r3,4(r6)
    3964:	3087883a 	add	r3,r6,r2
    3968:	18800015 	stw	r2,0(r3)
    396c:	20001a1e 	bne	r4,zero,39d8 <_free_r+0x104>
    3970:	00c07fc4 	movi	r3,511
    3974:	18802e2e 	bgeu	r3,r2,3a30 <_free_r+0x15c>
    3978:	1006d27a 	srli	r3,r2,9
    397c:	01000104 	movi	r4,4
    3980:	20c06636 	bltu	r4,r3,3b1c <_free_r+0x248>
    3984:	1008d1ba 	srli	r4,r2,6
    3988:	21000e04 	addi	r4,r4,56
    398c:	210f883a 	add	r7,r4,r4
    3990:	39cf883a 	add	r7,r7,r7
    3994:	39cf883a 	add	r7,r7,r7
    3998:	29cf883a 	add	r7,r5,r7
    399c:	38c00217 	ldw	r3,8(r7)
    39a0:	01400034 	movhi	r5,0
    39a4:	295ad404 	addi	r5,r5,27472
    39a8:	19c06126 	beq	r3,r7,3b30 <_free_r+0x25c>
    39ac:	013fff04 	movi	r4,-4
    39b0:	19400117 	ldw	r5,4(r3)
    39b4:	290a703a 	and	r5,r5,r4
    39b8:	1140022e 	bgeu	r2,r5,39c4 <_free_r+0xf0>
    39bc:	18c00217 	ldw	r3,8(r3)
    39c0:	38fffb1e 	bne	r7,r3,39b0 <__alt_mem_onchip_memory2_0+0xfdfff9b0>
    39c4:	18800317 	ldw	r2,12(r3)
    39c8:	30800315 	stw	r2,12(r6)
    39cc:	30c00215 	stw	r3,8(r6)
    39d0:	11800215 	stw	r6,8(r2)
    39d4:	19800315 	stw	r6,12(r3)
    39d8:	8809883a 	mov	r4,r17
    39dc:	dfc00217 	ldw	ra,8(sp)
    39e0:	dc400117 	ldw	r17,4(sp)
    39e4:	dc000017 	ldw	r16,0(sp)
    39e8:	dec00304 	addi	sp,sp,12
    39ec:	00051541 	jmpi	5154 <__malloc_unlock>
    39f0:	813ffe17 	ldw	r4,-8(r16)
    39f4:	2a400204 	addi	r9,r5,8
    39f8:	310dc83a 	sub	r6,r6,r4
    39fc:	32000217 	ldw	r8,8(r6)
    3a00:	1105883a 	add	r2,r2,r4
    3a04:	42404326 	beq	r8,r9,3b14 <_free_r+0x240>
    3a08:	32400317 	ldw	r9,12(r6)
    3a0c:	0009883a 	mov	r4,zero
    3a10:	42400315 	stw	r9,12(r8)
    3a14:	4a000215 	stw	r8,8(r9)
    3a18:	003fc606 	br	3934 <__alt_mem_onchip_memory2_0+0xfdfff934>
    3a1c:	dfc00217 	ldw	ra,8(sp)
    3a20:	dc400117 	ldw	r17,4(sp)
    3a24:	dc000017 	ldw	r16,0(sp)
    3a28:	dec00304 	addi	sp,sp,12
    3a2c:	f800283a 	ret
    3a30:	1004d0fa 	srli	r2,r2,3
    3a34:	02000044 	movi	r8,1
    3a38:	29c00117 	ldw	r7,4(r5)
    3a3c:	1087883a 	add	r3,r2,r2
    3a40:	18c7883a 	add	r3,r3,r3
    3a44:	18c7883a 	add	r3,r3,r3
    3a48:	28c7883a 	add	r3,r5,r3
    3a4c:	1005d0ba 	srai	r2,r2,2
    3a50:	19000217 	ldw	r4,8(r3)
    3a54:	30c00315 	stw	r3,12(r6)
    3a58:	4084983a 	sll	r2,r8,r2
    3a5c:	31000215 	stw	r4,8(r6)
    3a60:	19800215 	stw	r6,8(r3)
    3a64:	11c4b03a 	or	r2,r2,r7
    3a68:	21800315 	stw	r6,12(r4)
    3a6c:	8809883a 	mov	r4,r17
    3a70:	28800115 	stw	r2,4(r5)
    3a74:	dfc00217 	ldw	ra,8(sp)
    3a78:	dc400117 	ldw	r17,4(sp)
    3a7c:	dc000017 	ldw	r16,0(sp)
    3a80:	dec00304 	addi	sp,sp,12
    3a84:	00051541 	jmpi	5154 <__malloc_unlock>
    3a88:	02000034 	movhi	r8,0
    3a8c:	421ad604 	addi	r8,r8,27480
    3a90:	3a3faf1e 	bne	r7,r8,3950 <__alt_mem_onchip_memory2_0+0xfdfff950>
    3a94:	29800515 	stw	r6,20(r5)
    3a98:	29800415 	stw	r6,16(r5)
    3a9c:	10c00054 	ori	r3,r2,1
    3aa0:	31c00315 	stw	r7,12(r6)
    3aa4:	31c00215 	stw	r7,8(r6)
    3aa8:	30c00115 	stw	r3,4(r6)
    3aac:	308d883a 	add	r6,r6,r2
    3ab0:	30800015 	stw	r2,0(r6)
    3ab4:	003fc806 	br	39d8 <__alt_mem_onchip_memory2_0+0xfdfff9d8>
    3ab8:	4200004c 	andi	r8,r8,1
    3abc:	3885883a 	add	r2,r7,r2
    3ac0:	4000071e 	bne	r8,zero,3ae0 <_free_r+0x20c>
    3ac4:	81fffe17 	ldw	r7,-8(r16)
    3ac8:	31cdc83a 	sub	r6,r6,r7
    3acc:	30c00317 	ldw	r3,12(r6)
    3ad0:	31000217 	ldw	r4,8(r6)
    3ad4:	11c5883a 	add	r2,r2,r7
    3ad8:	20c00315 	stw	r3,12(r4)
    3adc:	19000215 	stw	r4,8(r3)
    3ae0:	00c00034 	movhi	r3,0
    3ae4:	18dbe204 	addi	r3,r3,28552
    3ae8:	11000054 	ori	r4,r2,1
    3aec:	18c00017 	ldw	r3,0(r3)
    3af0:	31000115 	stw	r4,4(r6)
    3af4:	29800215 	stw	r6,8(r5)
    3af8:	10ffb736 	bltu	r2,r3,39d8 <__alt_mem_onchip_memory2_0+0xfdfff9d8>
    3afc:	00800074 	movhi	r2,1
    3b00:	10a28b04 	addi	r2,r2,-30164
    3b04:	11400017 	ldw	r5,0(r2)
    3b08:	8809883a 	mov	r4,r17
    3b0c:	00037980 	call	3798 <_malloc_trim_r>
    3b10:	003fb106 	br	39d8 <__alt_mem_onchip_memory2_0+0xfdfff9d8>
    3b14:	01000044 	movi	r4,1
    3b18:	003f8606 	br	3934 <__alt_mem_onchip_memory2_0+0xfdfff934>
    3b1c:	01000504 	movi	r4,20
    3b20:	20c00b36 	bltu	r4,r3,3b50 <_free_r+0x27c>
    3b24:	190016c4 	addi	r4,r3,91
    3b28:	210f883a 	add	r7,r4,r4
    3b2c:	003f9806 	br	3990 <__alt_mem_onchip_memory2_0+0xfdfff990>
    3b30:	2009d0ba 	srai	r4,r4,2
    3b34:	00800044 	movi	r2,1
    3b38:	29c00117 	ldw	r7,4(r5)
    3b3c:	1108983a 	sll	r4,r2,r4
    3b40:	1805883a 	mov	r2,r3
    3b44:	21c8b03a 	or	r4,r4,r7
    3b48:	29000115 	stw	r4,4(r5)
    3b4c:	003f9e06 	br	39c8 <__alt_mem_onchip_memory2_0+0xfdfff9c8>
    3b50:	01001504 	movi	r4,84
    3b54:	20c00436 	bltu	r4,r3,3b68 <_free_r+0x294>
    3b58:	1008d33a 	srli	r4,r2,12
    3b5c:	21001b84 	addi	r4,r4,110
    3b60:	210f883a 	add	r7,r4,r4
    3b64:	003f8a06 	br	3990 <__alt_mem_onchip_memory2_0+0xfdfff990>
    3b68:	01005504 	movi	r4,340
    3b6c:	20c00436 	bltu	r4,r3,3b80 <_free_r+0x2ac>
    3b70:	1008d3fa 	srli	r4,r2,15
    3b74:	21001dc4 	addi	r4,r4,119
    3b78:	210f883a 	add	r7,r4,r4
    3b7c:	003f8406 	br	3990 <__alt_mem_onchip_memory2_0+0xfdfff990>
    3b80:	01015504 	movi	r4,1364
    3b84:	20c00436 	bltu	r4,r3,3b98 <_free_r+0x2c4>
    3b88:	1008d4ba 	srli	r4,r2,18
    3b8c:	21001f04 	addi	r4,r4,124
    3b90:	210f883a 	add	r7,r4,r4
    3b94:	003f7e06 	br	3990 <__alt_mem_onchip_memory2_0+0xfdfff990>
    3b98:	01c03f04 	movi	r7,252
    3b9c:	01001f84 	movi	r4,126
    3ba0:	003f7b06 	br	3990 <__alt_mem_onchip_memory2_0+0xfdfff990>

00003ba4 <_fwalk>:
    3ba4:	defff904 	addi	sp,sp,-28
    3ba8:	dcc00315 	stw	r19,12(sp)
    3bac:	24c0b804 	addi	r19,r4,736
    3bb0:	dd400515 	stw	r21,20(sp)
    3bb4:	dd000415 	stw	r20,16(sp)
    3bb8:	dfc00615 	stw	ra,24(sp)
    3bbc:	dc800215 	stw	r18,8(sp)
    3bc0:	dc400115 	stw	r17,4(sp)
    3bc4:	dc000015 	stw	r16,0(sp)
    3bc8:	282b883a 	mov	r21,r5
    3bcc:	0029883a 	mov	r20,zero
    3bd0:	00037580 	call	3758 <__sfp_lock_acquire>
    3bd4:	98001226 	beq	r19,zero,3c20 <_fwalk+0x7c>
    3bd8:	04bfffc4 	movi	r18,-1
    3bdc:	9c400117 	ldw	r17,4(r19)
    3be0:	9c000217 	ldw	r16,8(r19)
    3be4:	8c7fffc4 	addi	r17,r17,-1
    3be8:	88000b16 	blt	r17,zero,3c18 <_fwalk+0x74>
    3bec:	84000304 	addi	r16,r16,12
    3bf0:	80c0000f 	ldh	r3,0(r16)
    3bf4:	8c7fffc4 	addi	r17,r17,-1
    3bf8:	813ffd04 	addi	r4,r16,-12
    3bfc:	18000426 	beq	r3,zero,3c10 <_fwalk+0x6c>
    3c00:	80c0008f 	ldh	r3,2(r16)
    3c04:	1c800226 	beq	r3,r18,3c10 <_fwalk+0x6c>
    3c08:	a83ee83a 	callr	r21
    3c0c:	a0a8b03a 	or	r20,r20,r2
    3c10:	84001a04 	addi	r16,r16,104
    3c14:	8cbff61e 	bne	r17,r18,3bf0 <__alt_mem_onchip_memory2_0+0xfdfffbf0>
    3c18:	9cc00017 	ldw	r19,0(r19)
    3c1c:	983fef1e 	bne	r19,zero,3bdc <__alt_mem_onchip_memory2_0+0xfdfffbdc>
    3c20:	000375c0 	call	375c <__sfp_lock_release>
    3c24:	a005883a 	mov	r2,r20
    3c28:	dfc00617 	ldw	ra,24(sp)
    3c2c:	dd400517 	ldw	r21,20(sp)
    3c30:	dd000417 	ldw	r20,16(sp)
    3c34:	dcc00317 	ldw	r19,12(sp)
    3c38:	dc800217 	ldw	r18,8(sp)
    3c3c:	dc400117 	ldw	r17,4(sp)
    3c40:	dc000017 	ldw	r16,0(sp)
    3c44:	dec00704 	addi	sp,sp,28
    3c48:	f800283a 	ret

00003c4c <_fwalk_reent>:
    3c4c:	defff804 	addi	sp,sp,-32
    3c50:	dcc00315 	stw	r19,12(sp)
    3c54:	24c0b804 	addi	r19,r4,736
    3c58:	dd800615 	stw	r22,24(sp)
    3c5c:	dd400515 	stw	r21,20(sp)
    3c60:	dd000415 	stw	r20,16(sp)
    3c64:	dfc00715 	stw	ra,28(sp)
    3c68:	dc800215 	stw	r18,8(sp)
    3c6c:	dc400115 	stw	r17,4(sp)
    3c70:	dc000015 	stw	r16,0(sp)
    3c74:	2029883a 	mov	r20,r4
    3c78:	282b883a 	mov	r21,r5
    3c7c:	002d883a 	mov	r22,zero
    3c80:	00037580 	call	3758 <__sfp_lock_acquire>
    3c84:	98001326 	beq	r19,zero,3cd4 <_fwalk_reent+0x88>
    3c88:	04bfffc4 	movi	r18,-1
    3c8c:	9c400117 	ldw	r17,4(r19)
    3c90:	9c000217 	ldw	r16,8(r19)
    3c94:	8c7fffc4 	addi	r17,r17,-1
    3c98:	88000c16 	blt	r17,zero,3ccc <_fwalk_reent+0x80>
    3c9c:	84000304 	addi	r16,r16,12
    3ca0:	80c0000f 	ldh	r3,0(r16)
    3ca4:	8c7fffc4 	addi	r17,r17,-1
    3ca8:	817ffd04 	addi	r5,r16,-12
    3cac:	18000526 	beq	r3,zero,3cc4 <_fwalk_reent+0x78>
    3cb0:	80c0008f 	ldh	r3,2(r16)
    3cb4:	a009883a 	mov	r4,r20
    3cb8:	1c800226 	beq	r3,r18,3cc4 <_fwalk_reent+0x78>
    3cbc:	a83ee83a 	callr	r21
    3cc0:	b0acb03a 	or	r22,r22,r2
    3cc4:	84001a04 	addi	r16,r16,104
    3cc8:	8cbff51e 	bne	r17,r18,3ca0 <__alt_mem_onchip_memory2_0+0xfdfffca0>
    3ccc:	9cc00017 	ldw	r19,0(r19)
    3cd0:	983fee1e 	bne	r19,zero,3c8c <__alt_mem_onchip_memory2_0+0xfdfffc8c>
    3cd4:	000375c0 	call	375c <__sfp_lock_release>
    3cd8:	b005883a 	mov	r2,r22
    3cdc:	dfc00717 	ldw	ra,28(sp)
    3ce0:	dd800617 	ldw	r22,24(sp)
    3ce4:	dd400517 	ldw	r21,20(sp)
    3ce8:	dd000417 	ldw	r20,16(sp)
    3cec:	dcc00317 	ldw	r19,12(sp)
    3cf0:	dc800217 	ldw	r18,8(sp)
    3cf4:	dc400117 	ldw	r17,4(sp)
    3cf8:	dc000017 	ldw	r16,0(sp)
    3cfc:	dec00804 	addi	sp,sp,32
    3d00:	f800283a 	ret

00003d04 <__smakebuf_r>:
    3d04:	2880030b 	ldhu	r2,12(r5)
    3d08:	deffec04 	addi	sp,sp,-80
    3d0c:	dc000f15 	stw	r16,60(sp)
    3d10:	dfc01315 	stw	ra,76(sp)
    3d14:	dcc01215 	stw	r19,72(sp)
    3d18:	dc801115 	stw	r18,68(sp)
    3d1c:	dc401015 	stw	r17,64(sp)
    3d20:	10c0008c 	andi	r3,r2,2
    3d24:	2821883a 	mov	r16,r5
    3d28:	18003a1e 	bne	r3,zero,3e14 <__smakebuf_r+0x110>
    3d2c:	2940038f 	ldh	r5,14(r5)
    3d30:	2023883a 	mov	r17,r4
    3d34:	28001b16 	blt	r5,zero,3da4 <__smakebuf_r+0xa0>
    3d38:	d80d883a 	mov	r6,sp
    3d3c:	0004b3c0 	call	4b3c <_fstat_r>
    3d40:	10001716 	blt	r2,zero,3da0 <__smakebuf_r+0x9c>
    3d44:	d8800117 	ldw	r2,4(sp)
    3d48:	00e00014 	movui	r3,32768
    3d4c:	10bc000c 	andi	r2,r2,61440
    3d50:	10c03e26 	beq	r2,r3,3e4c <__smakebuf_r+0x148>
    3d54:	80c0030b 	ldhu	r3,12(r16)
    3d58:	18c20014 	ori	r3,r3,2048
    3d5c:	80c0030d 	sth	r3,12(r16)
    3d60:	00c80004 	movi	r3,8192
    3d64:	10c0431e 	bne	r2,r3,3e74 <__smakebuf_r+0x170>
    3d68:	8140038f 	ldh	r5,14(r16)
    3d6c:	8809883a 	mov	r4,r17
    3d70:	0004ba40 	call	4ba4 <_isatty_r>
    3d74:	10004d26 	beq	r2,zero,3eac <__smakebuf_r+0x1a8>
    3d78:	80c0030b 	ldhu	r3,12(r16)
    3d7c:	04c00044 	movi	r19,1
    3d80:	808010c4 	addi	r2,r16,67
    3d84:	1cc6b03a 	or	r3,r3,r19
    3d88:	80c0030d 	sth	r3,12(r16)
    3d8c:	80800015 	stw	r2,0(r16)
    3d90:	80800415 	stw	r2,16(r16)
    3d94:	84c00515 	stw	r19,20(r16)
    3d98:	04810004 	movi	r18,1024
    3d9c:	00000706 	br	3dbc <__smakebuf_r+0xb8>
    3da0:	8080030b 	ldhu	r2,12(r16)
    3da4:	10c0200c 	andi	r3,r2,128
    3da8:	1800261e 	bne	r3,zero,3e44 <__smakebuf_r+0x140>
    3dac:	04810004 	movi	r18,1024
    3db0:	10820014 	ori	r2,r2,2048
    3db4:	8080030d 	sth	r2,12(r16)
    3db8:	0027883a 	mov	r19,zero
    3dbc:	8809883a 	mov	r4,r17
    3dc0:	900b883a 	mov	r5,r18
    3dc4:	0003eb80 	call	3eb8 <_malloc_r>
    3dc8:	10002d26 	beq	r2,zero,3e80 <__smakebuf_r+0x17c>
    3dcc:	80c0030b 	ldhu	r3,12(r16)
    3dd0:	01000034 	movhi	r4,0
    3dd4:	210d0604 	addi	r4,r4,13336
    3dd8:	89000f15 	stw	r4,60(r17)
    3ddc:	18c02014 	ori	r3,r3,128
    3de0:	80c0030d 	sth	r3,12(r16)
    3de4:	80800015 	stw	r2,0(r16)
    3de8:	80800415 	stw	r2,16(r16)
    3dec:	84800515 	stw	r18,20(r16)
    3df0:	98000d26 	beq	r19,zero,3e28 <__smakebuf_r+0x124>
    3df4:	8140038f 	ldh	r5,14(r16)
    3df8:	8809883a 	mov	r4,r17
    3dfc:	0004ba40 	call	4ba4 <_isatty_r>
    3e00:	10000926 	beq	r2,zero,3e28 <__smakebuf_r+0x124>
    3e04:	8080030b 	ldhu	r2,12(r16)
    3e08:	10800054 	ori	r2,r2,1
    3e0c:	8080030d 	sth	r2,12(r16)
    3e10:	00000506 	br	3e28 <__smakebuf_r+0x124>
    3e14:	288010c4 	addi	r2,r5,67
    3e18:	28800015 	stw	r2,0(r5)
    3e1c:	28800415 	stw	r2,16(r5)
    3e20:	00800044 	movi	r2,1
    3e24:	28800515 	stw	r2,20(r5)
    3e28:	dfc01317 	ldw	ra,76(sp)
    3e2c:	dcc01217 	ldw	r19,72(sp)
    3e30:	dc801117 	ldw	r18,68(sp)
    3e34:	dc401017 	ldw	r17,64(sp)
    3e38:	dc000f17 	ldw	r16,60(sp)
    3e3c:	dec01404 	addi	sp,sp,80
    3e40:	f800283a 	ret
    3e44:	04801004 	movi	r18,64
    3e48:	003fd906 	br	3db0 <__alt_mem_onchip_memory2_0+0xfdfffdb0>
    3e4c:	81000a17 	ldw	r4,40(r16)
    3e50:	00c00034 	movhi	r3,0
    3e54:	18d23304 	addi	r3,r3,18636
    3e58:	20ffbe1e 	bne	r4,r3,3d54 <__alt_mem_onchip_memory2_0+0xfdfffd54>
    3e5c:	80c0030b 	ldhu	r3,12(r16)
    3e60:	01010004 	movi	r4,1024
    3e64:	81001315 	stw	r4,76(r16)
    3e68:	1906b03a 	or	r3,r3,r4
    3e6c:	80c0030d 	sth	r3,12(r16)
    3e70:	003fbb06 	br	3d60 <__alt_mem_onchip_memory2_0+0xfdfffd60>
    3e74:	0027883a 	mov	r19,zero
    3e78:	04810004 	movi	r18,1024
    3e7c:	003fcf06 	br	3dbc <__alt_mem_onchip_memory2_0+0xfdfffdbc>
    3e80:	8080030b 	ldhu	r2,12(r16)
    3e84:	10c0800c 	andi	r3,r2,512
    3e88:	183fe71e 	bne	r3,zero,3e28 <__alt_mem_onchip_memory2_0+0xfdfffe28>
    3e8c:	10800094 	ori	r2,r2,2
    3e90:	80c010c4 	addi	r3,r16,67
    3e94:	8080030d 	sth	r2,12(r16)
    3e98:	00800044 	movi	r2,1
    3e9c:	80c00015 	stw	r3,0(r16)
    3ea0:	80c00415 	stw	r3,16(r16)
    3ea4:	80800515 	stw	r2,20(r16)
    3ea8:	003fdf06 	br	3e28 <__alt_mem_onchip_memory2_0+0xfdfffe28>
    3eac:	04c00044 	movi	r19,1
    3eb0:	04810004 	movi	r18,1024
    3eb4:	003fc106 	br	3dbc <__alt_mem_onchip_memory2_0+0xfdfffdbc>

00003eb8 <_malloc_r>:
    3eb8:	defff504 	addi	sp,sp,-44
    3ebc:	dc800315 	stw	r18,12(sp)
    3ec0:	dfc00a15 	stw	ra,40(sp)
    3ec4:	df000915 	stw	fp,36(sp)
    3ec8:	ddc00815 	stw	r23,32(sp)
    3ecc:	dd800715 	stw	r22,28(sp)
    3ed0:	dd400615 	stw	r21,24(sp)
    3ed4:	dd000515 	stw	r20,20(sp)
    3ed8:	dcc00415 	stw	r19,16(sp)
    3edc:	dc400215 	stw	r17,8(sp)
    3ee0:	dc000115 	stw	r16,4(sp)
    3ee4:	288002c4 	addi	r2,r5,11
    3ee8:	00c00584 	movi	r3,22
    3eec:	2025883a 	mov	r18,r4
    3ef0:	18802b2e 	bgeu	r3,r2,3fa0 <_malloc_r+0xe8>
    3ef4:	047ffe04 	movi	r17,-8
    3ef8:	1462703a 	and	r17,r2,r17
    3efc:	88002a16 	blt	r17,zero,3fa8 <_malloc_r+0xf0>
    3f00:	89402936 	bltu	r17,r5,3fa8 <_malloc_r+0xf0>
    3f04:	9009883a 	mov	r4,r18
    3f08:	00051340 	call	5134 <__malloc_lock>
    3f0c:	00807dc4 	movi	r2,503
    3f10:	14402936 	bltu	r2,r17,3fb8 <_malloc_r+0x100>
    3f14:	8808d0fa 	srli	r4,r17,3
    3f18:	04c00034 	movhi	r19,0
    3f1c:	9cdad404 	addi	r19,r19,27472
    3f20:	2105883a 	add	r2,r4,r4
    3f24:	1085883a 	add	r2,r2,r2
    3f28:	1085883a 	add	r2,r2,r2
    3f2c:	9885883a 	add	r2,r19,r2
    3f30:	14000317 	ldw	r16,12(r2)
    3f34:	80815226 	beq	r16,r2,4480 <_malloc_r+0x5c8>
    3f38:	81000117 	ldw	r4,4(r16)
    3f3c:	00bfff04 	movi	r2,-4
    3f40:	80c00317 	ldw	r3,12(r16)
    3f44:	2084703a 	and	r2,r4,r2
    3f48:	8085883a 	add	r2,r16,r2
    3f4c:	81000217 	ldw	r4,8(r16)
    3f50:	11400117 	ldw	r5,4(r2)
    3f54:	20c00315 	stw	r3,12(r4)
    3f58:	19000215 	stw	r4,8(r3)
    3f5c:	28c00054 	ori	r3,r5,1
    3f60:	10c00115 	stw	r3,4(r2)
    3f64:	9009883a 	mov	r4,r18
    3f68:	00051540 	call	5154 <__malloc_unlock>
    3f6c:	80800204 	addi	r2,r16,8
    3f70:	dfc00a17 	ldw	ra,40(sp)
    3f74:	df000917 	ldw	fp,36(sp)
    3f78:	ddc00817 	ldw	r23,32(sp)
    3f7c:	dd800717 	ldw	r22,28(sp)
    3f80:	dd400617 	ldw	r21,24(sp)
    3f84:	dd000517 	ldw	r20,20(sp)
    3f88:	dcc00417 	ldw	r19,16(sp)
    3f8c:	dc800317 	ldw	r18,12(sp)
    3f90:	dc400217 	ldw	r17,8(sp)
    3f94:	dc000117 	ldw	r16,4(sp)
    3f98:	dec00b04 	addi	sp,sp,44
    3f9c:	f800283a 	ret
    3fa0:	04400404 	movi	r17,16
    3fa4:	897fd72e 	bgeu	r17,r5,3f04 <__alt_mem_onchip_memory2_0+0xfdffff04>
    3fa8:	00800304 	movi	r2,12
    3fac:	90800015 	stw	r2,0(r18)
    3fb0:	0005883a 	mov	r2,zero
    3fb4:	003fee06 	br	3f70 <__alt_mem_onchip_memory2_0+0xfdffff70>
    3fb8:	8808d27a 	srli	r4,r17,9
    3fbc:	20007126 	beq	r4,zero,4184 <_malloc_r+0x2cc>
    3fc0:	00800104 	movi	r2,4
    3fc4:	1100f536 	bltu	r2,r4,439c <_malloc_r+0x4e4>
    3fc8:	8808d1ba 	srli	r4,r17,6
    3fcc:	21000e04 	addi	r4,r4,56
    3fd0:	210b883a 	add	r5,r4,r4
    3fd4:	294b883a 	add	r5,r5,r5
    3fd8:	294b883a 	add	r5,r5,r5
    3fdc:	04c00034 	movhi	r19,0
    3fe0:	9cdad404 	addi	r19,r19,27472
    3fe4:	994b883a 	add	r5,r19,r5
    3fe8:	2c000317 	ldw	r16,12(r5)
    3fec:	2c000e26 	beq	r5,r16,4028 <_malloc_r+0x170>
    3ff0:	80c00117 	ldw	r3,4(r16)
    3ff4:	01ffff04 	movi	r7,-4
    3ff8:	018003c4 	movi	r6,15
    3ffc:	19c6703a 	and	r3,r3,r7
    4000:	1c45c83a 	sub	r2,r3,r17
    4004:	30800716 	blt	r6,r2,4024 <_malloc_r+0x16c>
    4008:	1000610e 	bge	r2,zero,4190 <_malloc_r+0x2d8>
    400c:	84000317 	ldw	r16,12(r16)
    4010:	2c000526 	beq	r5,r16,4028 <_malloc_r+0x170>
    4014:	80c00117 	ldw	r3,4(r16)
    4018:	19c6703a 	and	r3,r3,r7
    401c:	1c45c83a 	sub	r2,r3,r17
    4020:	30bff90e 	bge	r6,r2,4008 <__alt_mem_onchip_memory2_0+0xfe000008>
    4024:	213fffc4 	addi	r4,r4,-1
    4028:	21000044 	addi	r4,r4,1
    402c:	9c000417 	ldw	r16,16(r19)
    4030:	00c00034 	movhi	r3,0
    4034:	18dad404 	addi	r3,r3,27472
    4038:	1a400204 	addi	r9,r3,8
    403c:	82410926 	beq	r16,r9,4464 <_malloc_r+0x5ac>
    4040:	81400117 	ldw	r5,4(r16)
    4044:	00bfff04 	movi	r2,-4
    4048:	018003c4 	movi	r6,15
    404c:	2884703a 	and	r2,r5,r2
    4050:	144bc83a 	sub	r5,r2,r17
    4054:	3140f416 	blt	r6,r5,4428 <_malloc_r+0x570>
    4058:	1a400515 	stw	r9,20(r3)
    405c:	1a400415 	stw	r9,16(r3)
    4060:	2800570e 	bge	r5,zero,41c0 <_malloc_r+0x308>
    4064:	01407fc4 	movi	r5,511
    4068:	2880d436 	bltu	r5,r2,43bc <_malloc_r+0x504>
    406c:	1004d0fa 	srli	r2,r2,3
    4070:	02000044 	movi	r8,1
    4074:	19c00117 	ldw	r7,4(r3)
    4078:	108b883a 	add	r5,r2,r2
    407c:	294b883a 	add	r5,r5,r5
    4080:	1005d0ba 	srai	r2,r2,2
    4084:	294b883a 	add	r5,r5,r5
    4088:	28cb883a 	add	r5,r5,r3
    408c:	29800217 	ldw	r6,8(r5)
    4090:	4084983a 	sll	r2,r8,r2
    4094:	81400315 	stw	r5,12(r16)
    4098:	81800215 	stw	r6,8(r16)
    409c:	11c4b03a 	or	r2,r2,r7
    40a0:	2c000215 	stw	r16,8(r5)
    40a4:	18800115 	stw	r2,4(r3)
    40a8:	34000315 	stw	r16,12(r6)
    40ac:	2007d0ba 	srai	r3,r4,2
    40b0:	01400044 	movi	r5,1
    40b4:	28ca983a 	sll	r5,r5,r3
    40b8:	11404936 	bltu	r2,r5,41e0 <_malloc_r+0x328>
    40bc:	1146703a 	and	r3,r2,r5
    40c0:	18000a1e 	bne	r3,zero,40ec <_malloc_r+0x234>
    40c4:	00ffff04 	movi	r3,-4
    40c8:	294b883a 	add	r5,r5,r5
    40cc:	20c8703a 	and	r4,r4,r3
    40d0:	1146703a 	and	r3,r2,r5
    40d4:	21000104 	addi	r4,r4,4
    40d8:	1800041e 	bne	r3,zero,40ec <_malloc_r+0x234>
    40dc:	294b883a 	add	r5,r5,r5
    40e0:	1146703a 	and	r3,r2,r5
    40e4:	21000104 	addi	r4,r4,4
    40e8:	183ffc26 	beq	r3,zero,40dc <__alt_mem_onchip_memory2_0+0xfe0000dc>
    40ec:	023fff04 	movi	r8,-4
    40f0:	01c003c4 	movi	r7,15
    40f4:	2105883a 	add	r2,r4,r4
    40f8:	1085883a 	add	r2,r2,r2
    40fc:	1085883a 	add	r2,r2,r2
    4100:	9897883a 	add	r11,r19,r2
    4104:	5a800304 	addi	r10,r11,12
    4108:	2019883a 	mov	r12,r4
    410c:	54000017 	ldw	r16,0(r10)
    4110:	51bffd04 	addi	r6,r10,-12
    4114:	8180041e 	bne	r16,r6,4128 <_malloc_r+0x270>
    4118:	0000d406 	br	446c <_malloc_r+0x5b4>
    411c:	1000dd0e 	bge	r2,zero,4494 <_malloc_r+0x5dc>
    4120:	84000317 	ldw	r16,12(r16)
    4124:	8180d126 	beq	r16,r6,446c <_malloc_r+0x5b4>
    4128:	80c00117 	ldw	r3,4(r16)
    412c:	1a06703a 	and	r3,r3,r8
    4130:	1c45c83a 	sub	r2,r3,r17
    4134:	38bff90e 	bge	r7,r2,411c <__alt_mem_onchip_memory2_0+0xfe00011c>
    4138:	80c00317 	ldw	r3,12(r16)
    413c:	81000217 	ldw	r4,8(r16)
    4140:	89400054 	ori	r5,r17,1
    4144:	81400115 	stw	r5,4(r16)
    4148:	20c00315 	stw	r3,12(r4)
    414c:	19000215 	stw	r4,8(r3)
    4150:	8463883a 	add	r17,r16,r17
    4154:	9c400515 	stw	r17,20(r19)
    4158:	9c400415 	stw	r17,16(r19)
    415c:	10c00054 	ori	r3,r2,1
    4160:	8a400315 	stw	r9,12(r17)
    4164:	8a400215 	stw	r9,8(r17)
    4168:	88c00115 	stw	r3,4(r17)
    416c:	88a3883a 	add	r17,r17,r2
    4170:	88800015 	stw	r2,0(r17)
    4174:	9009883a 	mov	r4,r18
    4178:	00051540 	call	5154 <__malloc_unlock>
    417c:	80800204 	addi	r2,r16,8
    4180:	003f7b06 	br	3f70 <__alt_mem_onchip_memory2_0+0xfdffff70>
    4184:	01401f84 	movi	r5,126
    4188:	01000fc4 	movi	r4,63
    418c:	003f9106 	br	3fd4 <__alt_mem_onchip_memory2_0+0xfdffffd4>
    4190:	80800317 	ldw	r2,12(r16)
    4194:	81000217 	ldw	r4,8(r16)
    4198:	80c7883a 	add	r3,r16,r3
    419c:	19400117 	ldw	r5,4(r3)
    41a0:	20800315 	stw	r2,12(r4)
    41a4:	11000215 	stw	r4,8(r2)
    41a8:	28800054 	ori	r2,r5,1
    41ac:	18800115 	stw	r2,4(r3)
    41b0:	9009883a 	mov	r4,r18
    41b4:	00051540 	call	5154 <__malloc_unlock>
    41b8:	80800204 	addi	r2,r16,8
    41bc:	003f6c06 	br	3f70 <__alt_mem_onchip_memory2_0+0xfdffff70>
    41c0:	8085883a 	add	r2,r16,r2
    41c4:	10c00117 	ldw	r3,4(r2)
    41c8:	9009883a 	mov	r4,r18
    41cc:	18c00054 	ori	r3,r3,1
    41d0:	10c00115 	stw	r3,4(r2)
    41d4:	00051540 	call	5154 <__malloc_unlock>
    41d8:	80800204 	addi	r2,r16,8
    41dc:	003f6406 	br	3f70 <__alt_mem_onchip_memory2_0+0xfdffff70>
    41e0:	9c000217 	ldw	r16,8(r19)
    41e4:	00bfff04 	movi	r2,-4
    41e8:	85400117 	ldw	r21,4(r16)
    41ec:	a8aa703a 	and	r21,r21,r2
    41f0:	ac400336 	bltu	r21,r17,4200 <_malloc_r+0x348>
    41f4:	ac45c83a 	sub	r2,r21,r17
    41f8:	00c003c4 	movi	r3,15
    41fc:	18805d16 	blt	r3,r2,4374 <_malloc_r+0x4bc>
    4200:	00800074 	movhi	r2,1
    4204:	10a28b04 	addi	r2,r2,-30164
    4208:	00c00034 	movhi	r3,0
    420c:	18dbe104 	addi	r3,r3,28548
    4210:	15c00017 	ldw	r23,0(r2)
    4214:	19000017 	ldw	r4,0(r3)
    4218:	00bfffc4 	movi	r2,-1
    421c:	8579883a 	add	fp,r16,r21
    4220:	8def883a 	add	r23,r17,r23
    4224:	2080e426 	beq	r4,r2,45b8 <_malloc_r+0x700>
    4228:	bdc403c4 	addi	r23,r23,4111
    422c:	00bc0004 	movi	r2,-4096
    4230:	b8ae703a 	and	r23,r23,r2
    4234:	9009883a 	mov	r4,r18
    4238:	b80b883a 	mov	r5,r23
    423c:	d8c00015 	stw	r3,0(sp)
    4240:	00047900 	call	4790 <_sbrk_r>
    4244:	1029883a 	mov	r20,r2
    4248:	00bfffc4 	movi	r2,-1
    424c:	d8c00017 	ldw	r3,0(sp)
    4250:	a080a426 	beq	r20,r2,44e4 <_malloc_r+0x62c>
    4254:	a700a236 	bltu	r20,fp,44e0 <_malloc_r+0x628>
    4258:	05800074 	movhi	r22,1
    425c:	b5a28c04 	addi	r22,r22,-30160
    4260:	b0800017 	ldw	r2,0(r22)
    4264:	b885883a 	add	r2,r23,r2
    4268:	b0800015 	stw	r2,0(r22)
    426c:	e500da26 	beq	fp,r20,45d8 <_malloc_r+0x720>
    4270:	19000017 	ldw	r4,0(r3)
    4274:	00ffffc4 	movi	r3,-1
    4278:	20c0e426 	beq	r4,r3,460c <_malloc_r+0x754>
    427c:	a739c83a 	sub	fp,r20,fp
    4280:	1705883a 	add	r2,r2,fp
    4284:	b0800015 	stw	r2,0(r22)
    4288:	a08001cc 	andi	r2,r20,7
    428c:	1000b526 	beq	r2,zero,4564 <_malloc_r+0x6ac>
    4290:	a0a9c83a 	sub	r20,r20,r2
    4294:	00c40204 	movi	r3,4104
    4298:	a5000204 	addi	r20,r20,8
    429c:	1885c83a 	sub	r2,r3,r2
    42a0:	a5c7883a 	add	r3,r20,r23
    42a4:	18c3ffcc 	andi	r3,r3,4095
    42a8:	10efc83a 	sub	r23,r2,r3
    42ac:	9009883a 	mov	r4,r18
    42b0:	b80b883a 	mov	r5,r23
    42b4:	00047900 	call	4790 <_sbrk_r>
    42b8:	00ffffc4 	movi	r3,-1
    42bc:	10c0d026 	beq	r2,r3,4600 <_malloc_r+0x748>
    42c0:	1505c83a 	sub	r2,r2,r20
    42c4:	b887883a 	add	r3,r23,r2
    42c8:	18c00054 	ori	r3,r3,1
    42cc:	b0800017 	ldw	r2,0(r22)
    42d0:	9d000215 	stw	r20,8(r19)
    42d4:	a0c00115 	stw	r3,4(r20)
    42d8:	b885883a 	add	r2,r23,r2
    42dc:	b0800015 	stw	r2,0(r22)
    42e0:	84c00e26 	beq	r16,r19,431c <_malloc_r+0x464>
    42e4:	00c003c4 	movi	r3,15
    42e8:	1d40a02e 	bgeu	r3,r21,456c <_malloc_r+0x6b4>
    42ec:	81400117 	ldw	r5,4(r16)
    42f0:	ad7ffd04 	addi	r21,r21,-12
    42f4:	013ffe04 	movi	r4,-8
    42f8:	a908703a 	and	r4,r21,r4
    42fc:	2940004c 	andi	r5,r5,1
    4300:	214ab03a 	or	r5,r4,r5
    4304:	81400115 	stw	r5,4(r16)
    4308:	01800144 	movi	r6,5
    430c:	810b883a 	add	r5,r16,r4
    4310:	29800115 	stw	r6,4(r5)
    4314:	29800215 	stw	r6,8(r5)
    4318:	1900c036 	bltu	r3,r4,461c <_malloc_r+0x764>
    431c:	00c00074 	movhi	r3,1
    4320:	18e28a04 	addi	r3,r3,-30168
    4324:	19000017 	ldw	r4,0(r3)
    4328:	2080012e 	bgeu	r4,r2,4330 <_malloc_r+0x478>
    432c:	18800015 	stw	r2,0(r3)
    4330:	00c00074 	movhi	r3,1
    4334:	18e28904 	addi	r3,r3,-30172
    4338:	19000017 	ldw	r4,0(r3)
    433c:	9c000217 	ldw	r16,8(r19)
    4340:	2080012e 	bgeu	r4,r2,4348 <_malloc_r+0x490>
    4344:	18800015 	stw	r2,0(r3)
    4348:	80c00117 	ldw	r3,4(r16)
    434c:	00bfff04 	movi	r2,-4
    4350:	1886703a 	and	r3,r3,r2
    4354:	1c45c83a 	sub	r2,r3,r17
    4358:	1c400236 	bltu	r3,r17,4364 <_malloc_r+0x4ac>
    435c:	00c003c4 	movi	r3,15
    4360:	18800416 	blt	r3,r2,4374 <_malloc_r+0x4bc>
    4364:	9009883a 	mov	r4,r18
    4368:	00051540 	call	5154 <__malloc_unlock>
    436c:	0005883a 	mov	r2,zero
    4370:	003eff06 	br	3f70 <__alt_mem_onchip_memory2_0+0xfdffff70>
    4374:	88c00054 	ori	r3,r17,1
    4378:	80c00115 	stw	r3,4(r16)
    437c:	8463883a 	add	r17,r16,r17
    4380:	10800054 	ori	r2,r2,1
    4384:	9c400215 	stw	r17,8(r19)
    4388:	88800115 	stw	r2,4(r17)
    438c:	9009883a 	mov	r4,r18
    4390:	00051540 	call	5154 <__malloc_unlock>
    4394:	80800204 	addi	r2,r16,8
    4398:	003ef506 	br	3f70 <__alt_mem_onchip_memory2_0+0xfdffff70>
    439c:	00800504 	movi	r2,20
    43a0:	1100482e 	bgeu	r2,r4,44c4 <_malloc_r+0x60c>
    43a4:	00801504 	movi	r2,84
    43a8:	11006836 	bltu	r2,r4,454c <_malloc_r+0x694>
    43ac:	8808d33a 	srli	r4,r17,12
    43b0:	21001b84 	addi	r4,r4,110
    43b4:	210b883a 	add	r5,r4,r4
    43b8:	003f0606 	br	3fd4 <__alt_mem_onchip_memory2_0+0xfdffffd4>
    43bc:	1006d27a 	srli	r3,r2,9
    43c0:	01400104 	movi	r5,4
    43c4:	28c0422e 	bgeu	r5,r3,44d0 <_malloc_r+0x618>
    43c8:	01400504 	movi	r5,20
    43cc:	28c07c36 	bltu	r5,r3,45c0 <_malloc_r+0x708>
    43d0:	194016c4 	addi	r5,r3,91
    43d4:	294d883a 	add	r6,r5,r5
    43d8:	318d883a 	add	r6,r6,r6
    43dc:	318d883a 	add	r6,r6,r6
    43e0:	998d883a 	add	r6,r19,r6
    43e4:	30c00217 	ldw	r3,8(r6)
    43e8:	01c00034 	movhi	r7,0
    43ec:	39dad404 	addi	r7,r7,27472
    43f0:	19806326 	beq	r3,r6,4580 <_malloc_r+0x6c8>
    43f4:	01ffff04 	movi	r7,-4
    43f8:	19400117 	ldw	r5,4(r3)
    43fc:	29ca703a 	and	r5,r5,r7
    4400:	1140022e 	bgeu	r2,r5,440c <_malloc_r+0x554>
    4404:	18c00217 	ldw	r3,8(r3)
    4408:	30fffb1e 	bne	r6,r3,43f8 <__alt_mem_onchip_memory2_0+0xfe0003f8>
    440c:	19400317 	ldw	r5,12(r3)
    4410:	98800117 	ldw	r2,4(r19)
    4414:	81400315 	stw	r5,12(r16)
    4418:	80c00215 	stw	r3,8(r16)
    441c:	2c000215 	stw	r16,8(r5)
    4420:	1c000315 	stw	r16,12(r3)
    4424:	003f2106 	br	40ac <__alt_mem_onchip_memory2_0+0xfe0000ac>
    4428:	88800054 	ori	r2,r17,1
    442c:	80800115 	stw	r2,4(r16)
    4430:	8463883a 	add	r17,r16,r17
    4434:	1c400515 	stw	r17,20(r3)
    4438:	1c400415 	stw	r17,16(r3)
    443c:	28800054 	ori	r2,r5,1
    4440:	88800115 	stw	r2,4(r17)
    4444:	8a400315 	stw	r9,12(r17)
    4448:	8a400215 	stw	r9,8(r17)
    444c:	8963883a 	add	r17,r17,r5
    4450:	89400015 	stw	r5,0(r17)
    4454:	9009883a 	mov	r4,r18
    4458:	00051540 	call	5154 <__malloc_unlock>
    445c:	80800204 	addi	r2,r16,8
    4460:	003ec306 	br	3f70 <__alt_mem_onchip_memory2_0+0xfdffff70>
    4464:	18800117 	ldw	r2,4(r3)
    4468:	003f1006 	br	40ac <__alt_mem_onchip_memory2_0+0xfe0000ac>
    446c:	63000044 	addi	r12,r12,1
    4470:	608000cc 	andi	r2,r12,3
    4474:	52800204 	addi	r10,r10,8
    4478:	103f241e 	bne	r2,zero,410c <__alt_mem_onchip_memory2_0+0xfe00010c>
    447c:	00002106 	br	4504 <_malloc_r+0x64c>
    4480:	80800204 	addi	r2,r16,8
    4484:	84000517 	ldw	r16,20(r16)
    4488:	143eab1e 	bne	r2,r16,3f38 <__alt_mem_onchip_memory2_0+0xfdffff38>
    448c:	21000084 	addi	r4,r4,2
    4490:	003ee606 	br	402c <__alt_mem_onchip_memory2_0+0xfe00002c>
    4494:	80c7883a 	add	r3,r16,r3
    4498:	19400117 	ldw	r5,4(r3)
    449c:	80800317 	ldw	r2,12(r16)
    44a0:	81000217 	ldw	r4,8(r16)
    44a4:	29400054 	ori	r5,r5,1
    44a8:	19400115 	stw	r5,4(r3)
    44ac:	20800315 	stw	r2,12(r4)
    44b0:	11000215 	stw	r4,8(r2)
    44b4:	9009883a 	mov	r4,r18
    44b8:	00051540 	call	5154 <__malloc_unlock>
    44bc:	80800204 	addi	r2,r16,8
    44c0:	003eab06 	br	3f70 <__alt_mem_onchip_memory2_0+0xfdffff70>
    44c4:	210016c4 	addi	r4,r4,91
    44c8:	210b883a 	add	r5,r4,r4
    44cc:	003ec106 	br	3fd4 <__alt_mem_onchip_memory2_0+0xfdffffd4>
    44d0:	100ad1ba 	srli	r5,r2,6
    44d4:	29400e04 	addi	r5,r5,56
    44d8:	294d883a 	add	r6,r5,r5
    44dc:	003fbe06 	br	43d8 <__alt_mem_onchip_memory2_0+0xfe0003d8>
    44e0:	84ff5d26 	beq	r16,r19,4258 <__alt_mem_onchip_memory2_0+0xfe000258>
    44e4:	9c000217 	ldw	r16,8(r19)
    44e8:	00bfff04 	movi	r2,-4
    44ec:	80c00117 	ldw	r3,4(r16)
    44f0:	1886703a 	and	r3,r3,r2
    44f4:	003f9706 	br	4354 <__alt_mem_onchip_memory2_0+0xfe000354>
    44f8:	5ac00017 	ldw	r11,0(r11)
    44fc:	213fffc4 	addi	r4,r4,-1
    4500:	58805c1e 	bne	r11,r2,4674 <_malloc_r+0x7bc>
    4504:	20c000cc 	andi	r3,r4,3
    4508:	58bffe04 	addi	r2,r11,-8
    450c:	183ffa1e 	bne	r3,zero,44f8 <__alt_mem_onchip_memory2_0+0xfe0004f8>
    4510:	98800117 	ldw	r2,4(r19)
    4514:	0146303a 	nor	r3,zero,r5
    4518:	1884703a 	and	r2,r3,r2
    451c:	98800115 	stw	r2,4(r19)
    4520:	294b883a 	add	r5,r5,r5
    4524:	117f2e36 	bltu	r2,r5,41e0 <__alt_mem_onchip_memory2_0+0xfe0001e0>
    4528:	283f2d26 	beq	r5,zero,41e0 <__alt_mem_onchip_memory2_0+0xfe0001e0>
    452c:	1146703a 	and	r3,r2,r5
    4530:	6009883a 	mov	r4,r12
    4534:	183eef1e 	bne	r3,zero,40f4 <__alt_mem_onchip_memory2_0+0xfe0000f4>
    4538:	294b883a 	add	r5,r5,r5
    453c:	1146703a 	and	r3,r2,r5
    4540:	21000104 	addi	r4,r4,4
    4544:	183ffc26 	beq	r3,zero,4538 <__alt_mem_onchip_memory2_0+0xfe000538>
    4548:	003eea06 	br	40f4 <__alt_mem_onchip_memory2_0+0xfe0000f4>
    454c:	00805504 	movi	r2,340
    4550:	11001336 	bltu	r2,r4,45a0 <_malloc_r+0x6e8>
    4554:	8808d3fa 	srli	r4,r17,15
    4558:	21001dc4 	addi	r4,r4,119
    455c:	210b883a 	add	r5,r4,r4
    4560:	003e9c06 	br	3fd4 <__alt_mem_onchip_memory2_0+0xfdffffd4>
    4564:	00840004 	movi	r2,4096
    4568:	003f4d06 	br	42a0 <__alt_mem_onchip_memory2_0+0xfe0002a0>
    456c:	00800044 	movi	r2,1
    4570:	a0800115 	stw	r2,4(r20)
    4574:	a021883a 	mov	r16,r20
    4578:	0007883a 	mov	r3,zero
    457c:	003f7506 	br	4354 <__alt_mem_onchip_memory2_0+0xfe000354>
    4580:	280bd0ba 	srai	r5,r5,2
    4584:	01800044 	movi	r6,1
    4588:	38800117 	ldw	r2,4(r7)
    458c:	314c983a 	sll	r6,r6,r5
    4590:	180b883a 	mov	r5,r3
    4594:	3084b03a 	or	r2,r6,r2
    4598:	38800115 	stw	r2,4(r7)
    459c:	003f9d06 	br	4414 <__alt_mem_onchip_memory2_0+0xfe000414>
    45a0:	00815504 	movi	r2,1364
    45a4:	11001336 	bltu	r2,r4,45f4 <_malloc_r+0x73c>
    45a8:	8808d4ba 	srli	r4,r17,18
    45ac:	21001f04 	addi	r4,r4,124
    45b0:	210b883a 	add	r5,r4,r4
    45b4:	003e8706 	br	3fd4 <__alt_mem_onchip_memory2_0+0xfdffffd4>
    45b8:	bdc00404 	addi	r23,r23,16
    45bc:	003f1d06 	br	4234 <__alt_mem_onchip_memory2_0+0xfe000234>
    45c0:	01401504 	movi	r5,84
    45c4:	28c01c36 	bltu	r5,r3,4638 <_malloc_r+0x780>
    45c8:	100ad33a 	srli	r5,r2,12
    45cc:	29401b84 	addi	r5,r5,110
    45d0:	294d883a 	add	r6,r5,r5
    45d4:	003f8006 	br	43d8 <__alt_mem_onchip_memory2_0+0xfe0003d8>
    45d8:	e103ffcc 	andi	r4,fp,4095
    45dc:	203f241e 	bne	r4,zero,4270 <__alt_mem_onchip_memory2_0+0xfe000270>
    45e0:	98c00217 	ldw	r3,8(r19)
    45e4:	bd49883a 	add	r4,r23,r21
    45e8:	21000054 	ori	r4,r4,1
    45ec:	19000115 	stw	r4,4(r3)
    45f0:	003f4a06 	br	431c <__alt_mem_onchip_memory2_0+0xfe00031c>
    45f4:	01403f04 	movi	r5,252
    45f8:	01001f84 	movi	r4,126
    45fc:	003e7506 	br	3fd4 <__alt_mem_onchip_memory2_0+0xfdffffd4>
    4600:	00c00044 	movi	r3,1
    4604:	002f883a 	mov	r23,zero
    4608:	003f3006 	br	42cc <__alt_mem_onchip_memory2_0+0xfe0002cc>
    460c:	00800034 	movhi	r2,0
    4610:	109be104 	addi	r2,r2,28548
    4614:	15000015 	stw	r20,0(r2)
    4618:	003f1b06 	br	4288 <__alt_mem_onchip_memory2_0+0xfe000288>
    461c:	9009883a 	mov	r4,r18
    4620:	81400204 	addi	r5,r16,8
    4624:	00038d40 	call	38d4 <_free_r>
    4628:	00800074 	movhi	r2,1
    462c:	10a28c04 	addi	r2,r2,-30160
    4630:	10800017 	ldw	r2,0(r2)
    4634:	003f3906 	br	431c <__alt_mem_onchip_memory2_0+0xfe00031c>
    4638:	01405504 	movi	r5,340
    463c:	28c00436 	bltu	r5,r3,4650 <_malloc_r+0x798>
    4640:	100ad3fa 	srli	r5,r2,15
    4644:	29401dc4 	addi	r5,r5,119
    4648:	294d883a 	add	r6,r5,r5
    464c:	003f6206 	br	43d8 <__alt_mem_onchip_memory2_0+0xfe0003d8>
    4650:	01415504 	movi	r5,1364
    4654:	28c00436 	bltu	r5,r3,4668 <_malloc_r+0x7b0>
    4658:	100ad4ba 	srli	r5,r2,18
    465c:	29401f04 	addi	r5,r5,124
    4660:	294d883a 	add	r6,r5,r5
    4664:	003f5c06 	br	43d8 <__alt_mem_onchip_memory2_0+0xfe0003d8>
    4668:	01803f04 	movi	r6,252
    466c:	01401f84 	movi	r5,126
    4670:	003f5906 	br	43d8 <__alt_mem_onchip_memory2_0+0xfe0003d8>
    4674:	98800117 	ldw	r2,4(r19)
    4678:	003fa906 	br	4520 <__alt_mem_onchip_memory2_0+0xfe000520>

0000467c <memset>:
    467c:	20c000cc 	andi	r3,r4,3
    4680:	2005883a 	mov	r2,r4
    4684:	18003f26 	beq	r3,zero,4784 <memset+0x108>
    4688:	31ffffc4 	addi	r7,r6,-1
    468c:	30003b26 	beq	r6,zero,477c <memset+0x100>
    4690:	2813883a 	mov	r9,r5
    4694:	200d883a 	mov	r6,r4
    4698:	2007883a 	mov	r3,r4
    469c:	00000406 	br	46b0 <memset+0x34>
    46a0:	3a3fffc4 	addi	r8,r7,-1
    46a4:	31800044 	addi	r6,r6,1
    46a8:	38003426 	beq	r7,zero,477c <memset+0x100>
    46ac:	400f883a 	mov	r7,r8
    46b0:	18c00044 	addi	r3,r3,1
    46b4:	32400005 	stb	r9,0(r6)
    46b8:	1a0000cc 	andi	r8,r3,3
    46bc:	403ff81e 	bne	r8,zero,46a0 <__alt_mem_onchip_memory2_0+0xfe0006a0>
    46c0:	010000c4 	movi	r4,3
    46c4:	21c0282e 	bgeu	r4,r7,4768 <memset+0xec>
    46c8:	29003fcc 	andi	r4,r5,255
    46cc:	2010923a 	slli	r8,r4,8
    46d0:	4108b03a 	or	r4,r8,r4
    46d4:	2010943a 	slli	r8,r4,16
    46d8:	4110b03a 	or	r8,r8,r4
    46dc:	010003c4 	movi	r4,15
    46e0:	21c0122e 	bgeu	r4,r7,472c <memset+0xb0>
    46e4:	3a7ffc04 	addi	r9,r7,-16
    46e8:	4812d13a 	srli	r9,r9,4
    46ec:	19000404 	addi	r4,r3,16
    46f0:	180d883a 	mov	r6,r3
    46f4:	4814913a 	slli	r10,r9,4
    46f8:	2289883a 	add	r4,r4,r10
    46fc:	32000015 	stw	r8,0(r6)
    4700:	32000115 	stw	r8,4(r6)
    4704:	32000215 	stw	r8,8(r6)
    4708:	32000315 	stw	r8,12(r6)
    470c:	31800404 	addi	r6,r6,16
    4710:	313ffa1e 	bne	r6,r4,46fc <__alt_mem_onchip_memory2_0+0xfe0006fc>
    4714:	4a400044 	addi	r9,r9,1
    4718:	4812913a 	slli	r9,r9,4
    471c:	39c003cc 	andi	r7,r7,15
    4720:	010000c4 	movi	r4,3
    4724:	1a47883a 	add	r3,r3,r9
    4728:	21c00f2e 	bgeu	r4,r7,4768 <memset+0xec>
    472c:	3a7fff04 	addi	r9,r7,-4
    4730:	4812d0ba 	srli	r9,r9,2
    4734:	19000104 	addi	r4,r3,4
    4738:	180d883a 	mov	r6,r3
    473c:	4a55883a 	add	r10,r9,r9
    4740:	5295883a 	add	r10,r10,r10
    4744:	2289883a 	add	r4,r4,r10
    4748:	32000015 	stw	r8,0(r6)
    474c:	31800104 	addi	r6,r6,4
    4750:	313ffd1e 	bne	r6,r4,4748 <__alt_mem_onchip_memory2_0+0xfe000748>
    4754:	4a400044 	addi	r9,r9,1
    4758:	4a53883a 	add	r9,r9,r9
    475c:	4a53883a 	add	r9,r9,r9
    4760:	1a47883a 	add	r3,r3,r9
    4764:	39c000cc 	andi	r7,r7,3
    4768:	38000526 	beq	r7,zero,4780 <memset+0x104>
    476c:	19cf883a 	add	r7,r3,r7
    4770:	19400005 	stb	r5,0(r3)
    4774:	18c00044 	addi	r3,r3,1
    4778:	19fffd1e 	bne	r3,r7,4770 <__alt_mem_onchip_memory2_0+0xfe000770>
    477c:	f800283a 	ret
    4780:	f800283a 	ret
    4784:	2007883a 	mov	r3,r4
    4788:	300f883a 	mov	r7,r6
    478c:	003fcc06 	br	46c0 <__alt_mem_onchip_memory2_0+0xfe0006c0>

00004790 <_sbrk_r>:
    4790:	defffd04 	addi	sp,sp,-12
    4794:	dc400115 	stw	r17,4(sp)
    4798:	dc000015 	stw	r16,0(sp)
    479c:	2023883a 	mov	r17,r4
    47a0:	04000074 	movhi	r16,1
    47a4:	84228804 	addi	r16,r16,-30176
    47a8:	2809883a 	mov	r4,r5
    47ac:	dfc00215 	stw	ra,8(sp)
    47b0:	80000015 	stw	zero,0(r16)
    47b4:	00052b40 	call	52b4 <sbrk>
    47b8:	00ffffc4 	movi	r3,-1
    47bc:	10c00526 	beq	r2,r3,47d4 <_sbrk_r+0x44>
    47c0:	dfc00217 	ldw	ra,8(sp)
    47c4:	dc400117 	ldw	r17,4(sp)
    47c8:	dc000017 	ldw	r16,0(sp)
    47cc:	dec00304 	addi	sp,sp,12
    47d0:	f800283a 	ret
    47d4:	80c00017 	ldw	r3,0(r16)
    47d8:	183ff926 	beq	r3,zero,47c0 <__alt_mem_onchip_memory2_0+0xfe0007c0>
    47dc:	88c00015 	stw	r3,0(r17)
    47e0:	dfc00217 	ldw	ra,8(sp)
    47e4:	dc400117 	ldw	r17,4(sp)
    47e8:	dc000017 	ldw	r16,0(sp)
    47ec:	dec00304 	addi	sp,sp,12
    47f0:	f800283a 	ret

000047f4 <__sread>:
    47f4:	defffe04 	addi	sp,sp,-8
    47f8:	dc000015 	stw	r16,0(sp)
    47fc:	2821883a 	mov	r16,r5
    4800:	2940038f 	ldh	r5,14(r5)
    4804:	dfc00115 	stw	ra,4(sp)
    4808:	0004c740 	call	4c74 <_read_r>
    480c:	10000716 	blt	r2,zero,482c <__sread+0x38>
    4810:	80c01417 	ldw	r3,80(r16)
    4814:	1887883a 	add	r3,r3,r2
    4818:	80c01415 	stw	r3,80(r16)
    481c:	dfc00117 	ldw	ra,4(sp)
    4820:	dc000017 	ldw	r16,0(sp)
    4824:	dec00204 	addi	sp,sp,8
    4828:	f800283a 	ret
    482c:	80c0030b 	ldhu	r3,12(r16)
    4830:	18fbffcc 	andi	r3,r3,61439
    4834:	80c0030d 	sth	r3,12(r16)
    4838:	dfc00117 	ldw	ra,4(sp)
    483c:	dc000017 	ldw	r16,0(sp)
    4840:	dec00204 	addi	sp,sp,8
    4844:	f800283a 	ret

00004848 <__seofread>:
    4848:	0005883a 	mov	r2,zero
    484c:	f800283a 	ret

00004850 <__swrite>:
    4850:	2880030b 	ldhu	r2,12(r5)
    4854:	defffb04 	addi	sp,sp,-20
    4858:	dcc00315 	stw	r19,12(sp)
    485c:	dc800215 	stw	r18,8(sp)
    4860:	dc400115 	stw	r17,4(sp)
    4864:	dc000015 	stw	r16,0(sp)
    4868:	dfc00415 	stw	ra,16(sp)
    486c:	10c0400c 	andi	r3,r2,256
    4870:	2821883a 	mov	r16,r5
    4874:	2027883a 	mov	r19,r4
    4878:	3025883a 	mov	r18,r6
    487c:	3823883a 	mov	r17,r7
    4880:	18000526 	beq	r3,zero,4898 <__swrite+0x48>
    4884:	2940038f 	ldh	r5,14(r5)
    4888:	000d883a 	mov	r6,zero
    488c:	01c00084 	movi	r7,2
    4890:	0004c080 	call	4c08 <_lseek_r>
    4894:	8080030b 	ldhu	r2,12(r16)
    4898:	8140038f 	ldh	r5,14(r16)
    489c:	10bbffcc 	andi	r2,r2,61439
    48a0:	9809883a 	mov	r4,r19
    48a4:	900d883a 	mov	r6,r18
    48a8:	880f883a 	mov	r7,r17
    48ac:	8080030d 	sth	r2,12(r16)
    48b0:	dfc00417 	ldw	ra,16(sp)
    48b4:	dcc00317 	ldw	r19,12(sp)
    48b8:	dc800217 	ldw	r18,8(sp)
    48bc:	dc400117 	ldw	r17,4(sp)
    48c0:	dc000017 	ldw	r16,0(sp)
    48c4:	dec00504 	addi	sp,sp,20
    48c8:	00049301 	jmpi	4930 <_write_r>

000048cc <__sseek>:
    48cc:	defffe04 	addi	sp,sp,-8
    48d0:	dc000015 	stw	r16,0(sp)
    48d4:	2821883a 	mov	r16,r5
    48d8:	2940038f 	ldh	r5,14(r5)
    48dc:	dfc00115 	stw	ra,4(sp)
    48e0:	0004c080 	call	4c08 <_lseek_r>
    48e4:	00ffffc4 	movi	r3,-1
    48e8:	10c00826 	beq	r2,r3,490c <__sseek+0x40>
    48ec:	80c0030b 	ldhu	r3,12(r16)
    48f0:	80801415 	stw	r2,80(r16)
    48f4:	18c40014 	ori	r3,r3,4096
    48f8:	80c0030d 	sth	r3,12(r16)
    48fc:	dfc00117 	ldw	ra,4(sp)
    4900:	dc000017 	ldw	r16,0(sp)
    4904:	dec00204 	addi	sp,sp,8
    4908:	f800283a 	ret
    490c:	80c0030b 	ldhu	r3,12(r16)
    4910:	18fbffcc 	andi	r3,r3,61439
    4914:	80c0030d 	sth	r3,12(r16)
    4918:	dfc00117 	ldw	ra,4(sp)
    491c:	dc000017 	ldw	r16,0(sp)
    4920:	dec00204 	addi	sp,sp,8
    4924:	f800283a 	ret

00004928 <__sclose>:
    4928:	2940038f 	ldh	r5,14(r5)
    492c:	000499c1 	jmpi	499c <_close_r>

00004930 <_write_r>:
    4930:	defffd04 	addi	sp,sp,-12
    4934:	dc400115 	stw	r17,4(sp)
    4938:	dc000015 	stw	r16,0(sp)
    493c:	2023883a 	mov	r17,r4
    4940:	04000074 	movhi	r16,1
    4944:	84228804 	addi	r16,r16,-30176
    4948:	2809883a 	mov	r4,r5
    494c:	300b883a 	mov	r5,r6
    4950:	380d883a 	mov	r6,r7
    4954:	dfc00215 	stw	ra,8(sp)
    4958:	80000015 	stw	zero,0(r16)
    495c:	00053b40 	call	53b4 <write>
    4960:	00ffffc4 	movi	r3,-1
    4964:	10c00526 	beq	r2,r3,497c <_write_r+0x4c>
    4968:	dfc00217 	ldw	ra,8(sp)
    496c:	dc400117 	ldw	r17,4(sp)
    4970:	dc000017 	ldw	r16,0(sp)
    4974:	dec00304 	addi	sp,sp,12
    4978:	f800283a 	ret
    497c:	80c00017 	ldw	r3,0(r16)
    4980:	183ff926 	beq	r3,zero,4968 <__alt_mem_onchip_memory2_0+0xfe000968>
    4984:	88c00015 	stw	r3,0(r17)
    4988:	dfc00217 	ldw	ra,8(sp)
    498c:	dc400117 	ldw	r17,4(sp)
    4990:	dc000017 	ldw	r16,0(sp)
    4994:	dec00304 	addi	sp,sp,12
    4998:	f800283a 	ret

0000499c <_close_r>:
    499c:	defffd04 	addi	sp,sp,-12
    49a0:	dc400115 	stw	r17,4(sp)
    49a4:	dc000015 	stw	r16,0(sp)
    49a8:	2023883a 	mov	r17,r4
    49ac:	04000074 	movhi	r16,1
    49b0:	84228804 	addi	r16,r16,-30176
    49b4:	2809883a 	mov	r4,r5
    49b8:	dfc00215 	stw	ra,8(sp)
    49bc:	80000015 	stw	zero,0(r16)
    49c0:	0001c7c0 	call	1c7c <close>
    49c4:	00ffffc4 	movi	r3,-1
    49c8:	10c00526 	beq	r2,r3,49e0 <_close_r+0x44>
    49cc:	dfc00217 	ldw	ra,8(sp)
    49d0:	dc400117 	ldw	r17,4(sp)
    49d4:	dc000017 	ldw	r16,0(sp)
    49d8:	dec00304 	addi	sp,sp,12
    49dc:	f800283a 	ret
    49e0:	80c00017 	ldw	r3,0(r16)
    49e4:	183ff926 	beq	r3,zero,49cc <__alt_mem_onchip_memory2_0+0xfe0009cc>
    49e8:	88c00015 	stw	r3,0(r17)
    49ec:	dfc00217 	ldw	ra,8(sp)
    49f0:	dc400117 	ldw	r17,4(sp)
    49f4:	dc000017 	ldw	r16,0(sp)
    49f8:	dec00304 	addi	sp,sp,12
    49fc:	f800283a 	ret

00004a00 <_fclose_r>:
    4a00:	defffc04 	addi	sp,sp,-16
    4a04:	dc000015 	stw	r16,0(sp)
    4a08:	dfc00315 	stw	ra,12(sp)
    4a0c:	dc800215 	stw	r18,8(sp)
    4a10:	dc400115 	stw	r17,4(sp)
    4a14:	2821883a 	mov	r16,r5
    4a18:	28003126 	beq	r5,zero,4ae0 <_fclose_r+0xe0>
    4a1c:	2023883a 	mov	r17,r4
    4a20:	00037580 	call	3758 <__sfp_lock_acquire>
    4a24:	88000226 	beq	r17,zero,4a30 <_fclose_r+0x30>
    4a28:	88800e17 	ldw	r2,56(r17)
    4a2c:	10003326 	beq	r2,zero,4afc <_fclose_r+0xfc>
    4a30:	8080030f 	ldh	r2,12(r16)
    4a34:	10002226 	beq	r2,zero,4ac0 <_fclose_r+0xc0>
    4a38:	8809883a 	mov	r4,r17
    4a3c:	800b883a 	mov	r5,r16
    4a40:	00031940 	call	3194 <_fflush_r>
    4a44:	80c00b17 	ldw	r3,44(r16)
    4a48:	1025883a 	mov	r18,r2
    4a4c:	18000426 	beq	r3,zero,4a60 <_fclose_r+0x60>
    4a50:	81400717 	ldw	r5,28(r16)
    4a54:	8809883a 	mov	r4,r17
    4a58:	183ee83a 	callr	r3
    4a5c:	10003016 	blt	r2,zero,4b20 <_fclose_r+0x120>
    4a60:	8080030b 	ldhu	r2,12(r16)
    4a64:	1080200c 	andi	r2,r2,128
    4a68:	1000291e 	bne	r2,zero,4b10 <_fclose_r+0x110>
    4a6c:	81400c17 	ldw	r5,48(r16)
    4a70:	28000526 	beq	r5,zero,4a88 <_fclose_r+0x88>
    4a74:	80801004 	addi	r2,r16,64
    4a78:	28800226 	beq	r5,r2,4a84 <_fclose_r+0x84>
    4a7c:	8809883a 	mov	r4,r17
    4a80:	00038d40 	call	38d4 <_free_r>
    4a84:	80000c15 	stw	zero,48(r16)
    4a88:	81401117 	ldw	r5,68(r16)
    4a8c:	28000326 	beq	r5,zero,4a9c <_fclose_r+0x9c>
    4a90:	8809883a 	mov	r4,r17
    4a94:	00038d40 	call	38d4 <_free_r>
    4a98:	80001115 	stw	zero,68(r16)
    4a9c:	8000030d 	sth	zero,12(r16)
    4aa0:	000375c0 	call	375c <__sfp_lock_release>
    4aa4:	9005883a 	mov	r2,r18
    4aa8:	dfc00317 	ldw	ra,12(sp)
    4aac:	dc800217 	ldw	r18,8(sp)
    4ab0:	dc400117 	ldw	r17,4(sp)
    4ab4:	dc000017 	ldw	r16,0(sp)
    4ab8:	dec00404 	addi	sp,sp,16
    4abc:	f800283a 	ret
    4ac0:	000375c0 	call	375c <__sfp_lock_release>
    4ac4:	0005883a 	mov	r2,zero
    4ac8:	dfc00317 	ldw	ra,12(sp)
    4acc:	dc800217 	ldw	r18,8(sp)
    4ad0:	dc400117 	ldw	r17,4(sp)
    4ad4:	dc000017 	ldw	r16,0(sp)
    4ad8:	dec00404 	addi	sp,sp,16
    4adc:	f800283a 	ret
    4ae0:	0005883a 	mov	r2,zero
    4ae4:	dfc00317 	ldw	ra,12(sp)
    4ae8:	dc800217 	ldw	r18,8(sp)
    4aec:	dc400117 	ldw	r17,4(sp)
    4af0:	dc000017 	ldw	r16,0(sp)
    4af4:	dec00404 	addi	sp,sp,16
    4af8:	f800283a 	ret
    4afc:	8809883a 	mov	r4,r17
    4b00:	00034a00 	call	34a0 <__sinit>
    4b04:	8080030f 	ldh	r2,12(r16)
    4b08:	103fcb1e 	bne	r2,zero,4a38 <__alt_mem_onchip_memory2_0+0xfe000a38>
    4b0c:	003fec06 	br	4ac0 <__alt_mem_onchip_memory2_0+0xfe000ac0>
    4b10:	81400417 	ldw	r5,16(r16)
    4b14:	8809883a 	mov	r4,r17
    4b18:	00038d40 	call	38d4 <_free_r>
    4b1c:	003fd306 	br	4a6c <__alt_mem_onchip_memory2_0+0xfe000a6c>
    4b20:	04bfffc4 	movi	r18,-1
    4b24:	003fce06 	br	4a60 <__alt_mem_onchip_memory2_0+0xfe000a60>

00004b28 <fclose>:
    4b28:	00800034 	movhi	r2,0
    4b2c:	109be004 	addi	r2,r2,28544
    4b30:	200b883a 	mov	r5,r4
    4b34:	11000017 	ldw	r4,0(r2)
    4b38:	0004a001 	jmpi	4a00 <_fclose_r>

00004b3c <_fstat_r>:
    4b3c:	defffd04 	addi	sp,sp,-12
    4b40:	dc400115 	stw	r17,4(sp)
    4b44:	dc000015 	stw	r16,0(sp)
    4b48:	2023883a 	mov	r17,r4
    4b4c:	04000074 	movhi	r16,1
    4b50:	84228804 	addi	r16,r16,-30176
    4b54:	2809883a 	mov	r4,r5
    4b58:	300b883a 	mov	r5,r6
    4b5c:	dfc00215 	stw	ra,8(sp)
    4b60:	80000015 	stw	zero,0(r16)
    4b64:	0004e780 	call	4e78 <fstat>
    4b68:	00ffffc4 	movi	r3,-1
    4b6c:	10c00526 	beq	r2,r3,4b84 <_fstat_r+0x48>
    4b70:	dfc00217 	ldw	ra,8(sp)
    4b74:	dc400117 	ldw	r17,4(sp)
    4b78:	dc000017 	ldw	r16,0(sp)
    4b7c:	dec00304 	addi	sp,sp,12
    4b80:	f800283a 	ret
    4b84:	80c00017 	ldw	r3,0(r16)
    4b88:	183ff926 	beq	r3,zero,4b70 <__alt_mem_onchip_memory2_0+0xfe000b70>
    4b8c:	88c00015 	stw	r3,0(r17)
    4b90:	dfc00217 	ldw	ra,8(sp)
    4b94:	dc400117 	ldw	r17,4(sp)
    4b98:	dc000017 	ldw	r16,0(sp)
    4b9c:	dec00304 	addi	sp,sp,12
    4ba0:	f800283a 	ret

00004ba4 <_isatty_r>:
    4ba4:	defffd04 	addi	sp,sp,-12
    4ba8:	dc400115 	stw	r17,4(sp)
    4bac:	dc000015 	stw	r16,0(sp)
    4bb0:	2023883a 	mov	r17,r4
    4bb4:	04000074 	movhi	r16,1
    4bb8:	84228804 	addi	r16,r16,-30176
    4bbc:	2809883a 	mov	r4,r5
    4bc0:	dfc00215 	stw	ra,8(sp)
    4bc4:	80000015 	stw	zero,0(r16)
    4bc8:	0004f740 	call	4f74 <isatty>
    4bcc:	00ffffc4 	movi	r3,-1
    4bd0:	10c00526 	beq	r2,r3,4be8 <_isatty_r+0x44>
    4bd4:	dfc00217 	ldw	ra,8(sp)
    4bd8:	dc400117 	ldw	r17,4(sp)
    4bdc:	dc000017 	ldw	r16,0(sp)
    4be0:	dec00304 	addi	sp,sp,12
    4be4:	f800283a 	ret
    4be8:	80c00017 	ldw	r3,0(r16)
    4bec:	183ff926 	beq	r3,zero,4bd4 <__alt_mem_onchip_memory2_0+0xfe000bd4>
    4bf0:	88c00015 	stw	r3,0(r17)
    4bf4:	dfc00217 	ldw	ra,8(sp)
    4bf8:	dc400117 	ldw	r17,4(sp)
    4bfc:	dc000017 	ldw	r16,0(sp)
    4c00:	dec00304 	addi	sp,sp,12
    4c04:	f800283a 	ret

00004c08 <_lseek_r>:
    4c08:	defffd04 	addi	sp,sp,-12
    4c0c:	dc400115 	stw	r17,4(sp)
    4c10:	dc000015 	stw	r16,0(sp)
    4c14:	2023883a 	mov	r17,r4
    4c18:	04000074 	movhi	r16,1
    4c1c:	84228804 	addi	r16,r16,-30176
    4c20:	2809883a 	mov	r4,r5
    4c24:	300b883a 	mov	r5,r6
    4c28:	380d883a 	mov	r6,r7
    4c2c:	dfc00215 	stw	ra,8(sp)
    4c30:	80000015 	stw	zero,0(r16)
    4c34:	00050640 	call	5064 <lseek>
    4c38:	00ffffc4 	movi	r3,-1
    4c3c:	10c00526 	beq	r2,r3,4c54 <_lseek_r+0x4c>
    4c40:	dfc00217 	ldw	ra,8(sp)
    4c44:	dc400117 	ldw	r17,4(sp)
    4c48:	dc000017 	ldw	r16,0(sp)
    4c4c:	dec00304 	addi	sp,sp,12
    4c50:	f800283a 	ret
    4c54:	80c00017 	ldw	r3,0(r16)
    4c58:	183ff926 	beq	r3,zero,4c40 <__alt_mem_onchip_memory2_0+0xfe000c40>
    4c5c:	88c00015 	stw	r3,0(r17)
    4c60:	dfc00217 	ldw	ra,8(sp)
    4c64:	dc400117 	ldw	r17,4(sp)
    4c68:	dc000017 	ldw	r16,0(sp)
    4c6c:	dec00304 	addi	sp,sp,12
    4c70:	f800283a 	ret

00004c74 <_read_r>:
    4c74:	defffd04 	addi	sp,sp,-12
    4c78:	dc400115 	stw	r17,4(sp)
    4c7c:	dc000015 	stw	r16,0(sp)
    4c80:	2023883a 	mov	r17,r4
    4c84:	04000074 	movhi	r16,1
    4c88:	84228804 	addi	r16,r16,-30176
    4c8c:	2809883a 	mov	r4,r5
    4c90:	300b883a 	mov	r5,r6
    4c94:	380d883a 	mov	r6,r7
    4c98:	dfc00215 	stw	ra,8(sp)
    4c9c:	80000015 	stw	zero,0(r16)
    4ca0:	00051c40 	call	51c4 <read>
    4ca4:	00ffffc4 	movi	r3,-1
    4ca8:	10c00526 	beq	r2,r3,4cc0 <_read_r+0x4c>
    4cac:	dfc00217 	ldw	ra,8(sp)
    4cb0:	dc400117 	ldw	r17,4(sp)
    4cb4:	dc000017 	ldw	r16,0(sp)
    4cb8:	dec00304 	addi	sp,sp,12
    4cbc:	f800283a 	ret
    4cc0:	80c00017 	ldw	r3,0(r16)
    4cc4:	183ff926 	beq	r3,zero,4cac <__alt_mem_onchip_memory2_0+0xfe000cac>
    4cc8:	88c00015 	stw	r3,0(r17)
    4ccc:	dfc00217 	ldw	ra,8(sp)
    4cd0:	dc400117 	ldw	r17,4(sp)
    4cd4:	dc000017 	ldw	r16,0(sp)
    4cd8:	dec00304 	addi	sp,sp,12
    4cdc:	f800283a 	ret

00004ce0 <udivmodsi4>:
    4ce0:	2900182e 	bgeu	r5,r4,4d44 <udivmodsi4+0x64>
    4ce4:	28001716 	blt	r5,zero,4d44 <udivmodsi4+0x64>
    4ce8:	00800804 	movi	r2,32
    4cec:	00c00044 	movi	r3,1
    4cf0:	00000206 	br	4cfc <udivmodsi4+0x1c>
    4cf4:	10001126 	beq	r2,zero,4d3c <udivmodsi4+0x5c>
    4cf8:	28000516 	blt	r5,zero,4d10 <udivmodsi4+0x30>
    4cfc:	294b883a 	add	r5,r5,r5
    4d00:	10bfffc4 	addi	r2,r2,-1
    4d04:	18c7883a 	add	r3,r3,r3
    4d08:	293ffa36 	bltu	r5,r4,4cf4 <__alt_mem_onchip_memory2_0+0xfe000cf4>
    4d0c:	18000b26 	beq	r3,zero,4d3c <udivmodsi4+0x5c>
    4d10:	0005883a 	mov	r2,zero
    4d14:	21400236 	bltu	r4,r5,4d20 <udivmodsi4+0x40>
    4d18:	2149c83a 	sub	r4,r4,r5
    4d1c:	10c4b03a 	or	r2,r2,r3
    4d20:	1806d07a 	srli	r3,r3,1
    4d24:	280ad07a 	srli	r5,r5,1
    4d28:	183ffa1e 	bne	r3,zero,4d14 <__alt_mem_onchip_memory2_0+0xfe000d14>
    4d2c:	3000011e 	bne	r6,zero,4d34 <udivmodsi4+0x54>
    4d30:	f800283a 	ret
    4d34:	2005883a 	mov	r2,r4
    4d38:	f800283a 	ret
    4d3c:	0005883a 	mov	r2,zero
    4d40:	003ffa06 	br	4d2c <__alt_mem_onchip_memory2_0+0xfe000d2c>
    4d44:	00c00044 	movi	r3,1
    4d48:	0005883a 	mov	r2,zero
    4d4c:	003ff106 	br	4d14 <__alt_mem_onchip_memory2_0+0xfe000d14>

00004d50 <__divsi3>:
    4d50:	deffff04 	addi	sp,sp,-4
    4d54:	dfc00015 	stw	ra,0(sp)
    4d58:	20000916 	blt	r4,zero,4d80 <__divsi3+0x30>
    4d5c:	000f883a 	mov	r7,zero
    4d60:	28000a16 	blt	r5,zero,4d8c <__divsi3+0x3c>
    4d64:	000d883a 	mov	r6,zero
    4d68:	0004ce00 	call	4ce0 <udivmodsi4>
    4d6c:	38000126 	beq	r7,zero,4d74 <__divsi3+0x24>
    4d70:	0085c83a 	sub	r2,zero,r2
    4d74:	dfc00017 	ldw	ra,0(sp)
    4d78:	dec00104 	addi	sp,sp,4
    4d7c:	f800283a 	ret
    4d80:	0109c83a 	sub	r4,zero,r4
    4d84:	01c00044 	movi	r7,1
    4d88:	283ff60e 	bge	r5,zero,4d64 <__alt_mem_onchip_memory2_0+0xfe000d64>
    4d8c:	014bc83a 	sub	r5,zero,r5
    4d90:	39c0005c 	xori	r7,r7,1
    4d94:	003ff306 	br	4d64 <__alt_mem_onchip_memory2_0+0xfe000d64>

00004d98 <__modsi3>:
    4d98:	20000316 	blt	r4,zero,4da8 <__modsi3+0x10>
    4d9c:	28000c16 	blt	r5,zero,4dd0 <__modsi3+0x38>
    4da0:	01800044 	movi	r6,1
    4da4:	0004ce01 	jmpi	4ce0 <udivmodsi4>
    4da8:	deffff04 	addi	sp,sp,-4
    4dac:	dfc00015 	stw	ra,0(sp)
    4db0:	0109c83a 	sub	r4,zero,r4
    4db4:	28000916 	blt	r5,zero,4ddc <__modsi3+0x44>
    4db8:	01800044 	movi	r6,1
    4dbc:	0004ce00 	call	4ce0 <udivmodsi4>
    4dc0:	0085c83a 	sub	r2,zero,r2
    4dc4:	dfc00017 	ldw	ra,0(sp)
    4dc8:	dec00104 	addi	sp,sp,4
    4dcc:	f800283a 	ret
    4dd0:	014bc83a 	sub	r5,zero,r5
    4dd4:	01800044 	movi	r6,1
    4dd8:	0004ce01 	jmpi	4ce0 <udivmodsi4>
    4ddc:	014bc83a 	sub	r5,zero,r5
    4de0:	003ff506 	br	4db8 <__alt_mem_onchip_memory2_0+0xfe000db8>

00004de4 <__udivsi3>:
    4de4:	000d883a 	mov	r6,zero
    4de8:	0004ce01 	jmpi	4ce0 <udivmodsi4>

00004dec <__umodsi3>:
    4dec:	01800044 	movi	r6,1
    4df0:	0004ce01 	jmpi	4ce0 <udivmodsi4>

00004df4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    4df4:	defffd04 	addi	sp,sp,-12
    4df8:	df000215 	stw	fp,8(sp)
    4dfc:	df000204 	addi	fp,sp,8
    4e00:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    4e04:	0001883a 	nop
    4e08:	e0bfff17 	ldw	r2,-4(fp)
    4e0c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    4e10:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    4e14:	10000226 	beq	r2,zero,4e20 <_exit+0x2c>
    ALT_SIM_FAIL();
    4e18:	002af070 	cmpltui	zero,zero,43969
    4e1c:	00000106 	br	4e24 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    4e20:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    4e24:	003fff06 	br	4e24 <__alt_mem_onchip_memory2_0+0xfe000e24>

00004e28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4e28:	defffe04 	addi	sp,sp,-8
    4e2c:	dfc00115 	stw	ra,4(sp)
    4e30:	df000015 	stw	fp,0(sp)
    4e34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4e38:	00800034 	movhi	r2,0
    4e3c:	109bdc04 	addi	r2,r2,28528
    4e40:	10800017 	ldw	r2,0(r2)
    4e44:	10000526 	beq	r2,zero,4e5c <alt_get_errno+0x34>
    4e48:	00800034 	movhi	r2,0
    4e4c:	109bdc04 	addi	r2,r2,28528
    4e50:	10800017 	ldw	r2,0(r2)
    4e54:	103ee83a 	callr	r2
    4e58:	00000206 	br	4e64 <alt_get_errno+0x3c>
    4e5c:	00800074 	movhi	r2,1
    4e60:	10a28804 	addi	r2,r2,-30176
}
    4e64:	e037883a 	mov	sp,fp
    4e68:	dfc00117 	ldw	ra,4(sp)
    4e6c:	df000017 	ldw	fp,0(sp)
    4e70:	dec00204 	addi	sp,sp,8
    4e74:	f800283a 	ret

00004e78 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    4e78:	defffb04 	addi	sp,sp,-20
    4e7c:	dfc00415 	stw	ra,16(sp)
    4e80:	df000315 	stw	fp,12(sp)
    4e84:	df000304 	addi	fp,sp,12
    4e88:	e13ffe15 	stw	r4,-8(fp)
    4e8c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4e90:	e0bffe17 	ldw	r2,-8(fp)
    4e94:	10000616 	blt	r2,zero,4eb0 <fstat+0x38>
    4e98:	e0bffe17 	ldw	r2,-8(fp)
    4e9c:	10c00324 	muli	r3,r2,12
    4ea0:	00800034 	movhi	r2,0
    4ea4:	10996b04 	addi	r2,r2,26028
    4ea8:	1885883a 	add	r2,r3,r2
    4eac:	00000106 	br	4eb4 <fstat+0x3c>
    4eb0:	0005883a 	mov	r2,zero
    4eb4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    4eb8:	e0bffd17 	ldw	r2,-12(fp)
    4ebc:	10001026 	beq	r2,zero,4f00 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    4ec0:	e0bffd17 	ldw	r2,-12(fp)
    4ec4:	10800017 	ldw	r2,0(r2)
    4ec8:	10800817 	ldw	r2,32(r2)
    4ecc:	10000726 	beq	r2,zero,4eec <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    4ed0:	e0bffd17 	ldw	r2,-12(fp)
    4ed4:	10800017 	ldw	r2,0(r2)
    4ed8:	10800817 	ldw	r2,32(r2)
    4edc:	e13ffd17 	ldw	r4,-12(fp)
    4ee0:	e17fff17 	ldw	r5,-4(fp)
    4ee4:	103ee83a 	callr	r2
    4ee8:	00000906 	br	4f10 <fstat+0x98>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    4eec:	e0bfff17 	ldw	r2,-4(fp)
    4ef0:	00c80004 	movi	r3,8192
    4ef4:	10c00115 	stw	r3,4(r2)
      return 0;
    4ef8:	0005883a 	mov	r2,zero
    4efc:	00000406 	br	4f10 <fstat+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4f00:	0004e280 	call	4e28 <alt_get_errno>
    4f04:	00c01444 	movi	r3,81
    4f08:	10c00015 	stw	r3,0(r2)
    return -1;
    4f0c:	00bfffc4 	movi	r2,-1
  }
}
    4f10:	e037883a 	mov	sp,fp
    4f14:	dfc00117 	ldw	ra,4(sp)
    4f18:	df000017 	ldw	fp,0(sp)
    4f1c:	dec00204 	addi	sp,sp,8
    4f20:	f800283a 	ret

00004f24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4f24:	defffe04 	addi	sp,sp,-8
    4f28:	dfc00115 	stw	ra,4(sp)
    4f2c:	df000015 	stw	fp,0(sp)
    4f30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4f34:	00800034 	movhi	r2,0
    4f38:	109bdc04 	addi	r2,r2,28528
    4f3c:	10800017 	ldw	r2,0(r2)
    4f40:	10000526 	beq	r2,zero,4f58 <alt_get_errno+0x34>
    4f44:	00800034 	movhi	r2,0
    4f48:	109bdc04 	addi	r2,r2,28528
    4f4c:	10800017 	ldw	r2,0(r2)
    4f50:	103ee83a 	callr	r2
    4f54:	00000206 	br	4f60 <alt_get_errno+0x3c>
    4f58:	00800074 	movhi	r2,1
    4f5c:	10a28804 	addi	r2,r2,-30176
}
    4f60:	e037883a 	mov	sp,fp
    4f64:	dfc00117 	ldw	ra,4(sp)
    4f68:	df000017 	ldw	fp,0(sp)
    4f6c:	dec00204 	addi	sp,sp,8
    4f70:	f800283a 	ret

00004f74 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    4f74:	deffed04 	addi	sp,sp,-76
    4f78:	dfc01215 	stw	ra,72(sp)
    4f7c:	df001115 	stw	fp,68(sp)
    4f80:	df001104 	addi	fp,sp,68
    4f84:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4f88:	e0bfff17 	ldw	r2,-4(fp)
    4f8c:	10000616 	blt	r2,zero,4fa8 <isatty+0x34>
    4f90:	e0bfff17 	ldw	r2,-4(fp)
    4f94:	10c00324 	muli	r3,r2,12
    4f98:	00800034 	movhi	r2,0
    4f9c:	10996b04 	addi	r2,r2,26028
    4fa0:	1885883a 	add	r2,r3,r2
    4fa4:	00000106 	br	4fac <isatty+0x38>
    4fa8:	0005883a 	mov	r2,zero
    4fac:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    4fb0:	e0bfef17 	ldw	r2,-68(fp)
    4fb4:	10000e26 	beq	r2,zero,4ff0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    4fb8:	e0bfef17 	ldw	r2,-68(fp)
    4fbc:	10800017 	ldw	r2,0(r2)
    4fc0:	10800817 	ldw	r2,32(r2)
    4fc4:	1000021e 	bne	r2,zero,4fd0 <isatty+0x5c>
    {
      return 1;
    4fc8:	00800044 	movi	r2,1
    4fcc:	00000c06 	br	5000 <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    4fd0:	e0bff004 	addi	r2,fp,-64
    4fd4:	e13fff17 	ldw	r4,-4(fp)
    4fd8:	100b883a 	mov	r5,r2
    4fdc:	0004e780 	call	4e78 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    4fe0:	e0bff117 	ldw	r2,-60(fp)
    4fe4:	10880020 	cmpeqi	r2,r2,8192
    4fe8:	10803fcc 	andi	r2,r2,255
    4fec:	00000406 	br	5000 <isatty+0x8c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4ff0:	0004f240 	call	4f24 <alt_get_errno>
    4ff4:	00c01444 	movi	r3,81
    4ff8:	10c00015 	stw	r3,0(r2)
    return 0;
    4ffc:	0005883a 	mov	r2,zero
  }
}
    5000:	e037883a 	mov	sp,fp
    5004:	dfc00117 	ldw	ra,4(sp)
    5008:	df000017 	ldw	fp,0(sp)
    500c:	dec00204 	addi	sp,sp,8
    5010:	f800283a 	ret

00005014 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5014:	defffe04 	addi	sp,sp,-8
    5018:	dfc00115 	stw	ra,4(sp)
    501c:	df000015 	stw	fp,0(sp)
    5020:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5024:	00800034 	movhi	r2,0
    5028:	109bdc04 	addi	r2,r2,28528
    502c:	10800017 	ldw	r2,0(r2)
    5030:	10000526 	beq	r2,zero,5048 <alt_get_errno+0x34>
    5034:	00800034 	movhi	r2,0
    5038:	109bdc04 	addi	r2,r2,28528
    503c:	10800017 	ldw	r2,0(r2)
    5040:	103ee83a 	callr	r2
    5044:	00000206 	br	5050 <alt_get_errno+0x3c>
    5048:	00800074 	movhi	r2,1
    504c:	10a28804 	addi	r2,r2,-30176
}
    5050:	e037883a 	mov	sp,fp
    5054:	dfc00117 	ldw	ra,4(sp)
    5058:	df000017 	ldw	fp,0(sp)
    505c:	dec00204 	addi	sp,sp,8
    5060:	f800283a 	ret

00005064 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    5064:	defff904 	addi	sp,sp,-28
    5068:	dfc00615 	stw	ra,24(sp)
    506c:	df000515 	stw	fp,20(sp)
    5070:	df000504 	addi	fp,sp,20
    5074:	e13ffd15 	stw	r4,-12(fp)
    5078:	e17ffe15 	stw	r5,-8(fp)
    507c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    5080:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5084:	e0bffd17 	ldw	r2,-12(fp)
    5088:	10000616 	blt	r2,zero,50a4 <lseek+0x40>
    508c:	e0bffd17 	ldw	r2,-12(fp)
    5090:	10c00324 	muli	r3,r2,12
    5094:	00800034 	movhi	r2,0
    5098:	10996b04 	addi	r2,r2,26028
    509c:	1885883a 	add	r2,r3,r2
    50a0:	00000106 	br	50a8 <lseek+0x44>
    50a4:	0005883a 	mov	r2,zero
    50a8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    50ac:	e0bffc17 	ldw	r2,-16(fp)
    50b0:	10001026 	beq	r2,zero,50f4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    50b4:	e0bffc17 	ldw	r2,-16(fp)
    50b8:	10800017 	ldw	r2,0(r2)
    50bc:	10800717 	ldw	r2,28(r2)
    50c0:	10000926 	beq	r2,zero,50e8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    50c4:	e0bffc17 	ldw	r2,-16(fp)
    50c8:	10800017 	ldw	r2,0(r2)
    50cc:	10800717 	ldw	r2,28(r2)
    50d0:	e13ffc17 	ldw	r4,-16(fp)
    50d4:	e17ffe17 	ldw	r5,-8(fp)
    50d8:	e1bfff17 	ldw	r6,-4(fp)
    50dc:	103ee83a 	callr	r2
    50e0:	e0bffb15 	stw	r2,-20(fp)
    50e4:	00000506 	br	50fc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    50e8:	00bfde84 	movi	r2,-134
    50ec:	e0bffb15 	stw	r2,-20(fp)
    50f0:	00000206 	br	50fc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    50f4:	00bfebc4 	movi	r2,-81
    50f8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    50fc:	e0bffb17 	ldw	r2,-20(fp)
    5100:	1000060e 	bge	r2,zero,511c <lseek+0xb8>
  {
    ALT_ERRNO = -rc;
    5104:	00050140 	call	5014 <alt_get_errno>
    5108:	e0fffb17 	ldw	r3,-20(fp)
    510c:	00c7c83a 	sub	r3,zero,r3
    5110:	10c00015 	stw	r3,0(r2)
    rc = -1;
    5114:	00bfffc4 	movi	r2,-1
    5118:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    511c:	e0bffb17 	ldw	r2,-20(fp)
}
    5120:	e037883a 	mov	sp,fp
    5124:	dfc00117 	ldw	ra,4(sp)
    5128:	df000017 	ldw	fp,0(sp)
    512c:	dec00204 	addi	sp,sp,8
    5130:	f800283a 	ret

00005134 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    5134:	defffe04 	addi	sp,sp,-8
    5138:	df000115 	stw	fp,4(sp)
    513c:	df000104 	addi	fp,sp,4
    5140:	e13fff15 	stw	r4,-4(fp)
}
    5144:	e037883a 	mov	sp,fp
    5148:	df000017 	ldw	fp,0(sp)
    514c:	dec00104 	addi	sp,sp,4
    5150:	f800283a 	ret

00005154 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    5154:	defffe04 	addi	sp,sp,-8
    5158:	df000115 	stw	fp,4(sp)
    515c:	df000104 	addi	fp,sp,4
    5160:	e13fff15 	stw	r4,-4(fp)
}
    5164:	e037883a 	mov	sp,fp
    5168:	df000017 	ldw	fp,0(sp)
    516c:	dec00104 	addi	sp,sp,4
    5170:	f800283a 	ret

00005174 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5174:	defffe04 	addi	sp,sp,-8
    5178:	dfc00115 	stw	ra,4(sp)
    517c:	df000015 	stw	fp,0(sp)
    5180:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5184:	00800034 	movhi	r2,0
    5188:	109bdc04 	addi	r2,r2,28528
    518c:	10800017 	ldw	r2,0(r2)
    5190:	10000526 	beq	r2,zero,51a8 <alt_get_errno+0x34>
    5194:	00800034 	movhi	r2,0
    5198:	109bdc04 	addi	r2,r2,28528
    519c:	10800017 	ldw	r2,0(r2)
    51a0:	103ee83a 	callr	r2
    51a4:	00000206 	br	51b0 <alt_get_errno+0x3c>
    51a8:	00800074 	movhi	r2,1
    51ac:	10a28804 	addi	r2,r2,-30176
}
    51b0:	e037883a 	mov	sp,fp
    51b4:	dfc00117 	ldw	ra,4(sp)
    51b8:	df000017 	ldw	fp,0(sp)
    51bc:	dec00204 	addi	sp,sp,8
    51c0:	f800283a 	ret

000051c4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    51c4:	defff904 	addi	sp,sp,-28
    51c8:	dfc00615 	stw	ra,24(sp)
    51cc:	df000515 	stw	fp,20(sp)
    51d0:	df000504 	addi	fp,sp,20
    51d4:	e13ffd15 	stw	r4,-12(fp)
    51d8:	e17ffe15 	stw	r5,-8(fp)
    51dc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    51e0:	e0bffd17 	ldw	r2,-12(fp)
    51e4:	10000616 	blt	r2,zero,5200 <read+0x3c>
    51e8:	e0bffd17 	ldw	r2,-12(fp)
    51ec:	10c00324 	muli	r3,r2,12
    51f0:	00800034 	movhi	r2,0
    51f4:	10996b04 	addi	r2,r2,26028
    51f8:	1885883a 	add	r2,r3,r2
    51fc:	00000106 	br	5204 <read+0x40>
    5200:	0005883a 	mov	r2,zero
    5204:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    5208:	e0bffb17 	ldw	r2,-20(fp)
    520c:	10002026 	beq	r2,zero,5290 <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    5210:	e0bffb17 	ldw	r2,-20(fp)
    5214:	10800217 	ldw	r2,8(r2)
    5218:	108000cc 	andi	r2,r2,3
    521c:	10800060 	cmpeqi	r2,r2,1
    5220:	1000171e 	bne	r2,zero,5280 <read+0xbc>
        (fd->dev->read))
    5224:	e0bffb17 	ldw	r2,-20(fp)
    5228:	10800017 	ldw	r2,0(r2)
    522c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    5230:	10001326 	beq	r2,zero,5280 <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    5234:	e0bffb17 	ldw	r2,-20(fp)
    5238:	10800017 	ldw	r2,0(r2)
    523c:	10800517 	ldw	r2,20(r2)
    5240:	e0ffff17 	ldw	r3,-4(fp)
    5244:	e13ffb17 	ldw	r4,-20(fp)
    5248:	e17ffe17 	ldw	r5,-8(fp)
    524c:	180d883a 	mov	r6,r3
    5250:	103ee83a 	callr	r2
    5254:	e0bffc15 	stw	r2,-16(fp)
    5258:	e0bffc17 	ldw	r2,-16(fp)
    525c:	1000060e 	bge	r2,zero,5278 <read+0xb4>
        {
          ALT_ERRNO = -rval;
    5260:	00051740 	call	5174 <alt_get_errno>
    5264:	e0fffc17 	ldw	r3,-16(fp)
    5268:	00c7c83a 	sub	r3,zero,r3
    526c:	10c00015 	stw	r3,0(r2)
          return -1;
    5270:	00bfffc4 	movi	r2,-1
    5274:	00000a06 	br	52a0 <read+0xdc>
        }
        return rval;
    5278:	e0bffc17 	ldw	r2,-16(fp)
    527c:	00000806 	br	52a0 <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
    5280:	00051740 	call	5174 <alt_get_errno>
    5284:	00c00344 	movi	r3,13
    5288:	10c00015 	stw	r3,0(r2)
    528c:	00000306 	br	529c <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    5290:	00051740 	call	5174 <alt_get_errno>
    5294:	00c01444 	movi	r3,81
    5298:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    529c:	00bfffc4 	movi	r2,-1
}
    52a0:	e037883a 	mov	sp,fp
    52a4:	dfc00117 	ldw	ra,4(sp)
    52a8:	df000017 	ldw	fp,0(sp)
    52ac:	dec00204 	addi	sp,sp,8
    52b0:	f800283a 	ret

000052b4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    52b4:	defff904 	addi	sp,sp,-28
    52b8:	df000615 	stw	fp,24(sp)
    52bc:	df000604 	addi	fp,sp,24
    52c0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    52c4:	0005303a 	rdctl	r2,status
    52c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    52cc:	e0fffc17 	ldw	r3,-16(fp)
    52d0:	00bfff84 	movi	r2,-2
    52d4:	1884703a 	and	r2,r3,r2
    52d8:	1001703a 	wrctl	status,r2
  
  return context;
    52dc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    52e0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    52e4:	d0a00d17 	ldw	r2,-32716(gp)
    52e8:	10c000c4 	addi	r3,r2,3
    52ec:	00bfff04 	movi	r2,-4
    52f0:	1884703a 	and	r2,r3,r2
    52f4:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    52f8:	d0e00d17 	ldw	r3,-32716(gp)
    52fc:	e0bfff17 	ldw	r2,-4(fp)
    5300:	1885883a 	add	r2,r3,r2
    5304:	00c08034 	movhi	r3,512
    5308:	18c00004 	addi	r3,r3,0
    530c:	1880062e 	bgeu	r3,r2,5328 <sbrk+0x74>
    5310:	e0bffa17 	ldw	r2,-24(fp)
    5314:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5318:	e0bffd17 	ldw	r2,-12(fp)
    531c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    5320:	00bfffc4 	movi	r2,-1
    5324:	00000b06 	br	5354 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    5328:	d0a00d17 	ldw	r2,-32716(gp)
    532c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    5330:	d0e00d17 	ldw	r3,-32716(gp)
    5334:	e0bfff17 	ldw	r2,-4(fp)
    5338:	1885883a 	add	r2,r3,r2
    533c:	d0a00d15 	stw	r2,-32716(gp)
    5340:	e0bffa17 	ldw	r2,-24(fp)
    5344:	e0bffe15 	stw	r2,-8(fp)
    5348:	e0bffe17 	ldw	r2,-8(fp)
    534c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    5350:	e0bffb17 	ldw	r2,-20(fp)
} 
    5354:	e037883a 	mov	sp,fp
    5358:	df000017 	ldw	fp,0(sp)
    535c:	dec00104 	addi	sp,sp,4
    5360:	f800283a 	ret

00005364 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5364:	defffe04 	addi	sp,sp,-8
    5368:	dfc00115 	stw	ra,4(sp)
    536c:	df000015 	stw	fp,0(sp)
    5370:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5374:	00800034 	movhi	r2,0
    5378:	109bdc04 	addi	r2,r2,28528
    537c:	10800017 	ldw	r2,0(r2)
    5380:	10000526 	beq	r2,zero,5398 <alt_get_errno+0x34>
    5384:	00800034 	movhi	r2,0
    5388:	109bdc04 	addi	r2,r2,28528
    538c:	10800017 	ldw	r2,0(r2)
    5390:	103ee83a 	callr	r2
    5394:	00000206 	br	53a0 <alt_get_errno+0x3c>
    5398:	00800074 	movhi	r2,1
    539c:	10a28804 	addi	r2,r2,-30176
}
    53a0:	e037883a 	mov	sp,fp
    53a4:	dfc00117 	ldw	ra,4(sp)
    53a8:	df000017 	ldw	fp,0(sp)
    53ac:	dec00204 	addi	sp,sp,8
    53b0:	f800283a 	ret

000053b4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    53b4:	defff904 	addi	sp,sp,-28
    53b8:	dfc00615 	stw	ra,24(sp)
    53bc:	df000515 	stw	fp,20(sp)
    53c0:	df000504 	addi	fp,sp,20
    53c4:	e13ffd15 	stw	r4,-12(fp)
    53c8:	e17ffe15 	stw	r5,-8(fp)
    53cc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    53d0:	e0bffd17 	ldw	r2,-12(fp)
    53d4:	10000616 	blt	r2,zero,53f0 <write+0x3c>
    53d8:	e0bffd17 	ldw	r2,-12(fp)
    53dc:	10c00324 	muli	r3,r2,12
    53e0:	00800034 	movhi	r2,0
    53e4:	10996b04 	addi	r2,r2,26028
    53e8:	1885883a 	add	r2,r3,r2
    53ec:	00000106 	br	53f4 <write+0x40>
    53f0:	0005883a 	mov	r2,zero
    53f4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    53f8:	e0bffb17 	ldw	r2,-20(fp)
    53fc:	10001f26 	beq	r2,zero,547c <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    5400:	e0bffb17 	ldw	r2,-20(fp)
    5404:	10800217 	ldw	r2,8(r2)
    5408:	108000cc 	andi	r2,r2,3
    540c:	10001726 	beq	r2,zero,546c <write+0xb8>
    5410:	e0bffb17 	ldw	r2,-20(fp)
    5414:	10800017 	ldw	r2,0(r2)
    5418:	10800617 	ldw	r2,24(r2)
    541c:	10001326 	beq	r2,zero,546c <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    5420:	e0bffb17 	ldw	r2,-20(fp)
    5424:	10800017 	ldw	r2,0(r2)
    5428:	10800617 	ldw	r2,24(r2)
    542c:	e0ffff17 	ldw	r3,-4(fp)
    5430:	e13ffb17 	ldw	r4,-20(fp)
    5434:	e17ffe17 	ldw	r5,-8(fp)
    5438:	180d883a 	mov	r6,r3
    543c:	103ee83a 	callr	r2
    5440:	e0bffc15 	stw	r2,-16(fp)
    5444:	e0bffc17 	ldw	r2,-16(fp)
    5448:	1000060e 	bge	r2,zero,5464 <write+0xb0>
      {
        ALT_ERRNO = -rval;
    544c:	00053640 	call	5364 <alt_get_errno>
    5450:	e0fffc17 	ldw	r3,-16(fp)
    5454:	00c7c83a 	sub	r3,zero,r3
    5458:	10c00015 	stw	r3,0(r2)
        return -1;
    545c:	00bfffc4 	movi	r2,-1
    5460:	00000a06 	br	548c <write+0xd8>
      }
      return rval;
    5464:	e0bffc17 	ldw	r2,-16(fp)
    5468:	00000806 	br	548c <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
    546c:	00053640 	call	5364 <alt_get_errno>
    5470:	00c00344 	movi	r3,13
    5474:	10c00015 	stw	r3,0(r2)
    5478:	00000306 	br	5488 <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    547c:	00053640 	call	5364 <alt_get_errno>
    5480:	00c01444 	movi	r3,81
    5484:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    5488:	00bfffc4 	movi	r2,-1
}
    548c:	e037883a 	mov	sp,fp
    5490:	dfc00117 	ldw	ra,4(sp)
    5494:	df000017 	ldw	fp,0(sp)
    5498:	dec00204 	addi	sp,sp,8
    549c:	f800283a 	ret
