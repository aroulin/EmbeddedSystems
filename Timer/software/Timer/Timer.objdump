
Timer.elf:     file format elf32-littlenios2
Timer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000f358 memsz 0x0000f358 flags r-x
    LOAD off    0x00010378 vaddr 0x0000f378 paddr 0x00010e64 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00012950 vaddr 0x00012950 paddr 0x00012950 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ee6c  000001bc  000001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000350  0000f028  0000f028  00010028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  0000f378  00010e64  00010378  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  00012950  00012950  00012950  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00012ab4  00012ab4  00011e64  2**0
                  CONTENTS
  7 .comment      00000039  00000000  00000000  00011e64  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000d28  00000000  00000000  00011ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023538  00000000  00000000  00012bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008f11  00000000  00000000  00036100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ad66  00000000  00000000  0003f011  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002214  00000000  00000000  00049d78  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003201  00000000  00000000  0004bf8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016b06  00000000  00000000  0004f18d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00065c94  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001320  00000000  00000000  00065cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006a232  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006a235  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006a241  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006a242  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006a243  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006a24e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006a259  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0006a264  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002e  00000000  00000000  0006a26a  2**0
                  CONTENTS, READONLY
 26 .jdi          00003f4c  00000000  00000000  0006a298  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0004a0e2  00000000  00000000  0006e1e4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001bc l    d  .text	00000000 .text
0000f028 l    d  .rodata	00000000 .rodata
0000f378 l    d  .rwdata	00000000 .rwdata
00012950 l    d  .bss	00000000 .bss
00012ab4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Timer_bsp//obj/HAL/src/crt0.o
00000204 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000208 l     F .text	00000068 handle_button_interrupts
00000270 l     F .text	0000003c handle_timer_irq
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 timer.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000f0be l     O .rodata	00000010 zeroes.4155
0000f0ce l     O .rodata	00000010 blanks.4154
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000029dc l     F .text	00000204 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004490 l     F .text	00000008 __fp_lock
00004498 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000f378 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0000f7bc l     O .rwdata	00000020 lc_ctype_charset
0000f79c l     O .rwdata	00000020 lc_message_charset
0000f7dc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000f100 l     O .rodata	0000000c p05.2652
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00007850 l     F .text	000000fc __sprint_r.part.0
0000f234 l     O .rodata	00000010 blanks.4099
0000f224 l     O .rodata	00000010 zeroes.4100
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000a160 l     F .text	00000070 udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000c81c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000c934 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000c960 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000cd24 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000ce14 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000cef8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d0d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00010e58 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000d350 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000d48c l     F .text	00000038 alt_dev_reg
0000fdc4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000d760 l     F .text	000001fc altera_avalon_jtag_uart_irq
0000d95c l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000e24c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000e424 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000e55c l     F .text	00000050 alt_get_errno
0000e5ac l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00006ecc g     F .text	00000074 _mprec_log10
00006fb8 g     F .text	00000088 __any_on
0000912c g     F .text	00000064 _isatty_r
0000f10c g     O .rodata	00000028 __mprec_tinytens
0000d018 g     F .text	00000078 alt_main
0000074c g     F .text	000000b8 _puts_r
000129b4 g     O .bss	00000100 alt_irq
00009190 g     F .text	0000006c _lseek_r
00010e64 g       *ABS*	00000000 __flash_rwdata_start
0000b3c4 g     F .text	00000084 .hidden __eqdf2
00012ab4 g       *ABS*	00000000 __alt_heap_start
00000710 g     F .text	0000003c printf
00009404 g     F .text	0000009c _wcrtomb_r
00007748 g     F .text	0000005c __sseek
00004528 g     F .text	0000019c __sinit
00009268 g     F .text	00000180 __swbuf_r
00005238 g     F .text	00000070 _setlocale_r
000044ac g     F .text	00000064 __sfmoreglue
0000d0b0 g     F .text	00000020 __malloc_unlock
00005e78 g     F .text	0000013c memmove
00004510 g     F .text	00000018 _cleanup
000060c8 g     F .text	000000a8 _Balloc
0000b448 g     F .text	000000d8 .hidden __gtdf2
00000320 g     F .text	00000074 setup_irq_timer
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00012950 g     O .bss	00000004 edge_capture
00000020 g       *ABS*	00000000 __flash_exceptions_start
000090c4 g     F .text	00000068 _fstat_r
00012970 g     O .bss	00000004 errno
000076c4 g     F .text	00000008 __seofread
0001297c g     O .bss	00000004 alt_argv
00018e24 g       *ABS*	00000000 _gp
0000d320 g     F .text	00000030 usleep
0000fc44 g     O .rwdata	00000180 alt_fd_list
0000e988 g     F .text	00000090 alt_find_dev
00005d6c g     F .text	0000010c memcpy
000044a0 g     F .text	0000000c _cleanup_r
0000c600 g     F .text	000000d0 .hidden __floatsidf
0000e4e4 g     F .text	00000078 alt_io_redirect
0000b520 g     F .text	000000ec .hidden __ltdf2
0000f028 g       *ABS*	00000000 __DTOR_END__
00000804 g     F .text	00000014 puts
000075a4 g     F .text	00000068 __fpclassifyd
00006e2c g     F .text	000000a0 __ratio
00008bd4 g     F .text	00000024 __vfiprintf_internal
0000db54 g     F .text	00000208 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000006e4 g     F .text	0000002c _printf_r
0000a264 g     F .text	00000008 .hidden __udivsi3
0000cd74 g     F .text	000000a0 isatty
0000f15c g     O .rodata	000000c8 __mprec_tens
000052a8 g     F .text	0000000c __locale_charset
0000ebe0 g     F .text	0000008c alt_icache_flush
000006bc g     F .text	00000028 timer_read_irq
0001296c g     O .bss	00000004 __malloc_top_pad
00010e2c g     O .rwdata	00000004 __mb_cur_max
000052d8 g     F .text	0000000c _localeconv_r
000064c8 g     F .text	0000003c __i2b
00004c2c g     F .text	000004ac __sfvwrite_r
0000760c g     F .text	00000064 _sbrk_r
000091fc g     F .text	0000006c _read_r
00010e4c g     O .rwdata	00000004 alt_max_fd
00008d8c g     F .text	00000128 _fclose_r
00004460 g     F .text	00000030 fflush
00012968 g     O .bss	00000004 __malloc_max_sbrked_mem
0000a274 g     F .text	0000087c .hidden __adddf3
00006bf8 g     F .text	000000f0 __b2d
00009bc8 g     F .text	00000598 .hidden __umoddi3
0000cf48 g     F .text	000000d0 lseek
00010e24 g     O .rwdata	00000004 _global_impure_ptr
00007040 g     F .text	00000564 _realloc_r
00012ab4 g       *ABS*	00000000 __bss_end
0000cc34 g     F .text	000000f0 alt_iic_isr_register
0000e864 g     F .text	00000104 alt_tick
00009604 g     F .text	000005c4 .hidden __udivdi3
00008ec8 g     F .text	00000184 _fputwc_r
0000f134 g     O .rodata	00000028 __mprec_bigtens
000062ac g     F .text	00000104 __s2b
0000c6d0 g     F .text	000000a0 .hidden __floatunsidf
00006988 g     F .text	00000060 __mcmp
00000664 g     F .text	0000002c timer_enable_irq
000047f0 g     F .text	00000018 __fp_lock_all
0000cbe8 g     F .text	0000004c alt_ic_irq_enabled
0000e7cc g     F .text	00000098 alt_alarm_stop
00012974 g     O .bss	00000004 alt_irq_active
00000690 g     F .text	0000002c timer_clear_irq
000000ec g     F .exceptions	000000d0 alt_irq_handler
0000fc1c g     O .rwdata	00000028 alt_dev_null
0000e208 g     F .text	00000044 alt_dcache_flush_all
000063b0 g     F .text	00000068 __hi0bits
0000c580 g     F .text	00000080 .hidden __fixdfsi
00010e64 g       *ABS*	00000000 __ram_rwdata_end
00000584 g     F .text	00000030 timer_init
00010e44 g     O .rwdata	00000008 alt_dev_list
0000d3a0 g     F .text	000000ec write
0000f378 g       *ABS*	00000000 __ram_rodata_end
0000c9b0 g     F .text	000000ac fstat
0000b520 g     F .text	000000ec .hidden __ledf2
000066f0 g     F .text	00000148 __pow5mult
00007964 g     F .text	00001270 ___vfiprintf_internal_r
00012960 g     O .bss	00000004 __nlocale_changed
0000a26c g     F .text	00000008 .hidden __umodsi3
00012ab4 g       *ABS*	00000000 end
00000550 g     F .text	00000034 leds
000005b4 g     F .text	0000002c timer_start
0000d6a0 g     F .text	000000c0 altera_avalon_jtag_uart_init
0000f028 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0000c770 g     F .text	000000ac .hidden __clzsi2
0000dd5c g     F .text	00000218 altera_avalon_jtag_uart_write
000047e0 g     F .text	00000004 __sfp_lock_acquire
00005c84 g     F .text	000000e8 memchr
000008a4 g     F .text	00001fdc ___vfprintf_internal_r
000002ac g     F .text	00000074 setup_irq_inputs
0000495c g     F .text	000002d0 _free_r
000052b4 g     F .text	00000010 __locale_mb_cur_max
0000ee50 g     F .text	000001a4 __call_exitprocs
0001295c g     O .bss	00000004 __mlocale_changed
00010e30 g     O .rwdata	00000004 __malloc_sbrk_base
000001bc g     F .text	0000004c _start
00012984 g     O .bss	00000004 _alt_tick_rate
00006838 g     F .text	00000150 __lshift
00012988 g     O .bss	00000004 _alt_nticks
0000d120 g     F .text	000000f0 read
0000d4f8 g     F .text	00000044 alt_sys_init
0000ed34 g     F .text	0000011c __register_exitproc
00006504 g     F .text	000001ec __multiply
0000da00 g     F .text	00000068 altera_avalon_jtag_uart_close
0000f378 g       *ABS*	00000000 __ram_rwdata_start
0000f028 g       *ABS*	00000000 __ram_rodata_start
0001298c g     O .bss	00000028 __malloc_current_mallinfo
00006ce8 g     F .text	00000144 __d2b
00000498 g     F .text	00000058 leds_set
0000d53c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000eb2c g     F .text	000000b4 alt_get_fd
0000e0b4 g     F .text	00000154 alt_busy_sleep
00008c64 g     F .text	00000064 _close_r
0000ecb8 g     F .text	0000007c memcmp
0000d5fc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00012ab4 g       *ABS*	00000000 __alt_stack_base
0000060c g     F .text	00000028 timer_read
0000d64c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000028a4 g     F .text	00000138 __swsetup_r
0000aaf0 g     F .text	000008d4 .hidden __divdf3
000046c4 g     F .text	0000011c __sfp
00006f40 g     F .text	00000078 __copybits
0000f814 g     O .rwdata	00000408 __malloc_av_
000047ec g     F .text	00000004 __sinit_lock_release
0000b60c g     F .text	000006ec .hidden __muldf3
00007670 g     F .text	00000054 __sread
0000ea18 g     F .text	00000114 alt_find_file
0000e29c g     F .text	000000a0 alt_dev_llist_insert
0000d090 g     F .text	00000020 __malloc_lock
0000d270 g     F .text	000000b0 sbrk
0000421c g     F .text	00000244 _fflush_r
00008cc8 g     F .text	000000c4 _calloc_r
00012954 g     O .bss	00000004 response_time
00012950 g       *ABS*	00000000 __bss_start
00005fb4 g     F .text	00000114 memset
00000394 g     F .text	00000104 main
00012980 g     O .bss	00000004 alt_envp
00012964 g     O .bss	00000004 __malloc_max_total_mem
0000d59c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000093e8 g     F .text	0000001c __swbuf
000077a4 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
00008eb4 g     F .text	00000014 fclose
00002be0 g     F .text	0000163c _dtoa_r
000054c0 g     F .text	000007c4 _malloc_r
00009578 g     F .text	00000030 __ascii_wctomb
000004f0 g     F .text	00000060 leds_clr
00010e50 g     O .rwdata	00000004 alt_errno
000050d8 g     F .text	000000a8 _fwalk
0000a1d0 g     F .text	00000048 .hidden __divsi3
00004820 g     F .text	0000013c _malloc_trim_r
0000f028 g       *ABS*	00000000 __CTOR_END__
000077ac g     F .text	000000a4 strcmp
0000f028 g       *ABS*	00000000 __flash_rodata_start
0000f028 g       *ABS*	00000000 __DTOR_LIST__
0000b3c4 g     F .text	00000084 .hidden __nedf2
0000d4c4 g     F .text	00000034 alt_irq_init
0000d210 g     F .text	00000060 alt_release_fd
0000f244 g     O .rodata	00000100 .hidden __clz_tab
00012958 g     O .bss	00000004 _PathLocale
0000ec6c g     F .text	00000014 atexit
00008bf8 g     F .text	0000006c _write_r
000052e4 g     F .text	0000001c setlocale
00010e28 g     O .rwdata	00000004 _impure_ptr
00012978 g     O .bss	00000004 alt_argc
0000e398 g     F .text	0000005c _do_dtors
000005e0 g     F .text	0000002c timer_stop
000052d0 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00006b98 g     F .text	00000060 __ulp
00004808 g     F .text	00000018 __fp_unlock_all
00010e3c g     O .rwdata	00000008 alt_fs_list
00000634 g     F .text	00000030 timer_reset
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005300 g     F .text	0000000c localeconv
0000ca5c g     F .text	00000050 alt_ic_isr_register
00010e64 g       *ABS*	00000000 _edata
00012ab4 g       *ABS*	00000000 _end
000001bc g       *ABS*	00000000 __ram_exceptions_end
0000da68 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0000cb48 g     F .text	000000a0 alt_ic_irq_disable
000076cc g     F .text	0000007c __swrite
00010e34 g     O .rwdata	00000004 __malloc_trim_threshold
0000e968 g     F .text	00000020 altera_nios2_qsys_irq_init
000052c4 g     F .text	0000000c __locale_msgcharset
0000ec80 g     F .text	00000038 exit
00005180 g     F .text	000000b8 _fwalk_reent
000069e8 g     F .text	000001b0 __mdiff
0000a218 g     F .text	0000004c .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000047e4 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000eff4 g     F .text	00000034 _exit
0000df74 g     F .text	00000140 alt_alarm_start
0000530c g     F .text	000001b4 __smakebuf_r
00000818 g     F .text	0000008c strlen
0000e678 g     F .text	00000154 open
0000b448 g     F .text	000000d8 .hidden __gedf2
00010e38 g     O .rwdata	00000004 __wctomb
0000794c g     F .text	00000018 __sprint_r
0000e3f4 g     F .text	00000030 alt_icache_flush_all
00010e54 g     O .rwdata	00000004 alt_priority_mask
0000caac g     F .text	0000009c alt_ic_irq_enable
00002880 g     F .text	00000024 __vfprintf_internal
000095a8 g     F .text	0000005c _wctomb_r
0000bcf8 g     F .text	00000888 .hidden __subdf3
00006418 g     F .text	000000b0 __lo0bits
00010e5c g     O .rwdata	00000008 alt_alarm_list
0000e33c g     F .text	0000005c _do_ctors
000094a0 g     F .text	000000d8 wcrtomb
0000c86c g     F .text	000000c8 close
0000ce78 g     F .text	00000080 alt_load
0000904c g     F .text	00000078 fputwc
00000000  w      *UND*	00000000 free
000047e8 g     F .text	00000004 __sinit_lock_acquire
00006198 g     F .text	00000114 __multadd
00006170 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xfe000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406f14 	ori	at,at,444
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001726 	beq	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00c00074 	movhi	r3,1
 130:	18ca6d04 	addi	r3,r3,10676
 134:	e0bffd17 	ldw	r2,-12(fp)
 138:	100490fa 	slli	r2,r2,3
 13c:	1885883a 	add	r2,r3,r2
 140:	10800017 	ldw	r2,0(r2)
 144:	01000074 	movhi	r4,1
 148:	210a6d04 	addi	r4,r4,10676
 14c:	e0fffd17 	ldw	r3,-12(fp)
 150:	180690fa 	slli	r3,r3,3
 154:	20c7883a 	add	r3,r4,r3
 158:	18c00104 	addi	r3,r3,4
 15c:	18c00017 	ldw	r3,0(r3)
 160:	1809883a 	mov	r4,r3
 164:	103ee83a 	callr	r2
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 17c:	e0bffb17 	ldw	r2,-20(fp)
 180:	103fe31e 	bne	r2,zero,110 <__alt_data_end+0xfe000110>
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffc17 	ldw	r2,-16(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fde06 	br	11c <__alt_data_end+0xfe00011c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	0001883a 	nop
}
 1a8:	e037883a 	mov	sp,fp
 1ac:	dfc00117 	ldw	ra,4(sp)
 1b0:	df000017 	ldw	fp,0(sp)
 1b4:	dec00204 	addi	sp,sp,8
 1b8:	f800283a 	ret

Disassembly of section .text:

000001bc <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1bc:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     1c0:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1c4:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     1c8:	00bffd16 	blt	zero,r2,1c0 <__alt_data_end+0xfe0001c0>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1cc:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     1d0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1d4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1d8:	d6a38914 	ori	gp,gp,36388
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1dc:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1e0:	108a5414 	ori	r2,r2,10576

    movhi r3, %hi(__bss_end)
     1e4:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1e8:	18caad14 	ori	r3,r3,10932

    beq r2, r3, 1f
     1ec:	10c00326 	beq	r2,r3,1fc <_start+0x40>

0:
    stw zero, (r2)
     1f0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1f4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f8:	10fffd36 	bltu	r2,r3,1f0 <__alt_data_end+0xfe0001f0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1fc:	000ce780 	call	ce78 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     200:	000d0180 	call	d018 <alt_main>

00000204 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     204:	003fff06 	br	204 <__alt_data_end+0xfe000204>

00000208 <handle_button_interrupts>:

volatile int edge_capture;

volatile int response_time;

static void handle_button_interrupts(void* context) {
     208:	defffc04 	addi	sp,sp,-16
     20c:	dfc00315 	stw	ra,12(sp)
     210:	df000215 	stw	fp,8(sp)
     214:	df000204 	addi	fp,sp,8
     218:	e13fff15 	stw	r4,-4(fp)
	/* Cast context to edge_capture's type. It is important that this
	 be declared volatile to avoid unwanted compiler optimization. */
	volatile int* edge_capture_ptr = (volatile int*) context;
     21c:	e0bfff17 	ldw	r2,-4(fp)
     220:	e0bffe15 	stw	r2,-8(fp)
	/*
	 * Read the edge capture register on the button PIO.
	 * Store value.
	 */
	*edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(INPUTS_BASE);
     224:	00808034 	movhi	r2,512
     228:	10840b04 	addi	r2,r2,4140
     22c:	10c00037 	ldwio	r3,0(r2)
     230:	e0bffe17 	ldw	r2,-8(fp)
     234:	10c00015 	stw	r3,0(r2)
	/* Write to the edge capture register to reset it
	 * Using bit-clearing (write 1 to a particular bit to clear it */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(INPUTS_BASE, 0xF);
     238:	00c003c4 	movi	r3,15
     23c:	00808034 	movhi	r2,512
     240:	10840b04 	addi	r2,r2,4140
     244:	10c00035 	stwio	r3,0(r2)

	/*
	 * Indicate interrupt
	 */
	leds_set(1 << 7);
     248:	013fe004 	movi	r4,-128
     24c:	00004980 	call	498 <leds_set>

	/* Read the PIO to delay ISR exit. This is done to prevent a
	 spurious interrupt in systems with high processor -> pio
	 latency and fast interrupts. */
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(INPUTS_BASE);
     250:	00808034 	movhi	r2,512
     254:	10840b04 	addi	r2,r2,4140
     258:	10800037 	ldwio	r2,0(r2)
}
     25c:	e037883a 	mov	sp,fp
     260:	dfc00117 	ldw	ra,4(sp)
     264:	df000017 	ldw	fp,0(sp)
     268:	dec00204 	addi	sp,sp,8
     26c:	f800283a 	ret

00000270 <handle_timer_irq>:

static void handle_timer_irq(void* context) {
     270:	defffd04 	addi	sp,sp,-12
     274:	dfc00215 	stw	ra,8(sp)
     278:	df000115 	stw	fp,4(sp)
     27c:	df000104 	addi	fp,sp,4
     280:	e13fff15 	stw	r4,-4(fp)
	response_time = timer_read();
     284:	000060c0 	call	60c <timer_read>
     288:	d0a6cc15 	stw	r2,-25808(gp)
	/* Indicate interrupt */
	leds_set(1 << 6);
     28c:	01001004 	movi	r4,64
     290:	00004980 	call	498 <leds_set>
	timer_clear_irq();
     294:	00006900 	call	690 <timer_clear_irq>
}
     298:	e037883a 	mov	sp,fp
     29c:	dfc00117 	ldw	ra,4(sp)
     2a0:	df000017 	ldw	fp,0(sp)
     2a4:	dec00204 	addi	sp,sp,8
     2a8:	f800283a 	ret

000002ac <setup_irq_inputs>:

void setup_irq_inputs(void) {
     2ac:	defffc04 	addi	sp,sp,-16
     2b0:	dfc00315 	stw	ra,12(sp)
     2b4:	df000215 	stw	fp,8(sp)
     2b8:	df000204 	addi	fp,sp,8
	void* edge_capture_ptr = (void*) edge_capture;
     2bc:	d0a6cb17 	ldw	r2,-25812(gp)
     2c0:	e0bfff15 	stw	r2,-4(fp)
	/* Reset the edge capture register */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(INPUTS_BASE, 0);
     2c4:	0007883a 	mov	r3,zero
     2c8:	00808034 	movhi	r2,512
     2cc:	10840b04 	addi	r2,r2,4140
     2d0:	10c00035 	stwio	r3,0(r2)
	/* Enable interrupt on KEY(1) which is on inputs(0) */
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(INPUTS_BASE, 1);
     2d4:	00c00044 	movi	r3,1
     2d8:	00808034 	movhi	r2,512
     2dc:	10840a04 	addi	r2,r2,4136
     2e0:	10c00035 	stwio	r3,0(r2)
	/* Register the ISR */
	alt_ic_isr_register(INPUTS_IRQ_INTERRUPT_CONTROLLER_ID,
     2e4:	d8000015 	stw	zero,0(sp)
     2e8:	0009883a 	mov	r4,zero
     2ec:	01400044 	movi	r5,1
     2f0:	01800034 	movhi	r6,0
     2f4:	31808204 	addi	r6,r6,520
     2f8:	e1ffff17 	ldw	r7,-4(fp)
     2fc:	000ca5c0 	call	ca5c <alt_ic_isr_register>
	INPUTS_IRQ, handle_button_interrupts, edge_capture_ptr, 0);

	alt_ic_irq_enable(INPUTS_IRQ_INTERRUPT_CONTROLLER_ID, INPUTS_IRQ);
     300:	0009883a 	mov	r4,zero
     304:	01400044 	movi	r5,1
     308:	000caac0 	call	caac <alt_ic_irq_enable>
}
     30c:	e037883a 	mov	sp,fp
     310:	dfc00117 	ldw	ra,4(sp)
     314:	df000017 	ldw	fp,0(sp)
     318:	dec00204 	addi	sp,sp,8
     31c:	f800283a 	ret

00000320 <setup_irq_timer>:

void setup_irq_timer(void) {
     320:	defffd04 	addi	sp,sp,-12
     324:	dfc00215 	stw	ra,8(sp)
     328:	df000115 	stw	fp,4(sp)
     32c:	df000104 	addi	fp,sp,4
	timer_enable_irq();
     330:	00006640 	call	664 <timer_enable_irq>
	if (alt_ic_isr_register(TIMER_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_IRQ,
     334:	d0a6cb17 	ldw	r2,-25812(gp)
     338:	d8000015 	stw	zero,0(sp)
     33c:	0009883a 	mov	r4,zero
     340:	000b883a 	mov	r5,zero
     344:	01800034 	movhi	r6,0
     348:	31809c04 	addi	r6,r6,624
     34c:	100f883a 	mov	r7,r2
     350:	000ca5c0 	call	ca5c <alt_ic_isr_register>
     354:	10000326 	beq	r2,zero,364 <setup_irq_timer+0x44>
			handle_timer_irq, (void*) edge_capture, 0))
		printf("Fail register");
     358:	01000074 	movhi	r4,1
     35c:	213c0a04 	addi	r4,r4,-4056
     360:	00007100 	call	710 <printf>
	if (alt_ic_irq_enable(TIMER_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_IRQ))
     364:	0009883a 	mov	r4,zero
     368:	000b883a 	mov	r5,zero
     36c:	000caac0 	call	caac <alt_ic_irq_enable>
     370:	10000326 	beq	r2,zero,380 <setup_irq_timer+0x60>
		printf("Fail enable");
     374:	01000074 	movhi	r4,1
     378:	213c0e04 	addi	r4,r4,-4040
     37c:	00007100 	call	710 <printf>
}
     380:	e037883a 	mov	sp,fp
     384:	dfc00117 	ldw	ra,4(sp)
     388:	df000017 	ldw	fp,0(sp)
     38c:	dec00204 	addi	sp,sp,8
     390:	f800283a 	ret

00000394 <main>:

int main() {
     394:	defffd04 	addi	sp,sp,-12
     398:	dfc00215 	stw	ra,8(sp)
     39c:	df000115 	stw	fp,4(sp)
     3a0:	df000104 	addi	fp,sp,4
	printf("Hello from Nios II Timer!\n");
     3a4:	01000074 	movhi	r4,1
     3a8:	213c1104 	addi	r4,r4,-4028
     3ac:	00008040 	call	804 <puts>
	leds(1);
     3b0:	01000044 	movi	r4,1
     3b4:	00005500 	call	550 <leds>

	setup_irq_inputs();
     3b8:	00002ac0 	call	2ac <setup_irq_inputs>
	setup_irq_timer();
     3bc:	00003200 	call	320 <setup_irq_timer>

	timer_init(500000000);
     3c0:	01077374 	movhi	r4,7629
     3c4:	21194004 	addi	r4,r4,25856
     3c8:	00005840 	call	584 <timer_init>
	timer_reset();
     3cc:	00006340 	call	634 <timer_reset>
	timer_start();
     3d0:	00005b40 	call	5b4 <timer_start>

	while (1) {
		int i = 0;
     3d4:	e03fff15 	stw	zero,-4(fp)
		for (i = 1; i < 6; ++i) {
     3d8:	00800044 	movi	r2,1
     3dc:	e0bfff15 	stw	r2,-4(fp)
     3e0:	00000d06 	br	418 <main+0x84>
			leds(1 << i);
     3e4:	00c00044 	movi	r3,1
     3e8:	e0bfff17 	ldw	r2,-4(fp)
     3ec:	1884983a 	sll	r2,r3,r2
     3f0:	10803fcc 	andi	r2,r2,255
     3f4:	1080201c 	xori	r2,r2,128
     3f8:	10bfe004 	addi	r2,r2,-128
     3fc:	1009883a 	mov	r4,r2
     400:	00005500 	call	550 <leds>
			usleep(500000 / 8);
     404:	013d0914 	movui	r4,62500
     408:	000d3200 	call	d320 <usleep>
	timer_reset();
	timer_start();

	while (1) {
		int i = 0;
		for (i = 1; i < 6; ++i) {
     40c:	e0bfff17 	ldw	r2,-4(fp)
     410:	10800044 	addi	r2,r2,1
     414:	e0bfff15 	stw	r2,-4(fp)
     418:	e0bfff17 	ldw	r2,-4(fp)
     41c:	10800190 	cmplti	r2,r2,6
     420:	103ff01e 	bne	r2,zero,3e4 <__alt_data_end+0xfe0003e4>
			leds(1 << i);
			usleep(500000 / 8);
		}

		printf("%u\n", timer_read());
     424:	000060c0 	call	60c <timer_read>
     428:	01000074 	movhi	r4,1
     42c:	213c1804 	addi	r4,r4,-4000
     430:	100b883a 	mov	r5,r2
     434:	00007100 	call	710 <printf>
		printf("response time = %d\n", response_time);
     438:	d0a6cc17 	ldw	r2,-25808(gp)
     43c:	01000074 	movhi	r4,1
     440:	213c1904 	addi	r4,r4,-3996
     444:	100b883a 	mov	r5,r2
     448:	00007100 	call	710 <printf>

		for (i = 4; i >= 0; --i) {
     44c:	00800104 	movi	r2,4
     450:	e0bfff15 	stw	r2,-4(fp)
     454:	00000d06 	br	48c <main+0xf8>
			leds(1 << i);
     458:	00c00044 	movi	r3,1
     45c:	e0bfff17 	ldw	r2,-4(fp)
     460:	1884983a 	sll	r2,r3,r2
     464:	10803fcc 	andi	r2,r2,255
     468:	1080201c 	xori	r2,r2,128
     46c:	10bfe004 	addi	r2,r2,-128
     470:	1009883a 	mov	r4,r2
     474:	00005500 	call	550 <leds>
			usleep(500000 / 8);
     478:	013d0914 	movui	r4,62500
     47c:	000d3200 	call	d320 <usleep>
		}

		printf("%u\n", timer_read());
		printf("response time = %d\n", response_time);

		for (i = 4; i >= 0; --i) {
     480:	e0bfff17 	ldw	r2,-4(fp)
     484:	10bfffc4 	addi	r2,r2,-1
     488:	e0bfff15 	stw	r2,-4(fp)
     48c:	e0bfff17 	ldw	r2,-4(fp)
     490:	103ff10e 	bge	r2,zero,458 <__alt_data_end+0xfe000458>
			leds(1 << i);
			usleep(500000 / 8);
		}
	}
     494:	003fcf06 	br	3d4 <__alt_data_end+0xfe0003d4>

00000498 <leds_set>:

#include "leds.h"
#include "io.h"
#include "system.h"

void leds_set(char mask) {
     498:	defffd04 	addi	sp,sp,-12
     49c:	df000215 	stw	fp,8(sp)
     4a0:	df000204 	addi	fp,sp,8
     4a4:	2005883a 	mov	r2,r4
     4a8:	e0bfff05 	stb	r2,-4(fp)
	char before = IORD_8DIRECT(LEDS_BASE, 0);
     4ac:	00808034 	movhi	r2,512
     4b0:	10840c04 	addi	r2,r2,4144
     4b4:	10800023 	ldbuio	r2,0(r2)
     4b8:	10803fcc 	andi	r2,r2,255
     4bc:	e0bffe05 	stb	r2,-8(fp)
	char after = before | mask;
     4c0:	e0fffe03 	ldbu	r3,-8(fp)
     4c4:	e0bfff03 	ldbu	r2,-4(fp)
     4c8:	1884b03a 	or	r2,r3,r2
     4cc:	e0bffe45 	stb	r2,-7(fp)
	IOWR_8DIRECT(LEDS_BASE, 0, after);
     4d0:	e0fffe47 	ldb	r3,-7(fp)
     4d4:	00808034 	movhi	r2,512
     4d8:	10840c04 	addi	r2,r2,4144
     4dc:	10c00025 	stbio	r3,0(r2)
}
     4e0:	e037883a 	mov	sp,fp
     4e4:	df000017 	ldw	fp,0(sp)
     4e8:	dec00104 	addi	sp,sp,4
     4ec:	f800283a 	ret

000004f0 <leds_clr>:

void leds_clr(char mask) {
     4f0:	defffd04 	addi	sp,sp,-12
     4f4:	df000215 	stw	fp,8(sp)
     4f8:	df000204 	addi	fp,sp,8
     4fc:	2005883a 	mov	r2,r4
     500:	e0bfff05 	stb	r2,-4(fp)
	char before = IORD_8DIRECT(LEDS_BASE, 0);
     504:	00808034 	movhi	r2,512
     508:	10840c04 	addi	r2,r2,4144
     50c:	10800023 	ldbuio	r2,0(r2)
     510:	10803fcc 	andi	r2,r2,255
     514:	e0bffe05 	stb	r2,-8(fp)
	char after = before & ~mask;
     518:	e0bfff03 	ldbu	r2,-4(fp)
     51c:	0084303a 	nor	r2,zero,r2
     520:	1007883a 	mov	r3,r2
     524:	e0bffe03 	ldbu	r2,-8(fp)
     528:	1884703a 	and	r2,r3,r2
     52c:	e0bffe45 	stb	r2,-7(fp)
	IOWR_8DIRECT(LEDS_BASE, 0, after);
     530:	e0fffe47 	ldb	r3,-7(fp)
     534:	00808034 	movhi	r2,512
     538:	10840c04 	addi	r2,r2,4144
     53c:	10c00025 	stbio	r3,0(r2)
}
     540:	e037883a 	mov	sp,fp
     544:	df000017 	ldw	fp,0(sp)
     548:	dec00104 	addi	sp,sp,4
     54c:	f800283a 	ret

00000550 <leds>:

void leds(char value) {
     550:	defffe04 	addi	sp,sp,-8
     554:	df000115 	stw	fp,4(sp)
     558:	df000104 	addi	fp,sp,4
     55c:	2005883a 	mov	r2,r4
     560:	e0bfff05 	stb	r2,-4(fp)
	IOWR_8DIRECT(LEDS_BASE, 0, value);
     564:	e0ffff07 	ldb	r3,-4(fp)
     568:	00808034 	movhi	r2,512
     56c:	10840c04 	addi	r2,r2,4144
     570:	10c00025 	stbio	r3,0(r2)
}
     574:	e037883a 	mov	sp,fp
     578:	df000017 	ldw	fp,0(sp)
     57c:	dec00104 	addi	sp,sp,4
     580:	f800283a 	ret

00000584 <timer_init>:
#include "timer.h"
#include "system.h"
#include "io.h"

// Setup timer with limit and interrupts enabled
void timer_init(unsigned int limit) {
     584:	defffe04 	addi	sp,sp,-8
     588:	df000115 	stw	fp,4(sp)
     58c:	df000104 	addi	fp,sp,4
     590:	e13fff15 	stw	r4,-4(fp)
	// Write limit value
	IOWR_32DIRECT(TIMER_BASE, 6*4, limit);
     594:	e0ffff17 	ldw	r3,-4(fp)
     598:	00808034 	movhi	r2,512
     59c:	10840604 	addi	r2,r2,4120
     5a0:	10c00035 	stwio	r3,0(r2)
}
     5a4:	e037883a 	mov	sp,fp
     5a8:	df000017 	ldw	fp,0(sp)
     5ac:	dec00104 	addi	sp,sp,4
     5b0:	f800283a 	ret

000005b4 <timer_start>:

void timer_start(void) {
     5b4:	deffff04 	addi	sp,sp,-4
     5b8:	df000015 	stw	fp,0(sp)
     5bc:	d839883a 	mov	fp,sp
	IOWR_32DIRECT(TIMER_BASE, 2*4, 1);
     5c0:	00c00044 	movi	r3,1
     5c4:	00808034 	movhi	r2,512
     5c8:	10840204 	addi	r2,r2,4104
     5cc:	10c00035 	stwio	r3,0(r2)
}
     5d0:	e037883a 	mov	sp,fp
     5d4:	df000017 	ldw	fp,0(sp)
     5d8:	dec00104 	addi	sp,sp,4
     5dc:	f800283a 	ret

000005e0 <timer_stop>:

void timer_stop(void) {
     5e0:	deffff04 	addi	sp,sp,-4
     5e4:	df000015 	stw	fp,0(sp)
     5e8:	d839883a 	mov	fp,sp
	IOWR_32DIRECT(TIMER_BASE, 3*4, 1);
     5ec:	00c00044 	movi	r3,1
     5f0:	00808034 	movhi	r2,512
     5f4:	10840304 	addi	r2,r2,4108
     5f8:	10c00035 	stwio	r3,0(r2)
}
     5fc:	e037883a 	mov	sp,fp
     600:	df000017 	ldw	fp,0(sp)
     604:	dec00104 	addi	sp,sp,4
     608:	f800283a 	ret

0000060c <timer_read>:

unsigned int timer_read(void)
{
     60c:	deffff04 	addi	sp,sp,-4
     610:	df000015 	stw	fp,0(sp)
     614:	d839883a 	mov	fp,sp
	return IORD_32DIRECT(TIMER_BASE, 0);
     618:	00808034 	movhi	r2,512
     61c:	10840004 	addi	r2,r2,4096
     620:	10800037 	ldwio	r2,0(r2)
}
     624:	e037883a 	mov	sp,fp
     628:	df000017 	ldw	fp,0(sp)
     62c:	dec00104 	addi	sp,sp,4
     630:	f800283a 	ret

00000634 <timer_reset>:

void timer_reset(void)
{
     634:	deffff04 	addi	sp,sp,-4
     638:	df000015 	stw	fp,0(sp)
     63c:	d839883a 	mov	fp,sp
	return IOWR_32DIRECT(TIMER_BASE, 1*4, 1);
     640:	00c00044 	movi	r3,1
     644:	00808034 	movhi	r2,512
     648:	10840104 	addi	r2,r2,4100
     64c:	10c00035 	stwio	r3,0(r2)
     650:	0001883a 	nop
}
     654:	e037883a 	mov	sp,fp
     658:	df000017 	ldw	fp,0(sp)
     65c:	dec00104 	addi	sp,sp,4
     660:	f800283a 	ret

00000664 <timer_enable_irq>:

void timer_enable_irq(void)
{
     664:	deffff04 	addi	sp,sp,-4
     668:	df000015 	stw	fp,0(sp)
     66c:	d839883a 	mov	fp,sp
	IOWR_32DIRECT(TIMER_BASE, 4*4, 1);
     670:	00c00044 	movi	r3,1
     674:	00808034 	movhi	r2,512
     678:	10840404 	addi	r2,r2,4112
     67c:	10c00035 	stwio	r3,0(r2)
}
     680:	e037883a 	mov	sp,fp
     684:	df000017 	ldw	fp,0(sp)
     688:	dec00104 	addi	sp,sp,4
     68c:	f800283a 	ret

00000690 <timer_clear_irq>:

void timer_clear_irq(void)
{
     690:	deffff04 	addi	sp,sp,-4
     694:	df000015 	stw	fp,0(sp)
     698:	d839883a 	mov	fp,sp
	IOWR_32DIRECT(TIMER_BASE, 5*4, 1);
     69c:	00c00044 	movi	r3,1
     6a0:	00808034 	movhi	r2,512
     6a4:	10840504 	addi	r2,r2,4116
     6a8:	10c00035 	stwio	r3,0(r2)
}
     6ac:	e037883a 	mov	sp,fp
     6b0:	df000017 	ldw	fp,0(sp)
     6b4:	dec00104 	addi	sp,sp,4
     6b8:	f800283a 	ret

000006bc <timer_read_irq>:

int timer_read_irq(void)
{
     6bc:	deffff04 	addi	sp,sp,-4
     6c0:	df000015 	stw	fp,0(sp)
     6c4:	d839883a 	mov	fp,sp
	return IORD_32DIRECT(TIMER_BASE, 4*4);
     6c8:	00808034 	movhi	r2,512
     6cc:	10840404 	addi	r2,r2,4112
     6d0:	10800037 	ldwio	r2,0(r2)
}
     6d4:	e037883a 	mov	sp,fp
     6d8:	df000017 	ldw	fp,0(sp)
     6dc:	dec00104 	addi	sp,sp,4
     6e0:	f800283a 	ret

000006e4 <_printf_r>:
     6e4:	defffd04 	addi	sp,sp,-12
     6e8:	dfc00015 	stw	ra,0(sp)
     6ec:	d9800115 	stw	r6,4(sp)
     6f0:	d9c00215 	stw	r7,8(sp)
     6f4:	280d883a 	mov	r6,r5
     6f8:	21400217 	ldw	r5,8(r4)
     6fc:	d9c00104 	addi	r7,sp,4
     700:	00008a40 	call	8a4 <___vfprintf_internal_r>
     704:	dfc00017 	ldw	ra,0(sp)
     708:	dec00304 	addi	sp,sp,12
     70c:	f800283a 	ret

00000710 <printf>:
     710:	defffc04 	addi	sp,sp,-16
     714:	dfc00015 	stw	ra,0(sp)
     718:	d9400115 	stw	r5,4(sp)
     71c:	d9800215 	stw	r6,8(sp)
     720:	d9c00315 	stw	r7,12(sp)
     724:	00800074 	movhi	r2,1
     728:	10838a04 	addi	r2,r2,3624
     72c:	10800017 	ldw	r2,0(r2)
     730:	200b883a 	mov	r5,r4
     734:	d9800104 	addi	r6,sp,4
     738:	11000217 	ldw	r4,8(r2)
     73c:	00028800 	call	2880 <__vfprintf_internal>
     740:	dfc00017 	ldw	ra,0(sp)
     744:	dec00404 	addi	sp,sp,16
     748:	f800283a 	ret

0000074c <_puts_r>:
     74c:	defff604 	addi	sp,sp,-40
     750:	dc400815 	stw	r17,32(sp)
     754:	2023883a 	mov	r17,r4
     758:	2809883a 	mov	r4,r5
     75c:	dc000715 	stw	r16,28(sp)
     760:	dfc00915 	stw	ra,36(sp)
     764:	2821883a 	mov	r16,r5
     768:	00008180 	call	818 <strlen>
     76c:	00c00074 	movhi	r3,1
     770:	18c38a04 	addi	r3,r3,3624
     774:	18c00017 	ldw	r3,0(r3)
     778:	11000044 	addi	r4,r2,1
     77c:	d8800115 	stw	r2,4(sp)
     780:	18c00217 	ldw	r3,8(r3)
     784:	00800074 	movhi	r2,1
     788:	10bc1e04 	addi	r2,r2,-3976
     78c:	d8800215 	stw	r2,8(sp)
     790:	1940030b 	ldhu	r5,12(r3)
     794:	00800044 	movi	r2,1
     798:	d8800315 	stw	r2,12(sp)
     79c:	00800084 	movi	r2,2
     7a0:	d8800515 	stw	r2,20(sp)
     7a4:	dc000015 	stw	r16,0(sp)
     7a8:	d9000615 	stw	r4,24(sp)
     7ac:	dec00415 	stw	sp,16(sp)
     7b0:	2888000c 	andi	r2,r5,8192
     7b4:	1000061e 	bne	r2,zero,7d0 <_puts_r+0x84>
     7b8:	19001917 	ldw	r4,100(r3)
     7bc:	00b7ffc4 	movi	r2,-8193
     7c0:	29480014 	ori	r5,r5,8192
     7c4:	2084703a 	and	r2,r4,r2
     7c8:	1940030d 	sth	r5,12(r3)
     7cc:	18801915 	stw	r2,100(r3)
     7d0:	89400217 	ldw	r5,8(r17)
     7d4:	8809883a 	mov	r4,r17
     7d8:	d9800404 	addi	r6,sp,16
     7dc:	0004c2c0 	call	4c2c <__sfvwrite_r>
     7e0:	1000061e 	bne	r2,zero,7fc <_puts_r+0xb0>
     7e4:	00800284 	movi	r2,10
     7e8:	dfc00917 	ldw	ra,36(sp)
     7ec:	dc400817 	ldw	r17,32(sp)
     7f0:	dc000717 	ldw	r16,28(sp)
     7f4:	dec00a04 	addi	sp,sp,40
     7f8:	f800283a 	ret
     7fc:	00bfffc4 	movi	r2,-1
     800:	003ff906 	br	7e8 <__alt_data_end+0xfe0007e8>

00000804 <puts>:
     804:	00800074 	movhi	r2,1
     808:	10838a04 	addi	r2,r2,3624
     80c:	200b883a 	mov	r5,r4
     810:	11000017 	ldw	r4,0(r2)
     814:	000074c1 	jmpi	74c <_puts_r>

00000818 <strlen>:
     818:	208000cc 	andi	r2,r4,3
     81c:	10001d26 	beq	r2,zero,894 <strlen+0x7c>
     820:	20800007 	ldb	r2,0(r4)
     824:	10001d26 	beq	r2,zero,89c <strlen+0x84>
     828:	2005883a 	mov	r2,r4
     82c:	00000206 	br	838 <strlen+0x20>
     830:	10c00007 	ldb	r3,0(r2)
     834:	18001526 	beq	r3,zero,88c <strlen+0x74>
     838:	10800044 	addi	r2,r2,1
     83c:	10c000cc 	andi	r3,r2,3
     840:	183ffb1e 	bne	r3,zero,830 <__alt_data_end+0xfe000830>
     844:	10c00017 	ldw	r3,0(r2)
     848:	01ffbff4 	movhi	r7,65279
     84c:	39ffbfc4 	addi	r7,r7,-257
     850:	01a02074 	movhi	r6,32897
     854:	31a02004 	addi	r6,r6,-32640
     858:	00000206 	br	864 <strlen+0x4c>
     85c:	10800104 	addi	r2,r2,4
     860:	10c00017 	ldw	r3,0(r2)
     864:	19cb883a 	add	r5,r3,r7
     868:	00c6303a 	nor	r3,zero,r3
     86c:	28c6703a 	and	r3,r5,r3
     870:	1986703a 	and	r3,r3,r6
     874:	183ff926 	beq	r3,zero,85c <__alt_data_end+0xfe00085c>
     878:	10c00007 	ldb	r3,0(r2)
     87c:	18000326 	beq	r3,zero,88c <strlen+0x74>
     880:	10800044 	addi	r2,r2,1
     884:	10c00007 	ldb	r3,0(r2)
     888:	183ffd1e 	bne	r3,zero,880 <__alt_data_end+0xfe000880>
     88c:	1105c83a 	sub	r2,r2,r4
     890:	f800283a 	ret
     894:	2005883a 	mov	r2,r4
     898:	003fea06 	br	844 <__alt_data_end+0xfe000844>
     89c:	0005883a 	mov	r2,zero
     8a0:	f800283a 	ret

000008a4 <___vfprintf_internal_r>:
     8a4:	defeb604 	addi	sp,sp,-1320
     8a8:	dfc14915 	stw	ra,1316(sp)
     8ac:	ddc14715 	stw	r23,1308(sp)
     8b0:	dc414115 	stw	r17,1284(sp)
     8b4:	d9012c15 	stw	r4,1200(sp)
     8b8:	282f883a 	mov	r23,r5
     8bc:	3023883a 	mov	r17,r6
     8c0:	d9c12f15 	stw	r7,1212(sp)
     8c4:	df014815 	stw	fp,1312(sp)
     8c8:	dd814615 	stw	r22,1304(sp)
     8cc:	dd414515 	stw	r21,1300(sp)
     8d0:	dd014415 	stw	r20,1296(sp)
     8d4:	dcc14315 	stw	r19,1292(sp)
     8d8:	dc814215 	stw	r18,1288(sp)
     8dc:	dc014015 	stw	r16,1280(sp)
     8e0:	00052d80 	call	52d8 <_localeconv_r>
     8e4:	10800017 	ldw	r2,0(r2)
     8e8:	1009883a 	mov	r4,r2
     8ec:	d8813415 	stw	r2,1232(sp)
     8f0:	00008180 	call	818 <strlen>
     8f4:	da812c17 	ldw	r10,1200(sp)
     8f8:	d8813815 	stw	r2,1248(sp)
     8fc:	50000226 	beq	r10,zero,908 <___vfprintf_internal_r+0x64>
     900:	50800e17 	ldw	r2,56(r10)
     904:	10022a26 	beq	r2,zero,11b0 <___vfprintf_internal_r+0x90c>
     908:	b880030b 	ldhu	r2,12(r23)
     90c:	1108000c 	andi	r4,r2,8192
     910:	1007883a 	mov	r3,r2
     914:	2000071e 	bne	r4,zero,934 <___vfprintf_internal_r+0x90>
     918:	b9001917 	ldw	r4,100(r23)
     91c:	10c80014 	ori	r3,r2,8192
     920:	00b7ffc4 	movi	r2,-8193
     924:	2088703a 	and	r4,r4,r2
     928:	b8c0030d 	sth	r3,12(r23)
     92c:	1805883a 	mov	r2,r3
     930:	b9001915 	stw	r4,100(r23)
     934:	1900020c 	andi	r4,r3,8
     938:	2001cd26 	beq	r4,zero,1070 <___vfprintf_internal_r+0x7cc>
     93c:	b9000417 	ldw	r4,16(r23)
     940:	2001cb26 	beq	r4,zero,1070 <___vfprintf_internal_r+0x7cc>
     944:	18c0068c 	andi	r3,r3,26
     948:	01000284 	movi	r4,10
     94c:	1901d126 	beq	r3,r4,1094 <___vfprintf_internal_r+0x7f0>
     950:	da810dc4 	addi	r10,sp,1079
     954:	d8800404 	addi	r2,sp,16
     958:	da812815 	stw	r10,1184(sp)
     95c:	d8811e15 	stw	r2,1144(sp)
     960:	1011883a 	mov	r8,r2
     964:	d8812817 	ldw	r2,1184(sp)
     968:	da810e04 	addi	r10,sp,1080
     96c:	da812915 	stw	r10,1188(sp)
     970:	5095c83a 	sub	r10,r10,r2
     974:	d8012015 	stw	zero,1152(sp)
     978:	d8011f15 	stw	zero,1148(sp)
     97c:	d8013515 	stw	zero,1236(sp)
     980:	d8013715 	stw	zero,1244(sp)
     984:	d8013915 	stw	zero,1252(sp)
     988:	d8013b15 	stw	zero,1260(sp)
     98c:	d8013a15 	stw	zero,1256(sp)
     990:	d8013115 	stw	zero,1220(sp)
     994:	04c00074 	movhi	r19,1
     998:	9cfc2f84 	addi	r19,r19,-3906
     99c:	da813d15 	stw	r10,1268(sp)
     9a0:	88800007 	ldb	r2,0(r17)
     9a4:	10019726 	beq	r2,zero,1004 <___vfprintf_internal_r+0x760>
     9a8:	00c00944 	movi	r3,37
     9ac:	8821883a 	mov	r16,r17
     9b0:	10c0021e 	bne	r2,r3,9bc <___vfprintf_internal_r+0x118>
     9b4:	00001406 	br	a08 <___vfprintf_internal_r+0x164>
     9b8:	10c00326 	beq	r2,r3,9c8 <___vfprintf_internal_r+0x124>
     9bc:	84000044 	addi	r16,r16,1
     9c0:	80800007 	ldb	r2,0(r16)
     9c4:	103ffc1e 	bne	r2,zero,9b8 <__alt_data_end+0xfe0009b8>
     9c8:	8465c83a 	sub	r18,r16,r17
     9cc:	90000e26 	beq	r18,zero,a08 <___vfprintf_internal_r+0x164>
     9d0:	d8c12017 	ldw	r3,1152(sp)
     9d4:	d8811f17 	ldw	r2,1148(sp)
     9d8:	44400015 	stw	r17,0(r8)
     9dc:	1c87883a 	add	r3,r3,r18
     9e0:	10800044 	addi	r2,r2,1
     9e4:	d8c12015 	stw	r3,1152(sp)
     9e8:	44800115 	stw	r18,4(r8)
     9ec:	d8811f15 	stw	r2,1148(sp)
     9f0:	00c001c4 	movi	r3,7
     9f4:	1881dc16 	blt	r3,r2,1168 <___vfprintf_internal_r+0x8c4>
     9f8:	42000204 	addi	r8,r8,8
     9fc:	da813117 	ldw	r10,1220(sp)
     a00:	5495883a 	add	r10,r10,r18
     a04:	da813115 	stw	r10,1220(sp)
     a08:	80800007 	ldb	r2,0(r16)
     a0c:	1001dd26 	beq	r2,zero,1184 <___vfprintf_internal_r+0x8e0>
     a10:	84800047 	ldb	r18,1(r16)
     a14:	84400044 	addi	r17,r16,1
     a18:	d8012785 	stb	zero,1182(sp)
     a1c:	000d883a 	mov	r6,zero
     a20:	053fffc4 	movi	r20,-1
     a24:	d8013015 	stw	zero,1216(sp)
     a28:	d8012a15 	stw	zero,1192(sp)
     a2c:	00c01604 	movi	r3,88
     a30:	01000244 	movi	r4,9
     a34:	02400a84 	movi	r9,42
     a38:	01c01b04 	movi	r7,108
     a3c:	8c400044 	addi	r17,r17,1
     a40:	90bff804 	addi	r2,r18,-32
     a44:	1882f936 	bltu	r3,r2,162c <___vfprintf_internal_r+0xd88>
     a48:	1085883a 	add	r2,r2,r2
     a4c:	1085883a 	add	r2,r2,r2
     a50:	01400034 	movhi	r5,0
     a54:	29429904 	addi	r5,r5,2660
     a58:	1145883a 	add	r2,r2,r5
     a5c:	10800017 	ldw	r2,0(r2)
     a60:	1000683a 	jmp	r2
     a64:	000014cc 	andi	zero,zero,83
     a68:	0000162c 	andhi	zero,zero,88
     a6c:	0000162c 	andhi	zero,zero,88
     a70:	00001470 	cmpltui	zero,zero,81
     a74:	0000162c 	andhi	zero,zero,88
     a78:	0000162c 	andhi	zero,zero,88
     a7c:	0000162c 	andhi	zero,zero,88
     a80:	0000162c 	andhi	zero,zero,88
     a84:	0000162c 	andhi	zero,zero,88
     a88:	0000162c 	andhi	zero,zero,88
     a8c:	00001484 	movi	zero,82
     a90:	000014ac 	andhi	zero,zero,82
     a94:	0000162c 	andhi	zero,zero,88
     a98:	0000105c 	xori	zero,zero,65
     a9c:	000015ec 	andhi	zero,zero,87
     aa0:	0000162c 	andhi	zero,zero,88
     aa4:	000014b8 	rdprs	zero,zero,82
     aa8:	00001208 	cmpgei	zero,zero,72
     aac:	00001208 	cmpgei	zero,zero,72
     ab0:	00001208 	cmpgei	zero,zero,72
     ab4:	00001208 	cmpgei	zero,zero,72
     ab8:	00001208 	cmpgei	zero,zero,72
     abc:	00001208 	cmpgei	zero,zero,72
     ac0:	00001208 	cmpgei	zero,zero,72
     ac4:	00001208 	cmpgei	zero,zero,72
     ac8:	00001208 	cmpgei	zero,zero,72
     acc:	0000162c 	andhi	zero,zero,88
     ad0:	0000162c 	andhi	zero,zero,88
     ad4:	0000162c 	andhi	zero,zero,88
     ad8:	0000162c 	andhi	zero,zero,88
     adc:	0000162c 	andhi	zero,zero,88
     ae0:	0000162c 	andhi	zero,zero,88
     ae4:	0000162c 	andhi	zero,zero,88
     ae8:	0000162c 	andhi	zero,zero,88
     aec:	0000162c 	andhi	zero,zero,88
     af0:	0000162c 	andhi	zero,zero,88
     af4:	000012a0 	cmpeqi	zero,zero,74
     af8:	000012e8 	cmpgeui	zero,zero,75
     afc:	0000162c 	andhi	zero,zero,88
     b00:	000012e8 	cmpgeui	zero,zero,75
     b04:	0000162c 	andhi	zero,zero,88
     b08:	0000162c 	andhi	zero,zero,88
     b0c:	0000162c 	andhi	zero,zero,88
     b10:	0000162c 	andhi	zero,zero,88
     b14:	000015a0 	cmpeqi	zero,zero,86
     b18:	0000162c 	andhi	zero,zero,88
     b1c:	0000162c 	andhi	zero,zero,88
     b20:	0000100c 	andi	zero,zero,64
     b24:	0000162c 	andhi	zero,zero,88
     b28:	0000162c 	andhi	zero,zero,88
     b2c:	0000162c 	andhi	zero,zero,88
     b30:	0000162c 	andhi	zero,zero,88
     b34:	0000162c 	andhi	zero,zero,88
     b38:	00000bc8 	cmpgei	zero,zero,47
     b3c:	0000162c 	andhi	zero,zero,88
     b40:	0000162c 	andhi	zero,zero,88
     b44:	000013e4 	muli	zero,zero,79
     b48:	0000162c 	andhi	zero,zero,88
     b4c:	0000162c 	andhi	zero,zero,88
     b50:	0000162c 	andhi	zero,zero,88
     b54:	0000162c 	andhi	zero,zero,88
     b58:	0000162c 	andhi	zero,zero,88
     b5c:	0000162c 	andhi	zero,zero,88
     b60:	0000162c 	andhi	zero,zero,88
     b64:	0000162c 	andhi	zero,zero,88
     b68:	0000162c 	andhi	zero,zero,88
     b6c:	0000162c 	andhi	zero,zero,88
     b70:	000015b4 	movhi	zero,86
     b74:	00001424 	muli	zero,zero,80
     b78:	000012e8 	cmpgeui	zero,zero,75
     b7c:	000012e8 	cmpgeui	zero,zero,75
     b80:	000012e8 	cmpgeui	zero,zero,75
     b84:	0000145c 	xori	zero,zero,81
     b88:	00001424 	muli	zero,zero,80
     b8c:	0000162c 	andhi	zero,zero,88
     b90:	0000162c 	andhi	zero,zero,88
     b94:	000014e8 	cmpgeui	zero,zero,83
     b98:	0000162c 	andhi	zero,zero,88
     b9c:	00001504 	movi	zero,84
     ba0:	00001018 	cmpnei	zero,zero,64
     ba4:	0000123c 	xorhi	zero,zero,72
     ba8:	0000128c 	andi	zero,zero,74
     bac:	0000162c 	andhi	zero,zero,88
     bb0:	00001540 	call	154 <alt_irq_handler+0x68>
     bb4:	0000162c 	andhi	zero,zero,88
     bb8:	00000bd4 	movui	zero,47
     bbc:	0000162c 	andhi	zero,zero,88
     bc0:	0000162c 	andhi	zero,zero,88
     bc4:	00001384 	movi	zero,78
     bc8:	da812a17 	ldw	r10,1192(sp)
     bcc:	52800414 	ori	r10,r10,16
     bd0:	da812a15 	stw	r10,1192(sp)
     bd4:	da812a17 	ldw	r10,1192(sp)
     bd8:	5080080c 	andi	r2,r10,32
     bdc:	1001821e 	bne	r2,zero,11e8 <___vfprintf_internal_r+0x944>
     be0:	da812a17 	ldw	r10,1192(sp)
     be4:	5080040c 	andi	r2,r10,16
     be8:	10054a26 	beq	r2,zero,2114 <___vfprintf_internal_r+0x1870>
     bec:	da812f17 	ldw	r10,1212(sp)
     bf0:	55400017 	ldw	r21,0(r10)
     bf4:	52800104 	addi	r10,r10,4
     bf8:	002d883a 	mov	r22,zero
     bfc:	da812f15 	stw	r10,1212(sp)
     c00:	00c00044 	movi	r3,1
     c04:	a805883a 	mov	r2,r21
     c08:	d8012785 	stb	zero,1182(sp)
     c0c:	0039883a 	mov	fp,zero
     c10:	a0000416 	blt	r20,zero,c24 <___vfprintf_internal_r+0x380>
     c14:	da812a17 	ldw	r10,1192(sp)
     c18:	013fdfc4 	movi	r4,-129
     c1c:	5114703a 	and	r10,r10,r4
     c20:	da812a15 	stw	r10,1192(sp)
     c24:	10029a1e 	bne	r2,zero,1690 <___vfprintf_internal_r+0xdec>
     c28:	a002991e 	bne	r20,zero,1690 <___vfprintf_internal_r+0xdec>
     c2c:	18c03fcc 	andi	r3,r3,255
     c30:	1803d91e 	bne	r3,zero,1b98 <___vfprintf_internal_r+0x12f4>
     c34:	da812a17 	ldw	r10,1192(sp)
     c38:	5080004c 	andi	r2,r10,1
     c3c:	1003d626 	beq	r2,zero,1b98 <___vfprintf_internal_r+0x12f4>
     c40:	da813d17 	ldw	r10,1268(sp)
     c44:	00800c04 	movi	r2,48
     c48:	d8810dc5 	stb	r2,1079(sp)
     c4c:	da812e15 	stw	r10,1208(sp)
     c50:	dc010dc4 	addi	r16,sp,1079
     c54:	d8812e17 	ldw	r2,1208(sp)
     c58:	1500010e 	bge	r2,r20,c60 <___vfprintf_internal_r+0x3bc>
     c5c:	a005883a 	mov	r2,r20
     c60:	d8812b15 	stw	r2,1196(sp)
     c64:	d8013315 	stw	zero,1228(sp)
     c68:	e0803fcc 	andi	r2,fp,255
     c6c:	1080201c 	xori	r2,r2,128
     c70:	10bfe004 	addi	r2,r2,-128
     c74:	10000326 	beq	r2,zero,c84 <___vfprintf_internal_r+0x3e0>
     c78:	da812b17 	ldw	r10,1196(sp)
     c7c:	52800044 	addi	r10,r10,1
     c80:	da812b15 	stw	r10,1196(sp)
     c84:	d8c12a17 	ldw	r3,1192(sp)
     c88:	18c0008c 	andi	r3,r3,2
     c8c:	d8c12d15 	stw	r3,1204(sp)
     c90:	18000326 	beq	r3,zero,ca0 <___vfprintf_internal_r+0x3fc>
     c94:	da812b17 	ldw	r10,1196(sp)
     c98:	52800084 	addi	r10,r10,2
     c9c:	da812b15 	stw	r10,1196(sp)
     ca0:	d8c12a17 	ldw	r3,1192(sp)
     ca4:	18c0210c 	andi	r3,r3,132
     ca8:	d8c13215 	stw	r3,1224(sp)
     cac:	1802661e 	bne	r3,zero,1648 <___vfprintf_internal_r+0xda4>
     cb0:	da813017 	ldw	r10,1216(sp)
     cb4:	d8c12b17 	ldw	r3,1196(sp)
     cb8:	50f9c83a 	sub	fp,r10,r3
     cbc:	0702620e 	bge	zero,fp,1648 <___vfprintf_internal_r+0xda4>
     cc0:	02800074 	movhi	r10,1
     cc4:	52bc3384 	addi	r10,r10,-3890
     cc8:	02400404 	movi	r9,16
     ccc:	da813615 	stw	r10,1240(sp)
     cd0:	d8c12017 	ldw	r3,1152(sp)
     cd4:	d8811f17 	ldw	r2,1148(sp)
     cd8:	4f00220e 	bge	r9,fp,d64 <___vfprintf_internal_r+0x4c0>
     cdc:	8809883a 	mov	r4,r17
     ce0:	dc013c15 	stw	r16,1264(sp)
     ce4:	e023883a 	mov	r17,fp
     ce8:	482d883a 	mov	r22,r9
     cec:	054001c4 	movi	r21,7
     cf0:	dc012c17 	ldw	r16,1200(sp)
     cf4:	2039883a 	mov	fp,r4
     cf8:	00000306 	br	d08 <___vfprintf_internal_r+0x464>
     cfc:	8c7ffc04 	addi	r17,r17,-16
     d00:	42000204 	addi	r8,r8,8
     d04:	b440130e 	bge	r22,r17,d54 <___vfprintf_internal_r+0x4b0>
     d08:	18c00404 	addi	r3,r3,16
     d0c:	10800044 	addi	r2,r2,1
     d10:	01000074 	movhi	r4,1
     d14:	213c3384 	addi	r4,r4,-3890
     d18:	41000015 	stw	r4,0(r8)
     d1c:	45800115 	stw	r22,4(r8)
     d20:	d8c12015 	stw	r3,1152(sp)
     d24:	d8811f15 	stw	r2,1148(sp)
     d28:	a8bff40e 	bge	r21,r2,cfc <__alt_data_end+0xfe000cfc>
     d2c:	8009883a 	mov	r4,r16
     d30:	b80b883a 	mov	r5,r23
     d34:	d9811e04 	addi	r6,sp,1144
     d38:	000794c0 	call	794c <__sprint_r>
     d3c:	1001171e 	bne	r2,zero,119c <___vfprintf_internal_r+0x8f8>
     d40:	8c7ffc04 	addi	r17,r17,-16
     d44:	d8c12017 	ldw	r3,1152(sp)
     d48:	d8811f17 	ldw	r2,1148(sp)
     d4c:	da000404 	addi	r8,sp,16
     d50:	b47fed16 	blt	r22,r17,d08 <__alt_data_end+0xfe000d08>
     d54:	dc013c17 	ldw	r16,1264(sp)
     d58:	e009883a 	mov	r4,fp
     d5c:	8839883a 	mov	fp,r17
     d60:	2023883a 	mov	r17,r4
     d64:	da813617 	ldw	r10,1240(sp)
     d68:	e0c7883a 	add	r3,fp,r3
     d6c:	10800044 	addi	r2,r2,1
     d70:	42800015 	stw	r10,0(r8)
     d74:	47000115 	stw	fp,4(r8)
     d78:	d8c12015 	stw	r3,1152(sp)
     d7c:	d8811f15 	stw	r2,1148(sp)
     d80:	010001c4 	movi	r4,7
     d84:	2083bd16 	blt	r4,r2,1c7c <___vfprintf_internal_r+0x13d8>
     d88:	d8812787 	ldb	r2,1182(sp)
     d8c:	42000204 	addi	r8,r8,8
     d90:	10000c26 	beq	r2,zero,dc4 <___vfprintf_internal_r+0x520>
     d94:	d8811f17 	ldw	r2,1148(sp)
     d98:	d9012784 	addi	r4,sp,1182
     d9c:	18c00044 	addi	r3,r3,1
     da0:	10800044 	addi	r2,r2,1
     da4:	41000015 	stw	r4,0(r8)
     da8:	01000044 	movi	r4,1
     dac:	41000115 	stw	r4,4(r8)
     db0:	d8c12015 	stw	r3,1152(sp)
     db4:	d8811f15 	stw	r2,1148(sp)
     db8:	010001c4 	movi	r4,7
     dbc:	20834116 	blt	r4,r2,1ac4 <___vfprintf_internal_r+0x1220>
     dc0:	42000204 	addi	r8,r8,8
     dc4:	da812d17 	ldw	r10,1204(sp)
     dc8:	50000c26 	beq	r10,zero,dfc <___vfprintf_internal_r+0x558>
     dcc:	d8811f17 	ldw	r2,1148(sp)
     dd0:	d9012704 	addi	r4,sp,1180
     dd4:	18c00084 	addi	r3,r3,2
     dd8:	10800044 	addi	r2,r2,1
     ddc:	41000015 	stw	r4,0(r8)
     de0:	01000084 	movi	r4,2
     de4:	41000115 	stw	r4,4(r8)
     de8:	d8c12015 	stw	r3,1152(sp)
     dec:	d8811f15 	stw	r2,1148(sp)
     df0:	010001c4 	movi	r4,7
     df4:	20833b16 	blt	r4,r2,1ae4 <___vfprintf_internal_r+0x1240>
     df8:	42000204 	addi	r8,r8,8
     dfc:	da813217 	ldw	r10,1224(sp)
     e00:	00802004 	movi	r2,128
     e04:	50828326 	beq	r10,r2,1814 <___vfprintf_internal_r+0xf70>
     e08:	da812e17 	ldw	r10,1208(sp)
     e0c:	a2a9c83a 	sub	r20,r20,r10
     e10:	05002d0e 	bge	zero,r20,ec8 <___vfprintf_internal_r+0x624>
     e14:	05800404 	movi	r22,16
     e18:	d8811f17 	ldw	r2,1148(sp)
     e1c:	05400074 	movhi	r21,1
     e20:	ad7c2f84 	addi	r21,r21,-3906
     e24:	b5001f0e 	bge	r22,r20,ea4 <___vfprintf_internal_r+0x600>
     e28:	8809883a 	mov	r4,r17
     e2c:	dc012d15 	stw	r16,1204(sp)
     e30:	a023883a 	mov	r17,r20
     e34:	070001c4 	movi	fp,7
     e38:	dc012c17 	ldw	r16,1200(sp)
     e3c:	2029883a 	mov	r20,r4
     e40:	00000306 	br	e50 <___vfprintf_internal_r+0x5ac>
     e44:	8c7ffc04 	addi	r17,r17,-16
     e48:	42000204 	addi	r8,r8,8
     e4c:	b440110e 	bge	r22,r17,e94 <___vfprintf_internal_r+0x5f0>
     e50:	18c00404 	addi	r3,r3,16
     e54:	10800044 	addi	r2,r2,1
     e58:	44c00015 	stw	r19,0(r8)
     e5c:	45800115 	stw	r22,4(r8)
     e60:	d8c12015 	stw	r3,1152(sp)
     e64:	d8811f15 	stw	r2,1148(sp)
     e68:	e0bff60e 	bge	fp,r2,e44 <__alt_data_end+0xfe000e44>
     e6c:	8009883a 	mov	r4,r16
     e70:	b80b883a 	mov	r5,r23
     e74:	d9811e04 	addi	r6,sp,1144
     e78:	000794c0 	call	794c <__sprint_r>
     e7c:	1000c71e 	bne	r2,zero,119c <___vfprintf_internal_r+0x8f8>
     e80:	8c7ffc04 	addi	r17,r17,-16
     e84:	d8c12017 	ldw	r3,1152(sp)
     e88:	d8811f17 	ldw	r2,1148(sp)
     e8c:	da000404 	addi	r8,sp,16
     e90:	b47fef16 	blt	r22,r17,e50 <__alt_data_end+0xfe000e50>
     e94:	dc012d17 	ldw	r16,1204(sp)
     e98:	a009883a 	mov	r4,r20
     e9c:	8829883a 	mov	r20,r17
     ea0:	2023883a 	mov	r17,r4
     ea4:	1d07883a 	add	r3,r3,r20
     ea8:	10800044 	addi	r2,r2,1
     eac:	45400015 	stw	r21,0(r8)
     eb0:	45000115 	stw	r20,4(r8)
     eb4:	d8c12015 	stw	r3,1152(sp)
     eb8:	d8811f15 	stw	r2,1148(sp)
     ebc:	010001c4 	movi	r4,7
     ec0:	2082f816 	blt	r4,r2,1aa4 <___vfprintf_internal_r+0x1200>
     ec4:	42000204 	addi	r8,r8,8
     ec8:	da812a17 	ldw	r10,1192(sp)
     ecc:	5080400c 	andi	r2,r10,256
     ed0:	1002061e 	bne	r2,zero,16ec <___vfprintf_internal_r+0xe48>
     ed4:	da812e17 	ldw	r10,1208(sp)
     ed8:	d8811f17 	ldw	r2,1148(sp)
     edc:	44000015 	stw	r16,0(r8)
     ee0:	1a87883a 	add	r3,r3,r10
     ee4:	10800044 	addi	r2,r2,1
     ee8:	42800115 	stw	r10,4(r8)
     eec:	d8c12015 	stw	r3,1152(sp)
     ef0:	d8811f15 	stw	r2,1148(sp)
     ef4:	010001c4 	movi	r4,7
     ef8:	2081dd16 	blt	r4,r2,1670 <___vfprintf_internal_r+0xdcc>
     efc:	42000204 	addi	r8,r8,8
     f00:	da812a17 	ldw	r10,1192(sp)
     f04:	5080010c 	andi	r2,r10,4
     f08:	10003226 	beq	r2,zero,fd4 <___vfprintf_internal_r+0x730>
     f0c:	da813017 	ldw	r10,1216(sp)
     f10:	d8812b17 	ldw	r2,1196(sp)
     f14:	50a1c83a 	sub	r16,r10,r2
     f18:	04002e0e 	bge	zero,r16,fd4 <___vfprintf_internal_r+0x730>
     f1c:	02800074 	movhi	r10,1
     f20:	52bc3384 	addi	r10,r10,-3890
     f24:	04800404 	movi	r18,16
     f28:	da813615 	stw	r10,1240(sp)
     f2c:	d8811f17 	ldw	r2,1148(sp)
     f30:	9400190e 	bge	r18,r16,f98 <___vfprintf_internal_r+0x6f4>
     f34:	050001c4 	movi	r20,7
     f38:	dd412c17 	ldw	r21,1200(sp)
     f3c:	00000306 	br	f4c <___vfprintf_internal_r+0x6a8>
     f40:	843ffc04 	addi	r16,r16,-16
     f44:	42000204 	addi	r8,r8,8
     f48:	9400130e 	bge	r18,r16,f98 <___vfprintf_internal_r+0x6f4>
     f4c:	18c00404 	addi	r3,r3,16
     f50:	10800044 	addi	r2,r2,1
     f54:	01000074 	movhi	r4,1
     f58:	213c3384 	addi	r4,r4,-3890
     f5c:	41000015 	stw	r4,0(r8)
     f60:	44800115 	stw	r18,4(r8)
     f64:	d8c12015 	stw	r3,1152(sp)
     f68:	d8811f15 	stw	r2,1148(sp)
     f6c:	a0bff40e 	bge	r20,r2,f40 <__alt_data_end+0xfe000f40>
     f70:	a809883a 	mov	r4,r21
     f74:	b80b883a 	mov	r5,r23
     f78:	d9811e04 	addi	r6,sp,1144
     f7c:	000794c0 	call	794c <__sprint_r>
     f80:	1000861e 	bne	r2,zero,119c <___vfprintf_internal_r+0x8f8>
     f84:	843ffc04 	addi	r16,r16,-16
     f88:	d8c12017 	ldw	r3,1152(sp)
     f8c:	d8811f17 	ldw	r2,1148(sp)
     f90:	da000404 	addi	r8,sp,16
     f94:	943fed16 	blt	r18,r16,f4c <__alt_data_end+0xfe000f4c>
     f98:	da813617 	ldw	r10,1240(sp)
     f9c:	1c07883a 	add	r3,r3,r16
     fa0:	10800044 	addi	r2,r2,1
     fa4:	42800015 	stw	r10,0(r8)
     fa8:	44000115 	stw	r16,4(r8)
     fac:	d8c12015 	stw	r3,1152(sp)
     fb0:	d8811f15 	stw	r2,1148(sp)
     fb4:	010001c4 	movi	r4,7
     fb8:	2080060e 	bge	r4,r2,fd4 <___vfprintf_internal_r+0x730>
     fbc:	d9012c17 	ldw	r4,1200(sp)
     fc0:	b80b883a 	mov	r5,r23
     fc4:	d9811e04 	addi	r6,sp,1144
     fc8:	000794c0 	call	794c <__sprint_r>
     fcc:	1000731e 	bne	r2,zero,119c <___vfprintf_internal_r+0x8f8>
     fd0:	d8c12017 	ldw	r3,1152(sp)
     fd4:	d8812b17 	ldw	r2,1196(sp)
     fd8:	da813017 	ldw	r10,1216(sp)
     fdc:	1280010e 	bge	r2,r10,fe4 <___vfprintf_internal_r+0x740>
     fe0:	5005883a 	mov	r2,r10
     fe4:	da813117 	ldw	r10,1220(sp)
     fe8:	5095883a 	add	r10,r10,r2
     fec:	da813115 	stw	r10,1220(sp)
     ff0:	18028b1e 	bne	r3,zero,1a20 <___vfprintf_internal_r+0x117c>
     ff4:	88800007 	ldb	r2,0(r17)
     ff8:	d8011f15 	stw	zero,1148(sp)
     ffc:	da000404 	addi	r8,sp,16
    1000:	103e691e 	bne	r2,zero,9a8 <__alt_data_end+0xfe0009a8>
    1004:	8821883a 	mov	r16,r17
    1008:	003e7f06 	br	a08 <__alt_data_end+0xfe000a08>
    100c:	da812a17 	ldw	r10,1192(sp)
    1010:	52800414 	ori	r10,r10,16
    1014:	da812a15 	stw	r10,1192(sp)
    1018:	da812a17 	ldw	r10,1192(sp)
    101c:	5080080c 	andi	r2,r10,32
    1020:	10006626 	beq	r2,zero,11bc <___vfprintf_internal_r+0x918>
    1024:	da812f17 	ldw	r10,1212(sp)
    1028:	0007883a 	mov	r3,zero
    102c:	55400017 	ldw	r21,0(r10)
    1030:	55800117 	ldw	r22,4(r10)
    1034:	52800204 	addi	r10,r10,8
    1038:	da812f15 	stw	r10,1212(sp)
    103c:	ad84b03a 	or	r2,r21,r22
    1040:	d8012785 	stb	zero,1182(sp)
    1044:	0039883a 	mov	fp,zero
    1048:	003ef106 	br	c10 <__alt_data_end+0xfe000c10>
    104c:	da813017 	ldw	r10,1216(sp)
    1050:	d8812f15 	stw	r2,1212(sp)
    1054:	0295c83a 	sub	r10,zero,r10
    1058:	da813015 	stw	r10,1216(sp)
    105c:	da812a17 	ldw	r10,1192(sp)
    1060:	52800114 	ori	r10,r10,4
    1064:	da812a15 	stw	r10,1192(sp)
    1068:	8c800007 	ldb	r18,0(r17)
    106c:	003e7306 	br	a3c <__alt_data_end+0xfe000a3c>
    1070:	d9012c17 	ldw	r4,1200(sp)
    1074:	b80b883a 	mov	r5,r23
    1078:	00028a40 	call	28a4 <__swsetup_r>
    107c:	10002d1e 	bne	r2,zero,1134 <___vfprintf_internal_r+0x890>
    1080:	b880030b 	ldhu	r2,12(r23)
    1084:	01000284 	movi	r4,10
    1088:	1007883a 	mov	r3,r2
    108c:	18c0068c 	andi	r3,r3,26
    1090:	193e2f1e 	bne	r3,r4,950 <__alt_data_end+0xfe000950>
    1094:	b8c0038b 	ldhu	r3,14(r23)
    1098:	193fffcc 	andi	r4,r3,65535
    109c:	2120001c 	xori	r4,r4,32768
    10a0:	21200004 	addi	r4,r4,-32768
    10a4:	203e2a16 	blt	r4,zero,950 <__alt_data_end+0xfe000950>
    10a8:	bac01917 	ldw	r11,100(r23)
    10ac:	ba800717 	ldw	r10,28(r23)
    10b0:	ba400917 	ldw	r9,36(r23)
    10b4:	d9012c17 	ldw	r4,1200(sp)
    10b8:	d9c12f17 	ldw	r7,1212(sp)
    10bc:	10bfff4c 	andi	r2,r2,65533
    10c0:	02010004 	movi	r8,1024
    10c4:	d881070d 	sth	r2,1052(sp)
    10c8:	d9410404 	addi	r5,sp,1040
    10cc:	d8800404 	addi	r2,sp,16
    10d0:	880d883a 	mov	r6,r17
    10d4:	dac11d15 	stw	r11,1140(sp)
    10d8:	d8c1078d 	sth	r3,1054(sp)
    10dc:	da810b15 	stw	r10,1068(sp)
    10e0:	da410d15 	stw	r9,1076(sp)
    10e4:	d8810415 	stw	r2,1040(sp)
    10e8:	d8810815 	stw	r2,1056(sp)
    10ec:	da010615 	stw	r8,1048(sp)
    10f0:	da010915 	stw	r8,1060(sp)
    10f4:	d8010a15 	stw	zero,1064(sp)
    10f8:	00008a40 	call	8a4 <___vfprintf_internal_r>
    10fc:	1021883a 	mov	r16,r2
    1100:	10000416 	blt	r2,zero,1114 <___vfprintf_internal_r+0x870>
    1104:	d9012c17 	ldw	r4,1200(sp)
    1108:	d9410404 	addi	r5,sp,1040
    110c:	000421c0 	call	421c <_fflush_r>
    1110:	1005cc1e 	bne	r2,zero,2844 <___vfprintf_internal_r+0x1fa0>
    1114:	d881070b 	ldhu	r2,1052(sp)
    1118:	1080100c 	andi	r2,r2,64
    111c:	10000326 	beq	r2,zero,112c <___vfprintf_internal_r+0x888>
    1120:	b880030b 	ldhu	r2,12(r23)
    1124:	10801014 	ori	r2,r2,64
    1128:	b880030d 	sth	r2,12(r23)
    112c:	8005883a 	mov	r2,r16
    1130:	00000106 	br	1138 <___vfprintf_internal_r+0x894>
    1134:	00bfffc4 	movi	r2,-1
    1138:	dfc14917 	ldw	ra,1316(sp)
    113c:	df014817 	ldw	fp,1312(sp)
    1140:	ddc14717 	ldw	r23,1308(sp)
    1144:	dd814617 	ldw	r22,1304(sp)
    1148:	dd414517 	ldw	r21,1300(sp)
    114c:	dd014417 	ldw	r20,1296(sp)
    1150:	dcc14317 	ldw	r19,1292(sp)
    1154:	dc814217 	ldw	r18,1288(sp)
    1158:	dc414117 	ldw	r17,1284(sp)
    115c:	dc014017 	ldw	r16,1280(sp)
    1160:	dec14a04 	addi	sp,sp,1320
    1164:	f800283a 	ret
    1168:	d9012c17 	ldw	r4,1200(sp)
    116c:	b80b883a 	mov	r5,r23
    1170:	d9811e04 	addi	r6,sp,1144
    1174:	000794c0 	call	794c <__sprint_r>
    1178:	1000081e 	bne	r2,zero,119c <___vfprintf_internal_r+0x8f8>
    117c:	da000404 	addi	r8,sp,16
    1180:	003e1e06 	br	9fc <__alt_data_end+0xfe0009fc>
    1184:	d8812017 	ldw	r2,1152(sp)
    1188:	10000426 	beq	r2,zero,119c <___vfprintf_internal_r+0x8f8>
    118c:	d9012c17 	ldw	r4,1200(sp)
    1190:	b80b883a 	mov	r5,r23
    1194:	d9811e04 	addi	r6,sp,1144
    1198:	000794c0 	call	794c <__sprint_r>
    119c:	b880030b 	ldhu	r2,12(r23)
    11a0:	1080100c 	andi	r2,r2,64
    11a4:	103fe31e 	bne	r2,zero,1134 <__alt_data_end+0xfe001134>
    11a8:	d8813117 	ldw	r2,1220(sp)
    11ac:	003fe206 	br	1138 <__alt_data_end+0xfe001138>
    11b0:	5009883a 	mov	r4,r10
    11b4:	00045280 	call	4528 <__sinit>
    11b8:	003dd306 	br	908 <__alt_data_end+0xfe000908>
    11bc:	da812a17 	ldw	r10,1192(sp)
    11c0:	5080040c 	andi	r2,r10,16
    11c4:	1003d926 	beq	r2,zero,212c <___vfprintf_internal_r+0x1888>
    11c8:	da812f17 	ldw	r10,1212(sp)
    11cc:	55400017 	ldw	r21,0(r10)
    11d0:	52800104 	addi	r10,r10,4
    11d4:	002d883a 	mov	r22,zero
    11d8:	da812f15 	stw	r10,1212(sp)
    11dc:	0007883a 	mov	r3,zero
    11e0:	a805883a 	mov	r2,r21
    11e4:	003f9606 	br	1040 <__alt_data_end+0xfe001040>
    11e8:	da812f17 	ldw	r10,1212(sp)
    11ec:	00c00044 	movi	r3,1
    11f0:	55400017 	ldw	r21,0(r10)
    11f4:	55800117 	ldw	r22,4(r10)
    11f8:	52800204 	addi	r10,r10,8
    11fc:	da812f15 	stw	r10,1212(sp)
    1200:	ad84b03a 	or	r2,r21,r22
    1204:	003f8e06 	br	1040 <__alt_data_end+0xfe001040>
    1208:	d8013015 	stw	zero,1216(sp)
    120c:	90bff404 	addi	r2,r18,-48
    1210:	000b883a 	mov	r5,zero
    1214:	8c800007 	ldb	r18,0(r17)
    1218:	294002a4 	muli	r5,r5,10
    121c:	8c400044 	addi	r17,r17,1
    1220:	8815883a 	mov	r10,r17
    1224:	288b883a 	add	r5,r5,r2
    1228:	90bff404 	addi	r2,r18,-48
    122c:	20bff92e 	bgeu	r4,r2,1214 <__alt_data_end+0xfe001214>
    1230:	d9413015 	stw	r5,1216(sp)
    1234:	5023883a 	mov	r17,r10
    1238:	003e0106 	br	a40 <__alt_data_end+0xfe000a40>
    123c:	da812f17 	ldw	r10,1212(sp)
    1240:	00800c04 	movi	r2,48
    1244:	d8812705 	stb	r2,1180(sp)
    1248:	55400017 	ldw	r21,0(r10)
    124c:	da812a17 	ldw	r10,1192(sp)
    1250:	00801e04 	movi	r2,120
    1254:	d8812745 	stb	r2,1181(sp)
    1258:	52800094 	ori	r10,r10,2
    125c:	da812a15 	stw	r10,1192(sp)
    1260:	da812f17 	ldw	r10,1212(sp)
    1264:	002d883a 	mov	r22,zero
    1268:	00c00084 	movi	r3,2
    126c:	52800104 	addi	r10,r10,4
    1270:	da812f15 	stw	r10,1212(sp)
    1274:	02800074 	movhi	r10,1
    1278:	52bc2804 	addi	r10,r10,-3936
    127c:	da813b15 	stw	r10,1260(sp)
    1280:	04801e04 	movi	r18,120
    1284:	a805883a 	mov	r2,r21
    1288:	003f6d06 	br	1040 <__alt_data_end+0xfe001040>
    128c:	da812a17 	ldw	r10,1192(sp)
    1290:	52800814 	ori	r10,r10,32
    1294:	da812a15 	stw	r10,1192(sp)
    1298:	8c800007 	ldb	r18,0(r17)
    129c:	003de706 	br	a3c <__alt_data_end+0xfe000a3c>
    12a0:	da812a17 	ldw	r10,1192(sp)
    12a4:	d9812785 	stb	r6,1182(sp)
    12a8:	52800414 	ori	r10,r10,16
    12ac:	da812a15 	stw	r10,1192(sp)
    12b0:	da812a17 	ldw	r10,1192(sp)
    12b4:	5080080c 	andi	r2,r10,32
    12b8:	10005e26 	beq	r2,zero,1434 <___vfprintf_internal_r+0xb90>
    12bc:	da812f17 	ldw	r10,1212(sp)
    12c0:	50800117 	ldw	r2,4(r10)
    12c4:	55400017 	ldw	r21,0(r10)
    12c8:	52800204 	addi	r10,r10,8
    12cc:	da812f15 	stw	r10,1212(sp)
    12d0:	102d883a 	mov	r22,r2
    12d4:	10030516 	blt	r2,zero,1eec <___vfprintf_internal_r+0x1648>
    12d8:	df012783 	ldbu	fp,1182(sp)
    12dc:	00c00044 	movi	r3,1
    12e0:	ad84b03a 	or	r2,r21,r22
    12e4:	003e4a06 	br	c10 <__alt_data_end+0xfe000c10>
    12e8:	da812f17 	ldw	r10,1212(sp)
    12ec:	d9812785 	stb	r6,1182(sp)
    12f0:	04000044 	movi	r16,1
    12f4:	52800017 	ldw	r10,0(r10)
    12f8:	da813715 	stw	r10,1244(sp)
    12fc:	da812f17 	ldw	r10,1212(sp)
    1300:	d9013717 	ldw	r4,1244(sp)
    1304:	52800117 	ldw	r10,4(r10)
    1308:	da013f15 	stw	r8,1276(sp)
    130c:	da813915 	stw	r10,1252(sp)
    1310:	da812f17 	ldw	r10,1212(sp)
    1314:	d9413917 	ldw	r5,1252(sp)
    1318:	52800204 	addi	r10,r10,8
    131c:	da812f15 	stw	r10,1212(sp)
    1320:	00075a40 	call	75a4 <__fpclassifyd>
    1324:	da013f17 	ldw	r8,1276(sp)
    1328:	d9013717 	ldw	r4,1244(sp)
    132c:	d9413917 	ldw	r5,1252(sp)
    1330:	1402f71e 	bne	r2,r16,1f10 <___vfprintf_internal_r+0x166c>
    1334:	000d883a 	mov	r6,zero
    1338:	000f883a 	mov	r7,zero
    133c:	000b5200 	call	b520 <__ledf2>
    1340:	da013f17 	ldw	r8,1276(sp)
    1344:	10045a16 	blt	r2,zero,24b0 <___vfprintf_internal_r+0x1c0c>
    1348:	df012783 	ldbu	fp,1182(sp)
    134c:	008011c4 	movi	r2,71
    1350:	1483ef0e 	bge	r2,r18,2310 <___vfprintf_internal_r+0x1a6c>
    1354:	04000074 	movhi	r16,1
    1358:	843c2004 	addi	r16,r16,-3968
    135c:	da812a17 	ldw	r10,1192(sp)
    1360:	00bfdfc4 	movi	r2,-129
    1364:	00c000c4 	movi	r3,3
    1368:	5094703a 	and	r10,r10,r2
    136c:	d8c12b15 	stw	r3,1196(sp)
    1370:	da812a15 	stw	r10,1192(sp)
    1374:	d8c12e15 	stw	r3,1208(sp)
    1378:	0029883a 	mov	r20,zero
    137c:	d8013315 	stw	zero,1228(sp)
    1380:	003e3906 	br	c68 <__alt_data_end+0xfe000c68>
    1384:	02800074 	movhi	r10,1
    1388:	52bc2804 	addi	r10,r10,-3936
    138c:	da813b15 	stw	r10,1260(sp)
    1390:	da812a17 	ldw	r10,1192(sp)
    1394:	d9812785 	stb	r6,1182(sp)
    1398:	5080080c 	andi	r2,r10,32
    139c:	10001826 	beq	r2,zero,1400 <___vfprintf_internal_r+0xb5c>
    13a0:	da812f17 	ldw	r10,1212(sp)
    13a4:	55400017 	ldw	r21,0(r10)
    13a8:	55800117 	ldw	r22,4(r10)
    13ac:	52800204 	addi	r10,r10,8
    13b0:	da812f15 	stw	r10,1212(sp)
    13b4:	da812a17 	ldw	r10,1192(sp)
    13b8:	5080004c 	andi	r2,r10,1
    13bc:	10025826 	beq	r2,zero,1d20 <___vfprintf_internal_r+0x147c>
    13c0:	ad84b03a 	or	r2,r21,r22
    13c4:	10035126 	beq	r2,zero,210c <___vfprintf_internal_r+0x1868>
    13c8:	00c00c04 	movi	r3,48
    13cc:	52800094 	ori	r10,r10,2
    13d0:	d8c12705 	stb	r3,1180(sp)
    13d4:	dc812745 	stb	r18,1181(sp)
    13d8:	da812a15 	stw	r10,1192(sp)
    13dc:	00c00084 	movi	r3,2
    13e0:	003f1706 	br	1040 <__alt_data_end+0xfe001040>
    13e4:	02800074 	movhi	r10,1
    13e8:	52bc2304 	addi	r10,r10,-3956
    13ec:	da813b15 	stw	r10,1260(sp)
    13f0:	da812a17 	ldw	r10,1192(sp)
    13f4:	d9812785 	stb	r6,1182(sp)
    13f8:	5080080c 	andi	r2,r10,32
    13fc:	103fe81e 	bne	r2,zero,13a0 <__alt_data_end+0xfe0013a0>
    1400:	da812a17 	ldw	r10,1192(sp)
    1404:	5080040c 	andi	r2,r10,16
    1408:	10033726 	beq	r2,zero,20e8 <___vfprintf_internal_r+0x1844>
    140c:	da812f17 	ldw	r10,1212(sp)
    1410:	002d883a 	mov	r22,zero
    1414:	55400017 	ldw	r21,0(r10)
    1418:	52800104 	addi	r10,r10,4
    141c:	da812f15 	stw	r10,1212(sp)
    1420:	003fe406 	br	13b4 <__alt_data_end+0xfe0013b4>
    1424:	da812a17 	ldw	r10,1192(sp)
    1428:	d9812785 	stb	r6,1182(sp)
    142c:	5080080c 	andi	r2,r10,32
    1430:	103fa21e 	bne	r2,zero,12bc <__alt_data_end+0xfe0012bc>
    1434:	da812a17 	ldw	r10,1192(sp)
    1438:	5080040c 	andi	r2,r10,16
    143c:	10034126 	beq	r2,zero,2144 <___vfprintf_internal_r+0x18a0>
    1440:	da812f17 	ldw	r10,1212(sp)
    1444:	55400017 	ldw	r21,0(r10)
    1448:	52800104 	addi	r10,r10,4
    144c:	da812f15 	stw	r10,1212(sp)
    1450:	a82dd7fa 	srai	r22,r21,31
    1454:	b005883a 	mov	r2,r22
    1458:	003f9e06 	br	12d4 <__alt_data_end+0xfe0012d4>
    145c:	da812a17 	ldw	r10,1192(sp)
    1460:	52801014 	ori	r10,r10,64
    1464:	da812a15 	stw	r10,1192(sp)
    1468:	8c800007 	ldb	r18,0(r17)
    146c:	003d7306 	br	a3c <__alt_data_end+0xfe000a3c>
    1470:	da812a17 	ldw	r10,1192(sp)
    1474:	52800054 	ori	r10,r10,1
    1478:	da812a15 	stw	r10,1192(sp)
    147c:	8c800007 	ldb	r18,0(r17)
    1480:	003d6e06 	br	a3c <__alt_data_end+0xfe000a3c>
    1484:	da812f17 	ldw	r10,1212(sp)
    1488:	52800017 	ldw	r10,0(r10)
    148c:	da813015 	stw	r10,1216(sp)
    1490:	da812f17 	ldw	r10,1212(sp)
    1494:	50800104 	addi	r2,r10,4
    1498:	da813017 	ldw	r10,1216(sp)
    149c:	503eeb16 	blt	r10,zero,104c <__alt_data_end+0xfe00104c>
    14a0:	d8812f15 	stw	r2,1212(sp)
    14a4:	8c800007 	ldb	r18,0(r17)
    14a8:	003d6406 	br	a3c <__alt_data_end+0xfe000a3c>
    14ac:	01800ac4 	movi	r6,43
    14b0:	8c800007 	ldb	r18,0(r17)
    14b4:	003d6106 	br	a3c <__alt_data_end+0xfe000a3c>
    14b8:	da812a17 	ldw	r10,1192(sp)
    14bc:	52802014 	ori	r10,r10,128
    14c0:	da812a15 	stw	r10,1192(sp)
    14c4:	8c800007 	ldb	r18,0(r17)
    14c8:	003d5c06 	br	a3c <__alt_data_end+0xfe000a3c>
    14cc:	30803fcc 	andi	r2,r6,255
    14d0:	1080201c 	xori	r2,r2,128
    14d4:	10bfe004 	addi	r2,r2,-128
    14d8:	1003011e 	bne	r2,zero,20e0 <___vfprintf_internal_r+0x183c>
    14dc:	01800804 	movi	r6,32
    14e0:	8c800007 	ldb	r18,0(r17)
    14e4:	003d5506 	br	a3c <__alt_data_end+0xfe000a3c>
    14e8:	8c800007 	ldb	r18,0(r17)
    14ec:	8805883a 	mov	r2,r17
    14f0:	91c39526 	beq	r18,r7,2348 <___vfprintf_internal_r+0x1aa4>
    14f4:	da812a17 	ldw	r10,1192(sp)
    14f8:	52800414 	ori	r10,r10,16
    14fc:	da812a15 	stw	r10,1192(sp)
    1500:	003d4e06 	br	a3c <__alt_data_end+0xfe000a3c>
    1504:	da812a17 	ldw	r10,1192(sp)
    1508:	d9812785 	stb	r6,1182(sp)
    150c:	5080080c 	andi	r2,r10,32
    1510:	1002df26 	beq	r2,zero,2090 <___vfprintf_internal_r+0x17ec>
    1514:	da812f17 	ldw	r10,1212(sp)
    1518:	50800017 	ldw	r2,0(r10)
    151c:	da813117 	ldw	r10,1220(sp)
    1520:	5007d7fa 	srai	r3,r10,31
    1524:	da812f17 	ldw	r10,1212(sp)
    1528:	10c00115 	stw	r3,4(r2)
    152c:	52800104 	addi	r10,r10,4
    1530:	da812f15 	stw	r10,1212(sp)
    1534:	da813117 	ldw	r10,1220(sp)
    1538:	12800015 	stw	r10,0(r2)
    153c:	003d1806 	br	9a0 <__alt_data_end+0xfe0009a0>
    1540:	da812f17 	ldw	r10,1212(sp)
    1544:	d8012785 	stb	zero,1182(sp)
    1548:	54000017 	ldw	r16,0(r10)
    154c:	55400104 	addi	r21,r10,4
    1550:	8003c926 	beq	r16,zero,2478 <___vfprintf_internal_r+0x1bd4>
    1554:	8009883a 	mov	r4,r16
    1558:	a0039616 	blt	r20,zero,23b4 <___vfprintf_internal_r+0x1b10>
    155c:	000b883a 	mov	r5,zero
    1560:	a00d883a 	mov	r6,r20
    1564:	da013f15 	stw	r8,1276(sp)
    1568:	0005c840 	call	5c84 <memchr>
    156c:	da013f17 	ldw	r8,1276(sp)
    1570:	10043126 	beq	r2,zero,2638 <___vfprintf_internal_r+0x1d94>
    1574:	1405c83a 	sub	r2,r2,r16
    1578:	d8812e15 	stw	r2,1208(sp)
    157c:	a0834e16 	blt	r20,r2,22b8 <___vfprintf_internal_r+0x1a14>
    1580:	d8812e17 	ldw	r2,1208(sp)
    1584:	10039016 	blt	r2,zero,23c8 <___vfprintf_internal_r+0x1b24>
    1588:	df012783 	ldbu	fp,1182(sp)
    158c:	d8812b15 	stw	r2,1196(sp)
    1590:	dd412f15 	stw	r21,1212(sp)
    1594:	0029883a 	mov	r20,zero
    1598:	d8013315 	stw	zero,1228(sp)
    159c:	003db206 	br	c68 <__alt_data_end+0xfe000c68>
    15a0:	da812a17 	ldw	r10,1192(sp)
    15a4:	52800214 	ori	r10,r10,8
    15a8:	da812a15 	stw	r10,1192(sp)
    15ac:	8c800007 	ldb	r18,0(r17)
    15b0:	003d2206 	br	a3c <__alt_data_end+0xfe000a3c>
    15b4:	da812f17 	ldw	r10,1212(sp)
    15b8:	00c00044 	movi	r3,1
    15bc:	d8c12b15 	stw	r3,1196(sp)
    15c0:	50800017 	ldw	r2,0(r10)
    15c4:	52800104 	addi	r10,r10,4
    15c8:	d8012785 	stb	zero,1182(sp)
    15cc:	d8810405 	stb	r2,1040(sp)
    15d0:	da812f15 	stw	r10,1212(sp)
    15d4:	d8c12e15 	stw	r3,1208(sp)
    15d8:	0029883a 	mov	r20,zero
    15dc:	d8013315 	stw	zero,1228(sp)
    15e0:	dc010404 	addi	r16,sp,1040
    15e4:	0005883a 	mov	r2,zero
    15e8:	003da606 	br	c84 <__alt_data_end+0xfe000c84>
    15ec:	8c800007 	ldb	r18,0(r17)
    15f0:	89400044 	addi	r5,r17,1
    15f4:	92448326 	beq	r18,r9,2804 <___vfprintf_internal_r+0x1f60>
    15f8:	90bff404 	addi	r2,r18,-48
    15fc:	2823883a 	mov	r17,r5
    1600:	0029883a 	mov	r20,zero
    1604:	20bd0e36 	bltu	r4,r2,a40 <__alt_data_end+0xfe000a40>
    1608:	8c800007 	ldb	r18,0(r17)
    160c:	a50002a4 	muli	r20,r20,10
    1610:	8c400044 	addi	r17,r17,1
    1614:	1529883a 	add	r20,r2,r20
    1618:	90bff404 	addi	r2,r18,-48
    161c:	20bffa2e 	bgeu	r4,r2,1608 <__alt_data_end+0xfe001608>
    1620:	a03d070e 	bge	r20,zero,a40 <__alt_data_end+0xfe000a40>
    1624:	053fffc4 	movi	r20,-1
    1628:	003d0506 	br	a40 <__alt_data_end+0xfe000a40>
    162c:	d9812785 	stb	r6,1182(sp)
    1630:	903ed426 	beq	r18,zero,1184 <__alt_data_end+0xfe001184>
    1634:	00c00044 	movi	r3,1
    1638:	d8c12b15 	stw	r3,1196(sp)
    163c:	dc810405 	stb	r18,1040(sp)
    1640:	d8012785 	stb	zero,1182(sp)
    1644:	003fe306 	br	15d4 <__alt_data_end+0xfe0015d4>
    1648:	d8c12017 	ldw	r3,1152(sp)
    164c:	003dd006 	br	d90 <__alt_data_end+0xfe000d90>
    1650:	45400015 	stw	r21,0(r8)
    1654:	44000115 	stw	r16,4(r8)
    1658:	1c07883a 	add	r3,r3,r16
    165c:	10800044 	addi	r2,r2,1
    1660:	d8c12015 	stw	r3,1152(sp)
    1664:	d8811f15 	stw	r2,1148(sp)
    1668:	010001c4 	movi	r4,7
    166c:	20be230e 	bge	r4,r2,efc <__alt_data_end+0xfe000efc>
    1670:	d9012c17 	ldw	r4,1200(sp)
    1674:	b80b883a 	mov	r5,r23
    1678:	d9811e04 	addi	r6,sp,1144
    167c:	000794c0 	call	794c <__sprint_r>
    1680:	103ec61e 	bne	r2,zero,119c <__alt_data_end+0xfe00119c>
    1684:	d8c12017 	ldw	r3,1152(sp)
    1688:	da000404 	addi	r8,sp,16
    168c:	003e1c06 	br	f00 <__alt_data_end+0xfe000f00>
    1690:	18803fcc 	andi	r2,r3,255
    1694:	00c00044 	movi	r3,1
    1698:	10c11a26 	beq	r2,r3,1b04 <___vfprintf_internal_r+0x1260>
    169c:	00c00084 	movi	r3,2
    16a0:	10c0e51e 	bne	r2,r3,1a38 <___vfprintf_internal_r+0x1194>
    16a4:	d9413b17 	ldw	r5,1260(sp)
    16a8:	d8c10dc4 	addi	r3,sp,1079
    16ac:	a88003cc 	andi	r2,r21,15
    16b0:	b008973a 	slli	r4,r22,28
    16b4:	2885883a 	add	r2,r5,r2
    16b8:	a82ad13a 	srli	r21,r21,4
    16bc:	10800003 	ldbu	r2,0(r2)
    16c0:	b02cd13a 	srli	r22,r22,4
    16c4:	256ab03a 	or	r21,r4,r21
    16c8:	18800005 	stb	r2,0(r3)
    16cc:	ad84b03a 	or	r2,r21,r22
    16d0:	1821883a 	mov	r16,r3
    16d4:	18ffffc4 	addi	r3,r3,-1
    16d8:	103ff41e 	bne	r2,zero,16ac <__alt_data_end+0xfe0016ac>
    16dc:	da812917 	ldw	r10,1188(sp)
    16e0:	5415c83a 	sub	r10,r10,r16
    16e4:	da812e15 	stw	r10,1208(sp)
    16e8:	003d5a06 	br	c54 <__alt_data_end+0xfe000c54>
    16ec:	00801944 	movi	r2,101
    16f0:	14807e0e 	bge	r2,r18,18ec <___vfprintf_internal_r+0x1048>
    16f4:	d9013717 	ldw	r4,1244(sp)
    16f8:	d9413917 	ldw	r5,1252(sp)
    16fc:	000d883a 	mov	r6,zero
    1700:	000f883a 	mov	r7,zero
    1704:	d8c13e15 	stw	r3,1272(sp)
    1708:	da013f15 	stw	r8,1276(sp)
    170c:	000b3c40 	call	b3c4 <__eqdf2>
    1710:	d8c13e17 	ldw	r3,1272(sp)
    1714:	da013f17 	ldw	r8,1276(sp)
    1718:	1001221e 	bne	r2,zero,1ba4 <___vfprintf_internal_r+0x1300>
    171c:	d8811f17 	ldw	r2,1148(sp)
    1720:	01000074 	movhi	r4,1
    1724:	213c2f04 	addi	r4,r4,-3908
    1728:	18c00044 	addi	r3,r3,1
    172c:	10800044 	addi	r2,r2,1
    1730:	41000015 	stw	r4,0(r8)
    1734:	01000044 	movi	r4,1
    1738:	41000115 	stw	r4,4(r8)
    173c:	d8c12015 	stw	r3,1152(sp)
    1740:	d8811f15 	stw	r2,1148(sp)
    1744:	010001c4 	movi	r4,7
    1748:	20829616 	blt	r4,r2,21a4 <___vfprintf_internal_r+0x1900>
    174c:	42000204 	addi	r8,r8,8
    1750:	d8812617 	ldw	r2,1176(sp)
    1754:	da813517 	ldw	r10,1236(sp)
    1758:	12800316 	blt	r2,r10,1768 <___vfprintf_internal_r+0xec4>
    175c:	da812a17 	ldw	r10,1192(sp)
    1760:	5080004c 	andi	r2,r10,1
    1764:	103de626 	beq	r2,zero,f00 <__alt_data_end+0xfe000f00>
    1768:	da813817 	ldw	r10,1248(sp)
    176c:	d8811f17 	ldw	r2,1148(sp)
    1770:	010001c4 	movi	r4,7
    1774:	1a87883a 	add	r3,r3,r10
    1778:	da813417 	ldw	r10,1232(sp)
    177c:	10800044 	addi	r2,r2,1
    1780:	d8c12015 	stw	r3,1152(sp)
    1784:	42800015 	stw	r10,0(r8)
    1788:	da813817 	ldw	r10,1248(sp)
    178c:	d8811f15 	stw	r2,1148(sp)
    1790:	42800115 	stw	r10,4(r8)
    1794:	2082f216 	blt	r4,r2,2360 <___vfprintf_internal_r+0x1abc>
    1798:	42000204 	addi	r8,r8,8
    179c:	da813517 	ldw	r10,1236(sp)
    17a0:	543fffc4 	addi	r16,r10,-1
    17a4:	043dd60e 	bge	zero,r16,f00 <__alt_data_end+0xfe000f00>
    17a8:	04800404 	movi	r18,16
    17ac:	d8811f17 	ldw	r2,1148(sp)
    17b0:	05400074 	movhi	r21,1
    17b4:	ad7c2f84 	addi	r21,r21,-3906
    17b8:	943fa50e 	bge	r18,r16,1650 <__alt_data_end+0xfe001650>
    17bc:	050001c4 	movi	r20,7
    17c0:	dd812c17 	ldw	r22,1200(sp)
    17c4:	00000306 	br	17d4 <___vfprintf_internal_r+0xf30>
    17c8:	42000204 	addi	r8,r8,8
    17cc:	843ffc04 	addi	r16,r16,-16
    17d0:	943f9f0e 	bge	r18,r16,1650 <__alt_data_end+0xfe001650>
    17d4:	18c00404 	addi	r3,r3,16
    17d8:	10800044 	addi	r2,r2,1
    17dc:	44c00015 	stw	r19,0(r8)
    17e0:	44800115 	stw	r18,4(r8)
    17e4:	d8c12015 	stw	r3,1152(sp)
    17e8:	d8811f15 	stw	r2,1148(sp)
    17ec:	a0bff60e 	bge	r20,r2,17c8 <__alt_data_end+0xfe0017c8>
    17f0:	b009883a 	mov	r4,r22
    17f4:	b80b883a 	mov	r5,r23
    17f8:	d9811e04 	addi	r6,sp,1144
    17fc:	000794c0 	call	794c <__sprint_r>
    1800:	103e661e 	bne	r2,zero,119c <__alt_data_end+0xfe00119c>
    1804:	d8c12017 	ldw	r3,1152(sp)
    1808:	d8811f17 	ldw	r2,1148(sp)
    180c:	da000404 	addi	r8,sp,16
    1810:	003fee06 	br	17cc <__alt_data_end+0xfe0017cc>
    1814:	da813017 	ldw	r10,1216(sp)
    1818:	d8812b17 	ldw	r2,1196(sp)
    181c:	50adc83a 	sub	r22,r10,r2
    1820:	05bd790e 	bge	zero,r22,e08 <__alt_data_end+0xfe000e08>
    1824:	07000404 	movi	fp,16
    1828:	d8811f17 	ldw	r2,1148(sp)
    182c:	05400074 	movhi	r21,1
    1830:	ad7c2f84 	addi	r21,r21,-3906
    1834:	e580230e 	bge	fp,r22,18c4 <___vfprintf_internal_r+0x1020>
    1838:	a809883a 	mov	r4,r21
    183c:	dc012d15 	stw	r16,1204(sp)
    1840:	882b883a 	mov	r21,r17
    1844:	01c001c4 	movi	r7,7
    1848:	b023883a 	mov	r17,r22
    184c:	dc012c17 	ldw	r16,1200(sp)
    1850:	202d883a 	mov	r22,r4
    1854:	00000306 	br	1864 <___vfprintf_internal_r+0xfc0>
    1858:	8c7ffc04 	addi	r17,r17,-16
    185c:	42000204 	addi	r8,r8,8
    1860:	e440130e 	bge	fp,r17,18b0 <___vfprintf_internal_r+0x100c>
    1864:	18c00404 	addi	r3,r3,16
    1868:	10800044 	addi	r2,r2,1
    186c:	44c00015 	stw	r19,0(r8)
    1870:	47000115 	stw	fp,4(r8)
    1874:	d8c12015 	stw	r3,1152(sp)
    1878:	d8811f15 	stw	r2,1148(sp)
    187c:	38bff60e 	bge	r7,r2,1858 <__alt_data_end+0xfe001858>
    1880:	8009883a 	mov	r4,r16
    1884:	b80b883a 	mov	r5,r23
    1888:	d9811e04 	addi	r6,sp,1144
    188c:	d9c13e15 	stw	r7,1272(sp)
    1890:	000794c0 	call	794c <__sprint_r>
    1894:	d9c13e17 	ldw	r7,1272(sp)
    1898:	103e401e 	bne	r2,zero,119c <__alt_data_end+0xfe00119c>
    189c:	8c7ffc04 	addi	r17,r17,-16
    18a0:	d8c12017 	ldw	r3,1152(sp)
    18a4:	d8811f17 	ldw	r2,1148(sp)
    18a8:	da000404 	addi	r8,sp,16
    18ac:	e47fed16 	blt	fp,r17,1864 <__alt_data_end+0xfe001864>
    18b0:	dc012d17 	ldw	r16,1204(sp)
    18b4:	b009883a 	mov	r4,r22
    18b8:	882d883a 	mov	r22,r17
    18bc:	a823883a 	mov	r17,r21
    18c0:	202b883a 	mov	r21,r4
    18c4:	1d87883a 	add	r3,r3,r22
    18c8:	10800044 	addi	r2,r2,1
    18cc:	45400015 	stw	r21,0(r8)
    18d0:	45800115 	stw	r22,4(r8)
    18d4:	d8c12015 	stw	r3,1152(sp)
    18d8:	d8811f15 	stw	r2,1148(sp)
    18dc:	010001c4 	movi	r4,7
    18e0:	20817a16 	blt	r4,r2,1ecc <___vfprintf_internal_r+0x1628>
    18e4:	42000204 	addi	r8,r8,8
    18e8:	003d4706 	br	e08 <__alt_data_end+0xfe000e08>
    18ec:	da813517 	ldw	r10,1236(sp)
    18f0:	00800044 	movi	r2,1
    18f4:	1280350e 	bge	r2,r10,19cc <___vfprintf_internal_r+0x1128>
    18f8:	dc811f17 	ldw	r18,1148(sp)
    18fc:	00800044 	movi	r2,1
    1900:	18c00044 	addi	r3,r3,1
    1904:	94800044 	addi	r18,r18,1
    1908:	40800115 	stw	r2,4(r8)
    190c:	44000015 	stw	r16,0(r8)
    1910:	d8c12015 	stw	r3,1152(sp)
    1914:	dc811f15 	stw	r18,1148(sp)
    1918:	008001c4 	movi	r2,7
    191c:	14814e16 	blt	r2,r18,1e58 <___vfprintf_internal_r+0x15b4>
    1920:	42000204 	addi	r8,r8,8
    1924:	da813817 	ldw	r10,1248(sp)
    1928:	94800044 	addi	r18,r18,1
    192c:	dc811f15 	stw	r18,1148(sp)
    1930:	1aad883a 	add	r22,r3,r10
    1934:	da813417 	ldw	r10,1232(sp)
    1938:	dd812015 	stw	r22,1152(sp)
    193c:	008001c4 	movi	r2,7
    1940:	42800015 	stw	r10,0(r8)
    1944:	da813817 	ldw	r10,1248(sp)
    1948:	42800115 	stw	r10,4(r8)
    194c:	14814b16 	blt	r2,r18,1e7c <___vfprintf_internal_r+0x15d8>
    1950:	45000204 	addi	r20,r8,8
    1954:	d9013717 	ldw	r4,1244(sp)
    1958:	d9413917 	ldw	r5,1252(sp)
    195c:	000d883a 	mov	r6,zero
    1960:	000f883a 	mov	r7,zero
    1964:	000b3c40 	call	b3c4 <__eqdf2>
    1968:	da813517 	ldw	r10,1236(sp)
    196c:	1000cc26 	beq	r2,zero,1ca0 <___vfprintf_internal_r+0x13fc>
    1970:	50bfffc4 	addi	r2,r10,-1
    1974:	b0ad883a 	add	r22,r22,r2
    1978:	84000044 	addi	r16,r16,1
    197c:	94800044 	addi	r18,r18,1
    1980:	a0800115 	stw	r2,4(r20)
    1984:	a4000015 	stw	r16,0(r20)
    1988:	dd812015 	stw	r22,1152(sp)
    198c:	dc811f15 	stw	r18,1148(sp)
    1990:	008001c4 	movi	r2,7
    1994:	14801916 	blt	r2,r18,19fc <___vfprintf_internal_r+0x1158>
    1998:	a5000204 	addi	r20,r20,8
    199c:	da813a17 	ldw	r10,1256(sp)
    19a0:	d88122c4 	addi	r2,sp,1163
    19a4:	94800044 	addi	r18,r18,1
    19a8:	5587883a 	add	r3,r10,r22
    19ac:	a0800015 	stw	r2,0(r20)
    19b0:	a2800115 	stw	r10,4(r20)
    19b4:	d8c12015 	stw	r3,1152(sp)
    19b8:	dc811f15 	stw	r18,1148(sp)
    19bc:	008001c4 	movi	r2,7
    19c0:	14bf2b16 	blt	r2,r18,1670 <__alt_data_end+0xfe001670>
    19c4:	a2000204 	addi	r8,r20,8
    19c8:	003d4d06 	br	f00 <__alt_data_end+0xfe000f00>
    19cc:	da812a17 	ldw	r10,1192(sp)
    19d0:	5088703a 	and	r4,r10,r2
    19d4:	203fc81e 	bne	r4,zero,18f8 <__alt_data_end+0xfe0018f8>
    19d8:	dc811f17 	ldw	r18,1148(sp)
    19dc:	1d800044 	addi	r22,r3,1
    19e0:	40800115 	stw	r2,4(r8)
    19e4:	94800044 	addi	r18,r18,1
    19e8:	44000015 	stw	r16,0(r8)
    19ec:	dd812015 	stw	r22,1152(sp)
    19f0:	dc811f15 	stw	r18,1148(sp)
    19f4:	008001c4 	movi	r2,7
    19f8:	1482480e 	bge	r2,r18,231c <___vfprintf_internal_r+0x1a78>
    19fc:	d9012c17 	ldw	r4,1200(sp)
    1a00:	b80b883a 	mov	r5,r23
    1a04:	d9811e04 	addi	r6,sp,1144
    1a08:	000794c0 	call	794c <__sprint_r>
    1a0c:	103de31e 	bne	r2,zero,119c <__alt_data_end+0xfe00119c>
    1a10:	dd812017 	ldw	r22,1152(sp)
    1a14:	dc811f17 	ldw	r18,1148(sp)
    1a18:	dd000404 	addi	r20,sp,16
    1a1c:	003fdf06 	br	199c <__alt_data_end+0xfe00199c>
    1a20:	d9012c17 	ldw	r4,1200(sp)
    1a24:	b80b883a 	mov	r5,r23
    1a28:	d9811e04 	addi	r6,sp,1144
    1a2c:	000794c0 	call	794c <__sprint_r>
    1a30:	103d7026 	beq	r2,zero,ff4 <__alt_data_end+0xfe000ff4>
    1a34:	003dd906 	br	119c <__alt_data_end+0xfe00119c>
    1a38:	d8c10dc4 	addi	r3,sp,1079
    1a3c:	a808d0fa 	srli	r4,r21,3
    1a40:	b00a977a 	slli	r5,r22,29
    1a44:	b02cd0fa 	srli	r22,r22,3
    1a48:	ad4001cc 	andi	r21,r21,7
    1a4c:	a8800c04 	addi	r2,r21,48
    1a50:	292ab03a 	or	r21,r5,r4
    1a54:	18800005 	stb	r2,0(r3)
    1a58:	ad88b03a 	or	r4,r21,r22
    1a5c:	1821883a 	mov	r16,r3
    1a60:	18ffffc4 	addi	r3,r3,-1
    1a64:	203ff51e 	bne	r4,zero,1a3c <__alt_data_end+0xfe001a3c>
    1a68:	da812a17 	ldw	r10,1192(sp)
    1a6c:	800b883a 	mov	r5,r16
    1a70:	5100004c 	andi	r4,r10,1
    1a74:	20000726 	beq	r4,zero,1a94 <___vfprintf_internal_r+0x11f0>
    1a78:	10803fcc 	andi	r2,r2,255
    1a7c:	1080201c 	xori	r2,r2,128
    1a80:	10bfe004 	addi	r2,r2,-128
    1a84:	01000c04 	movi	r4,48
    1a88:	113f1426 	beq	r2,r4,16dc <__alt_data_end+0xfe0016dc>
    1a8c:	1821883a 	mov	r16,r3
    1a90:	293fffc5 	stb	r4,-1(r5)
    1a94:	d8c12917 	ldw	r3,1188(sp)
    1a98:	1c07c83a 	sub	r3,r3,r16
    1a9c:	d8c12e15 	stw	r3,1208(sp)
    1aa0:	003c6c06 	br	c54 <__alt_data_end+0xfe000c54>
    1aa4:	d9012c17 	ldw	r4,1200(sp)
    1aa8:	b80b883a 	mov	r5,r23
    1aac:	d9811e04 	addi	r6,sp,1144
    1ab0:	000794c0 	call	794c <__sprint_r>
    1ab4:	103db91e 	bne	r2,zero,119c <__alt_data_end+0xfe00119c>
    1ab8:	d8c12017 	ldw	r3,1152(sp)
    1abc:	da000404 	addi	r8,sp,16
    1ac0:	003d0106 	br	ec8 <__alt_data_end+0xfe000ec8>
    1ac4:	d9012c17 	ldw	r4,1200(sp)
    1ac8:	b80b883a 	mov	r5,r23
    1acc:	d9811e04 	addi	r6,sp,1144
    1ad0:	000794c0 	call	794c <__sprint_r>
    1ad4:	103db11e 	bne	r2,zero,119c <__alt_data_end+0xfe00119c>
    1ad8:	d8c12017 	ldw	r3,1152(sp)
    1adc:	da000404 	addi	r8,sp,16
    1ae0:	003cb806 	br	dc4 <__alt_data_end+0xfe000dc4>
    1ae4:	d9012c17 	ldw	r4,1200(sp)
    1ae8:	b80b883a 	mov	r5,r23
    1aec:	d9811e04 	addi	r6,sp,1144
    1af0:	000794c0 	call	794c <__sprint_r>
    1af4:	103da91e 	bne	r2,zero,119c <__alt_data_end+0xfe00119c>
    1af8:	d8c12017 	ldw	r3,1152(sp)
    1afc:	da000404 	addi	r8,sp,16
    1b00:	003cbe06 	br	dfc <__alt_data_end+0xfe000dfc>
    1b04:	b000021e 	bne	r22,zero,1b10 <___vfprintf_internal_r+0x126c>
    1b08:	00800244 	movi	r2,9
    1b0c:	15401c2e 	bgeu	r2,r21,1b80 <___vfprintf_internal_r+0x12dc>
    1b10:	dc412b15 	stw	r17,1196(sp)
    1b14:	d8810dc4 	addi	r2,sp,1079
    1b18:	b023883a 	mov	r17,r22
    1b1c:	402d883a 	mov	r22,r8
    1b20:	a809883a 	mov	r4,r21
    1b24:	880b883a 	mov	r5,r17
    1b28:	01800284 	movi	r6,10
    1b2c:	000f883a 	mov	r7,zero
    1b30:	1021883a 	mov	r16,r2
    1b34:	0009bc80 	call	9bc8 <__umoddi3>
    1b38:	10800c04 	addi	r2,r2,48
    1b3c:	a809883a 	mov	r4,r21
    1b40:	880b883a 	mov	r5,r17
    1b44:	80800005 	stb	r2,0(r16)
    1b48:	01800284 	movi	r6,10
    1b4c:	000f883a 	mov	r7,zero
    1b50:	00096040 	call	9604 <__udivdi3>
    1b54:	1823883a 	mov	r17,r3
    1b58:	10c6b03a 	or	r3,r2,r3
    1b5c:	102b883a 	mov	r21,r2
    1b60:	80bfffc4 	addi	r2,r16,-1
    1b64:	183fee1e 	bne	r3,zero,1b20 <__alt_data_end+0xfe001b20>
    1b68:	d8c12917 	ldw	r3,1188(sp)
    1b6c:	b011883a 	mov	r8,r22
    1b70:	dc412b17 	ldw	r17,1196(sp)
    1b74:	1c07c83a 	sub	r3,r3,r16
    1b78:	d8c12e15 	stw	r3,1208(sp)
    1b7c:	003c3506 	br	c54 <__alt_data_end+0xfe000c54>
    1b80:	da813d17 	ldw	r10,1268(sp)
    1b84:	ad400c04 	addi	r21,r21,48
    1b88:	dd410dc5 	stb	r21,1079(sp)
    1b8c:	da812e15 	stw	r10,1208(sp)
    1b90:	dc010dc4 	addi	r16,sp,1079
    1b94:	003c2f06 	br	c54 <__alt_data_end+0xfe000c54>
    1b98:	d8012e15 	stw	zero,1208(sp)
    1b9c:	dc010e04 	addi	r16,sp,1080
    1ba0:	003c2c06 	br	c54 <__alt_data_end+0xfe000c54>
    1ba4:	d8812617 	ldw	r2,1176(sp)
    1ba8:	0081860e 	bge	zero,r2,21c4 <___vfprintf_internal_r+0x1920>
    1bac:	da813517 	ldw	r10,1236(sp)
    1bb0:	82a5883a 	add	r18,r16,r10
    1bb4:	da813317 	ldw	r10,1228(sp)
    1bb8:	9429c83a 	sub	r20,r18,r16
    1bbc:	5500010e 	bge	r10,r20,1bc4 <___vfprintf_internal_r+0x1320>
    1bc0:	5029883a 	mov	r20,r10
    1bc4:	05000a0e 	bge	zero,r20,1bf0 <___vfprintf_internal_r+0x134c>
    1bc8:	d8811f17 	ldw	r2,1148(sp)
    1bcc:	1d07883a 	add	r3,r3,r20
    1bd0:	44000015 	stw	r16,0(r8)
    1bd4:	10800044 	addi	r2,r2,1
    1bd8:	45000115 	stw	r20,4(r8)
    1bdc:	d8c12015 	stw	r3,1152(sp)
    1be0:	d8811f15 	stw	r2,1148(sp)
    1be4:	010001c4 	movi	r4,7
    1be8:	2081fb16 	blt	r4,r2,23d8 <___vfprintf_internal_r+0x1b34>
    1bec:	42000204 	addi	r8,r8,8
    1bf0:	a001f716 	blt	r20,zero,23d0 <___vfprintf_internal_r+0x1b2c>
    1bf4:	da813317 	ldw	r10,1228(sp)
    1bf8:	5529c83a 	sub	r20,r10,r20
    1bfc:	0500520e 	bge	zero,r20,1d48 <___vfprintf_internal_r+0x14a4>
    1c00:	05800404 	movi	r22,16
    1c04:	d8811f17 	ldw	r2,1148(sp)
    1c08:	05400074 	movhi	r21,1
    1c0c:	ad7c2f84 	addi	r21,r21,-3906
    1c10:	b5015a0e 	bge	r22,r20,217c <___vfprintf_internal_r+0x18d8>
    1c14:	8809883a 	mov	r4,r17
    1c18:	dc012e15 	stw	r16,1208(sp)
    1c1c:	a023883a 	mov	r17,r20
    1c20:	070001c4 	movi	fp,7
    1c24:	dc012c17 	ldw	r16,1200(sp)
    1c28:	2029883a 	mov	r20,r4
    1c2c:	00000306 	br	1c3c <___vfprintf_internal_r+0x1398>
    1c30:	42000204 	addi	r8,r8,8
    1c34:	8c7ffc04 	addi	r17,r17,-16
    1c38:	b4414c0e 	bge	r22,r17,216c <___vfprintf_internal_r+0x18c8>
    1c3c:	18c00404 	addi	r3,r3,16
    1c40:	10800044 	addi	r2,r2,1
    1c44:	44c00015 	stw	r19,0(r8)
    1c48:	45800115 	stw	r22,4(r8)
    1c4c:	d8c12015 	stw	r3,1152(sp)
    1c50:	d8811f15 	stw	r2,1148(sp)
    1c54:	e0bff60e 	bge	fp,r2,1c30 <__alt_data_end+0xfe001c30>
    1c58:	8009883a 	mov	r4,r16
    1c5c:	b80b883a 	mov	r5,r23
    1c60:	d9811e04 	addi	r6,sp,1144
    1c64:	000794c0 	call	794c <__sprint_r>
    1c68:	103d4c1e 	bne	r2,zero,119c <__alt_data_end+0xfe00119c>
    1c6c:	d8c12017 	ldw	r3,1152(sp)
    1c70:	d8811f17 	ldw	r2,1148(sp)
    1c74:	da000404 	addi	r8,sp,16
    1c78:	003fee06 	br	1c34 <__alt_data_end+0xfe001c34>
    1c7c:	d9012c17 	ldw	r4,1200(sp)
    1c80:	b80b883a 	mov	r5,r23
    1c84:	d9811e04 	addi	r6,sp,1144
    1c88:	000794c0 	call	794c <__sprint_r>
    1c8c:	103d431e 	bne	r2,zero,119c <__alt_data_end+0xfe00119c>
    1c90:	d8c12017 	ldw	r3,1152(sp)
    1c94:	d8812787 	ldb	r2,1182(sp)
    1c98:	da000404 	addi	r8,sp,16
    1c9c:	003c3c06 	br	d90 <__alt_data_end+0xfe000d90>
    1ca0:	543fffc4 	addi	r16,r10,-1
    1ca4:	043f3d0e 	bge	zero,r16,199c <__alt_data_end+0xfe00199c>
    1ca8:	07000404 	movi	fp,16
    1cac:	05400074 	movhi	r21,1
    1cb0:	ad7c2f84 	addi	r21,r21,-3906
    1cb4:	e4007c0e 	bge	fp,r16,1ea8 <___vfprintf_internal_r+0x1604>
    1cb8:	dc412e15 	stw	r17,1208(sp)
    1cbc:	00c001c4 	movi	r3,7
    1cc0:	8023883a 	mov	r17,r16
    1cc4:	dc012c17 	ldw	r16,1200(sp)
    1cc8:	00000306 	br	1cd8 <___vfprintf_internal_r+0x1434>
    1ccc:	a5000204 	addi	r20,r20,8
    1cd0:	8c7ffc04 	addi	r17,r17,-16
    1cd4:	e440720e 	bge	fp,r17,1ea0 <___vfprintf_internal_r+0x15fc>
    1cd8:	b5800404 	addi	r22,r22,16
    1cdc:	94800044 	addi	r18,r18,1
    1ce0:	a4c00015 	stw	r19,0(r20)
    1ce4:	a7000115 	stw	fp,4(r20)
    1ce8:	dd812015 	stw	r22,1152(sp)
    1cec:	dc811f15 	stw	r18,1148(sp)
    1cf0:	1cbff60e 	bge	r3,r18,1ccc <__alt_data_end+0xfe001ccc>
    1cf4:	8009883a 	mov	r4,r16
    1cf8:	b80b883a 	mov	r5,r23
    1cfc:	d9811e04 	addi	r6,sp,1144
    1d00:	d8c13e15 	stw	r3,1272(sp)
    1d04:	000794c0 	call	794c <__sprint_r>
    1d08:	d8c13e17 	ldw	r3,1272(sp)
    1d0c:	103d231e 	bne	r2,zero,119c <__alt_data_end+0xfe00119c>
    1d10:	dd812017 	ldw	r22,1152(sp)
    1d14:	dc811f17 	ldw	r18,1148(sp)
    1d18:	dd000404 	addi	r20,sp,16
    1d1c:	003fec06 	br	1cd0 <__alt_data_end+0xfe001cd0>
    1d20:	00c00084 	movi	r3,2
    1d24:	ad84b03a 	or	r2,r21,r22
    1d28:	003cc506 	br	1040 <__alt_data_end+0xfe001040>
    1d2c:	d9012c17 	ldw	r4,1200(sp)
    1d30:	b80b883a 	mov	r5,r23
    1d34:	d9811e04 	addi	r6,sp,1144
    1d38:	000794c0 	call	794c <__sprint_r>
    1d3c:	103d171e 	bne	r2,zero,119c <__alt_data_end+0xfe00119c>
    1d40:	d8c12017 	ldw	r3,1152(sp)
    1d44:	da000404 	addi	r8,sp,16
    1d48:	da813317 	ldw	r10,1228(sp)
    1d4c:	d8812617 	ldw	r2,1176(sp)
    1d50:	82a1883a 	add	r16,r16,r10
    1d54:	da813517 	ldw	r10,1236(sp)
    1d58:	12800316 	blt	r2,r10,1d68 <___vfprintf_internal_r+0x14c4>
    1d5c:	da812a17 	ldw	r10,1192(sp)
    1d60:	5100004c 	andi	r4,r10,1
    1d64:	20000d26 	beq	r4,zero,1d9c <___vfprintf_internal_r+0x14f8>
    1d68:	da813817 	ldw	r10,1248(sp)
    1d6c:	d9011f17 	ldw	r4,1148(sp)
    1d70:	014001c4 	movi	r5,7
    1d74:	1a87883a 	add	r3,r3,r10
    1d78:	da813417 	ldw	r10,1232(sp)
    1d7c:	21000044 	addi	r4,r4,1
    1d80:	d8c12015 	stw	r3,1152(sp)
    1d84:	42800015 	stw	r10,0(r8)
    1d88:	da813817 	ldw	r10,1248(sp)
    1d8c:	d9011f15 	stw	r4,1148(sp)
    1d90:	42800115 	stw	r10,4(r8)
    1d94:	2901a216 	blt	r5,r4,2420 <___vfprintf_internal_r+0x1b7c>
    1d98:	42000204 	addi	r8,r8,8
    1d9c:	da813517 	ldw	r10,1236(sp)
    1da0:	9425c83a 	sub	r18,r18,r16
    1da4:	5085c83a 	sub	r2,r10,r2
    1da8:	1029883a 	mov	r20,r2
    1dac:	9080010e 	bge	r18,r2,1db4 <___vfprintf_internal_r+0x1510>
    1db0:	9029883a 	mov	r20,r18
    1db4:	05000a0e 	bge	zero,r20,1de0 <___vfprintf_internal_r+0x153c>
    1db8:	d9011f17 	ldw	r4,1148(sp)
    1dbc:	1d07883a 	add	r3,r3,r20
    1dc0:	44000015 	stw	r16,0(r8)
    1dc4:	21000044 	addi	r4,r4,1
    1dc8:	45000115 	stw	r20,4(r8)
    1dcc:	d8c12015 	stw	r3,1152(sp)
    1dd0:	d9011f15 	stw	r4,1148(sp)
    1dd4:	014001c4 	movi	r5,7
    1dd8:	29019c16 	blt	r5,r4,244c <___vfprintf_internal_r+0x1ba8>
    1ddc:	42000204 	addi	r8,r8,8
    1de0:	a0019816 	blt	r20,zero,2444 <___vfprintf_internal_r+0x1ba0>
    1de4:	1521c83a 	sub	r16,r2,r20
    1de8:	043c450e 	bge	zero,r16,f00 <__alt_data_end+0xfe000f00>
    1dec:	04800404 	movi	r18,16
    1df0:	d8811f17 	ldw	r2,1148(sp)
    1df4:	05400074 	movhi	r21,1
    1df8:	ad7c2f84 	addi	r21,r21,-3906
    1dfc:	943e140e 	bge	r18,r16,1650 <__alt_data_end+0xfe001650>
    1e00:	050001c4 	movi	r20,7
    1e04:	dd812c17 	ldw	r22,1200(sp)
    1e08:	00000306 	br	1e18 <___vfprintf_internal_r+0x1574>
    1e0c:	42000204 	addi	r8,r8,8
    1e10:	843ffc04 	addi	r16,r16,-16
    1e14:	943e0e0e 	bge	r18,r16,1650 <__alt_data_end+0xfe001650>
    1e18:	18c00404 	addi	r3,r3,16
    1e1c:	10800044 	addi	r2,r2,1
    1e20:	44c00015 	stw	r19,0(r8)
    1e24:	44800115 	stw	r18,4(r8)
    1e28:	d8c12015 	stw	r3,1152(sp)
    1e2c:	d8811f15 	stw	r2,1148(sp)
    1e30:	a0bff60e 	bge	r20,r2,1e0c <__alt_data_end+0xfe001e0c>
    1e34:	b009883a 	mov	r4,r22
    1e38:	b80b883a 	mov	r5,r23
    1e3c:	d9811e04 	addi	r6,sp,1144
    1e40:	000794c0 	call	794c <__sprint_r>
    1e44:	103cd51e 	bne	r2,zero,119c <__alt_data_end+0xfe00119c>
    1e48:	d8c12017 	ldw	r3,1152(sp)
    1e4c:	d8811f17 	ldw	r2,1148(sp)
    1e50:	da000404 	addi	r8,sp,16
    1e54:	003fee06 	br	1e10 <__alt_data_end+0xfe001e10>
    1e58:	d9012c17 	ldw	r4,1200(sp)
    1e5c:	b80b883a 	mov	r5,r23
    1e60:	d9811e04 	addi	r6,sp,1144
    1e64:	000794c0 	call	794c <__sprint_r>
    1e68:	103ccc1e 	bne	r2,zero,119c <__alt_data_end+0xfe00119c>
    1e6c:	d8c12017 	ldw	r3,1152(sp)
    1e70:	dc811f17 	ldw	r18,1148(sp)
    1e74:	da000404 	addi	r8,sp,16
    1e78:	003eaa06 	br	1924 <__alt_data_end+0xfe001924>
    1e7c:	d9012c17 	ldw	r4,1200(sp)
    1e80:	b80b883a 	mov	r5,r23
    1e84:	d9811e04 	addi	r6,sp,1144
    1e88:	000794c0 	call	794c <__sprint_r>
    1e8c:	103cc31e 	bne	r2,zero,119c <__alt_data_end+0xfe00119c>
    1e90:	dd812017 	ldw	r22,1152(sp)
    1e94:	dc811f17 	ldw	r18,1148(sp)
    1e98:	dd000404 	addi	r20,sp,16
    1e9c:	003ead06 	br	1954 <__alt_data_end+0xfe001954>
    1ea0:	8821883a 	mov	r16,r17
    1ea4:	dc412e17 	ldw	r17,1208(sp)
    1ea8:	b42d883a 	add	r22,r22,r16
    1eac:	94800044 	addi	r18,r18,1
    1eb0:	a5400015 	stw	r21,0(r20)
    1eb4:	a4000115 	stw	r16,4(r20)
    1eb8:	dd812015 	stw	r22,1152(sp)
    1ebc:	dc811f15 	stw	r18,1148(sp)
    1ec0:	008001c4 	movi	r2,7
    1ec4:	14beb40e 	bge	r2,r18,1998 <__alt_data_end+0xfe001998>
    1ec8:	003ecc06 	br	19fc <__alt_data_end+0xfe0019fc>
    1ecc:	d9012c17 	ldw	r4,1200(sp)
    1ed0:	b80b883a 	mov	r5,r23
    1ed4:	d9811e04 	addi	r6,sp,1144
    1ed8:	000794c0 	call	794c <__sprint_r>
    1edc:	103caf1e 	bne	r2,zero,119c <__alt_data_end+0xfe00119c>
    1ee0:	d8c12017 	ldw	r3,1152(sp)
    1ee4:	da000404 	addi	r8,sp,16
    1ee8:	003bc706 	br	e08 <__alt_data_end+0xfe000e08>
    1eec:	056bc83a 	sub	r21,zero,r21
    1ef0:	a804c03a 	cmpne	r2,r21,zero
    1ef4:	05adc83a 	sub	r22,zero,r22
    1ef8:	07000b44 	movi	fp,45
    1efc:	b0adc83a 	sub	r22,r22,r2
    1f00:	df012785 	stb	fp,1182(sp)
    1f04:	00c00044 	movi	r3,1
    1f08:	ad84b03a 	or	r2,r21,r22
    1f0c:	003b4006 	br	c10 <__alt_data_end+0xfe000c10>
    1f10:	da013f15 	stw	r8,1276(sp)
    1f14:	00075a40 	call	75a4 <__fpclassifyd>
    1f18:	da013f17 	ldw	r8,1276(sp)
    1f1c:	1000e826 	beq	r2,zero,22c0 <___vfprintf_internal_r+0x1a1c>
    1f20:	05bff7c4 	movi	r22,-33
    1f24:	00bfffc4 	movi	r2,-1
    1f28:	95ac703a 	and	r22,r18,r22
    1f2c:	a081d626 	beq	r20,r2,2688 <___vfprintf_internal_r+0x1de4>
    1f30:	008011c4 	movi	r2,71
    1f34:	b081d126 	beq	r22,r2,267c <___vfprintf_internal_r+0x1dd8>
    1f38:	d8c12a17 	ldw	r3,1192(sp)
    1f3c:	da813917 	ldw	r10,1252(sp)
    1f40:	18c04014 	ori	r3,r3,256
    1f44:	d8c12d15 	stw	r3,1204(sp)
    1f48:	5001d116 	blt	r10,zero,2690 <___vfprintf_internal_r+0x1dec>
    1f4c:	dd413917 	ldw	r21,1252(sp)
    1f50:	d8012b05 	stb	zero,1196(sp)
    1f54:	00801984 	movi	r2,102
    1f58:	90816926 	beq	r18,r2,2500 <___vfprintf_internal_r+0x1c5c>
    1f5c:	00801184 	movi	r2,70
    1f60:	90816726 	beq	r18,r2,2500 <___vfprintf_internal_r+0x1c5c>
    1f64:	00801144 	movi	r2,69
    1f68:	b081cd26 	beq	r22,r2,26a0 <___vfprintf_internal_r+0x1dfc>
    1f6c:	a039883a 	mov	fp,r20
    1f70:	d8812604 	addi	r2,sp,1176
    1f74:	d8800115 	stw	r2,4(sp)
    1f78:	d9012c17 	ldw	r4,1200(sp)
    1f7c:	d8812504 	addi	r2,sp,1172
    1f80:	d9413717 	ldw	r5,1244(sp)
    1f84:	d8800215 	stw	r2,8(sp)
    1f88:	d8812104 	addi	r2,sp,1156
    1f8c:	df000015 	stw	fp,0(sp)
    1f90:	d8800315 	stw	r2,12(sp)
    1f94:	a80d883a 	mov	r6,r21
    1f98:	01c00084 	movi	r7,2
    1f9c:	da013f15 	stw	r8,1276(sp)
    1fa0:	0002be00 	call	2be0 <_dtoa_r>
    1fa4:	1021883a 	mov	r16,r2
    1fa8:	008019c4 	movi	r2,103
    1fac:	da013f17 	ldw	r8,1276(sp)
    1fb0:	90800226 	beq	r18,r2,1fbc <___vfprintf_internal_r+0x1718>
    1fb4:	008011c4 	movi	r2,71
    1fb8:	9080031e 	bne	r18,r2,1fc8 <___vfprintf_internal_r+0x1724>
    1fbc:	da812a17 	ldw	r10,1192(sp)
    1fc0:	5080004c 	andi	r2,r10,1
    1fc4:	1001e926 	beq	r2,zero,276c <___vfprintf_internal_r+0x1ec8>
    1fc8:	00801184 	movi	r2,70
    1fcc:	8713883a 	add	r9,r16,fp
    1fd0:	b0815e26 	beq	r22,r2,254c <___vfprintf_internal_r+0x1ca8>
    1fd4:	d9013717 	ldw	r4,1244(sp)
    1fd8:	a80b883a 	mov	r5,r21
    1fdc:	000d883a 	mov	r6,zero
    1fe0:	000f883a 	mov	r7,zero
    1fe4:	da013f15 	stw	r8,1276(sp)
    1fe8:	da413e15 	stw	r9,1272(sp)
    1fec:	000b3c40 	call	b3c4 <__eqdf2>
    1ff0:	da013f17 	ldw	r8,1276(sp)
    1ff4:	da413e17 	ldw	r9,1272(sp)
    1ff8:	10015226 	beq	r2,zero,2544 <___vfprintf_internal_r+0x1ca0>
    1ffc:	d8812117 	ldw	r2,1156(sp)
    2000:	1240062e 	bgeu	r2,r9,201c <___vfprintf_internal_r+0x1778>
    2004:	01000c04 	movi	r4,48
    2008:	10c00044 	addi	r3,r2,1
    200c:	d8c12115 	stw	r3,1156(sp)
    2010:	11000005 	stb	r4,0(r2)
    2014:	d8812117 	ldw	r2,1156(sp)
    2018:	127ffb36 	bltu	r2,r9,2008 <__alt_data_end+0xfe002008>
    201c:	1405c83a 	sub	r2,r2,r16
    2020:	d8813515 	stw	r2,1236(sp)
    2024:	008011c4 	movi	r2,71
    2028:	b0812c26 	beq	r22,r2,24dc <___vfprintf_internal_r+0x1c38>
    202c:	00801944 	movi	r2,101
    2030:	1482060e 	bge	r2,r18,284c <___vfprintf_internal_r+0x1fa8>
    2034:	00801984 	movi	r2,102
    2038:	9081ce26 	beq	r18,r2,2774 <___vfprintf_internal_r+0x1ed0>
    203c:	da812617 	ldw	r10,1176(sp)
    2040:	da813315 	stw	r10,1228(sp)
    2044:	d8c13317 	ldw	r3,1228(sp)
    2048:	da813517 	ldw	r10,1236(sp)
    204c:	1a819616 	blt	r3,r10,26a8 <___vfprintf_internal_r+0x1e04>
    2050:	da812a17 	ldw	r10,1192(sp)
    2054:	5080004c 	andi	r2,r10,1
    2058:	10019c1e 	bne	r2,zero,26cc <___vfprintf_internal_r+0x1e28>
    205c:	1805883a 	mov	r2,r3
    2060:	18020516 	blt	r3,zero,2878 <___vfprintf_internal_r+0x1fd4>
    2064:	d8c13317 	ldw	r3,1228(sp)
    2068:	048019c4 	movi	r18,103
    206c:	d8c12e15 	stw	r3,1208(sp)
    2070:	df012b07 	ldb	fp,1196(sp)
    2074:	e001111e 	bne	fp,zero,24bc <___vfprintf_internal_r+0x1c18>
    2078:	d8c12d17 	ldw	r3,1204(sp)
    207c:	df012783 	ldbu	fp,1182(sp)
    2080:	d8812b15 	stw	r2,1196(sp)
    2084:	d8c12a15 	stw	r3,1192(sp)
    2088:	0029883a 	mov	r20,zero
    208c:	003af606 	br	c68 <__alt_data_end+0xfe000c68>
    2090:	da812a17 	ldw	r10,1192(sp)
    2094:	5080040c 	andi	r2,r10,16
    2098:	10000a1e 	bne	r2,zero,20c4 <___vfprintf_internal_r+0x1820>
    209c:	da812a17 	ldw	r10,1192(sp)
    20a0:	5080100c 	andi	r2,r10,64
    20a4:	10000726 	beq	r2,zero,20c4 <___vfprintf_internal_r+0x1820>
    20a8:	da812f17 	ldw	r10,1212(sp)
    20ac:	50800017 	ldw	r2,0(r10)
    20b0:	52800104 	addi	r10,r10,4
    20b4:	da812f15 	stw	r10,1212(sp)
    20b8:	da813117 	ldw	r10,1220(sp)
    20bc:	1280000d 	sth	r10,0(r2)
    20c0:	003a3706 	br	9a0 <__alt_data_end+0xfe0009a0>
    20c4:	da812f17 	ldw	r10,1212(sp)
    20c8:	50800017 	ldw	r2,0(r10)
    20cc:	52800104 	addi	r10,r10,4
    20d0:	da812f15 	stw	r10,1212(sp)
    20d4:	da813117 	ldw	r10,1220(sp)
    20d8:	12800015 	stw	r10,0(r2)
    20dc:	003a3006 	br	9a0 <__alt_data_end+0xfe0009a0>
    20e0:	8c800007 	ldb	r18,0(r17)
    20e4:	003a5506 	br	a3c <__alt_data_end+0xfe000a3c>
    20e8:	da812a17 	ldw	r10,1192(sp)
    20ec:	5080100c 	andi	r2,r10,64
    20f0:	da812f17 	ldw	r10,1212(sp)
    20f4:	10008126 	beq	r2,zero,22fc <___vfprintf_internal_r+0x1a58>
    20f8:	5540000b 	ldhu	r21,0(r10)
    20fc:	52800104 	addi	r10,r10,4
    2100:	002d883a 	mov	r22,zero
    2104:	da812f15 	stw	r10,1212(sp)
    2108:	003caa06 	br	13b4 <__alt_data_end+0xfe0013b4>
    210c:	00c00084 	movi	r3,2
    2110:	003bcb06 	br	1040 <__alt_data_end+0xfe001040>
    2114:	da812a17 	ldw	r10,1192(sp)
    2118:	5080100c 	andi	r2,r10,64
    211c:	da812f17 	ldw	r10,1212(sp)
    2120:	103ab326 	beq	r2,zero,bf0 <__alt_data_end+0xfe000bf0>
    2124:	5540000b 	ldhu	r21,0(r10)
    2128:	003ab206 	br	bf4 <__alt_data_end+0xfe000bf4>
    212c:	da812a17 	ldw	r10,1192(sp)
    2130:	5080100c 	andi	r2,r10,64
    2134:	da812f17 	ldw	r10,1212(sp)
    2138:	103c2426 	beq	r2,zero,11cc <__alt_data_end+0xfe0011cc>
    213c:	5540000b 	ldhu	r21,0(r10)
    2140:	003c2306 	br	11d0 <__alt_data_end+0xfe0011d0>
    2144:	da812a17 	ldw	r10,1192(sp)
    2148:	5080100c 	andi	r2,r10,64
    214c:	da812f17 	ldw	r10,1212(sp)
    2150:	103cbc26 	beq	r2,zero,1444 <__alt_data_end+0xfe001444>
    2154:	5540000f 	ldh	r21,0(r10)
    2158:	52800104 	addi	r10,r10,4
    215c:	da812f15 	stw	r10,1212(sp)
    2160:	a82dd7fa 	srai	r22,r21,31
    2164:	b005883a 	mov	r2,r22
    2168:	003c5a06 	br	12d4 <__alt_data_end+0xfe0012d4>
    216c:	dc012e17 	ldw	r16,1208(sp)
    2170:	a009883a 	mov	r4,r20
    2174:	8829883a 	mov	r20,r17
    2178:	2023883a 	mov	r17,r4
    217c:	1d07883a 	add	r3,r3,r20
    2180:	10800044 	addi	r2,r2,1
    2184:	45400015 	stw	r21,0(r8)
    2188:	45000115 	stw	r20,4(r8)
    218c:	d8c12015 	stw	r3,1152(sp)
    2190:	d8811f15 	stw	r2,1148(sp)
    2194:	010001c4 	movi	r4,7
    2198:	20bee416 	blt	r4,r2,1d2c <__alt_data_end+0xfe001d2c>
    219c:	42000204 	addi	r8,r8,8
    21a0:	003ee906 	br	1d48 <__alt_data_end+0xfe001d48>
    21a4:	d9012c17 	ldw	r4,1200(sp)
    21a8:	b80b883a 	mov	r5,r23
    21ac:	d9811e04 	addi	r6,sp,1144
    21b0:	000794c0 	call	794c <__sprint_r>
    21b4:	103bf91e 	bne	r2,zero,119c <__alt_data_end+0xfe00119c>
    21b8:	d8c12017 	ldw	r3,1152(sp)
    21bc:	da000404 	addi	r8,sp,16
    21c0:	003d6306 	br	1750 <__alt_data_end+0xfe001750>
    21c4:	d9011f17 	ldw	r4,1148(sp)
    21c8:	01400074 	movhi	r5,1
    21cc:	297c2f04 	addi	r5,r5,-3908
    21d0:	18c00044 	addi	r3,r3,1
    21d4:	21000044 	addi	r4,r4,1
    21d8:	41400015 	stw	r5,0(r8)
    21dc:	01400044 	movi	r5,1
    21e0:	41400115 	stw	r5,4(r8)
    21e4:	d8c12015 	stw	r3,1152(sp)
    21e8:	d9011f15 	stw	r4,1148(sp)
    21ec:	014001c4 	movi	r5,7
    21f0:	29004c16 	blt	r5,r4,2324 <___vfprintf_internal_r+0x1a80>
    21f4:	42000204 	addi	r8,r8,8
    21f8:	1025883a 	mov	r18,r2
    21fc:	9000051e 	bne	r18,zero,2214 <___vfprintf_internal_r+0x1970>
    2200:	da813517 	ldw	r10,1236(sp)
    2204:	5000031e 	bne	r10,zero,2214 <___vfprintf_internal_r+0x1970>
    2208:	da812a17 	ldw	r10,1192(sp)
    220c:	5080004c 	andi	r2,r10,1
    2210:	103b3b26 	beq	r2,zero,f00 <__alt_data_end+0xfe000f00>
    2214:	da813817 	ldw	r10,1248(sp)
    2218:	d8811f17 	ldw	r2,1148(sp)
    221c:	010001c4 	movi	r4,7
    2220:	1a87883a 	add	r3,r3,r10
    2224:	da813417 	ldw	r10,1232(sp)
    2228:	10800044 	addi	r2,r2,1
    222c:	d8c12015 	stw	r3,1152(sp)
    2230:	42800015 	stw	r10,0(r8)
    2234:	da813817 	ldw	r10,1248(sp)
    2238:	d8811f15 	stw	r2,1148(sp)
    223c:	42800115 	stw	r10,4(r8)
    2240:	20810416 	blt	r4,r2,2654 <___vfprintf_internal_r+0x1db0>
    2244:	42000204 	addi	r8,r8,8
    2248:	04a5c83a 	sub	r18,zero,r18
    224c:	0480540e 	bge	zero,r18,23a0 <___vfprintf_internal_r+0x1afc>
    2250:	05000404 	movi	r20,16
    2254:	05400074 	movhi	r21,1
    2258:	ad7c2f84 	addi	r21,r21,-3906
    225c:	a480660e 	bge	r20,r18,23f8 <___vfprintf_internal_r+0x1b54>
    2260:	058001c4 	movi	r22,7
    2264:	df012c17 	ldw	fp,1200(sp)
    2268:	00000306 	br	2278 <___vfprintf_internal_r+0x19d4>
    226c:	42000204 	addi	r8,r8,8
    2270:	94bffc04 	addi	r18,r18,-16
    2274:	a480600e 	bge	r20,r18,23f8 <___vfprintf_internal_r+0x1b54>
    2278:	18c00404 	addi	r3,r3,16
    227c:	10800044 	addi	r2,r2,1
    2280:	44c00015 	stw	r19,0(r8)
    2284:	45000115 	stw	r20,4(r8)
    2288:	d8c12015 	stw	r3,1152(sp)
    228c:	d8811f15 	stw	r2,1148(sp)
    2290:	b0bff60e 	bge	r22,r2,226c <__alt_data_end+0xfe00226c>
    2294:	e009883a 	mov	r4,fp
    2298:	b80b883a 	mov	r5,r23
    229c:	d9811e04 	addi	r6,sp,1144
    22a0:	000794c0 	call	794c <__sprint_r>
    22a4:	103bbd1e 	bne	r2,zero,119c <__alt_data_end+0xfe00119c>
    22a8:	d8c12017 	ldw	r3,1152(sp)
    22ac:	d8811f17 	ldw	r2,1148(sp)
    22b0:	da000404 	addi	r8,sp,16
    22b4:	003fee06 	br	2270 <__alt_data_end+0xfe002270>
    22b8:	dd012e15 	stw	r20,1208(sp)
    22bc:	003cb006 	br	1580 <__alt_data_end+0xfe001580>
    22c0:	008011c4 	movi	r2,71
    22c4:	14808b16 	blt	r2,r18,24f4 <___vfprintf_internal_r+0x1c50>
    22c8:	04000074 	movhi	r16,1
    22cc:	843c2104 	addi	r16,r16,-3964
    22d0:	da812a17 	ldw	r10,1192(sp)
    22d4:	00bfdfc4 	movi	r2,-129
    22d8:	00c000c4 	movi	r3,3
    22dc:	5094703a 	and	r10,r10,r2
    22e0:	d8c12b15 	stw	r3,1196(sp)
    22e4:	da812a15 	stw	r10,1192(sp)
    22e8:	df012783 	ldbu	fp,1182(sp)
    22ec:	d8c12e15 	stw	r3,1208(sp)
    22f0:	0029883a 	mov	r20,zero
    22f4:	d8013315 	stw	zero,1228(sp)
    22f8:	003a5b06 	br	c68 <__alt_data_end+0xfe000c68>
    22fc:	55400017 	ldw	r21,0(r10)
    2300:	52800104 	addi	r10,r10,4
    2304:	002d883a 	mov	r22,zero
    2308:	da812f15 	stw	r10,1212(sp)
    230c:	003c2906 	br	13b4 <__alt_data_end+0xfe0013b4>
    2310:	04000074 	movhi	r16,1
    2314:	843c1f04 	addi	r16,r16,-3972
    2318:	003c1006 	br	135c <__alt_data_end+0xfe00135c>
    231c:	45000204 	addi	r20,r8,8
    2320:	003d9e06 	br	199c <__alt_data_end+0xfe00199c>
    2324:	d9012c17 	ldw	r4,1200(sp)
    2328:	b80b883a 	mov	r5,r23
    232c:	d9811e04 	addi	r6,sp,1144
    2330:	000794c0 	call	794c <__sprint_r>
    2334:	103b991e 	bne	r2,zero,119c <__alt_data_end+0xfe00119c>
    2338:	dc812617 	ldw	r18,1176(sp)
    233c:	d8c12017 	ldw	r3,1152(sp)
    2340:	da000404 	addi	r8,sp,16
    2344:	003fad06 	br	21fc <__alt_data_end+0xfe0021fc>
    2348:	da812a17 	ldw	r10,1192(sp)
    234c:	8c400044 	addi	r17,r17,1
    2350:	14800047 	ldb	r18,1(r2)
    2354:	52800814 	ori	r10,r10,32
    2358:	da812a15 	stw	r10,1192(sp)
    235c:	0039b706 	br	a3c <__alt_data_end+0xfe000a3c>
    2360:	d9012c17 	ldw	r4,1200(sp)
    2364:	b80b883a 	mov	r5,r23
    2368:	d9811e04 	addi	r6,sp,1144
    236c:	000794c0 	call	794c <__sprint_r>
    2370:	103b8a1e 	bne	r2,zero,119c <__alt_data_end+0xfe00119c>
    2374:	d8c12017 	ldw	r3,1152(sp)
    2378:	da000404 	addi	r8,sp,16
    237c:	003d0706 	br	179c <__alt_data_end+0xfe00179c>
    2380:	d9012c17 	ldw	r4,1200(sp)
    2384:	b80b883a 	mov	r5,r23
    2388:	d9811e04 	addi	r6,sp,1144
    238c:	000794c0 	call	794c <__sprint_r>
    2390:	103b821e 	bne	r2,zero,119c <__alt_data_end+0xfe00119c>
    2394:	d8c12017 	ldw	r3,1152(sp)
    2398:	d8811f17 	ldw	r2,1148(sp)
    239c:	da000404 	addi	r8,sp,16
    23a0:	da813517 	ldw	r10,1236(sp)
    23a4:	10800044 	addi	r2,r2,1
    23a8:	44000015 	stw	r16,0(r8)
    23ac:	50c7883a 	add	r3,r10,r3
    23b0:	003acd06 	br	ee8 <__alt_data_end+0xfe000ee8>
    23b4:	da013f15 	stw	r8,1276(sp)
    23b8:	00008180 	call	818 <strlen>
    23bc:	d8812e15 	stw	r2,1208(sp)
    23c0:	da013f17 	ldw	r8,1276(sp)
    23c4:	103c700e 	bge	r2,zero,1588 <__alt_data_end+0xfe001588>
    23c8:	0005883a 	mov	r2,zero
    23cc:	003c6e06 	br	1588 <__alt_data_end+0xfe001588>
    23d0:	0029883a 	mov	r20,zero
    23d4:	003e0706 	br	1bf4 <__alt_data_end+0xfe001bf4>
    23d8:	d9012c17 	ldw	r4,1200(sp)
    23dc:	b80b883a 	mov	r5,r23
    23e0:	d9811e04 	addi	r6,sp,1144
    23e4:	000794c0 	call	794c <__sprint_r>
    23e8:	103b6c1e 	bne	r2,zero,119c <__alt_data_end+0xfe00119c>
    23ec:	d8c12017 	ldw	r3,1152(sp)
    23f0:	da000404 	addi	r8,sp,16
    23f4:	003dfe06 	br	1bf0 <__alt_data_end+0xfe001bf0>
    23f8:	1c87883a 	add	r3,r3,r18
    23fc:	10800044 	addi	r2,r2,1
    2400:	45400015 	stw	r21,0(r8)
    2404:	44800115 	stw	r18,4(r8)
    2408:	d8c12015 	stw	r3,1152(sp)
    240c:	d8811f15 	stw	r2,1148(sp)
    2410:	010001c4 	movi	r4,7
    2414:	20bfda16 	blt	r4,r2,2380 <__alt_data_end+0xfe002380>
    2418:	42000204 	addi	r8,r8,8
    241c:	003fe006 	br	23a0 <__alt_data_end+0xfe0023a0>
    2420:	d9012c17 	ldw	r4,1200(sp)
    2424:	b80b883a 	mov	r5,r23
    2428:	d9811e04 	addi	r6,sp,1144
    242c:	000794c0 	call	794c <__sprint_r>
    2430:	103b5a1e 	bne	r2,zero,119c <__alt_data_end+0xfe00119c>
    2434:	d8812617 	ldw	r2,1176(sp)
    2438:	d8c12017 	ldw	r3,1152(sp)
    243c:	da000404 	addi	r8,sp,16
    2440:	003e5606 	br	1d9c <__alt_data_end+0xfe001d9c>
    2444:	0029883a 	mov	r20,zero
    2448:	003e6606 	br	1de4 <__alt_data_end+0xfe001de4>
    244c:	d9012c17 	ldw	r4,1200(sp)
    2450:	b80b883a 	mov	r5,r23
    2454:	d9811e04 	addi	r6,sp,1144
    2458:	000794c0 	call	794c <__sprint_r>
    245c:	103b4f1e 	bne	r2,zero,119c <__alt_data_end+0xfe00119c>
    2460:	d8812617 	ldw	r2,1176(sp)
    2464:	da813517 	ldw	r10,1236(sp)
    2468:	d8c12017 	ldw	r3,1152(sp)
    246c:	da000404 	addi	r8,sp,16
    2470:	5085c83a 	sub	r2,r10,r2
    2474:	003e5a06 	br	1de0 <__alt_data_end+0xfe001de0>
    2478:	00800184 	movi	r2,6
    247c:	1500012e 	bgeu	r2,r20,2484 <___vfprintf_internal_r+0x1be0>
    2480:	1029883a 	mov	r20,r2
    2484:	dd012e15 	stw	r20,1208(sp)
    2488:	a005883a 	mov	r2,r20
    248c:	a000c516 	blt	r20,zero,27a4 <___vfprintf_internal_r+0x1f00>
    2490:	d8812b15 	stw	r2,1196(sp)
    2494:	dd412f15 	stw	r21,1212(sp)
    2498:	0029883a 	mov	r20,zero
    249c:	d8013315 	stw	zero,1228(sp)
    24a0:	04000074 	movhi	r16,1
    24a4:	843c2d04 	addi	r16,r16,-3916
    24a8:	0005883a 	mov	r2,zero
    24ac:	0039f506 	br	c84 <__alt_data_end+0xfe000c84>
    24b0:	07000b44 	movi	fp,45
    24b4:	df012785 	stb	fp,1182(sp)
    24b8:	003ba406 	br	134c <__alt_data_end+0xfe00134c>
    24bc:	da812d17 	ldw	r10,1204(sp)
    24c0:	00c00b44 	movi	r3,45
    24c4:	d8812b15 	stw	r2,1196(sp)
    24c8:	d8c12785 	stb	r3,1182(sp)
    24cc:	da812a15 	stw	r10,1192(sp)
    24d0:	0029883a 	mov	r20,zero
    24d4:	00800b44 	movi	r2,45
    24d8:	0039e706 	br	c78 <__alt_data_end+0xfe000c78>
    24dc:	d8812617 	ldw	r2,1176(sp)
    24e0:	00ffff44 	movi	r3,-3
    24e4:	10c02e16 	blt	r2,r3,25a0 <___vfprintf_internal_r+0x1cfc>
    24e8:	a0802d16 	blt	r20,r2,25a0 <___vfprintf_internal_r+0x1cfc>
    24ec:	d8813315 	stw	r2,1228(sp)
    24f0:	003ed406 	br	2044 <__alt_data_end+0xfe002044>
    24f4:	04000074 	movhi	r16,1
    24f8:	843c2204 	addi	r16,r16,-3960
    24fc:	003f7406 	br	22d0 <__alt_data_end+0xfe0022d0>
    2500:	d8812604 	addi	r2,sp,1176
    2504:	d8800115 	stw	r2,4(sp)
    2508:	d9012c17 	ldw	r4,1200(sp)
    250c:	d8812504 	addi	r2,sp,1172
    2510:	d9413717 	ldw	r5,1244(sp)
    2514:	d8800215 	stw	r2,8(sp)
    2518:	d8812104 	addi	r2,sp,1156
    251c:	dd000015 	stw	r20,0(sp)
    2520:	d8800315 	stw	r2,12(sp)
    2524:	a80d883a 	mov	r6,r21
    2528:	01c000c4 	movi	r7,3
    252c:	da013f15 	stw	r8,1276(sp)
    2530:	0002be00 	call	2be0 <_dtoa_r>
    2534:	1021883a 	mov	r16,r2
    2538:	a039883a 	mov	fp,r20
    253c:	da013f17 	ldw	r8,1276(sp)
    2540:	003ea106 	br	1fc8 <__alt_data_end+0xfe001fc8>
    2544:	4805883a 	mov	r2,r9
    2548:	003eb406 	br	201c <__alt_data_end+0xfe00201c>
    254c:	81000007 	ldb	r4,0(r16)
    2550:	00800c04 	movi	r2,48
    2554:	20800326 	beq	r4,r2,2564 <___vfprintf_internal_r+0x1cc0>
    2558:	d8c12617 	ldw	r3,1176(sp)
    255c:	48d3883a 	add	r9,r9,r3
    2560:	003e9c06 	br	1fd4 <__alt_data_end+0xfe001fd4>
    2564:	d9013717 	ldw	r4,1244(sp)
    2568:	a80b883a 	mov	r5,r21
    256c:	000d883a 	mov	r6,zero
    2570:	000f883a 	mov	r7,zero
    2574:	da013f15 	stw	r8,1276(sp)
    2578:	da413e15 	stw	r9,1272(sp)
    257c:	000b3c40 	call	b3c4 <__eqdf2>
    2580:	da013f17 	ldw	r8,1276(sp)
    2584:	da413e17 	ldw	r9,1272(sp)
    2588:	103ff326 	beq	r2,zero,2558 <__alt_data_end+0xfe002558>
    258c:	00800044 	movi	r2,1
    2590:	1707c83a 	sub	r3,r2,fp
    2594:	d8c12615 	stw	r3,1176(sp)
    2598:	48d3883a 	add	r9,r9,r3
    259c:	003e8d06 	br	1fd4 <__alt_data_end+0xfe001fd4>
    25a0:	94bfff84 	addi	r18,r18,-2
    25a4:	157fffc4 	addi	r21,r2,-1
    25a8:	dd412615 	stw	r21,1176(sp)
    25ac:	dc8122c5 	stb	r18,1163(sp)
    25b0:	a8008916 	blt	r21,zero,27d8 <___vfprintf_internal_r+0x1f34>
    25b4:	00800ac4 	movi	r2,43
    25b8:	d8812305 	stb	r2,1164(sp)
    25bc:	05000244 	movi	r20,9
    25c0:	a5404a16 	blt	r20,r21,26ec <___vfprintf_internal_r+0x1e48>
    25c4:	00800c04 	movi	r2,48
    25c8:	ad400c04 	addi	r21,r21,48
    25cc:	d8812345 	stb	r2,1165(sp)
    25d0:	dd412385 	stb	r21,1166(sp)
    25d4:	d8c123c4 	addi	r3,sp,1167
    25d8:	d88122c4 	addi	r2,sp,1163
    25dc:	da813517 	ldw	r10,1236(sp)
    25e0:	1885c83a 	sub	r2,r3,r2
    25e4:	d8813a15 	stw	r2,1256(sp)
    25e8:	5095883a 	add	r10,r10,r2
    25ec:	da812e15 	stw	r10,1208(sp)
    25f0:	da813517 	ldw	r10,1236(sp)
    25f4:	00800044 	movi	r2,1
    25f8:	1280070e 	bge	r2,r10,2618 <___vfprintf_internal_r+0x1d74>
    25fc:	d8c12e17 	ldw	r3,1208(sp)
    2600:	18c00044 	addi	r3,r3,1
    2604:	d8c12e15 	stw	r3,1208(sp)
    2608:	1805883a 	mov	r2,r3
    260c:	18000716 	blt	r3,zero,262c <___vfprintf_internal_r+0x1d88>
    2610:	d8013315 	stw	zero,1228(sp)
    2614:	003e9606 	br	2070 <__alt_data_end+0xfe002070>
    2618:	da812a17 	ldw	r10,1192(sp)
    261c:	5084703a 	and	r2,r10,r2
    2620:	103ff61e 	bne	r2,zero,25fc <__alt_data_end+0xfe0025fc>
    2624:	d8812e17 	ldw	r2,1208(sp)
    2628:	103ff90e 	bge	r2,zero,2610 <__alt_data_end+0xfe002610>
    262c:	0005883a 	mov	r2,zero
    2630:	d8013315 	stw	zero,1228(sp)
    2634:	003e8e06 	br	2070 <__alt_data_end+0xfe002070>
    2638:	dd012b15 	stw	r20,1196(sp)
    263c:	dd012e15 	stw	r20,1208(sp)
    2640:	df012783 	ldbu	fp,1182(sp)
    2644:	dd412f15 	stw	r21,1212(sp)
    2648:	0029883a 	mov	r20,zero
    264c:	d8013315 	stw	zero,1228(sp)
    2650:	00398506 	br	c68 <__alt_data_end+0xfe000c68>
    2654:	d9012c17 	ldw	r4,1200(sp)
    2658:	b80b883a 	mov	r5,r23
    265c:	d9811e04 	addi	r6,sp,1144
    2660:	000794c0 	call	794c <__sprint_r>
    2664:	103acd1e 	bne	r2,zero,119c <__alt_data_end+0xfe00119c>
    2668:	dc812617 	ldw	r18,1176(sp)
    266c:	d8c12017 	ldw	r3,1152(sp)
    2670:	d8811f17 	ldw	r2,1148(sp)
    2674:	da000404 	addi	r8,sp,16
    2678:	003ef306 	br	2248 <__alt_data_end+0xfe002248>
    267c:	a03e2e1e 	bne	r20,zero,1f38 <__alt_data_end+0xfe001f38>
    2680:	8029883a 	mov	r20,r16
    2684:	003e2c06 	br	1f38 <__alt_data_end+0xfe001f38>
    2688:	05000184 	movi	r20,6
    268c:	003e2a06 	br	1f38 <__alt_data_end+0xfe001f38>
    2690:	00c00b44 	movi	r3,45
    2694:	5560003c 	xorhi	r21,r10,32768
    2698:	d8c12b05 	stb	r3,1196(sp)
    269c:	003e2d06 	br	1f54 <__alt_data_end+0xfe001f54>
    26a0:	a7000044 	addi	fp,r20,1
    26a4:	003e3206 	br	1f70 <__alt_data_end+0xfe001f70>
    26a8:	d8c13317 	ldw	r3,1228(sp)
    26ac:	00c0470e 	bge	zero,r3,27cc <___vfprintf_internal_r+0x1f28>
    26b0:	00800044 	movi	r2,1
    26b4:	da813517 	ldw	r10,1236(sp)
    26b8:	1285883a 	add	r2,r2,r10
    26bc:	d8812e15 	stw	r2,1208(sp)
    26c0:	10000716 	blt	r2,zero,26e0 <___vfprintf_internal_r+0x1e3c>
    26c4:	048019c4 	movi	r18,103
    26c8:	003e6906 	br	2070 <__alt_data_end+0xfe002070>
    26cc:	da813317 	ldw	r10,1228(sp)
    26d0:	52800044 	addi	r10,r10,1
    26d4:	da812e15 	stw	r10,1208(sp)
    26d8:	5005883a 	mov	r2,r10
    26dc:	503ff90e 	bge	r10,zero,26c4 <__alt_data_end+0xfe0026c4>
    26e0:	0005883a 	mov	r2,zero
    26e4:	048019c4 	movi	r18,103
    26e8:	003e6106 	br	2070 <__alt_data_end+0xfe002070>
    26ec:	d8c12284 	addi	r3,sp,1162
    26f0:	4039883a 	mov	fp,r8
    26f4:	a809883a 	mov	r4,r21
    26f8:	01400284 	movi	r5,10
    26fc:	182d883a 	mov	r22,r3
    2700:	000a2180 	call	a218 <__modsi3>
    2704:	10800c04 	addi	r2,r2,48
    2708:	a809883a 	mov	r4,r21
    270c:	b0800005 	stb	r2,0(r22)
    2710:	01400284 	movi	r5,10
    2714:	000a1d00 	call	a1d0 <__divsi3>
    2718:	102b883a 	mov	r21,r2
    271c:	b0ffffc4 	addi	r3,r22,-1
    2720:	a0bff416 	blt	r20,r2,26f4 <__alt_data_end+0xfe0026f4>
    2724:	11400c04 	addi	r5,r2,48
    2728:	b17fffc5 	stb	r5,-1(r22)
    272c:	d88122c4 	addi	r2,sp,1163
    2730:	e011883a 	mov	r8,fp
    2734:	18804e2e 	bgeu	r3,r2,2870 <___vfprintf_internal_r+0x1fcc>
    2738:	d9012344 	addi	r4,sp,1165
    273c:	b007883a 	mov	r3,r22
    2740:	00000206 	br	274c <___vfprintf_internal_r+0x1ea8>
    2744:	19400003 	ldbu	r5,0(r3)
    2748:	18c00044 	addi	r3,r3,1
    274c:	21400005 	stb	r5,0(r4)
    2750:	21000044 	addi	r4,r4,1
    2754:	10fffb1e 	bne	r2,r3,2744 <__alt_data_end+0xfe002744>
    2758:	d8c12304 	addi	r3,sp,1164
    275c:	1d87c83a 	sub	r3,r3,r22
    2760:	d9012344 	addi	r4,sp,1165
    2764:	20c7883a 	add	r3,r4,r3
    2768:	003f9c06 	br	25dc <__alt_data_end+0xfe0025dc>
    276c:	d8812117 	ldw	r2,1156(sp)
    2770:	003e2a06 	br	201c <__alt_data_end+0xfe00201c>
    2774:	d8c12617 	ldw	r3,1176(sp)
    2778:	d8c13315 	stw	r3,1228(sp)
    277c:	00c01a0e 	bge	zero,r3,27e8 <___vfprintf_internal_r+0x1f44>
    2780:	a0000a1e 	bne	r20,zero,27ac <___vfprintf_internal_r+0x1f08>
    2784:	da812a17 	ldw	r10,1192(sp)
    2788:	5080004c 	andi	r2,r10,1
    278c:	1000071e 	bne	r2,zero,27ac <___vfprintf_internal_r+0x1f08>
    2790:	1805883a 	mov	r2,r3
    2794:	18002f16 	blt	r3,zero,2854 <___vfprintf_internal_r+0x1fb0>
    2798:	d8c13317 	ldw	r3,1228(sp)
    279c:	d8c12e15 	stw	r3,1208(sp)
    27a0:	003e3306 	br	2070 <__alt_data_end+0xfe002070>
    27a4:	0005883a 	mov	r2,zero
    27a8:	003f3906 	br	2490 <__alt_data_end+0xfe002490>
    27ac:	da813317 	ldw	r10,1228(sp)
    27b0:	a5000044 	addi	r20,r20,1
    27b4:	5529883a 	add	r20,r10,r20
    27b8:	dd012e15 	stw	r20,1208(sp)
    27bc:	a005883a 	mov	r2,r20
    27c0:	a03e2b0e 	bge	r20,zero,2070 <__alt_data_end+0xfe002070>
    27c4:	0005883a 	mov	r2,zero
    27c8:	003e2906 	br	2070 <__alt_data_end+0xfe002070>
    27cc:	00800084 	movi	r2,2
    27d0:	10c5c83a 	sub	r2,r2,r3
    27d4:	003fb706 	br	26b4 <__alt_data_end+0xfe0026b4>
    27d8:	00800b44 	movi	r2,45
    27dc:	056bc83a 	sub	r21,zero,r21
    27e0:	d8812305 	stb	r2,1164(sp)
    27e4:	003f7506 	br	25bc <__alt_data_end+0xfe0025bc>
    27e8:	a000111e 	bne	r20,zero,2830 <___vfprintf_internal_r+0x1f8c>
    27ec:	da812a17 	ldw	r10,1192(sp)
    27f0:	5080004c 	andi	r2,r10,1
    27f4:	10000e1e 	bne	r2,zero,2830 <___vfprintf_internal_r+0x1f8c>
    27f8:	00800044 	movi	r2,1
    27fc:	d8812e15 	stw	r2,1208(sp)
    2800:	003e1b06 	br	2070 <__alt_data_end+0xfe002070>
    2804:	da812f17 	ldw	r10,1212(sp)
    2808:	8c800043 	ldbu	r18,1(r17)
    280c:	2823883a 	mov	r17,r5
    2810:	55000017 	ldw	r20,0(r10)
    2814:	50800104 	addi	r2,r10,4
    2818:	d8812f15 	stw	r2,1212(sp)
    281c:	a0000f16 	blt	r20,zero,285c <___vfprintf_internal_r+0x1fb8>
    2820:	94803fcc 	andi	r18,r18,255
    2824:	9480201c 	xori	r18,r18,128
    2828:	94bfe004 	addi	r18,r18,-128
    282c:	00388306 	br	a3c <__alt_data_end+0xfe000a3c>
    2830:	a5000084 	addi	r20,r20,2
    2834:	dd012e15 	stw	r20,1208(sp)
    2838:	a005883a 	mov	r2,r20
    283c:	a03e0c0e 	bge	r20,zero,2070 <__alt_data_end+0xfe002070>
    2840:	003fe006 	br	27c4 <__alt_data_end+0xfe0027c4>
    2844:	043fffc4 	movi	r16,-1
    2848:	003a3206 	br	1114 <__alt_data_end+0xfe001114>
    284c:	d8812617 	ldw	r2,1176(sp)
    2850:	003f5406 	br	25a4 <__alt_data_end+0xfe0025a4>
    2854:	0005883a 	mov	r2,zero
    2858:	003fcf06 	br	2798 <__alt_data_end+0xfe002798>
    285c:	94803fcc 	andi	r18,r18,255
    2860:	9480201c 	xori	r18,r18,128
    2864:	053fffc4 	movi	r20,-1
    2868:	94bfe004 	addi	r18,r18,-128
    286c:	00387306 	br	a3c <__alt_data_end+0xfe000a3c>
    2870:	d8c12344 	addi	r3,sp,1165
    2874:	003f5906 	br	25dc <__alt_data_end+0xfe0025dc>
    2878:	0005883a 	mov	r2,zero
    287c:	003df906 	br	2064 <__alt_data_end+0xfe002064>

00002880 <__vfprintf_internal>:
    2880:	00800074 	movhi	r2,1
    2884:	10838a04 	addi	r2,r2,3624
    2888:	2007883a 	mov	r3,r4
    288c:	11000017 	ldw	r4,0(r2)
    2890:	2805883a 	mov	r2,r5
    2894:	300f883a 	mov	r7,r6
    2898:	180b883a 	mov	r5,r3
    289c:	100d883a 	mov	r6,r2
    28a0:	00008a41 	jmpi	8a4 <___vfprintf_internal_r>

000028a4 <__swsetup_r>:
    28a4:	00800074 	movhi	r2,1
    28a8:	10838a04 	addi	r2,r2,3624
    28ac:	10800017 	ldw	r2,0(r2)
    28b0:	defffd04 	addi	sp,sp,-12
    28b4:	dc400115 	stw	r17,4(sp)
    28b8:	dc000015 	stw	r16,0(sp)
    28bc:	dfc00215 	stw	ra,8(sp)
    28c0:	2023883a 	mov	r17,r4
    28c4:	2821883a 	mov	r16,r5
    28c8:	10000226 	beq	r2,zero,28d4 <__swsetup_r+0x30>
    28cc:	10c00e17 	ldw	r3,56(r2)
    28d0:	18002e26 	beq	r3,zero,298c <__swsetup_r+0xe8>
    28d4:	8080030b 	ldhu	r2,12(r16)
    28d8:	10c0020c 	andi	r3,r2,8
    28dc:	100d883a 	mov	r6,r2
    28e0:	18000f26 	beq	r3,zero,2920 <__swsetup_r+0x7c>
    28e4:	80c00417 	ldw	r3,16(r16)
    28e8:	18001526 	beq	r3,zero,2940 <__swsetup_r+0x9c>
    28ec:	1100004c 	andi	r4,r2,1
    28f0:	20001c1e 	bne	r4,zero,2964 <__swsetup_r+0xc0>
    28f4:	1080008c 	andi	r2,r2,2
    28f8:	1000271e 	bne	r2,zero,2998 <__swsetup_r+0xf4>
    28fc:	80800517 	ldw	r2,20(r16)
    2900:	80800215 	stw	r2,8(r16)
    2904:	18001c26 	beq	r3,zero,2978 <__swsetup_r+0xd4>
    2908:	0005883a 	mov	r2,zero
    290c:	dfc00217 	ldw	ra,8(sp)
    2910:	dc400117 	ldw	r17,4(sp)
    2914:	dc000017 	ldw	r16,0(sp)
    2918:	dec00304 	addi	sp,sp,12
    291c:	f800283a 	ret
    2920:	3080040c 	andi	r2,r6,16
    2924:	10001726 	beq	r2,zero,2984 <__swsetup_r+0xe0>
    2928:	3080010c 	andi	r2,r6,4
    292c:	10001d1e 	bne	r2,zero,29a4 <__swsetup_r+0x100>
    2930:	80c00417 	ldw	r3,16(r16)
    2934:	30800214 	ori	r2,r6,8
    2938:	8080030d 	sth	r2,12(r16)
    293c:	183feb1e 	bne	r3,zero,28ec <__alt_data_end+0xfe0028ec>
    2940:	1140a00c 	andi	r5,r2,640
    2944:	01008004 	movi	r4,512
    2948:	293fe826 	beq	r5,r4,28ec <__alt_data_end+0xfe0028ec>
    294c:	8809883a 	mov	r4,r17
    2950:	800b883a 	mov	r5,r16
    2954:	000530c0 	call	530c <__smakebuf_r>
    2958:	8080030b 	ldhu	r2,12(r16)
    295c:	80c00417 	ldw	r3,16(r16)
    2960:	003fe206 	br	28ec <__alt_data_end+0xfe0028ec>
    2964:	80800517 	ldw	r2,20(r16)
    2968:	80000215 	stw	zero,8(r16)
    296c:	0085c83a 	sub	r2,zero,r2
    2970:	80800615 	stw	r2,24(r16)
    2974:	183fe41e 	bne	r3,zero,2908 <__alt_data_end+0xfe002908>
    2978:	8080030b 	ldhu	r2,12(r16)
    297c:	1080200c 	andi	r2,r2,128
    2980:	103fe226 	beq	r2,zero,290c <__alt_data_end+0xfe00290c>
    2984:	00bfffc4 	movi	r2,-1
    2988:	003fe006 	br	290c <__alt_data_end+0xfe00290c>
    298c:	1009883a 	mov	r4,r2
    2990:	00045280 	call	4528 <__sinit>
    2994:	003fcf06 	br	28d4 <__alt_data_end+0xfe0028d4>
    2998:	0005883a 	mov	r2,zero
    299c:	80800215 	stw	r2,8(r16)
    29a0:	003fd806 	br	2904 <__alt_data_end+0xfe002904>
    29a4:	81400c17 	ldw	r5,48(r16)
    29a8:	28000626 	beq	r5,zero,29c4 <__swsetup_r+0x120>
    29ac:	80801004 	addi	r2,r16,64
    29b0:	28800326 	beq	r5,r2,29c0 <__swsetup_r+0x11c>
    29b4:	8809883a 	mov	r4,r17
    29b8:	000495c0 	call	495c <_free_r>
    29bc:	8180030b 	ldhu	r6,12(r16)
    29c0:	80000c15 	stw	zero,48(r16)
    29c4:	80c00417 	ldw	r3,16(r16)
    29c8:	00bff6c4 	movi	r2,-37
    29cc:	118c703a 	and	r6,r2,r6
    29d0:	80000115 	stw	zero,4(r16)
    29d4:	80c00015 	stw	r3,0(r16)
    29d8:	003fd606 	br	2934 <__alt_data_end+0xfe002934>

000029dc <quorem>:
    29dc:	defff704 	addi	sp,sp,-36
    29e0:	dc000015 	stw	r16,0(sp)
    29e4:	20800417 	ldw	r2,16(r4)
    29e8:	2c000417 	ldw	r16,16(r5)
    29ec:	dd800615 	stw	r22,24(sp)
    29f0:	dd400515 	stw	r21,20(sp)
    29f4:	dfc00815 	stw	ra,32(sp)
    29f8:	ddc00715 	stw	r23,28(sp)
    29fc:	dd000415 	stw	r20,16(sp)
    2a00:	dcc00315 	stw	r19,12(sp)
    2a04:	dc800215 	stw	r18,8(sp)
    2a08:	dc400115 	stw	r17,4(sp)
    2a0c:	202b883a 	mov	r21,r4
    2a10:	282d883a 	mov	r22,r5
    2a14:	14007016 	blt	r2,r16,2bd8 <quorem+0x1fc>
    2a18:	843fffc4 	addi	r16,r16,-1
    2a1c:	842f883a 	add	r23,r16,r16
    2a20:	bdef883a 	add	r23,r23,r23
    2a24:	2c400504 	addi	r17,r5,20
    2a28:	8de5883a 	add	r18,r17,r23
    2a2c:	25000504 	addi	r20,r4,20
    2a30:	a5ef883a 	add	r23,r20,r23
    2a34:	91400017 	ldw	r5,0(r18)
    2a38:	b9000017 	ldw	r4,0(r23)
    2a3c:	29400044 	addi	r5,r5,1
    2a40:	000a2640 	call	a264 <__udivsi3>
    2a44:	1027883a 	mov	r19,r2
    2a48:	10002c26 	beq	r2,zero,2afc <quorem+0x120>
    2a4c:	a00f883a 	mov	r7,r20
    2a50:	880d883a 	mov	r6,r17
    2a54:	0013883a 	mov	r9,zero
    2a58:	0011883a 	mov	r8,zero
    2a5c:	30800017 	ldw	r2,0(r6)
    2a60:	3ac00017 	ldw	r11,0(r7)
    2a64:	31800104 	addi	r6,r6,4
    2a68:	10ffffcc 	andi	r3,r2,65535
    2a6c:	1cc7383a 	mul	r3,r3,r19
    2a70:	1004d43a 	srli	r2,r2,16
    2a74:	5abfffcc 	andi	r10,r11,65535
    2a78:	48c7883a 	add	r3,r9,r3
    2a7c:	1812d43a 	srli	r9,r3,16
    2a80:	14c5383a 	mul	r2,r2,r19
    2a84:	5211883a 	add	r8,r10,r8
    2a88:	18ffffcc 	andi	r3,r3,65535
    2a8c:	40d5c83a 	sub	r10,r8,r3
    2a90:	5810d43a 	srli	r8,r11,16
    2a94:	4893883a 	add	r9,r9,r2
    2a98:	5005d43a 	srai	r2,r10,16
    2a9c:	48ffffcc 	andi	r3,r9,65535
    2aa0:	40d1c83a 	sub	r8,r8,r3
    2aa4:	4091883a 	add	r8,r8,r2
    2aa8:	4004943a 	slli	r2,r8,16
    2aac:	52bfffcc 	andi	r10,r10,65535
    2ab0:	4812d43a 	srli	r9,r9,16
    2ab4:	1294b03a 	or	r10,r2,r10
    2ab8:	3a800015 	stw	r10,0(r7)
    2abc:	4011d43a 	srai	r8,r8,16
    2ac0:	39c00104 	addi	r7,r7,4
    2ac4:	91bfe52e 	bgeu	r18,r6,2a5c <__alt_data_end+0xfe002a5c>
    2ac8:	b8800017 	ldw	r2,0(r23)
    2acc:	10000b1e 	bne	r2,zero,2afc <quorem+0x120>
    2ad0:	b8bfff04 	addi	r2,r23,-4
    2ad4:	a080082e 	bgeu	r20,r2,2af8 <quorem+0x11c>
    2ad8:	b8ffff17 	ldw	r3,-4(r23)
    2adc:	18000326 	beq	r3,zero,2aec <quorem+0x110>
    2ae0:	00000506 	br	2af8 <quorem+0x11c>
    2ae4:	10c00017 	ldw	r3,0(r2)
    2ae8:	1800031e 	bne	r3,zero,2af8 <quorem+0x11c>
    2aec:	10bfff04 	addi	r2,r2,-4
    2af0:	843fffc4 	addi	r16,r16,-1
    2af4:	a0bffb36 	bltu	r20,r2,2ae4 <__alt_data_end+0xfe002ae4>
    2af8:	ac000415 	stw	r16,16(r21)
    2afc:	a809883a 	mov	r4,r21
    2b00:	b00b883a 	mov	r5,r22
    2b04:	00069880 	call	6988 <__mcmp>
    2b08:	10002716 	blt	r2,zero,2ba8 <quorem+0x1cc>
    2b0c:	9cc00044 	addi	r19,r19,1
    2b10:	a00b883a 	mov	r5,r20
    2b14:	8807883a 	mov	r3,r17
    2b18:	000d883a 	mov	r6,zero
    2b1c:	2a400017 	ldw	r9,0(r5)
    2b20:	1a000017 	ldw	r8,0(r3)
    2b24:	29400104 	addi	r5,r5,4
    2b28:	49ffffcc 	andi	r7,r9,65535
    2b2c:	40bfffcc 	andi	r2,r8,65535
    2b30:	398d883a 	add	r6,r7,r6
    2b34:	308fc83a 	sub	r7,r6,r2
    2b38:	4010d43a 	srli	r8,r8,16
    2b3c:	480cd43a 	srli	r6,r9,16
    2b40:	3805d43a 	srai	r2,r7,16
    2b44:	39ffffcc 	andi	r7,r7,65535
    2b48:	320dc83a 	sub	r6,r6,r8
    2b4c:	308d883a 	add	r6,r6,r2
    2b50:	3004943a 	slli	r2,r6,16
    2b54:	18c00104 	addi	r3,r3,4
    2b58:	300dd43a 	srai	r6,r6,16
    2b5c:	11ceb03a 	or	r7,r2,r7
    2b60:	29ffff15 	stw	r7,-4(r5)
    2b64:	90ffed2e 	bgeu	r18,r3,2b1c <__alt_data_end+0xfe002b1c>
    2b68:	8405883a 	add	r2,r16,r16
    2b6c:	1085883a 	add	r2,r2,r2
    2b70:	a087883a 	add	r3,r20,r2
    2b74:	18800017 	ldw	r2,0(r3)
    2b78:	10000b1e 	bne	r2,zero,2ba8 <quorem+0x1cc>
    2b7c:	18bfff04 	addi	r2,r3,-4
    2b80:	a080082e 	bgeu	r20,r2,2ba4 <quorem+0x1c8>
    2b84:	18ffff17 	ldw	r3,-4(r3)
    2b88:	18000326 	beq	r3,zero,2b98 <quorem+0x1bc>
    2b8c:	00000506 	br	2ba4 <quorem+0x1c8>
    2b90:	10c00017 	ldw	r3,0(r2)
    2b94:	1800031e 	bne	r3,zero,2ba4 <quorem+0x1c8>
    2b98:	10bfff04 	addi	r2,r2,-4
    2b9c:	843fffc4 	addi	r16,r16,-1
    2ba0:	a0bffb36 	bltu	r20,r2,2b90 <__alt_data_end+0xfe002b90>
    2ba4:	ac000415 	stw	r16,16(r21)
    2ba8:	9805883a 	mov	r2,r19
    2bac:	dfc00817 	ldw	ra,32(sp)
    2bb0:	ddc00717 	ldw	r23,28(sp)
    2bb4:	dd800617 	ldw	r22,24(sp)
    2bb8:	dd400517 	ldw	r21,20(sp)
    2bbc:	dd000417 	ldw	r20,16(sp)
    2bc0:	dcc00317 	ldw	r19,12(sp)
    2bc4:	dc800217 	ldw	r18,8(sp)
    2bc8:	dc400117 	ldw	r17,4(sp)
    2bcc:	dc000017 	ldw	r16,0(sp)
    2bd0:	dec00904 	addi	sp,sp,36
    2bd4:	f800283a 	ret
    2bd8:	0005883a 	mov	r2,zero
    2bdc:	003ff306 	br	2bac <__alt_data_end+0xfe002bac>

00002be0 <_dtoa_r>:
    2be0:	20801017 	ldw	r2,64(r4)
    2be4:	deffdf04 	addi	sp,sp,-132
    2be8:	dcc01a15 	stw	r19,104(sp)
    2bec:	dc801915 	stw	r18,100(sp)
    2bf0:	dc401815 	stw	r17,96(sp)
    2bf4:	dc001715 	stw	r16,92(sp)
    2bf8:	dfc02015 	stw	ra,128(sp)
    2bfc:	df001f15 	stw	fp,124(sp)
    2c00:	ddc01e15 	stw	r23,120(sp)
    2c04:	dd801d15 	stw	r22,116(sp)
    2c08:	dd401c15 	stw	r21,112(sp)
    2c0c:	dd001b15 	stw	r20,108(sp)
    2c10:	d9400315 	stw	r5,12(sp)
    2c14:	d9c00415 	stw	r7,16(sp)
    2c18:	2021883a 	mov	r16,r4
    2c1c:	3023883a 	mov	r17,r6
    2c20:	dcc02317 	ldw	r19,140(sp)
    2c24:	3025883a 	mov	r18,r6
    2c28:	10000826 	beq	r2,zero,2c4c <_dtoa_r+0x6c>
    2c2c:	20c01117 	ldw	r3,68(r4)
    2c30:	01800044 	movi	r6,1
    2c34:	100b883a 	mov	r5,r2
    2c38:	30cc983a 	sll	r6,r6,r3
    2c3c:	10c00115 	stw	r3,4(r2)
    2c40:	11800215 	stw	r6,8(r2)
    2c44:	00061700 	call	6170 <_Bfree>
    2c48:	80001015 	stw	zero,64(r16)
    2c4c:	88002e16 	blt	r17,zero,2d08 <_dtoa_r+0x128>
    2c50:	98000015 	stw	zero,0(r19)
    2c54:	88dffc2c 	andhi	r3,r17,32752
    2c58:	009ffc34 	movhi	r2,32752
    2c5c:	18801b26 	beq	r3,r2,2ccc <_dtoa_r+0xec>
    2c60:	d9000317 	ldw	r4,12(sp)
    2c64:	900b883a 	mov	r5,r18
    2c68:	000d883a 	mov	r6,zero
    2c6c:	000f883a 	mov	r7,zero
    2c70:	000b3c40 	call	b3c4 <__eqdf2>
    2c74:	10002b1e 	bne	r2,zero,2d24 <_dtoa_r+0x144>
    2c78:	d8c02217 	ldw	r3,136(sp)
    2c7c:	d9002417 	ldw	r4,144(sp)
    2c80:	00800044 	movi	r2,1
    2c84:	18800015 	stw	r2,0(r3)
    2c88:	2001a026 	beq	r4,zero,330c <_dtoa_r+0x72c>
    2c8c:	00800074 	movhi	r2,1
    2c90:	10bc2f44 	addi	r2,r2,-3907
    2c94:	20800015 	stw	r2,0(r4)
    2c98:	10bfffc4 	addi	r2,r2,-1
    2c9c:	dfc02017 	ldw	ra,128(sp)
    2ca0:	df001f17 	ldw	fp,124(sp)
    2ca4:	ddc01e17 	ldw	r23,120(sp)
    2ca8:	dd801d17 	ldw	r22,116(sp)
    2cac:	dd401c17 	ldw	r21,112(sp)
    2cb0:	dd001b17 	ldw	r20,108(sp)
    2cb4:	dcc01a17 	ldw	r19,104(sp)
    2cb8:	dc801917 	ldw	r18,100(sp)
    2cbc:	dc401817 	ldw	r17,96(sp)
    2cc0:	dc001717 	ldw	r16,92(sp)
    2cc4:	dec02104 	addi	sp,sp,132
    2cc8:	f800283a 	ret
    2ccc:	d8c02217 	ldw	r3,136(sp)
    2cd0:	d9000317 	ldw	r4,12(sp)
    2cd4:	0089c3c4 	movi	r2,9999
    2cd8:	18800015 	stw	r2,0(r3)
    2cdc:	20017926 	beq	r4,zero,32c4 <_dtoa_r+0x6e4>
    2ce0:	00800074 	movhi	r2,1
    2ce4:	10bc3b04 	addi	r2,r2,-3860
    2ce8:	d9802417 	ldw	r6,144(sp)
    2cec:	303feb26 	beq	r6,zero,2c9c <__alt_data_end+0xfe002c9c>
    2cf0:	10c000c7 	ldb	r3,3(r2)
    2cf4:	18017a1e 	bne	r3,zero,32e0 <_dtoa_r+0x700>
    2cf8:	10c000c4 	addi	r3,r2,3
    2cfc:	d9c02417 	ldw	r7,144(sp)
    2d00:	38c00015 	stw	r3,0(r7)
    2d04:	003fe506 	br	2c9c <__alt_data_end+0xfe002c9c>
    2d08:	04a00034 	movhi	r18,32768
    2d0c:	94bfffc4 	addi	r18,r18,-1
    2d10:	8ca4703a 	and	r18,r17,r18
    2d14:	00800044 	movi	r2,1
    2d18:	98800015 	stw	r2,0(r19)
    2d1c:	9023883a 	mov	r17,r18
    2d20:	003fcc06 	br	2c54 <__alt_data_end+0xfe002c54>
    2d24:	d9400317 	ldw	r5,12(sp)
    2d28:	d8800204 	addi	r2,sp,8
    2d2c:	8828d53a 	srli	r20,r17,20
    2d30:	d8800015 	stw	r2,0(sp)
    2d34:	8009883a 	mov	r4,r16
    2d38:	900d883a 	mov	r6,r18
    2d3c:	d9c00104 	addi	r7,sp,4
    2d40:	0006ce80 	call	6ce8 <__d2b>
    2d44:	1039883a 	mov	fp,r2
    2d48:	a001671e 	bne	r20,zero,32e8 <_dtoa_r+0x708>
    2d4c:	dd400217 	ldw	r21,8(sp)
    2d50:	dd000117 	ldw	r20,4(sp)
    2d54:	00befbc4 	movi	r2,-1041
    2d58:	ad29883a 	add	r20,r21,r20
    2d5c:	a082d616 	blt	r20,r2,38b8 <_dtoa_r+0xcd8>
    2d60:	d9800317 	ldw	r6,12(sp)
    2d64:	013f0384 	movi	r4,-1010
    2d68:	2509c83a 	sub	r4,r4,r20
    2d6c:	a0810484 	addi	r2,r20,1042
    2d70:	8922983a 	sll	r17,r17,r4
    2d74:	3084d83a 	srl	r2,r6,r2
    2d78:	8888b03a 	or	r4,r17,r2
    2d7c:	000c6d00 	call	c6d0 <__floatunsidf>
    2d80:	1009883a 	mov	r4,r2
    2d84:	017f8434 	movhi	r5,65040
    2d88:	00800044 	movi	r2,1
    2d8c:	194b883a 	add	r5,r3,r5
    2d90:	a53fffc4 	addi	r20,r20,-1
    2d94:	d8800f15 	stw	r2,60(sp)
    2d98:	000d883a 	mov	r6,zero
    2d9c:	01cffe34 	movhi	r7,16376
    2da0:	000bcf80 	call	bcf8 <__subdf3>
    2da4:	1009883a 	mov	r4,r2
    2da8:	180b883a 	mov	r5,r3
    2dac:	0198dbf4 	movhi	r6,25455
    2db0:	3190d844 	addi	r6,r6,17249
    2db4:	01cff4f4 	movhi	r7,16339
    2db8:	39e1e9c4 	addi	r7,r7,-30809
    2dbc:	000b60c0 	call	b60c <__muldf3>
    2dc0:	180b883a 	mov	r5,r3
    2dc4:	01a2d874 	movhi	r6,35681
    2dc8:	31b22cc4 	addi	r6,r6,-14157
    2dcc:	01cff1f4 	movhi	r7,16327
    2dd0:	39e28a04 	addi	r7,r7,-30168
    2dd4:	1009883a 	mov	r4,r2
    2dd8:	000a2740 	call	a274 <__adddf3>
    2ddc:	a009883a 	mov	r4,r20
    2de0:	1027883a 	mov	r19,r2
    2de4:	1823883a 	mov	r17,r3
    2de8:	000c6000 	call	c600 <__floatsidf>
    2dec:	1009883a 	mov	r4,r2
    2df0:	180b883a 	mov	r5,r3
    2df4:	019427f4 	movhi	r6,20639
    2df8:	319e7ec4 	addi	r6,r6,31227
    2dfc:	01cff4f4 	movhi	r7,16339
    2e00:	39d104c4 	addi	r7,r7,17427
    2e04:	000b60c0 	call	b60c <__muldf3>
    2e08:	9809883a 	mov	r4,r19
    2e0c:	880b883a 	mov	r5,r17
    2e10:	100d883a 	mov	r6,r2
    2e14:	180f883a 	mov	r7,r3
    2e18:	000a2740 	call	a274 <__adddf3>
    2e1c:	1009883a 	mov	r4,r2
    2e20:	180b883a 	mov	r5,r3
    2e24:	1027883a 	mov	r19,r2
    2e28:	1823883a 	mov	r17,r3
    2e2c:	000c5800 	call	c580 <__fixdfsi>
    2e30:	9809883a 	mov	r4,r19
    2e34:	880b883a 	mov	r5,r17
    2e38:	000d883a 	mov	r6,zero
    2e3c:	000f883a 	mov	r7,zero
    2e40:	d8800615 	stw	r2,24(sp)
    2e44:	000b5200 	call	b520 <__ledf2>
    2e48:	10028416 	blt	r2,zero,385c <_dtoa_r+0xc7c>
    2e4c:	d9000617 	ldw	r4,24(sp)
    2e50:	00800584 	movi	r2,22
    2e54:	11027236 	bltu	r2,r4,3820 <_dtoa_r+0xc40>
    2e58:	200490fa 	slli	r2,r4,3
    2e5c:	00c00074 	movhi	r3,1
    2e60:	18fc5704 	addi	r3,r3,-3748
    2e64:	d9800317 	ldw	r6,12(sp)
    2e68:	1885883a 	add	r2,r3,r2
    2e6c:	11000017 	ldw	r4,0(r2)
    2e70:	11400117 	ldw	r5,4(r2)
    2e74:	900f883a 	mov	r7,r18
    2e78:	000b4480 	call	b448 <__gedf2>
    2e7c:	0082930e 	bge	zero,r2,38cc <_dtoa_r+0xcec>
    2e80:	d9800617 	ldw	r6,24(sp)
    2e84:	d8000e15 	stw	zero,56(sp)
    2e88:	31bfffc4 	addi	r6,r6,-1
    2e8c:	d9800615 	stw	r6,24(sp)
    2e90:	ad2bc83a 	sub	r21,r21,r20
    2e94:	ad7fffc4 	addi	r21,r21,-1
    2e98:	a8026c16 	blt	r21,zero,384c <_dtoa_r+0xc6c>
    2e9c:	d8000815 	stw	zero,32(sp)
    2ea0:	d8800617 	ldw	r2,24(sp)
    2ea4:	10026116 	blt	r2,zero,382c <_dtoa_r+0xc4c>
    2ea8:	a8ab883a 	add	r21,r21,r2
    2eac:	d8800b15 	stw	r2,44(sp)
    2eb0:	d8000a15 	stw	zero,40(sp)
    2eb4:	d9c00417 	ldw	r7,16(sp)
    2eb8:	00800244 	movi	r2,9
    2ebc:	11c11636 	bltu	r2,r7,3318 <_dtoa_r+0x738>
    2ec0:	00800144 	movi	r2,5
    2ec4:	11c4cc0e 	bge	r2,r7,41f8 <_dtoa_r+0x1618>
    2ec8:	39ffff04 	addi	r7,r7,-4
    2ecc:	d9c00415 	stw	r7,16(sp)
    2ed0:	0027883a 	mov	r19,zero
    2ed4:	d8c00417 	ldw	r3,16(sp)
    2ed8:	008000c4 	movi	r2,3
    2edc:	1883aa26 	beq	r3,r2,3d88 <_dtoa_r+0x11a8>
    2ee0:	10c35b0e 	bge	r2,r3,3c50 <_dtoa_r+0x1070>
    2ee4:	d9000417 	ldw	r4,16(sp)
    2ee8:	00800104 	movi	r2,4
    2eec:	2082da26 	beq	r4,r2,3a58 <_dtoa_r+0xe78>
    2ef0:	00800144 	movi	r2,5
    2ef4:	2081091e 	bne	r4,r2,331c <_dtoa_r+0x73c>
    2ef8:	01c00044 	movi	r7,1
    2efc:	d9c00c15 	stw	r7,48(sp)
    2f00:	d8c02117 	ldw	r3,132(sp)
    2f04:	d9000617 	ldw	r4,24(sp)
    2f08:	1907883a 	add	r3,r3,r4
    2f0c:	19800044 	addi	r6,r3,1
    2f10:	d8c00d15 	stw	r3,52(sp)
    2f14:	d9800915 	stw	r6,36(sp)
    2f18:	0183a90e 	bge	zero,r6,3dc0 <_dtoa_r+0x11e0>
    2f1c:	d9800917 	ldw	r6,36(sp)
    2f20:	80001115 	stw	zero,68(r16)
    2f24:	008005c4 	movi	r2,23
    2f28:	1184b52e 	bgeu	r2,r6,4200 <_dtoa_r+0x1620>
    2f2c:	00c00044 	movi	r3,1
    2f30:	00800104 	movi	r2,4
    2f34:	1085883a 	add	r2,r2,r2
    2f38:	11000504 	addi	r4,r2,20
    2f3c:	180b883a 	mov	r5,r3
    2f40:	18c00044 	addi	r3,r3,1
    2f44:	313ffb2e 	bgeu	r6,r4,2f34 <__alt_data_end+0xfe002f34>
    2f48:	81401115 	stw	r5,68(r16)
    2f4c:	3023883a 	mov	r17,r6
    2f50:	8009883a 	mov	r4,r16
    2f54:	00060c80 	call	60c8 <_Balloc>
    2f58:	d8800715 	stw	r2,28(sp)
    2f5c:	80801015 	stw	r2,64(r16)
    2f60:	00800384 	movi	r2,14
    2f64:	1440f936 	bltu	r2,r17,334c <_dtoa_r+0x76c>
    2f68:	9800f826 	beq	r19,zero,334c <_dtoa_r+0x76c>
    2f6c:	d9c00617 	ldw	r7,24(sp)
    2f70:	01c39c0e 	bge	zero,r7,3de4 <_dtoa_r+0x1204>
    2f74:	388003cc 	andi	r2,r7,15
    2f78:	100490fa 	slli	r2,r2,3
    2f7c:	382dd13a 	srai	r22,r7,4
    2f80:	00c00074 	movhi	r3,1
    2f84:	18fc5704 	addi	r3,r3,-3748
    2f88:	1885883a 	add	r2,r3,r2
    2f8c:	b0c0040c 	andi	r3,r22,16
    2f90:	12800017 	ldw	r10,0(r2)
    2f94:	12400117 	ldw	r9,4(r2)
    2f98:	18038526 	beq	r3,zero,3db0 <_dtoa_r+0x11d0>
    2f9c:	00800074 	movhi	r2,1
    2fa0:	10bc4d04 	addi	r2,r2,-3788
    2fa4:	11800817 	ldw	r6,32(r2)
    2fa8:	11c00917 	ldw	r7,36(r2)
    2fac:	d9000317 	ldw	r4,12(sp)
    2fb0:	900b883a 	mov	r5,r18
    2fb4:	da401515 	stw	r9,84(sp)
    2fb8:	da801615 	stw	r10,88(sp)
    2fbc:	000aaf00 	call	aaf0 <__divdf3>
    2fc0:	da401517 	ldw	r9,84(sp)
    2fc4:	da801617 	ldw	r10,88(sp)
    2fc8:	1027883a 	mov	r19,r2
    2fcc:	1829883a 	mov	r20,r3
    2fd0:	b58003cc 	andi	r22,r22,15
    2fd4:	044000c4 	movi	r17,3
    2fd8:	b0001126 	beq	r22,zero,3020 <_dtoa_r+0x440>
    2fdc:	05c00074 	movhi	r23,1
    2fe0:	bdfc4d04 	addi	r23,r23,-3788
    2fe4:	5005883a 	mov	r2,r10
    2fe8:	4807883a 	mov	r3,r9
    2fec:	b180004c 	andi	r6,r22,1
    2ff0:	1009883a 	mov	r4,r2
    2ff4:	b02dd07a 	srai	r22,r22,1
    2ff8:	180b883a 	mov	r5,r3
    2ffc:	30000426 	beq	r6,zero,3010 <_dtoa_r+0x430>
    3000:	b9800017 	ldw	r6,0(r23)
    3004:	b9c00117 	ldw	r7,4(r23)
    3008:	8c400044 	addi	r17,r17,1
    300c:	000b60c0 	call	b60c <__muldf3>
    3010:	bdc00204 	addi	r23,r23,8
    3014:	b03ff51e 	bne	r22,zero,2fec <__alt_data_end+0xfe002fec>
    3018:	1015883a 	mov	r10,r2
    301c:	1813883a 	mov	r9,r3
    3020:	9809883a 	mov	r4,r19
    3024:	a00b883a 	mov	r5,r20
    3028:	500d883a 	mov	r6,r10
    302c:	480f883a 	mov	r7,r9
    3030:	000aaf00 	call	aaf0 <__divdf3>
    3034:	1027883a 	mov	r19,r2
    3038:	1829883a 	mov	r20,r3
    303c:	d8c00e17 	ldw	r3,56(sp)
    3040:	18000626 	beq	r3,zero,305c <_dtoa_r+0x47c>
    3044:	9809883a 	mov	r4,r19
    3048:	a00b883a 	mov	r5,r20
    304c:	000d883a 	mov	r6,zero
    3050:	01cffc34 	movhi	r7,16368
    3054:	000b5200 	call	b520 <__ledf2>
    3058:	10041516 	blt	r2,zero,40b0 <_dtoa_r+0x14d0>
    305c:	8809883a 	mov	r4,r17
    3060:	000c6000 	call	c600 <__floatsidf>
    3064:	1009883a 	mov	r4,r2
    3068:	180b883a 	mov	r5,r3
    306c:	980d883a 	mov	r6,r19
    3070:	a00f883a 	mov	r7,r20
    3074:	000b60c0 	call	b60c <__muldf3>
    3078:	1009883a 	mov	r4,r2
    307c:	180b883a 	mov	r5,r3
    3080:	000d883a 	mov	r6,zero
    3084:	01d00734 	movhi	r7,16412
    3088:	000a2740 	call	a274 <__adddf3>
    308c:	1023883a 	mov	r17,r2
    3090:	d8800917 	ldw	r2,36(sp)
    3094:	05bf3034 	movhi	r22,64704
    3098:	1daf883a 	add	r23,r3,r22
    309c:	10031e26 	beq	r2,zero,3d18 <_dtoa_r+0x1138>
    30a0:	d8c00617 	ldw	r3,24(sp)
    30a4:	dac00917 	ldw	r11,36(sp)
    30a8:	d8c01315 	stw	r3,76(sp)
    30ac:	d9000c17 	ldw	r4,48(sp)
    30b0:	20039626 	beq	r4,zero,3f0c <_dtoa_r+0x132c>
    30b4:	58bfffc4 	addi	r2,r11,-1
    30b8:	100490fa 	slli	r2,r2,3
    30bc:	00c00074 	movhi	r3,1
    30c0:	18fc5704 	addi	r3,r3,-3748
    30c4:	0009883a 	mov	r4,zero
    30c8:	1885883a 	add	r2,r3,r2
    30cc:	11800017 	ldw	r6,0(r2)
    30d0:	11c00117 	ldw	r7,4(r2)
    30d4:	d8800717 	ldw	r2,28(sp)
    30d8:	014ff834 	movhi	r5,16352
    30dc:	dac01615 	stw	r11,88(sp)
    30e0:	15800044 	addi	r22,r2,1
    30e4:	000aaf00 	call	aaf0 <__divdf3>
    30e8:	880d883a 	mov	r6,r17
    30ec:	b80f883a 	mov	r7,r23
    30f0:	1009883a 	mov	r4,r2
    30f4:	180b883a 	mov	r5,r3
    30f8:	000bcf80 	call	bcf8 <__subdf3>
    30fc:	a00b883a 	mov	r5,r20
    3100:	9809883a 	mov	r4,r19
    3104:	102f883a 	mov	r23,r2
    3108:	d8c01015 	stw	r3,64(sp)
    310c:	000c5800 	call	c580 <__fixdfsi>
    3110:	1009883a 	mov	r4,r2
    3114:	d8801515 	stw	r2,84(sp)
    3118:	000c6000 	call	c600 <__floatsidf>
    311c:	9809883a 	mov	r4,r19
    3120:	a00b883a 	mov	r5,r20
    3124:	100d883a 	mov	r6,r2
    3128:	180f883a 	mov	r7,r3
    312c:	000bcf80 	call	bcf8 <__subdf3>
    3130:	da401517 	ldw	r9,84(sp)
    3134:	1827883a 	mov	r19,r3
    3138:	d8c00717 	ldw	r3,28(sp)
    313c:	d9401017 	ldw	r5,64(sp)
    3140:	4a400c04 	addi	r9,r9,48
    3144:	1023883a 	mov	r17,r2
    3148:	1a400005 	stb	r9,0(r3)
    314c:	b809883a 	mov	r4,r23
    3150:	880d883a 	mov	r6,r17
    3154:	980f883a 	mov	r7,r19
    3158:	4829883a 	mov	r20,r9
    315c:	000b4480 	call	b448 <__gedf2>
    3160:	00842216 	blt	zero,r2,41ec <_dtoa_r+0x160c>
    3164:	0009883a 	mov	r4,zero
    3168:	014ffc34 	movhi	r5,16368
    316c:	880d883a 	mov	r6,r17
    3170:	980f883a 	mov	r7,r19
    3174:	000bcf80 	call	bcf8 <__subdf3>
    3178:	d9401017 	ldw	r5,64(sp)
    317c:	b809883a 	mov	r4,r23
    3180:	100d883a 	mov	r6,r2
    3184:	180f883a 	mov	r7,r3
    3188:	000b4480 	call	b448 <__gedf2>
    318c:	dac01617 	ldw	r11,88(sp)
    3190:	00841316 	blt	zero,r2,41e0 <_dtoa_r+0x1600>
    3194:	00800044 	movi	r2,1
    3198:	12c06c0e 	bge	r2,r11,334c <_dtoa_r+0x76c>
    319c:	d9000717 	ldw	r4,28(sp)
    31a0:	dd401215 	stw	r21,72(sp)
    31a4:	dc001115 	stw	r16,68(sp)
    31a8:	22d7883a 	add	r11,r4,r11
    31ac:	dc801415 	stw	r18,80(sp)
    31b0:	582b883a 	mov	r21,r11
    31b4:	b021883a 	mov	r16,r22
    31b8:	dc801017 	ldw	r18,64(sp)
    31bc:	00000906 	br	31e4 <_dtoa_r+0x604>
    31c0:	000bcf80 	call	bcf8 <__subdf3>
    31c4:	1009883a 	mov	r4,r2
    31c8:	180b883a 	mov	r5,r3
    31cc:	b80d883a 	mov	r6,r23
    31d0:	900f883a 	mov	r7,r18
    31d4:	000b5200 	call	b520 <__ledf2>
    31d8:	1003ea16 	blt	r2,zero,4184 <_dtoa_r+0x15a4>
    31dc:	b543ed26 	beq	r22,r21,4194 <_dtoa_r+0x15b4>
    31e0:	b021883a 	mov	r16,r22
    31e4:	b809883a 	mov	r4,r23
    31e8:	900b883a 	mov	r5,r18
    31ec:	000d883a 	mov	r6,zero
    31f0:	01d00934 	movhi	r7,16420
    31f4:	000b60c0 	call	b60c <__muldf3>
    31f8:	000d883a 	mov	r6,zero
    31fc:	01d00934 	movhi	r7,16420
    3200:	8809883a 	mov	r4,r17
    3204:	980b883a 	mov	r5,r19
    3208:	102f883a 	mov	r23,r2
    320c:	1825883a 	mov	r18,r3
    3210:	000b60c0 	call	b60c <__muldf3>
    3214:	180b883a 	mov	r5,r3
    3218:	1009883a 	mov	r4,r2
    321c:	1823883a 	mov	r17,r3
    3220:	1027883a 	mov	r19,r2
    3224:	000c5800 	call	c580 <__fixdfsi>
    3228:	1009883a 	mov	r4,r2
    322c:	1029883a 	mov	r20,r2
    3230:	000c6000 	call	c600 <__floatsidf>
    3234:	9809883a 	mov	r4,r19
    3238:	880b883a 	mov	r5,r17
    323c:	100d883a 	mov	r6,r2
    3240:	180f883a 	mov	r7,r3
    3244:	000bcf80 	call	bcf8 <__subdf3>
    3248:	a5000c04 	addi	r20,r20,48
    324c:	1009883a 	mov	r4,r2
    3250:	180b883a 	mov	r5,r3
    3254:	b80d883a 	mov	r6,r23
    3258:	900f883a 	mov	r7,r18
    325c:	85000005 	stb	r20,0(r16)
    3260:	1023883a 	mov	r17,r2
    3264:	1827883a 	mov	r19,r3
    3268:	000b5200 	call	b520 <__ledf2>
    326c:	b5800044 	addi	r22,r22,1
    3270:	0009883a 	mov	r4,zero
    3274:	014ffc34 	movhi	r5,16368
    3278:	880d883a 	mov	r6,r17
    327c:	980f883a 	mov	r7,r19
    3280:	103fcf0e 	bge	r2,zero,31c0 <__alt_data_end+0xfe0031c0>
    3284:	d8c01317 	ldw	r3,76(sp)
    3288:	dc001117 	ldw	r16,68(sp)
    328c:	d8c00615 	stw	r3,24(sp)
    3290:	8009883a 	mov	r4,r16
    3294:	e00b883a 	mov	r5,fp
    3298:	00061700 	call	6170 <_Bfree>
    329c:	d9800617 	ldw	r6,24(sp)
    32a0:	d9c02217 	ldw	r7,136(sp)
    32a4:	b0000005 	stb	zero,0(r22)
    32a8:	30800044 	addi	r2,r6,1
    32ac:	38800015 	stw	r2,0(r7)
    32b0:	d8802417 	ldw	r2,144(sp)
    32b4:	10026426 	beq	r2,zero,3c48 <_dtoa_r+0x1068>
    32b8:	15800015 	stw	r22,0(r2)
    32bc:	d8800717 	ldw	r2,28(sp)
    32c0:	003e7606 	br	2c9c <__alt_data_end+0xfe002c9c>
    32c4:	00800434 	movhi	r2,16
    32c8:	10bfffc4 	addi	r2,r2,-1
    32cc:	88a2703a 	and	r17,r17,r2
    32d0:	883e831e 	bne	r17,zero,2ce0 <__alt_data_end+0xfe002ce0>
    32d4:	00800074 	movhi	r2,1
    32d8:	10bc3804 	addi	r2,r2,-3872
    32dc:	003e8206 	br	2ce8 <__alt_data_end+0xfe002ce8>
    32e0:	10c00204 	addi	r3,r2,8
    32e4:	003e8506 	br	2cfc <__alt_data_end+0xfe002cfc>
    32e8:	01400434 	movhi	r5,16
    32ec:	297fffc4 	addi	r5,r5,-1
    32f0:	914a703a 	and	r5,r18,r5
    32f4:	d9000317 	ldw	r4,12(sp)
    32f8:	294ffc34 	orhi	r5,r5,16368
    32fc:	a53f0044 	addi	r20,r20,-1023
    3300:	dd400217 	ldw	r21,8(sp)
    3304:	d8000f15 	stw	zero,60(sp)
    3308:	003ea306 	br	2d98 <__alt_data_end+0xfe002d98>
    330c:	00800074 	movhi	r2,1
    3310:	10bc2f04 	addi	r2,r2,-3908
    3314:	003e6106 	br	2c9c <__alt_data_end+0xfe002c9c>
    3318:	d8000415 	stw	zero,16(sp)
    331c:	8009883a 	mov	r4,r16
    3320:	80001115 	stw	zero,68(r16)
    3324:	000b883a 	mov	r5,zero
    3328:	00060c80 	call	60c8 <_Balloc>
    332c:	00ffffc4 	movi	r3,-1
    3330:	01000044 	movi	r4,1
    3334:	d8800715 	stw	r2,28(sp)
    3338:	d8c00d15 	stw	r3,52(sp)
    333c:	80801015 	stw	r2,64(r16)
    3340:	d8002115 	stw	zero,132(sp)
    3344:	d8c00915 	stw	r3,36(sp)
    3348:	d9000c15 	stw	r4,48(sp)
    334c:	d8800117 	ldw	r2,4(sp)
    3350:	10008e16 	blt	r2,zero,358c <_dtoa_r+0x9ac>
    3354:	d9000617 	ldw	r4,24(sp)
    3358:	00c00384 	movi	r3,14
    335c:	19008b16 	blt	r3,r4,358c <_dtoa_r+0x9ac>
    3360:	200490fa 	slli	r2,r4,3
    3364:	d9802117 	ldw	r6,132(sp)
    3368:	00c00074 	movhi	r3,1
    336c:	18fc5704 	addi	r3,r3,-3748
    3370:	1885883a 	add	r2,r3,r2
    3374:	14400017 	ldw	r17,0(r2)
    3378:	14c00117 	ldw	r19,4(r2)
    337c:	3001be16 	blt	r6,zero,3a78 <_dtoa_r+0xe98>
    3380:	d9000317 	ldw	r4,12(sp)
    3384:	880d883a 	mov	r6,r17
    3388:	980f883a 	mov	r7,r19
    338c:	900b883a 	mov	r5,r18
    3390:	000aaf00 	call	aaf0 <__divdf3>
    3394:	180b883a 	mov	r5,r3
    3398:	1009883a 	mov	r4,r2
    339c:	000c5800 	call	c580 <__fixdfsi>
    33a0:	1009883a 	mov	r4,r2
    33a4:	102f883a 	mov	r23,r2
    33a8:	000c6000 	call	c600 <__floatsidf>
    33ac:	1009883a 	mov	r4,r2
    33b0:	180b883a 	mov	r5,r3
    33b4:	880d883a 	mov	r6,r17
    33b8:	980f883a 	mov	r7,r19
    33bc:	000b60c0 	call	b60c <__muldf3>
    33c0:	d9000317 	ldw	r4,12(sp)
    33c4:	900b883a 	mov	r5,r18
    33c8:	100d883a 	mov	r6,r2
    33cc:	180f883a 	mov	r7,r3
    33d0:	000bcf80 	call	bcf8 <__subdf3>
    33d4:	d9c00717 	ldw	r7,28(sp)
    33d8:	1009883a 	mov	r4,r2
    33dc:	b8800c04 	addi	r2,r23,48
    33e0:	38800005 	stb	r2,0(r7)
    33e4:	3d800044 	addi	r22,r7,1
    33e8:	d9c00917 	ldw	r7,36(sp)
    33ec:	01800044 	movi	r6,1
    33f0:	180b883a 	mov	r5,r3
    33f4:	2005883a 	mov	r2,r4
    33f8:	39803e26 	beq	r7,r6,34f4 <_dtoa_r+0x914>
    33fc:	000d883a 	mov	r6,zero
    3400:	01d00934 	movhi	r7,16420
    3404:	000b60c0 	call	b60c <__muldf3>
    3408:	1009883a 	mov	r4,r2
    340c:	180b883a 	mov	r5,r3
    3410:	000d883a 	mov	r6,zero
    3414:	000f883a 	mov	r7,zero
    3418:	1029883a 	mov	r20,r2
    341c:	182b883a 	mov	r21,r3
    3420:	000b3c40 	call	b3c4 <__eqdf2>
    3424:	103f9a26 	beq	r2,zero,3290 <__alt_data_end+0xfe003290>
    3428:	d8c00717 	ldw	r3,28(sp)
    342c:	d9000917 	ldw	r4,36(sp)
    3430:	b025883a 	mov	r18,r22
    3434:	df000415 	stw	fp,16(sp)
    3438:	1905883a 	add	r2,r3,r4
    343c:	15ffffc4 	addi	r23,r2,-1
    3440:	dc000315 	stw	r16,12(sp)
    3444:	00000a06 	br	3470 <_dtoa_r+0x890>
    3448:	000b60c0 	call	b60c <__muldf3>
    344c:	1009883a 	mov	r4,r2
    3450:	180b883a 	mov	r5,r3
    3454:	000d883a 	mov	r6,zero
    3458:	000f883a 	mov	r7,zero
    345c:	1029883a 	mov	r20,r2
    3460:	182b883a 	mov	r21,r3
    3464:	000b3c40 	call	b3c4 <__eqdf2>
    3468:	10021926 	beq	r2,zero,3cd0 <_dtoa_r+0x10f0>
    346c:	e025883a 	mov	r18,fp
    3470:	880d883a 	mov	r6,r17
    3474:	980f883a 	mov	r7,r19
    3478:	a009883a 	mov	r4,r20
    347c:	a80b883a 	mov	r5,r21
    3480:	000aaf00 	call	aaf0 <__divdf3>
    3484:	180b883a 	mov	r5,r3
    3488:	1009883a 	mov	r4,r2
    348c:	000c5800 	call	c580 <__fixdfsi>
    3490:	1009883a 	mov	r4,r2
    3494:	1021883a 	mov	r16,r2
    3498:	000c6000 	call	c600 <__floatsidf>
    349c:	1009883a 	mov	r4,r2
    34a0:	180b883a 	mov	r5,r3
    34a4:	880d883a 	mov	r6,r17
    34a8:	980f883a 	mov	r7,r19
    34ac:	000b60c0 	call	b60c <__muldf3>
    34b0:	a009883a 	mov	r4,r20
    34b4:	a80b883a 	mov	r5,r21
    34b8:	100d883a 	mov	r6,r2
    34bc:	180f883a 	mov	r7,r3
    34c0:	000bcf80 	call	bcf8 <__subdf3>
    34c4:	82800c04 	addi	r10,r16,48
    34c8:	97000044 	addi	fp,r18,1
    34cc:	92800005 	stb	r10,0(r18)
    34d0:	000d883a 	mov	r6,zero
    34d4:	01d00934 	movhi	r7,16420
    34d8:	1009883a 	mov	r4,r2
    34dc:	180b883a 	mov	r5,r3
    34e0:	e02d883a 	mov	r22,fp
    34e4:	95ffd81e 	bne	r18,r23,3448 <__alt_data_end+0xfe003448>
    34e8:	802f883a 	mov	r23,r16
    34ec:	df000417 	ldw	fp,16(sp)
    34f0:	dc000317 	ldw	r16,12(sp)
    34f4:	1009883a 	mov	r4,r2
    34f8:	180b883a 	mov	r5,r3
    34fc:	100d883a 	mov	r6,r2
    3500:	180f883a 	mov	r7,r3
    3504:	000a2740 	call	a274 <__adddf3>
    3508:	8809883a 	mov	r4,r17
    350c:	980b883a 	mov	r5,r19
    3510:	100d883a 	mov	r6,r2
    3514:	180f883a 	mov	r7,r3
    3518:	1025883a 	mov	r18,r2
    351c:	1829883a 	mov	r20,r3
    3520:	000b5200 	call	b520 <__ledf2>
    3524:	10000816 	blt	r2,zero,3548 <_dtoa_r+0x968>
    3528:	8809883a 	mov	r4,r17
    352c:	980b883a 	mov	r5,r19
    3530:	900d883a 	mov	r6,r18
    3534:	a00f883a 	mov	r7,r20
    3538:	000b3c40 	call	b3c4 <__eqdf2>
    353c:	103f541e 	bne	r2,zero,3290 <__alt_data_end+0xfe003290>
    3540:	bdc0004c 	andi	r23,r23,1
    3544:	b83f5226 	beq	r23,zero,3290 <__alt_data_end+0xfe003290>
    3548:	b53fffc3 	ldbu	r20,-1(r22)
    354c:	b0ffff84 	addi	r3,r22,-2
    3550:	01400e44 	movi	r5,57
    3554:	d9800717 	ldw	r6,28(sp)
    3558:	00000406 	br	356c <_dtoa_r+0x98c>
    355c:	30824326 	beq	r6,r2,3e6c <_dtoa_r+0x128c>
    3560:	1d000003 	ldbu	r20,0(r3)
    3564:	102d883a 	mov	r22,r2
    3568:	18ffffc4 	addi	r3,r3,-1
    356c:	a1003fcc 	andi	r4,r20,255
    3570:	2100201c 	xori	r4,r4,128
    3574:	213fe004 	addi	r4,r4,-128
    3578:	b0bfffc4 	addi	r2,r22,-1
    357c:	217ff726 	beq	r4,r5,355c <__alt_data_end+0xfe00355c>
    3580:	a2400044 	addi	r9,r20,1
    3584:	12400005 	stb	r9,0(r2)
    3588:	003f4106 	br	3290 <__alt_data_end+0xfe003290>
    358c:	d9000c17 	ldw	r4,48(sp)
    3590:	2000be26 	beq	r4,zero,388c <_dtoa_r+0xcac>
    3594:	d9800417 	ldw	r6,16(sp)
    3598:	00c00044 	movi	r3,1
    359c:	19815e0e 	bge	r3,r6,3b18 <_dtoa_r+0xf38>
    35a0:	d8800917 	ldw	r2,36(sp)
    35a4:	d8c00a17 	ldw	r3,40(sp)
    35a8:	153fffc4 	addi	r20,r2,-1
    35ac:	1d01f816 	blt	r3,r20,3d90 <_dtoa_r+0x11b0>
    35b0:	1d29c83a 	sub	r20,r3,r20
    35b4:	d9c00917 	ldw	r7,36(sp)
    35b8:	3802ad16 	blt	r7,zero,4070 <_dtoa_r+0x1490>
    35bc:	dcc00817 	ldw	r19,32(sp)
    35c0:	d8800917 	ldw	r2,36(sp)
    35c4:	d8c00817 	ldw	r3,32(sp)
    35c8:	8009883a 	mov	r4,r16
    35cc:	01400044 	movi	r5,1
    35d0:	1887883a 	add	r3,r3,r2
    35d4:	d8c00815 	stw	r3,32(sp)
    35d8:	a8ab883a 	add	r21,r21,r2
    35dc:	00064c80 	call	64c8 <__i2b>
    35e0:	1023883a 	mov	r17,r2
    35e4:	98000826 	beq	r19,zero,3608 <_dtoa_r+0xa28>
    35e8:	0540070e 	bge	zero,r21,3608 <_dtoa_r+0xa28>
    35ec:	a805883a 	mov	r2,r21
    35f0:	9d411716 	blt	r19,r21,3a50 <_dtoa_r+0xe70>
    35f4:	d9000817 	ldw	r4,32(sp)
    35f8:	98a7c83a 	sub	r19,r19,r2
    35fc:	a8abc83a 	sub	r21,r21,r2
    3600:	2089c83a 	sub	r4,r4,r2
    3604:	d9000815 	stw	r4,32(sp)
    3608:	d9800a17 	ldw	r6,40(sp)
    360c:	0180140e 	bge	zero,r6,3660 <_dtoa_r+0xa80>
    3610:	d9c00c17 	ldw	r7,48(sp)
    3614:	3801d626 	beq	r7,zero,3d70 <_dtoa_r+0x1190>
    3618:	05000e0e 	bge	zero,r20,3654 <_dtoa_r+0xa74>
    361c:	880b883a 	mov	r5,r17
    3620:	8009883a 	mov	r4,r16
    3624:	a00d883a 	mov	r6,r20
    3628:	00066f00 	call	66f0 <__pow5mult>
    362c:	e00d883a 	mov	r6,fp
    3630:	8009883a 	mov	r4,r16
    3634:	100b883a 	mov	r5,r2
    3638:	1023883a 	mov	r17,r2
    363c:	00065040 	call	6504 <__multiply>
    3640:	102d883a 	mov	r22,r2
    3644:	e00b883a 	mov	r5,fp
    3648:	8009883a 	mov	r4,r16
    364c:	00061700 	call	6170 <_Bfree>
    3650:	b039883a 	mov	fp,r22
    3654:	d8800a17 	ldw	r2,40(sp)
    3658:	150dc83a 	sub	r6,r2,r20
    365c:	30011f1e 	bne	r6,zero,3adc <_dtoa_r+0xefc>
    3660:	8009883a 	mov	r4,r16
    3664:	01400044 	movi	r5,1
    3668:	00064c80 	call	64c8 <__i2b>
    366c:	d8c00b17 	ldw	r3,44(sp)
    3670:	1029883a 	mov	r20,r2
    3674:	00c0050e 	bge	zero,r3,368c <_dtoa_r+0xaac>
    3678:	8009883a 	mov	r4,r16
    367c:	100b883a 	mov	r5,r2
    3680:	180d883a 	mov	r6,r3
    3684:	00066f00 	call	66f0 <__pow5mult>
    3688:	1029883a 	mov	r20,r2
    368c:	d9000417 	ldw	r4,16(sp)
    3690:	00800044 	movi	r2,1
    3694:	1100e00e 	bge	r2,r4,3a18 <_dtoa_r+0xe38>
    3698:	0025883a 	mov	r18,zero
    369c:	d8800b17 	ldw	r2,44(sp)
    36a0:	10015f1e 	bne	r2,zero,3c20 <_dtoa_r+0x1040>
    36a4:	00800044 	movi	r2,1
    36a8:	1545883a 	add	r2,r2,r21
    36ac:	108007cc 	andi	r2,r2,31
    36b0:	10007a26 	beq	r2,zero,389c <_dtoa_r+0xcbc>
    36b4:	01000804 	movi	r4,32
    36b8:	2089c83a 	sub	r4,r4,r2
    36bc:	00c00104 	movi	r3,4
    36c0:	1902d20e 	bge	r3,r4,420c <_dtoa_r+0x162c>
    36c4:	00c00704 	movi	r3,28
    36c8:	1885c83a 	sub	r2,r3,r2
    36cc:	d8c00817 	ldw	r3,32(sp)
    36d0:	98a7883a 	add	r19,r19,r2
    36d4:	a8ab883a 	add	r21,r21,r2
    36d8:	1887883a 	add	r3,r3,r2
    36dc:	d8c00815 	stw	r3,32(sp)
    36e0:	d9800817 	ldw	r6,32(sp)
    36e4:	0180040e 	bge	zero,r6,36f8 <_dtoa_r+0xb18>
    36e8:	e00b883a 	mov	r5,fp
    36ec:	8009883a 	mov	r4,r16
    36f0:	00068380 	call	6838 <__lshift>
    36f4:	1039883a 	mov	fp,r2
    36f8:	0540050e 	bge	zero,r21,3710 <_dtoa_r+0xb30>
    36fc:	a00b883a 	mov	r5,r20
    3700:	8009883a 	mov	r4,r16
    3704:	a80d883a 	mov	r6,r21
    3708:	00068380 	call	6838 <__lshift>
    370c:	1029883a 	mov	r20,r2
    3710:	d9c00e17 	ldw	r7,56(sp)
    3714:	3801301e 	bne	r7,zero,3bd8 <_dtoa_r+0xff8>
    3718:	d9c00917 	ldw	r7,36(sp)
    371c:	01c1500e 	bge	zero,r7,3c60 <_dtoa_r+0x1080>
    3720:	d8800c17 	ldw	r2,48(sp)
    3724:	10006b1e 	bne	r2,zero,38d4 <_dtoa_r+0xcf4>
    3728:	dc800717 	ldw	r18,28(sp)
    372c:	dcc00917 	ldw	r19,36(sp)
    3730:	902b883a 	mov	r21,r18
    3734:	00000206 	br	3740 <_dtoa_r+0xb60>
    3738:	00061980 	call	6198 <__multadd>
    373c:	1039883a 	mov	fp,r2
    3740:	e009883a 	mov	r4,fp
    3744:	a00b883a 	mov	r5,r20
    3748:	00029dc0 	call	29dc <quorem>
    374c:	10800c04 	addi	r2,r2,48
    3750:	90800005 	stb	r2,0(r18)
    3754:	94800044 	addi	r18,r18,1
    3758:	9547c83a 	sub	r3,r18,r21
    375c:	8009883a 	mov	r4,r16
    3760:	e00b883a 	mov	r5,fp
    3764:	01800284 	movi	r6,10
    3768:	000f883a 	mov	r7,zero
    376c:	1cfff216 	blt	r3,r19,3738 <__alt_data_end+0xfe003738>
    3770:	102f883a 	mov	r23,r2
    3774:	d8800917 	ldw	r2,36(sp)
    3778:	0082410e 	bge	zero,r2,4080 <_dtoa_r+0x14a0>
    377c:	d9000717 	ldw	r4,28(sp)
    3780:	002b883a 	mov	r21,zero
    3784:	20ad883a 	add	r22,r4,r2
    3788:	e00b883a 	mov	r5,fp
    378c:	8009883a 	mov	r4,r16
    3790:	01800044 	movi	r6,1
    3794:	00068380 	call	6838 <__lshift>
    3798:	1009883a 	mov	r4,r2
    379c:	a00b883a 	mov	r5,r20
    37a0:	1039883a 	mov	fp,r2
    37a4:	00069880 	call	6988 <__mcmp>
    37a8:	0080d10e 	bge	zero,r2,3af0 <_dtoa_r+0xf10>
    37ac:	b13fffc3 	ldbu	r4,-1(r22)
    37b0:	b0ffff84 	addi	r3,r22,-2
    37b4:	01800e44 	movi	r6,57
    37b8:	d9c00717 	ldw	r7,28(sp)
    37bc:	00000406 	br	37d0 <_dtoa_r+0xbf0>
    37c0:	38813c26 	beq	r7,r2,3cb4 <_dtoa_r+0x10d4>
    37c4:	19000003 	ldbu	r4,0(r3)
    37c8:	102d883a 	mov	r22,r2
    37cc:	18ffffc4 	addi	r3,r3,-1
    37d0:	21403fcc 	andi	r5,r4,255
    37d4:	2940201c 	xori	r5,r5,128
    37d8:	297fe004 	addi	r5,r5,-128
    37dc:	b0bfffc4 	addi	r2,r22,-1
    37e0:	29bff726 	beq	r5,r6,37c0 <__alt_data_end+0xfe0037c0>
    37e4:	21000044 	addi	r4,r4,1
    37e8:	11000005 	stb	r4,0(r2)
    37ec:	8009883a 	mov	r4,r16
    37f0:	a00b883a 	mov	r5,r20
    37f4:	00061700 	call	6170 <_Bfree>
    37f8:	883ea526 	beq	r17,zero,3290 <__alt_data_end+0xfe003290>
    37fc:	a8000426 	beq	r21,zero,3810 <_dtoa_r+0xc30>
    3800:	ac400326 	beq	r21,r17,3810 <_dtoa_r+0xc30>
    3804:	8009883a 	mov	r4,r16
    3808:	a80b883a 	mov	r5,r21
    380c:	00061700 	call	6170 <_Bfree>
    3810:	8009883a 	mov	r4,r16
    3814:	880b883a 	mov	r5,r17
    3818:	00061700 	call	6170 <_Bfree>
    381c:	003e9c06 	br	3290 <__alt_data_end+0xfe003290>
    3820:	01c00044 	movi	r7,1
    3824:	d9c00e15 	stw	r7,56(sp)
    3828:	003d9906 	br	2e90 <__alt_data_end+0xfe002e90>
    382c:	d8c00817 	ldw	r3,32(sp)
    3830:	d9000617 	ldw	r4,24(sp)
    3834:	d8000b15 	stw	zero,44(sp)
    3838:	1907c83a 	sub	r3,r3,r4
    383c:	010dc83a 	sub	r6,zero,r4
    3840:	d8c00815 	stw	r3,32(sp)
    3844:	d9800a15 	stw	r6,40(sp)
    3848:	003d9a06 	br	2eb4 <__alt_data_end+0xfe002eb4>
    384c:	056bc83a 	sub	r21,zero,r21
    3850:	dd400815 	stw	r21,32(sp)
    3854:	002b883a 	mov	r21,zero
    3858:	003d9106 	br	2ea0 <__alt_data_end+0xfe002ea0>
    385c:	d9000617 	ldw	r4,24(sp)
    3860:	000c6000 	call	c600 <__floatsidf>
    3864:	1009883a 	mov	r4,r2
    3868:	180b883a 	mov	r5,r3
    386c:	980d883a 	mov	r6,r19
    3870:	880f883a 	mov	r7,r17
    3874:	000b3c40 	call	b3c4 <__eqdf2>
    3878:	103d7426 	beq	r2,zero,2e4c <__alt_data_end+0xfe002e4c>
    387c:	d8c00617 	ldw	r3,24(sp)
    3880:	18ffffc4 	addi	r3,r3,-1
    3884:	d8c00615 	stw	r3,24(sp)
    3888:	003d7006 	br	2e4c <__alt_data_end+0xfe002e4c>
    388c:	dd000a17 	ldw	r20,40(sp)
    3890:	dcc00817 	ldw	r19,32(sp)
    3894:	0023883a 	mov	r17,zero
    3898:	003f5206 	br	35e4 <__alt_data_end+0xfe0035e4>
    389c:	00800704 	movi	r2,28
    38a0:	d9000817 	ldw	r4,32(sp)
    38a4:	98a7883a 	add	r19,r19,r2
    38a8:	a8ab883a 	add	r21,r21,r2
    38ac:	2089883a 	add	r4,r4,r2
    38b0:	d9000815 	stw	r4,32(sp)
    38b4:	003f8a06 	br	36e0 <__alt_data_end+0xfe0036e0>
    38b8:	d9c00317 	ldw	r7,12(sp)
    38bc:	013efb84 	movi	r4,-1042
    38c0:	2509c83a 	sub	r4,r4,r20
    38c4:	3908983a 	sll	r4,r7,r4
    38c8:	003d2c06 	br	2d7c <__alt_data_end+0xfe002d7c>
    38cc:	d8000e15 	stw	zero,56(sp)
    38d0:	003d6f06 	br	2e90 <__alt_data_end+0xfe002e90>
    38d4:	04c0050e 	bge	zero,r19,38ec <_dtoa_r+0xd0c>
    38d8:	880b883a 	mov	r5,r17
    38dc:	8009883a 	mov	r4,r16
    38e0:	980d883a 	mov	r6,r19
    38e4:	00068380 	call	6838 <__lshift>
    38e8:	1023883a 	mov	r17,r2
    38ec:	9001681e 	bne	r18,zero,3e90 <_dtoa_r+0x12b0>
    38f0:	8827883a 	mov	r19,r17
    38f4:	d8c00717 	ldw	r3,28(sp)
    38f8:	d9000917 	ldw	r4,36(sp)
    38fc:	1dffffc4 	addi	r23,r3,-1
    3900:	1825883a 	mov	r18,r3
    3904:	d8c00317 	ldw	r3,12(sp)
    3908:	b92f883a 	add	r23,r23,r4
    390c:	ddc00515 	stw	r23,20(sp)
    3910:	18c0004c 	andi	r3,r3,1
    3914:	d8c00315 	stw	r3,12(sp)
    3918:	e009883a 	mov	r4,fp
    391c:	a00b883a 	mov	r5,r20
    3920:	00029dc0 	call	29dc <quorem>
    3924:	e009883a 	mov	r4,fp
    3928:	880b883a 	mov	r5,r17
    392c:	102d883a 	mov	r22,r2
    3930:	00069880 	call	6988 <__mcmp>
    3934:	8009883a 	mov	r4,r16
    3938:	a00b883a 	mov	r5,r20
    393c:	980d883a 	mov	r6,r19
    3940:	102b883a 	mov	r21,r2
    3944:	00069e80 	call	69e8 <__mdiff>
    3948:	1007883a 	mov	r3,r2
    394c:	10800317 	ldw	r2,12(r2)
    3950:	b5c00c04 	addi	r23,r22,48
    3954:	10009b1e 	bne	r2,zero,3bc4 <_dtoa_r+0xfe4>
    3958:	180b883a 	mov	r5,r3
    395c:	e009883a 	mov	r4,fp
    3960:	d8c01515 	stw	r3,84(sp)
    3964:	00069880 	call	6988 <__mcmp>
    3968:	d8c01517 	ldw	r3,84(sp)
    396c:	8009883a 	mov	r4,r16
    3970:	d8801515 	stw	r2,84(sp)
    3974:	180b883a 	mov	r5,r3
    3978:	00061700 	call	6170 <_Bfree>
    397c:	d8801517 	ldw	r2,84(sp)
    3980:	1000041e 	bne	r2,zero,3994 <_dtoa_r+0xdb4>
    3984:	d9000417 	ldw	r4,16(sp)
    3988:	2000021e 	bne	r4,zero,3994 <_dtoa_r+0xdb4>
    398c:	d8c00317 	ldw	r3,12(sp)
    3990:	18007926 	beq	r3,zero,3b78 <_dtoa_r+0xf98>
    3994:	a8006616 	blt	r21,zero,3b30 <_dtoa_r+0xf50>
    3998:	a800041e 	bne	r21,zero,39ac <_dtoa_r+0xdcc>
    399c:	d9000417 	ldw	r4,16(sp)
    39a0:	2000021e 	bne	r4,zero,39ac <_dtoa_r+0xdcc>
    39a4:	d8c00317 	ldw	r3,12(sp)
    39a8:	18006126 	beq	r3,zero,3b30 <_dtoa_r+0xf50>
    39ac:	00814916 	blt	zero,r2,3ed4 <_dtoa_r+0x12f4>
    39b0:	d8c00517 	ldw	r3,20(sp)
    39b4:	95400044 	addi	r21,r18,1
    39b8:	95c00005 	stb	r23,0(r18)
    39bc:	a82d883a 	mov	r22,r21
    39c0:	90c14c26 	beq	r18,r3,3ef4 <_dtoa_r+0x1314>
    39c4:	e00b883a 	mov	r5,fp
    39c8:	8009883a 	mov	r4,r16
    39cc:	01800284 	movi	r6,10
    39d0:	000f883a 	mov	r7,zero
    39d4:	00061980 	call	6198 <__multadd>
    39d8:	1039883a 	mov	fp,r2
    39dc:	8cc07026 	beq	r17,r19,3ba0 <_dtoa_r+0xfc0>
    39e0:	880b883a 	mov	r5,r17
    39e4:	01800284 	movi	r6,10
    39e8:	000f883a 	mov	r7,zero
    39ec:	8009883a 	mov	r4,r16
    39f0:	00061980 	call	6198 <__multadd>
    39f4:	980b883a 	mov	r5,r19
    39f8:	8009883a 	mov	r4,r16
    39fc:	01800284 	movi	r6,10
    3a00:	000f883a 	mov	r7,zero
    3a04:	1023883a 	mov	r17,r2
    3a08:	00061980 	call	6198 <__multadd>
    3a0c:	1027883a 	mov	r19,r2
    3a10:	a825883a 	mov	r18,r21
    3a14:	003fc006 	br	3918 <__alt_data_end+0xfe003918>
    3a18:	d9800317 	ldw	r6,12(sp)
    3a1c:	303f1e1e 	bne	r6,zero,3698 <__alt_data_end+0xfe003698>
    3a20:	00c00434 	movhi	r3,16
    3a24:	18ffffc4 	addi	r3,r3,-1
    3a28:	90c6703a 	and	r3,r18,r3
    3a2c:	183f1a1e 	bne	r3,zero,3698 <__alt_data_end+0xfe003698>
    3a30:	949ffc2c 	andhi	r18,r18,32752
    3a34:	903f1826 	beq	r18,zero,3698 <__alt_data_end+0xfe003698>
    3a38:	d9c00817 	ldw	r7,32(sp)
    3a3c:	a8ab883a 	add	r21,r21,r2
    3a40:	1025883a 	mov	r18,r2
    3a44:	388f883a 	add	r7,r7,r2
    3a48:	d9c00815 	stw	r7,32(sp)
    3a4c:	003f1306 	br	369c <__alt_data_end+0xfe00369c>
    3a50:	9805883a 	mov	r2,r19
    3a54:	003ee706 	br	35f4 <__alt_data_end+0xfe0035f4>
    3a58:	01800044 	movi	r6,1
    3a5c:	d9800c15 	stw	r6,48(sp)
    3a60:	d8802117 	ldw	r2,132(sp)
    3a64:	0080da0e 	bge	zero,r2,3dd0 <_dtoa_r+0x11f0>
    3a68:	100d883a 	mov	r6,r2
    3a6c:	d8800d15 	stw	r2,52(sp)
    3a70:	d8800915 	stw	r2,36(sp)
    3a74:	003d2a06 	br	2f20 <__alt_data_end+0xfe002f20>
    3a78:	d8800917 	ldw	r2,36(sp)
    3a7c:	00be4016 	blt	zero,r2,3380 <__alt_data_end+0xfe003380>
    3a80:	1000b81e 	bne	r2,zero,3d64 <_dtoa_r+0x1184>
    3a84:	8809883a 	mov	r4,r17
    3a88:	980b883a 	mov	r5,r19
    3a8c:	000d883a 	mov	r6,zero
    3a90:	01d00534 	movhi	r7,16404
    3a94:	000b60c0 	call	b60c <__muldf3>
    3a98:	d9800317 	ldw	r6,12(sp)
    3a9c:	1009883a 	mov	r4,r2
    3aa0:	180b883a 	mov	r5,r3
    3aa4:	900f883a 	mov	r7,r18
    3aa8:	000b4480 	call	b448 <__gedf2>
    3aac:	0029883a 	mov	r20,zero
    3ab0:	0023883a 	mov	r17,zero
    3ab4:	10007716 	blt	r2,zero,3c94 <_dtoa_r+0x10b4>
    3ab8:	d9002117 	ldw	r4,132(sp)
    3abc:	dd800717 	ldw	r22,28(sp)
    3ac0:	0108303a 	nor	r4,zero,r4
    3ac4:	d9000615 	stw	r4,24(sp)
    3ac8:	8009883a 	mov	r4,r16
    3acc:	a00b883a 	mov	r5,r20
    3ad0:	00061700 	call	6170 <_Bfree>
    3ad4:	883f4e1e 	bne	r17,zero,3810 <__alt_data_end+0xfe003810>
    3ad8:	003ded06 	br	3290 <__alt_data_end+0xfe003290>
    3adc:	e00b883a 	mov	r5,fp
    3ae0:	8009883a 	mov	r4,r16
    3ae4:	00066f00 	call	66f0 <__pow5mult>
    3ae8:	1039883a 	mov	fp,r2
    3aec:	003edc06 	br	3660 <__alt_data_end+0xfe003660>
    3af0:	1000021e 	bne	r2,zero,3afc <_dtoa_r+0xf1c>
    3af4:	ba40004c 	andi	r9,r23,1
    3af8:	483f2c1e 	bne	r9,zero,37ac <__alt_data_end+0xfe0037ac>
    3afc:	01000c04 	movi	r4,48
    3b00:	00000106 	br	3b08 <_dtoa_r+0xf28>
    3b04:	102d883a 	mov	r22,r2
    3b08:	b0bfffc4 	addi	r2,r22,-1
    3b0c:	10c00007 	ldb	r3,0(r2)
    3b10:	193ffc26 	beq	r3,r4,3b04 <__alt_data_end+0xfe003b04>
    3b14:	003f3506 	br	37ec <__alt_data_end+0xfe0037ec>
    3b18:	d9c00f17 	ldw	r7,60(sp)
    3b1c:	38015a26 	beq	r7,zero,4088 <_dtoa_r+0x14a8>
    3b20:	10810cc4 	addi	r2,r2,1075
    3b24:	dd000a17 	ldw	r20,40(sp)
    3b28:	dcc00817 	ldw	r19,32(sp)
    3b2c:	003ea506 	br	35c4 <__alt_data_end+0xfe0035c4>
    3b30:	00800c0e 	bge	zero,r2,3b64 <_dtoa_r+0xf84>
    3b34:	e00b883a 	mov	r5,fp
    3b38:	8009883a 	mov	r4,r16
    3b3c:	01800044 	movi	r6,1
    3b40:	00068380 	call	6838 <__lshift>
    3b44:	1009883a 	mov	r4,r2
    3b48:	a00b883a 	mov	r5,r20
    3b4c:	1039883a 	mov	fp,r2
    3b50:	00069880 	call	6988 <__mcmp>
    3b54:	0081930e 	bge	zero,r2,41a4 <_dtoa_r+0x15c4>
    3b58:	00800e44 	movi	r2,57
    3b5c:	b8800a26 	beq	r23,r2,3b88 <_dtoa_r+0xfa8>
    3b60:	b5c00c44 	addi	r23,r22,49
    3b64:	882b883a 	mov	r21,r17
    3b68:	95800044 	addi	r22,r18,1
    3b6c:	95c00005 	stb	r23,0(r18)
    3b70:	9823883a 	mov	r17,r19
    3b74:	003f1d06 	br	37ec <__alt_data_end+0xfe0037ec>
    3b78:	00800e44 	movi	r2,57
    3b7c:	b8800226 	beq	r23,r2,3b88 <_dtoa_r+0xfa8>
    3b80:	057ff716 	blt	zero,r21,3b60 <__alt_data_end+0xfe003b60>
    3b84:	003ff706 	br	3b64 <__alt_data_end+0xfe003b64>
    3b88:	01000e44 	movi	r4,57
    3b8c:	882b883a 	mov	r21,r17
    3b90:	95800044 	addi	r22,r18,1
    3b94:	91000005 	stb	r4,0(r18)
    3b98:	9823883a 	mov	r17,r19
    3b9c:	003f0406 	br	37b0 <__alt_data_end+0xfe0037b0>
    3ba0:	880b883a 	mov	r5,r17
    3ba4:	8009883a 	mov	r4,r16
    3ba8:	01800284 	movi	r6,10
    3bac:	000f883a 	mov	r7,zero
    3bb0:	00061980 	call	6198 <__multadd>
    3bb4:	1023883a 	mov	r17,r2
    3bb8:	1027883a 	mov	r19,r2
    3bbc:	a825883a 	mov	r18,r21
    3bc0:	003f5506 	br	3918 <__alt_data_end+0xfe003918>
    3bc4:	8009883a 	mov	r4,r16
    3bc8:	180b883a 	mov	r5,r3
    3bcc:	00061700 	call	6170 <_Bfree>
    3bd0:	00800044 	movi	r2,1
    3bd4:	003f6f06 	br	3994 <__alt_data_end+0xfe003994>
    3bd8:	e009883a 	mov	r4,fp
    3bdc:	a00b883a 	mov	r5,r20
    3be0:	00069880 	call	6988 <__mcmp>
    3be4:	103ecc0e 	bge	r2,zero,3718 <__alt_data_end+0xfe003718>
    3be8:	e00b883a 	mov	r5,fp
    3bec:	8009883a 	mov	r4,r16
    3bf0:	01800284 	movi	r6,10
    3bf4:	000f883a 	mov	r7,zero
    3bf8:	00061980 	call	6198 <__multadd>
    3bfc:	1039883a 	mov	fp,r2
    3c00:	d8800617 	ldw	r2,24(sp)
    3c04:	d8c00c17 	ldw	r3,48(sp)
    3c08:	10bfffc4 	addi	r2,r2,-1
    3c0c:	d8800615 	stw	r2,24(sp)
    3c10:	1801681e 	bne	r3,zero,41b4 <_dtoa_r+0x15d4>
    3c14:	d9800d17 	ldw	r6,52(sp)
    3c18:	d9800915 	stw	r6,36(sp)
    3c1c:	003ebe06 	br	3718 <__alt_data_end+0xfe003718>
    3c20:	a0800417 	ldw	r2,16(r20)
    3c24:	10800104 	addi	r2,r2,4
    3c28:	1085883a 	add	r2,r2,r2
    3c2c:	1085883a 	add	r2,r2,r2
    3c30:	a085883a 	add	r2,r20,r2
    3c34:	11000017 	ldw	r4,0(r2)
    3c38:	00063b00 	call	63b0 <__hi0bits>
    3c3c:	00c00804 	movi	r3,32
    3c40:	1885c83a 	sub	r2,r3,r2
    3c44:	003e9806 	br	36a8 <__alt_data_end+0xfe0036a8>
    3c48:	d8800717 	ldw	r2,28(sp)
    3c4c:	003c1306 	br	2c9c <__alt_data_end+0xfe002c9c>
    3c50:	00800084 	movi	r2,2
    3c54:	18bdb11e 	bne	r3,r2,331c <__alt_data_end+0xfe00331c>
    3c58:	d8000c15 	stw	zero,48(sp)
    3c5c:	003f8006 	br	3a60 <__alt_data_end+0xfe003a60>
    3c60:	d8c00417 	ldw	r3,16(sp)
    3c64:	00800084 	movi	r2,2
    3c68:	10fead0e 	bge	r2,r3,3720 <__alt_data_end+0xfe003720>
    3c6c:	383f921e 	bne	r7,zero,3ab8 <__alt_data_end+0xfe003ab8>
    3c70:	a00b883a 	mov	r5,r20
    3c74:	8009883a 	mov	r4,r16
    3c78:	01800144 	movi	r6,5
    3c7c:	00061980 	call	6198 <__multadd>
    3c80:	e009883a 	mov	r4,fp
    3c84:	100b883a 	mov	r5,r2
    3c88:	1029883a 	mov	r20,r2
    3c8c:	00069880 	call	6988 <__mcmp>
    3c90:	00bf890e 	bge	zero,r2,3ab8 <__alt_data_end+0xfe003ab8>
    3c94:	d9c00617 	ldw	r7,24(sp)
    3c98:	d9800717 	ldw	r6,28(sp)
    3c9c:	00800c44 	movi	r2,49
    3ca0:	39c00044 	addi	r7,r7,1
    3ca4:	35800044 	addi	r22,r6,1
    3ca8:	30800005 	stb	r2,0(r6)
    3cac:	d9c00615 	stw	r7,24(sp)
    3cb0:	003f8506 	br	3ac8 <__alt_data_end+0xfe003ac8>
    3cb4:	d9800617 	ldw	r6,24(sp)
    3cb8:	d9c00717 	ldw	r7,28(sp)
    3cbc:	00800c44 	movi	r2,49
    3cc0:	31800044 	addi	r6,r6,1
    3cc4:	d9800615 	stw	r6,24(sp)
    3cc8:	38800005 	stb	r2,0(r7)
    3ccc:	003ec706 	br	37ec <__alt_data_end+0xfe0037ec>
    3cd0:	df000417 	ldw	fp,16(sp)
    3cd4:	dc000317 	ldw	r16,12(sp)
    3cd8:	003d6d06 	br	3290 <__alt_data_end+0xfe003290>
    3cdc:	8809883a 	mov	r4,r17
    3ce0:	000c6000 	call	c600 <__floatsidf>
    3ce4:	9809883a 	mov	r4,r19
    3ce8:	a00b883a 	mov	r5,r20
    3cec:	100d883a 	mov	r6,r2
    3cf0:	180f883a 	mov	r7,r3
    3cf4:	000b60c0 	call	b60c <__muldf3>
    3cf8:	1009883a 	mov	r4,r2
    3cfc:	180b883a 	mov	r5,r3
    3d00:	000d883a 	mov	r6,zero
    3d04:	01d00734 	movhi	r7,16412
    3d08:	000a2740 	call	a274 <__adddf3>
    3d0c:	05bf3034 	movhi	r22,64704
    3d10:	1023883a 	mov	r17,r2
    3d14:	1daf883a 	add	r23,r3,r22
    3d18:	9809883a 	mov	r4,r19
    3d1c:	a00b883a 	mov	r5,r20
    3d20:	000d883a 	mov	r6,zero
    3d24:	01d00534 	movhi	r7,16404
    3d28:	000bcf80 	call	bcf8 <__subdf3>
    3d2c:	1009883a 	mov	r4,r2
    3d30:	180b883a 	mov	r5,r3
    3d34:	880d883a 	mov	r6,r17
    3d38:	b80f883a 	mov	r7,r23
    3d3c:	1027883a 	mov	r19,r2
    3d40:	1829883a 	mov	r20,r3
    3d44:	000b4480 	call	b448 <__gedf2>
    3d48:	00806d16 	blt	zero,r2,3f00 <_dtoa_r+0x1320>
    3d4c:	b9e0003c 	xorhi	r7,r23,32768
    3d50:	9809883a 	mov	r4,r19
    3d54:	a00b883a 	mov	r5,r20
    3d58:	880d883a 	mov	r6,r17
    3d5c:	000b5200 	call	b520 <__ledf2>
    3d60:	103d7a0e 	bge	r2,zero,334c <__alt_data_end+0xfe00334c>
    3d64:	0029883a 	mov	r20,zero
    3d68:	0023883a 	mov	r17,zero
    3d6c:	003f5206 	br	3ab8 <__alt_data_end+0xfe003ab8>
    3d70:	d9800a17 	ldw	r6,40(sp)
    3d74:	e00b883a 	mov	r5,fp
    3d78:	8009883a 	mov	r4,r16
    3d7c:	00066f00 	call	66f0 <__pow5mult>
    3d80:	1039883a 	mov	fp,r2
    3d84:	003e3606 	br	3660 <__alt_data_end+0xfe003660>
    3d88:	d8000c15 	stw	zero,48(sp)
    3d8c:	003c5c06 	br	2f00 <__alt_data_end+0xfe002f00>
    3d90:	d9000a17 	ldw	r4,40(sp)
    3d94:	d9800b17 	ldw	r6,44(sp)
    3d98:	dd000a15 	stw	r20,40(sp)
    3d9c:	a105c83a 	sub	r2,r20,r4
    3da0:	308d883a 	add	r6,r6,r2
    3da4:	d9800b15 	stw	r6,44(sp)
    3da8:	0029883a 	mov	r20,zero
    3dac:	003e0106 	br	35b4 <__alt_data_end+0xfe0035b4>
    3db0:	dcc00317 	ldw	r19,12(sp)
    3db4:	9029883a 	mov	r20,r18
    3db8:	04400084 	movi	r17,2
    3dbc:	003c8606 	br	2fd8 <__alt_data_end+0xfe002fd8>
    3dc0:	3023883a 	mov	r17,r6
    3dc4:	80001115 	stw	zero,68(r16)
    3dc8:	000b883a 	mov	r5,zero
    3dcc:	003c6006 	br	2f50 <__alt_data_end+0xfe002f50>
    3dd0:	04400044 	movi	r17,1
    3dd4:	dc400d15 	stw	r17,52(sp)
    3dd8:	dc400915 	stw	r17,36(sp)
    3ddc:	dc402115 	stw	r17,132(sp)
    3de0:	003ff806 	br	3dc4 <__alt_data_end+0xfe003dc4>
    3de4:	d8800617 	ldw	r2,24(sp)
    3de8:	00adc83a 	sub	r22,zero,r2
    3dec:	b000ac26 	beq	r22,zero,40a0 <_dtoa_r+0x14c0>
    3df0:	b08003cc 	andi	r2,r22,15
    3df4:	100490fa 	slli	r2,r2,3
    3df8:	00c00074 	movhi	r3,1
    3dfc:	18fc5704 	addi	r3,r3,-3748
    3e00:	d9000317 	ldw	r4,12(sp)
    3e04:	1885883a 	add	r2,r3,r2
    3e08:	11800017 	ldw	r6,0(r2)
    3e0c:	11c00117 	ldw	r7,4(r2)
    3e10:	b02dd13a 	srai	r22,r22,4
    3e14:	900b883a 	mov	r5,r18
    3e18:	000b60c0 	call	b60c <__muldf3>
    3e1c:	1027883a 	mov	r19,r2
    3e20:	1829883a 	mov	r20,r3
    3e24:	b000ec26 	beq	r22,zero,41d8 <_dtoa_r+0x15f8>
    3e28:	05c00074 	movhi	r23,1
    3e2c:	bdfc4d04 	addi	r23,r23,-3788
    3e30:	04400084 	movi	r17,2
    3e34:	b180004c 	andi	r6,r22,1
    3e38:	1009883a 	mov	r4,r2
    3e3c:	b02dd07a 	srai	r22,r22,1
    3e40:	180b883a 	mov	r5,r3
    3e44:	30000426 	beq	r6,zero,3e58 <_dtoa_r+0x1278>
    3e48:	b9800017 	ldw	r6,0(r23)
    3e4c:	b9c00117 	ldw	r7,4(r23)
    3e50:	8c400044 	addi	r17,r17,1
    3e54:	000b60c0 	call	b60c <__muldf3>
    3e58:	bdc00204 	addi	r23,r23,8
    3e5c:	b03ff51e 	bne	r22,zero,3e34 <__alt_data_end+0xfe003e34>
    3e60:	1027883a 	mov	r19,r2
    3e64:	1829883a 	mov	r20,r3
    3e68:	003c7406 	br	303c <__alt_data_end+0xfe00303c>
    3e6c:	d9800617 	ldw	r6,24(sp)
    3e70:	d9c00717 	ldw	r7,28(sp)
    3e74:	00c00c04 	movi	r3,48
    3e78:	31800044 	addi	r6,r6,1
    3e7c:	38c00005 	stb	r3,0(r7)
    3e80:	02400c44 	movi	r9,49
    3e84:	d9800615 	stw	r6,24(sp)
    3e88:	12400005 	stb	r9,0(r2)
    3e8c:	003d0006 	br	3290 <__alt_data_end+0xfe003290>
    3e90:	89400117 	ldw	r5,4(r17)
    3e94:	8009883a 	mov	r4,r16
    3e98:	00060c80 	call	60c8 <_Balloc>
    3e9c:	89800417 	ldw	r6,16(r17)
    3ea0:	11000304 	addi	r4,r2,12
    3ea4:	89400304 	addi	r5,r17,12
    3ea8:	31800084 	addi	r6,r6,2
    3eac:	318d883a 	add	r6,r6,r6
    3eb0:	318d883a 	add	r6,r6,r6
    3eb4:	1025883a 	mov	r18,r2
    3eb8:	0005d6c0 	call	5d6c <memcpy>
    3ebc:	8009883a 	mov	r4,r16
    3ec0:	900b883a 	mov	r5,r18
    3ec4:	01800044 	movi	r6,1
    3ec8:	00068380 	call	6838 <__lshift>
    3ecc:	1027883a 	mov	r19,r2
    3ed0:	003e8806 	br	38f4 <__alt_data_end+0xfe0038f4>
    3ed4:	00800e44 	movi	r2,57
    3ed8:	b8bf2b26 	beq	r23,r2,3b88 <__alt_data_end+0xfe003b88>
    3edc:	ba400044 	addi	r9,r23,1
    3ee0:	882b883a 	mov	r21,r17
    3ee4:	95800044 	addi	r22,r18,1
    3ee8:	92400005 	stb	r9,0(r18)
    3eec:	9823883a 	mov	r17,r19
    3ef0:	003e3e06 	br	37ec <__alt_data_end+0xfe0037ec>
    3ef4:	882b883a 	mov	r21,r17
    3ef8:	9823883a 	mov	r17,r19
    3efc:	003e2206 	br	3788 <__alt_data_end+0xfe003788>
    3f00:	0029883a 	mov	r20,zero
    3f04:	0023883a 	mov	r17,zero
    3f08:	003f6206 	br	3c94 <__alt_data_end+0xfe003c94>
    3f0c:	59bfffc4 	addi	r6,r11,-1
    3f10:	300490fa 	slli	r2,r6,3
    3f14:	00c00074 	movhi	r3,1
    3f18:	18fc5704 	addi	r3,r3,-3748
    3f1c:	b80f883a 	mov	r7,r23
    3f20:	1885883a 	add	r2,r3,r2
    3f24:	11000017 	ldw	r4,0(r2)
    3f28:	11400117 	ldw	r5,4(r2)
    3f2c:	d8800717 	ldw	r2,28(sp)
    3f30:	d9801015 	stw	r6,64(sp)
    3f34:	880d883a 	mov	r6,r17
    3f38:	dac01615 	stw	r11,88(sp)
    3f3c:	15800044 	addi	r22,r2,1
    3f40:	000b60c0 	call	b60c <__muldf3>
    3f44:	a00b883a 	mov	r5,r20
    3f48:	9809883a 	mov	r4,r19
    3f4c:	d8c01215 	stw	r3,72(sp)
    3f50:	d8801115 	stw	r2,68(sp)
    3f54:	000c5800 	call	c580 <__fixdfsi>
    3f58:	1009883a 	mov	r4,r2
    3f5c:	1023883a 	mov	r17,r2
    3f60:	000c6000 	call	c600 <__floatsidf>
    3f64:	9809883a 	mov	r4,r19
    3f68:	a00b883a 	mov	r5,r20
    3f6c:	100d883a 	mov	r6,r2
    3f70:	180f883a 	mov	r7,r3
    3f74:	000bcf80 	call	bcf8 <__subdf3>
    3f78:	1815883a 	mov	r10,r3
    3f7c:	d8c00717 	ldw	r3,28(sp)
    3f80:	8c400c04 	addi	r17,r17,48
    3f84:	102f883a 	mov	r23,r2
    3f88:	1c400005 	stb	r17,0(r3)
    3f8c:	dac01617 	ldw	r11,88(sp)
    3f90:	00800044 	movi	r2,1
    3f94:	58802426 	beq	r11,r2,4028 <_dtoa_r+0x1448>
    3f98:	d9800717 	ldw	r6,28(sp)
    3f9c:	dc001415 	stw	r16,80(sp)
    3fa0:	b805883a 	mov	r2,r23
    3fa4:	32d7883a 	add	r11,r6,r11
    3fa8:	b027883a 	mov	r19,r22
    3fac:	5821883a 	mov	r16,r11
    3fb0:	5007883a 	mov	r3,r10
    3fb4:	902f883a 	mov	r23,r18
    3fb8:	000d883a 	mov	r6,zero
    3fbc:	01d00934 	movhi	r7,16420
    3fc0:	1009883a 	mov	r4,r2
    3fc4:	180b883a 	mov	r5,r3
    3fc8:	000b60c0 	call	b60c <__muldf3>
    3fcc:	180b883a 	mov	r5,r3
    3fd0:	1009883a 	mov	r4,r2
    3fd4:	1829883a 	mov	r20,r3
    3fd8:	1025883a 	mov	r18,r2
    3fdc:	000c5800 	call	c580 <__fixdfsi>
    3fe0:	1009883a 	mov	r4,r2
    3fe4:	1023883a 	mov	r17,r2
    3fe8:	000c6000 	call	c600 <__floatsidf>
    3fec:	9009883a 	mov	r4,r18
    3ff0:	a00b883a 	mov	r5,r20
    3ff4:	100d883a 	mov	r6,r2
    3ff8:	180f883a 	mov	r7,r3
    3ffc:	8c400c04 	addi	r17,r17,48
    4000:	000bcf80 	call	bcf8 <__subdf3>
    4004:	9cc00044 	addi	r19,r19,1
    4008:	9c7fffc5 	stb	r17,-1(r19)
    400c:	9c3fea1e 	bne	r19,r16,3fb8 <__alt_data_end+0xfe003fb8>
    4010:	d9c01017 	ldw	r7,64(sp)
    4014:	dc001417 	ldw	r16,80(sp)
    4018:	b825883a 	mov	r18,r23
    401c:	1815883a 	mov	r10,r3
    4020:	102f883a 	mov	r23,r2
    4024:	b1ed883a 	add	r22,r22,r7
    4028:	d9001117 	ldw	r4,68(sp)
    402c:	d9401217 	ldw	r5,72(sp)
    4030:	000d883a 	mov	r6,zero
    4034:	01cff834 	movhi	r7,16352
    4038:	da801615 	stw	r10,88(sp)
    403c:	000a2740 	call	a274 <__adddf3>
    4040:	da801617 	ldw	r10,88(sp)
    4044:	1009883a 	mov	r4,r2
    4048:	180b883a 	mov	r5,r3
    404c:	500f883a 	mov	r7,r10
    4050:	b80d883a 	mov	r6,r23
    4054:	000b5200 	call	b520 <__ledf2>
    4058:	da801617 	ldw	r10,88(sp)
    405c:	1000330e 	bge	r2,zero,412c <_dtoa_r+0x154c>
    4060:	d9001317 	ldw	r4,76(sp)
    4064:	b53fffc3 	ldbu	r20,-1(r22)
    4068:	d9000615 	stw	r4,24(sp)
    406c:	003d3706 	br	354c <__alt_data_end+0xfe00354c>
    4070:	d8800817 	ldw	r2,32(sp)
    4074:	11e7c83a 	sub	r19,r2,r7
    4078:	0005883a 	mov	r2,zero
    407c:	003d5106 	br	35c4 <__alt_data_end+0xfe0035c4>
    4080:	00800044 	movi	r2,1
    4084:	003dbd06 	br	377c <__alt_data_end+0xfe00377c>
    4088:	d8800217 	ldw	r2,8(sp)
    408c:	00c00d84 	movi	r3,54
    4090:	dd000a17 	ldw	r20,40(sp)
    4094:	1885c83a 	sub	r2,r3,r2
    4098:	dcc00817 	ldw	r19,32(sp)
    409c:	003d4906 	br	35c4 <__alt_data_end+0xfe0035c4>
    40a0:	dcc00317 	ldw	r19,12(sp)
    40a4:	9029883a 	mov	r20,r18
    40a8:	04400084 	movi	r17,2
    40ac:	003be306 	br	303c <__alt_data_end+0xfe00303c>
    40b0:	d9000917 	ldw	r4,36(sp)
    40b4:	203f0926 	beq	r4,zero,3cdc <__alt_data_end+0xfe003cdc>
    40b8:	d9800d17 	ldw	r6,52(sp)
    40bc:	01bca30e 	bge	zero,r6,334c <__alt_data_end+0xfe00334c>
    40c0:	a00b883a 	mov	r5,r20
    40c4:	9809883a 	mov	r4,r19
    40c8:	000d883a 	mov	r6,zero
    40cc:	01d00934 	movhi	r7,16420
    40d0:	000b60c0 	call	b60c <__muldf3>
    40d4:	89000044 	addi	r4,r17,1
    40d8:	1027883a 	mov	r19,r2
    40dc:	1829883a 	mov	r20,r3
    40e0:	000c6000 	call	c600 <__floatsidf>
    40e4:	9809883a 	mov	r4,r19
    40e8:	a00b883a 	mov	r5,r20
    40ec:	100d883a 	mov	r6,r2
    40f0:	180f883a 	mov	r7,r3
    40f4:	000b60c0 	call	b60c <__muldf3>
    40f8:	01d00734 	movhi	r7,16412
    40fc:	1009883a 	mov	r4,r2
    4100:	180b883a 	mov	r5,r3
    4104:	000d883a 	mov	r6,zero
    4108:	000a2740 	call	a274 <__adddf3>
    410c:	d9c00617 	ldw	r7,24(sp)
    4110:	05bf3034 	movhi	r22,64704
    4114:	1023883a 	mov	r17,r2
    4118:	39ffffc4 	addi	r7,r7,-1
    411c:	d9c01315 	stw	r7,76(sp)
    4120:	1daf883a 	add	r23,r3,r22
    4124:	dac00d17 	ldw	r11,52(sp)
    4128:	003be006 	br	30ac <__alt_data_end+0xfe0030ac>
    412c:	d9801117 	ldw	r6,68(sp)
    4130:	d9c01217 	ldw	r7,72(sp)
    4134:	0009883a 	mov	r4,zero
    4138:	014ff834 	movhi	r5,16352
    413c:	da801615 	stw	r10,88(sp)
    4140:	000bcf80 	call	bcf8 <__subdf3>
    4144:	da801617 	ldw	r10,88(sp)
    4148:	1009883a 	mov	r4,r2
    414c:	180b883a 	mov	r5,r3
    4150:	b80d883a 	mov	r6,r23
    4154:	500f883a 	mov	r7,r10
    4158:	000b4480 	call	b448 <__gedf2>
    415c:	00bc7b0e 	bge	zero,r2,334c <__alt_data_end+0xfe00334c>
    4160:	01000c04 	movi	r4,48
    4164:	00000106 	br	416c <_dtoa_r+0x158c>
    4168:	102d883a 	mov	r22,r2
    416c:	b0bfffc4 	addi	r2,r22,-1
    4170:	10c00007 	ldb	r3,0(r2)
    4174:	193ffc26 	beq	r3,r4,4168 <__alt_data_end+0xfe004168>
    4178:	d9001317 	ldw	r4,76(sp)
    417c:	d9000615 	stw	r4,24(sp)
    4180:	003c4306 	br	3290 <__alt_data_end+0xfe003290>
    4184:	d8c01317 	ldw	r3,76(sp)
    4188:	dc001117 	ldw	r16,68(sp)
    418c:	d8c00615 	stw	r3,24(sp)
    4190:	003cee06 	br	354c <__alt_data_end+0xfe00354c>
    4194:	dd401217 	ldw	r21,72(sp)
    4198:	dc001117 	ldw	r16,68(sp)
    419c:	dc801417 	ldw	r18,80(sp)
    41a0:	003c6a06 	br	334c <__alt_data_end+0xfe00334c>
    41a4:	103e6f1e 	bne	r2,zero,3b64 <__alt_data_end+0xfe003b64>
    41a8:	b880004c 	andi	r2,r23,1
    41ac:	103e6d26 	beq	r2,zero,3b64 <__alt_data_end+0xfe003b64>
    41b0:	003e6906 	br	3b58 <__alt_data_end+0xfe003b58>
    41b4:	8009883a 	mov	r4,r16
    41b8:	880b883a 	mov	r5,r17
    41bc:	01800284 	movi	r6,10
    41c0:	000f883a 	mov	r7,zero
    41c4:	00061980 	call	6198 <__multadd>
    41c8:	d9000d17 	ldw	r4,52(sp)
    41cc:	1023883a 	mov	r17,r2
    41d0:	d9000915 	stw	r4,36(sp)
    41d4:	003d5006 	br	3718 <__alt_data_end+0xfe003718>
    41d8:	04400084 	movi	r17,2
    41dc:	003b9706 	br	303c <__alt_data_end+0xfe00303c>
    41e0:	d8801317 	ldw	r2,76(sp)
    41e4:	d8800615 	stw	r2,24(sp)
    41e8:	003cd806 	br	354c <__alt_data_end+0xfe00354c>
    41ec:	d8801317 	ldw	r2,76(sp)
    41f0:	d8800615 	stw	r2,24(sp)
    41f4:	003c2606 	br	3290 <__alt_data_end+0xfe003290>
    41f8:	04c00044 	movi	r19,1
    41fc:	003b3506 	br	2ed4 <__alt_data_end+0xfe002ed4>
    4200:	3023883a 	mov	r17,r6
    4204:	000b883a 	mov	r5,zero
    4208:	003b5106 	br	2f50 <__alt_data_end+0xfe002f50>
    420c:	20fd3426 	beq	r4,r3,36e0 <__alt_data_end+0xfe0036e0>
    4210:	00c00f04 	movi	r3,60
    4214:	1885c83a 	sub	r2,r3,r2
    4218:	003da106 	br	38a0 <__alt_data_end+0xfe0038a0>

0000421c <_fflush_r>:
    421c:	defffb04 	addi	sp,sp,-20
    4220:	dcc00315 	stw	r19,12(sp)
    4224:	dc400115 	stw	r17,4(sp)
    4228:	dfc00415 	stw	ra,16(sp)
    422c:	dc800215 	stw	r18,8(sp)
    4230:	dc000015 	stw	r16,0(sp)
    4234:	2027883a 	mov	r19,r4
    4238:	2823883a 	mov	r17,r5
    423c:	20000226 	beq	r4,zero,4248 <_fflush_r+0x2c>
    4240:	20800e17 	ldw	r2,56(r4)
    4244:	10005826 	beq	r2,zero,43a8 <_fflush_r+0x18c>
    4248:	8880030b 	ldhu	r2,12(r17)
    424c:	10ffffcc 	andi	r3,r2,65535
    4250:	18e0001c 	xori	r3,r3,32768
    4254:	18e00004 	addi	r3,r3,-32768
    4258:	18002b26 	beq	r3,zero,4308 <_fflush_r+0xec>
    425c:	10c0020c 	andi	r3,r2,8
    4260:	1800311e 	bne	r3,zero,4328 <_fflush_r+0x10c>
    4264:	88c00117 	ldw	r3,4(r17)
    4268:	10820014 	ori	r2,r2,2048
    426c:	8880030d 	sth	r2,12(r17)
    4270:	00c05c0e 	bge	zero,r3,43e4 <_fflush_r+0x1c8>
    4274:	88c00a17 	ldw	r3,40(r17)
    4278:	18002326 	beq	r3,zero,4308 <_fflush_r+0xec>
    427c:	9c000017 	ldw	r16,0(r19)
    4280:	1104000c 	andi	r4,r2,4096
    4284:	98000015 	stw	zero,0(r19)
    4288:	20004b26 	beq	r4,zero,43b8 <_fflush_r+0x19c>
    428c:	89801417 	ldw	r6,80(r17)
    4290:	1080010c 	andi	r2,r2,4
    4294:	10000626 	beq	r2,zero,42b0 <_fflush_r+0x94>
    4298:	89000117 	ldw	r4,4(r17)
    429c:	88800c17 	ldw	r2,48(r17)
    42a0:	310dc83a 	sub	r6,r6,r4
    42a4:	10000226 	beq	r2,zero,42b0 <_fflush_r+0x94>
    42a8:	88800f17 	ldw	r2,60(r17)
    42ac:	308dc83a 	sub	r6,r6,r2
    42b0:	89400717 	ldw	r5,28(r17)
    42b4:	9809883a 	mov	r4,r19
    42b8:	000f883a 	mov	r7,zero
    42bc:	183ee83a 	callr	r3
    42c0:	00ffffc4 	movi	r3,-1
    42c4:	10c04a26 	beq	r2,r3,43f0 <_fflush_r+0x1d4>
    42c8:	88c0030b 	ldhu	r3,12(r17)
    42cc:	89000417 	ldw	r4,16(r17)
    42d0:	88000115 	stw	zero,4(r17)
    42d4:	197dffcc 	andi	r5,r3,63487
    42d8:	8940030d 	sth	r5,12(r17)
    42dc:	89000015 	stw	r4,0(r17)
    42e0:	18c4000c 	andi	r3,r3,4096
    42e4:	1800581e 	bne	r3,zero,4448 <_fflush_r+0x22c>
    42e8:	89400c17 	ldw	r5,48(r17)
    42ec:	9c000015 	stw	r16,0(r19)
    42f0:	28000526 	beq	r5,zero,4308 <_fflush_r+0xec>
    42f4:	88801004 	addi	r2,r17,64
    42f8:	28800226 	beq	r5,r2,4304 <_fflush_r+0xe8>
    42fc:	9809883a 	mov	r4,r19
    4300:	000495c0 	call	495c <_free_r>
    4304:	88000c15 	stw	zero,48(r17)
    4308:	0005883a 	mov	r2,zero
    430c:	dfc00417 	ldw	ra,16(sp)
    4310:	dcc00317 	ldw	r19,12(sp)
    4314:	dc800217 	ldw	r18,8(sp)
    4318:	dc400117 	ldw	r17,4(sp)
    431c:	dc000017 	ldw	r16,0(sp)
    4320:	dec00504 	addi	sp,sp,20
    4324:	f800283a 	ret
    4328:	8c800417 	ldw	r18,16(r17)
    432c:	903ff626 	beq	r18,zero,4308 <__alt_data_end+0xfe004308>
    4330:	8c000017 	ldw	r16,0(r17)
    4334:	108000cc 	andi	r2,r2,3
    4338:	8c800015 	stw	r18,0(r17)
    433c:	84a1c83a 	sub	r16,r16,r18
    4340:	10001b26 	beq	r2,zero,43b0 <_fflush_r+0x194>
    4344:	0005883a 	mov	r2,zero
    4348:	88800215 	stw	r2,8(r17)
    434c:	04000316 	blt	zero,r16,435c <_fflush_r+0x140>
    4350:	003fed06 	br	4308 <__alt_data_end+0xfe004308>
    4354:	90a5883a 	add	r18,r18,r2
    4358:	043feb0e 	bge	zero,r16,4308 <__alt_data_end+0xfe004308>
    435c:	88800917 	ldw	r2,36(r17)
    4360:	89400717 	ldw	r5,28(r17)
    4364:	800f883a 	mov	r7,r16
    4368:	900d883a 	mov	r6,r18
    436c:	9809883a 	mov	r4,r19
    4370:	103ee83a 	callr	r2
    4374:	80a1c83a 	sub	r16,r16,r2
    4378:	00bff616 	blt	zero,r2,4354 <__alt_data_end+0xfe004354>
    437c:	88c0030b 	ldhu	r3,12(r17)
    4380:	00bfffc4 	movi	r2,-1
    4384:	18c01014 	ori	r3,r3,64
    4388:	88c0030d 	sth	r3,12(r17)
    438c:	dfc00417 	ldw	ra,16(sp)
    4390:	dcc00317 	ldw	r19,12(sp)
    4394:	dc800217 	ldw	r18,8(sp)
    4398:	dc400117 	ldw	r17,4(sp)
    439c:	dc000017 	ldw	r16,0(sp)
    43a0:	dec00504 	addi	sp,sp,20
    43a4:	f800283a 	ret
    43a8:	00045280 	call	4528 <__sinit>
    43ac:	003fa606 	br	4248 <__alt_data_end+0xfe004248>
    43b0:	88800517 	ldw	r2,20(r17)
    43b4:	003fe406 	br	4348 <__alt_data_end+0xfe004348>
    43b8:	89400717 	ldw	r5,28(r17)
    43bc:	000d883a 	mov	r6,zero
    43c0:	9809883a 	mov	r4,r19
    43c4:	01c00044 	movi	r7,1
    43c8:	183ee83a 	callr	r3
    43cc:	100d883a 	mov	r6,r2
    43d0:	00bfffc4 	movi	r2,-1
    43d4:	30801326 	beq	r6,r2,4424 <_fflush_r+0x208>
    43d8:	8880030b 	ldhu	r2,12(r17)
    43dc:	88c00a17 	ldw	r3,40(r17)
    43e0:	003fab06 	br	4290 <__alt_data_end+0xfe004290>
    43e4:	88c00f17 	ldw	r3,60(r17)
    43e8:	00ffa216 	blt	zero,r3,4274 <__alt_data_end+0xfe004274>
    43ec:	003fc606 	br	4308 <__alt_data_end+0xfe004308>
    43f0:	98c00017 	ldw	r3,0(r19)
    43f4:	183fb426 	beq	r3,zero,42c8 <__alt_data_end+0xfe0042c8>
    43f8:	01000744 	movi	r4,29
    43fc:	19000226 	beq	r3,r4,4408 <_fflush_r+0x1ec>
    4400:	01000584 	movi	r4,22
    4404:	1900121e 	bne	r3,r4,4450 <_fflush_r+0x234>
    4408:	88c0030b 	ldhu	r3,12(r17)
    440c:	88800417 	ldw	r2,16(r17)
    4410:	88000115 	stw	zero,4(r17)
    4414:	18fdffcc 	andi	r3,r3,63487
    4418:	88c0030d 	sth	r3,12(r17)
    441c:	88800015 	stw	r2,0(r17)
    4420:	003fb106 	br	42e8 <__alt_data_end+0xfe0042e8>
    4424:	98800017 	ldw	r2,0(r19)
    4428:	103feb26 	beq	r2,zero,43d8 <__alt_data_end+0xfe0043d8>
    442c:	00c00744 	movi	r3,29
    4430:	10c00226 	beq	r2,r3,443c <_fflush_r+0x220>
    4434:	00c00584 	movi	r3,22
    4438:	10ffd01e 	bne	r2,r3,437c <__alt_data_end+0xfe00437c>
    443c:	9c000015 	stw	r16,0(r19)
    4440:	0005883a 	mov	r2,zero
    4444:	003fb106 	br	430c <__alt_data_end+0xfe00430c>
    4448:	88801415 	stw	r2,80(r17)
    444c:	003fa606 	br	42e8 <__alt_data_end+0xfe0042e8>
    4450:	88c0030b 	ldhu	r3,12(r17)
    4454:	18c01014 	ori	r3,r3,64
    4458:	88c0030d 	sth	r3,12(r17)
    445c:	003fab06 	br	430c <__alt_data_end+0xfe00430c>

00004460 <fflush>:
    4460:	200b883a 	mov	r5,r4
    4464:	20000426 	beq	r4,zero,4478 <fflush+0x18>
    4468:	00800074 	movhi	r2,1
    446c:	10838a04 	addi	r2,r2,3624
    4470:	11000017 	ldw	r4,0(r2)
    4474:	000421c1 	jmpi	421c <_fflush_r>
    4478:	00800074 	movhi	r2,1
    447c:	10838904 	addi	r2,r2,3620
    4480:	11000017 	ldw	r4,0(r2)
    4484:	01400034 	movhi	r5,0
    4488:	29508704 	addi	r5,r5,16924
    448c:	00051801 	jmpi	5180 <_fwalk_reent>

00004490 <__fp_lock>:
    4490:	0005883a 	mov	r2,zero
    4494:	f800283a 	ret

00004498 <__fp_unlock>:
    4498:	0005883a 	mov	r2,zero
    449c:	f800283a 	ret

000044a0 <_cleanup_r>:
    44a0:	01400074 	movhi	r5,1
    44a4:	2963ad04 	addi	r5,r5,-29004
    44a8:	00050d81 	jmpi	50d8 <_fwalk>

000044ac <__sfmoreglue>:
    44ac:	defffc04 	addi	sp,sp,-16
    44b0:	dc400115 	stw	r17,4(sp)
    44b4:	2c401a24 	muli	r17,r5,104
    44b8:	dc800215 	stw	r18,8(sp)
    44bc:	2825883a 	mov	r18,r5
    44c0:	89400304 	addi	r5,r17,12
    44c4:	dc000015 	stw	r16,0(sp)
    44c8:	dfc00315 	stw	ra,12(sp)
    44cc:	00054c00 	call	54c0 <_malloc_r>
    44d0:	1021883a 	mov	r16,r2
    44d4:	10000726 	beq	r2,zero,44f4 <__sfmoreglue+0x48>
    44d8:	11000304 	addi	r4,r2,12
    44dc:	10000015 	stw	zero,0(r2)
    44e0:	14800115 	stw	r18,4(r2)
    44e4:	11000215 	stw	r4,8(r2)
    44e8:	000b883a 	mov	r5,zero
    44ec:	880d883a 	mov	r6,r17
    44f0:	0005fb40 	call	5fb4 <memset>
    44f4:	8005883a 	mov	r2,r16
    44f8:	dfc00317 	ldw	ra,12(sp)
    44fc:	dc800217 	ldw	r18,8(sp)
    4500:	dc400117 	ldw	r17,4(sp)
    4504:	dc000017 	ldw	r16,0(sp)
    4508:	dec00404 	addi	sp,sp,16
    450c:	f800283a 	ret

00004510 <_cleanup>:
    4510:	00800074 	movhi	r2,1
    4514:	10838904 	addi	r2,r2,3620
    4518:	11000017 	ldw	r4,0(r2)
    451c:	01400074 	movhi	r5,1
    4520:	2963ad04 	addi	r5,r5,-29004
    4524:	00050d81 	jmpi	50d8 <_fwalk>

00004528 <__sinit>:
    4528:	20800e17 	ldw	r2,56(r4)
    452c:	defff704 	addi	sp,sp,-36
    4530:	dc800215 	stw	r18,8(sp)
    4534:	dfc00815 	stw	ra,32(sp)
    4538:	ddc00715 	stw	r23,28(sp)
    453c:	dd800615 	stw	r22,24(sp)
    4540:	dd400515 	stw	r21,20(sp)
    4544:	dd000415 	stw	r20,16(sp)
    4548:	dcc00315 	stw	r19,12(sp)
    454c:	dc400115 	stw	r17,4(sp)
    4550:	dc000015 	stw	r16,0(sp)
    4554:	2025883a 	mov	r18,r4
    4558:	10004f1e 	bne	r2,zero,4698 <__sinit+0x170>
    455c:	24000117 	ldw	r16,4(r4)
    4560:	00c00034 	movhi	r3,0
    4564:	18d12804 	addi	r3,r3,17568
    4568:	20c00f15 	stw	r3,60(r4)
    456c:	2080bb04 	addi	r2,r4,748
    4570:	00c000c4 	movi	r3,3
    4574:	05c00044 	movi	r23,1
    4578:	20c0b915 	stw	r3,740(r4)
    457c:	2080ba15 	stw	r2,744(r4)
    4580:	25c00e15 	stw	r23,56(r4)
    4584:	2000b815 	stw	zero,736(r4)
    4588:	00800104 	movi	r2,4
    458c:	81001704 	addi	r4,r16,92
    4590:	000b883a 	mov	r5,zero
    4594:	01800204 	movi	r6,8
    4598:	80000015 	stw	zero,0(r16)
    459c:	80000115 	stw	zero,4(r16)
    45a0:	80000215 	stw	zero,8(r16)
    45a4:	8080030d 	sth	r2,12(r16)
    45a8:	80001915 	stw	zero,100(r16)
    45ac:	8000038d 	sth	zero,14(r16)
    45b0:	80000415 	stw	zero,16(r16)
    45b4:	80000515 	stw	zero,20(r16)
    45b8:	80000615 	stw	zero,24(r16)
    45bc:	0005fb40 	call	5fb4 <memset>
    45c0:	94400217 	ldw	r17,8(r18)
    45c4:	05800034 	movhi	r22,0
    45c8:	b59d9c04 	addi	r22,r22,30320
    45cc:	05400034 	movhi	r21,0
    45d0:	ad5db304 	addi	r21,r21,30412
    45d4:	05000034 	movhi	r20,0
    45d8:	a51dd204 	addi	r20,r20,30536
    45dc:	04c00034 	movhi	r19,0
    45e0:	9cdde904 	addi	r19,r19,30628
    45e4:	84000715 	stw	r16,28(r16)
    45e8:	85800815 	stw	r22,32(r16)
    45ec:	85400915 	stw	r21,36(r16)
    45f0:	85000a15 	stw	r20,40(r16)
    45f4:	84c00b15 	stw	r19,44(r16)
    45f8:	00800284 	movi	r2,10
    45fc:	89001704 	addi	r4,r17,92
    4600:	000b883a 	mov	r5,zero
    4604:	01800204 	movi	r6,8
    4608:	88000015 	stw	zero,0(r17)
    460c:	88000115 	stw	zero,4(r17)
    4610:	88000215 	stw	zero,8(r17)
    4614:	8880030d 	sth	r2,12(r17)
    4618:	88001915 	stw	zero,100(r17)
    461c:	8dc0038d 	sth	r23,14(r17)
    4620:	88000415 	stw	zero,16(r17)
    4624:	88000515 	stw	zero,20(r17)
    4628:	88000615 	stw	zero,24(r17)
    462c:	0005fb40 	call	5fb4 <memset>
    4630:	94000317 	ldw	r16,12(r18)
    4634:	00800484 	movi	r2,18
    4638:	8c400715 	stw	r17,28(r17)
    463c:	8d800815 	stw	r22,32(r17)
    4640:	8d400915 	stw	r21,36(r17)
    4644:	8d000a15 	stw	r20,40(r17)
    4648:	8cc00b15 	stw	r19,44(r17)
    464c:	8080030d 	sth	r2,12(r16)
    4650:	00800084 	movi	r2,2
    4654:	80000015 	stw	zero,0(r16)
    4658:	80000115 	stw	zero,4(r16)
    465c:	80000215 	stw	zero,8(r16)
    4660:	80001915 	stw	zero,100(r16)
    4664:	8080038d 	sth	r2,14(r16)
    4668:	80000415 	stw	zero,16(r16)
    466c:	80000515 	stw	zero,20(r16)
    4670:	80000615 	stw	zero,24(r16)
    4674:	81001704 	addi	r4,r16,92
    4678:	000b883a 	mov	r5,zero
    467c:	01800204 	movi	r6,8
    4680:	0005fb40 	call	5fb4 <memset>
    4684:	84000715 	stw	r16,28(r16)
    4688:	85800815 	stw	r22,32(r16)
    468c:	85400915 	stw	r21,36(r16)
    4690:	85000a15 	stw	r20,40(r16)
    4694:	84c00b15 	stw	r19,44(r16)
    4698:	dfc00817 	ldw	ra,32(sp)
    469c:	ddc00717 	ldw	r23,28(sp)
    46a0:	dd800617 	ldw	r22,24(sp)
    46a4:	dd400517 	ldw	r21,20(sp)
    46a8:	dd000417 	ldw	r20,16(sp)
    46ac:	dcc00317 	ldw	r19,12(sp)
    46b0:	dc800217 	ldw	r18,8(sp)
    46b4:	dc400117 	ldw	r17,4(sp)
    46b8:	dc000017 	ldw	r16,0(sp)
    46bc:	dec00904 	addi	sp,sp,36
    46c0:	f800283a 	ret

000046c4 <__sfp>:
    46c4:	defffb04 	addi	sp,sp,-20
    46c8:	00800074 	movhi	r2,1
    46cc:	10838904 	addi	r2,r2,3620
    46d0:	dc800215 	stw	r18,8(sp)
    46d4:	14800017 	ldw	r18,0(r2)
    46d8:	dcc00315 	stw	r19,12(sp)
    46dc:	dfc00415 	stw	ra,16(sp)
    46e0:	90800e17 	ldw	r2,56(r18)
    46e4:	dc400115 	stw	r17,4(sp)
    46e8:	dc000015 	stw	r16,0(sp)
    46ec:	2027883a 	mov	r19,r4
    46f0:	10002f26 	beq	r2,zero,47b0 <__sfp+0xec>
    46f4:	9480b804 	addi	r18,r18,736
    46f8:	047fffc4 	movi	r17,-1
    46fc:	91400117 	ldw	r5,4(r18)
    4700:	94000217 	ldw	r16,8(r18)
    4704:	297fffc4 	addi	r5,r5,-1
    4708:	28000a16 	blt	r5,zero,4734 <__sfp+0x70>
    470c:	8080030f 	ldh	r2,12(r16)
    4710:	10000c26 	beq	r2,zero,4744 <__sfp+0x80>
    4714:	80c01d04 	addi	r3,r16,116
    4718:	00000206 	br	4724 <__sfp+0x60>
    471c:	18bfe60f 	ldh	r2,-104(r3)
    4720:	10000826 	beq	r2,zero,4744 <__sfp+0x80>
    4724:	297fffc4 	addi	r5,r5,-1
    4728:	1c3ffd04 	addi	r16,r3,-12
    472c:	18c01a04 	addi	r3,r3,104
    4730:	2c7ffa1e 	bne	r5,r17,471c <__alt_data_end+0xfe00471c>
    4734:	90800017 	ldw	r2,0(r18)
    4738:	10002026 	beq	r2,zero,47bc <__sfp+0xf8>
    473c:	1025883a 	mov	r18,r2
    4740:	003fee06 	br	46fc <__alt_data_end+0xfe0046fc>
    4744:	00bfffc4 	movi	r2,-1
    4748:	8080038d 	sth	r2,14(r16)
    474c:	00800044 	movi	r2,1
    4750:	8080030d 	sth	r2,12(r16)
    4754:	80001915 	stw	zero,100(r16)
    4758:	80000015 	stw	zero,0(r16)
    475c:	80000215 	stw	zero,8(r16)
    4760:	80000115 	stw	zero,4(r16)
    4764:	80000415 	stw	zero,16(r16)
    4768:	80000515 	stw	zero,20(r16)
    476c:	80000615 	stw	zero,24(r16)
    4770:	81001704 	addi	r4,r16,92
    4774:	000b883a 	mov	r5,zero
    4778:	01800204 	movi	r6,8
    477c:	0005fb40 	call	5fb4 <memset>
    4780:	8005883a 	mov	r2,r16
    4784:	80000c15 	stw	zero,48(r16)
    4788:	80000d15 	stw	zero,52(r16)
    478c:	80001115 	stw	zero,68(r16)
    4790:	80001215 	stw	zero,72(r16)
    4794:	dfc00417 	ldw	ra,16(sp)
    4798:	dcc00317 	ldw	r19,12(sp)
    479c:	dc800217 	ldw	r18,8(sp)
    47a0:	dc400117 	ldw	r17,4(sp)
    47a4:	dc000017 	ldw	r16,0(sp)
    47a8:	dec00504 	addi	sp,sp,20
    47ac:	f800283a 	ret
    47b0:	9009883a 	mov	r4,r18
    47b4:	00045280 	call	4528 <__sinit>
    47b8:	003fce06 	br	46f4 <__alt_data_end+0xfe0046f4>
    47bc:	9809883a 	mov	r4,r19
    47c0:	01400104 	movi	r5,4
    47c4:	00044ac0 	call	44ac <__sfmoreglue>
    47c8:	90800015 	stw	r2,0(r18)
    47cc:	103fdb1e 	bne	r2,zero,473c <__alt_data_end+0xfe00473c>
    47d0:	00800304 	movi	r2,12
    47d4:	98800015 	stw	r2,0(r19)
    47d8:	0005883a 	mov	r2,zero
    47dc:	003fed06 	br	4794 <__alt_data_end+0xfe004794>

000047e0 <__sfp_lock_acquire>:
    47e0:	f800283a 	ret

000047e4 <__sfp_lock_release>:
    47e4:	f800283a 	ret

000047e8 <__sinit_lock_acquire>:
    47e8:	f800283a 	ret

000047ec <__sinit_lock_release>:
    47ec:	f800283a 	ret

000047f0 <__fp_lock_all>:
    47f0:	00800074 	movhi	r2,1
    47f4:	10838a04 	addi	r2,r2,3624
    47f8:	11000017 	ldw	r4,0(r2)
    47fc:	01400034 	movhi	r5,0
    4800:	29512404 	addi	r5,r5,17552
    4804:	00050d81 	jmpi	50d8 <_fwalk>

00004808 <__fp_unlock_all>:
    4808:	00800074 	movhi	r2,1
    480c:	10838a04 	addi	r2,r2,3624
    4810:	11000017 	ldw	r4,0(r2)
    4814:	01400034 	movhi	r5,0
    4818:	29512604 	addi	r5,r5,17560
    481c:	00050d81 	jmpi	50d8 <_fwalk>

00004820 <_malloc_trim_r>:
    4820:	defffb04 	addi	sp,sp,-20
    4824:	dcc00315 	stw	r19,12(sp)
    4828:	dc800215 	stw	r18,8(sp)
    482c:	dc400115 	stw	r17,4(sp)
    4830:	dc000015 	stw	r16,0(sp)
    4834:	2827883a 	mov	r19,r5
    4838:	dfc00415 	stw	ra,16(sp)
    483c:	04400074 	movhi	r17,1
    4840:	8c7e0504 	addi	r17,r17,-2028
    4844:	2021883a 	mov	r16,r4
    4848:	000d0900 	call	d090 <__malloc_lock>
    484c:	88800217 	ldw	r2,8(r17)
    4850:	14800117 	ldw	r18,4(r2)
    4854:	00bfff04 	movi	r2,-4
    4858:	90a4703a 	and	r18,r18,r2
    485c:	94e7c83a 	sub	r19,r18,r19
    4860:	9cc3fbc4 	addi	r19,r19,4079
    4864:	9826d33a 	srli	r19,r19,12
    4868:	0083ffc4 	movi	r2,4095
    486c:	9cffffc4 	addi	r19,r19,-1
    4870:	9826933a 	slli	r19,r19,12
    4874:	14c0060e 	bge	r2,r19,4890 <_malloc_trim_r+0x70>
    4878:	8009883a 	mov	r4,r16
    487c:	000b883a 	mov	r5,zero
    4880:	000760c0 	call	760c <_sbrk_r>
    4884:	88c00217 	ldw	r3,8(r17)
    4888:	1c87883a 	add	r3,r3,r18
    488c:	10c00a26 	beq	r2,r3,48b8 <_malloc_trim_r+0x98>
    4890:	8009883a 	mov	r4,r16
    4894:	000d0b00 	call	d0b0 <__malloc_unlock>
    4898:	0005883a 	mov	r2,zero
    489c:	dfc00417 	ldw	ra,16(sp)
    48a0:	dcc00317 	ldw	r19,12(sp)
    48a4:	dc800217 	ldw	r18,8(sp)
    48a8:	dc400117 	ldw	r17,4(sp)
    48ac:	dc000017 	ldw	r16,0(sp)
    48b0:	dec00504 	addi	sp,sp,20
    48b4:	f800283a 	ret
    48b8:	8009883a 	mov	r4,r16
    48bc:	04cbc83a 	sub	r5,zero,r19
    48c0:	000760c0 	call	760c <_sbrk_r>
    48c4:	00ffffc4 	movi	r3,-1
    48c8:	10c01326 	beq	r2,r3,4918 <_malloc_trim_r+0xf8>
    48cc:	00800074 	movhi	r2,1
    48d0:	108a6304 	addi	r2,r2,10636
    48d4:	11000017 	ldw	r4,0(r2)
    48d8:	88c00217 	ldw	r3,8(r17)
    48dc:	94e5c83a 	sub	r18,r18,r19
    48e0:	94800054 	ori	r18,r18,1
    48e4:	24e7c83a 	sub	r19,r4,r19
    48e8:	1c800115 	stw	r18,4(r3)
    48ec:	8009883a 	mov	r4,r16
    48f0:	14c00015 	stw	r19,0(r2)
    48f4:	000d0b00 	call	d0b0 <__malloc_unlock>
    48f8:	00800044 	movi	r2,1
    48fc:	dfc00417 	ldw	ra,16(sp)
    4900:	dcc00317 	ldw	r19,12(sp)
    4904:	dc800217 	ldw	r18,8(sp)
    4908:	dc400117 	ldw	r17,4(sp)
    490c:	dc000017 	ldw	r16,0(sp)
    4910:	dec00504 	addi	sp,sp,20
    4914:	f800283a 	ret
    4918:	8009883a 	mov	r4,r16
    491c:	000b883a 	mov	r5,zero
    4920:	000760c0 	call	760c <_sbrk_r>
    4924:	88c00217 	ldw	r3,8(r17)
    4928:	014003c4 	movi	r5,15
    492c:	10c9c83a 	sub	r4,r2,r3
    4930:	293fd70e 	bge	r5,r4,4890 <__alt_data_end+0xfe004890>
    4934:	01400074 	movhi	r5,1
    4938:	29438c04 	addi	r5,r5,3632
    493c:	29400017 	ldw	r5,0(r5)
    4940:	21000054 	ori	r4,r4,1
    4944:	19000115 	stw	r4,4(r3)
    4948:	1145c83a 	sub	r2,r2,r5
    494c:	01400074 	movhi	r5,1
    4950:	294a6304 	addi	r5,r5,10636
    4954:	28800015 	stw	r2,0(r5)
    4958:	003fcd06 	br	4890 <__alt_data_end+0xfe004890>

0000495c <_free_r>:
    495c:	defffd04 	addi	sp,sp,-12
    4960:	dc000015 	stw	r16,0(sp)
    4964:	dfc00215 	stw	ra,8(sp)
    4968:	dc400115 	stw	r17,4(sp)
    496c:	2821883a 	mov	r16,r5
    4970:	28004c26 	beq	r5,zero,4aa4 <_free_r+0x148>
    4974:	2023883a 	mov	r17,r4
    4978:	000d0900 	call	d090 <__malloc_lock>
    497c:	823fff17 	ldw	r8,-4(r16)
    4980:	00bfff84 	movi	r2,-2
    4984:	81bffe04 	addi	r6,r16,-8
    4988:	4084703a 	and	r2,r8,r2
    498c:	3087883a 	add	r3,r6,r2
    4990:	01400074 	movhi	r5,1
    4994:	297e0504 	addi	r5,r5,-2028
    4998:	1a400117 	ldw	r9,4(r3)
    499c:	29000217 	ldw	r4,8(r5)
    49a0:	01ffff04 	movi	r7,-4
    49a4:	49ce703a 	and	r7,r9,r7
    49a8:	20c06526 	beq	r4,r3,4b40 <_free_r+0x1e4>
    49ac:	19c00115 	stw	r7,4(r3)
    49b0:	4200004c 	andi	r8,r8,1
    49b4:	40003026 	beq	r8,zero,4a78 <_free_r+0x11c>
    49b8:	0009883a 	mov	r4,zero
    49bc:	19d1883a 	add	r8,r3,r7
    49c0:	42000117 	ldw	r8,4(r8)
    49c4:	4200004c 	andi	r8,r8,1
    49c8:	4000061e 	bne	r8,zero,49e4 <_free_r+0x88>
    49cc:	11c5883a 	add	r2,r2,r7
    49d0:	19c00217 	ldw	r7,8(r3)
    49d4:	20004e26 	beq	r4,zero,4b10 <_free_r+0x1b4>
    49d8:	18c00317 	ldw	r3,12(r3)
    49dc:	38c00315 	stw	r3,12(r7)
    49e0:	19c00215 	stw	r7,8(r3)
    49e4:	10c00054 	ori	r3,r2,1
    49e8:	30c00115 	stw	r3,4(r6)
    49ec:	3087883a 	add	r3,r6,r2
    49f0:	18800015 	stw	r2,0(r3)
    49f4:	20001a1e 	bne	r4,zero,4a60 <_free_r+0x104>
    49f8:	00c07fc4 	movi	r3,511
    49fc:	18802e2e 	bgeu	r3,r2,4ab8 <_free_r+0x15c>
    4a00:	1006d27a 	srli	r3,r2,9
    4a04:	01000104 	movi	r4,4
    4a08:	20c06636 	bltu	r4,r3,4ba4 <_free_r+0x248>
    4a0c:	1008d1ba 	srli	r4,r2,6
    4a10:	21000e04 	addi	r4,r4,56
    4a14:	210f883a 	add	r7,r4,r4
    4a18:	39cf883a 	add	r7,r7,r7
    4a1c:	39cf883a 	add	r7,r7,r7
    4a20:	29cf883a 	add	r7,r5,r7
    4a24:	38c00217 	ldw	r3,8(r7)
    4a28:	01400074 	movhi	r5,1
    4a2c:	297e0504 	addi	r5,r5,-2028
    4a30:	19c06126 	beq	r3,r7,4bb8 <_free_r+0x25c>
    4a34:	013fff04 	movi	r4,-4
    4a38:	19400117 	ldw	r5,4(r3)
    4a3c:	290a703a 	and	r5,r5,r4
    4a40:	1140022e 	bgeu	r2,r5,4a4c <_free_r+0xf0>
    4a44:	18c00217 	ldw	r3,8(r3)
    4a48:	38fffb1e 	bne	r7,r3,4a38 <__alt_data_end+0xfe004a38>
    4a4c:	18800317 	ldw	r2,12(r3)
    4a50:	30800315 	stw	r2,12(r6)
    4a54:	30c00215 	stw	r3,8(r6)
    4a58:	11800215 	stw	r6,8(r2)
    4a5c:	19800315 	stw	r6,12(r3)
    4a60:	8809883a 	mov	r4,r17
    4a64:	dfc00217 	ldw	ra,8(sp)
    4a68:	dc400117 	ldw	r17,4(sp)
    4a6c:	dc000017 	ldw	r16,0(sp)
    4a70:	dec00304 	addi	sp,sp,12
    4a74:	000d0b01 	jmpi	d0b0 <__malloc_unlock>
    4a78:	813ffe17 	ldw	r4,-8(r16)
    4a7c:	2a400204 	addi	r9,r5,8
    4a80:	310dc83a 	sub	r6,r6,r4
    4a84:	32000217 	ldw	r8,8(r6)
    4a88:	1105883a 	add	r2,r2,r4
    4a8c:	42404326 	beq	r8,r9,4b9c <_free_r+0x240>
    4a90:	32400317 	ldw	r9,12(r6)
    4a94:	0009883a 	mov	r4,zero
    4a98:	42400315 	stw	r9,12(r8)
    4a9c:	4a000215 	stw	r8,8(r9)
    4aa0:	003fc606 	br	49bc <__alt_data_end+0xfe0049bc>
    4aa4:	dfc00217 	ldw	ra,8(sp)
    4aa8:	dc400117 	ldw	r17,4(sp)
    4aac:	dc000017 	ldw	r16,0(sp)
    4ab0:	dec00304 	addi	sp,sp,12
    4ab4:	f800283a 	ret
    4ab8:	1004d0fa 	srli	r2,r2,3
    4abc:	02000044 	movi	r8,1
    4ac0:	29c00117 	ldw	r7,4(r5)
    4ac4:	1087883a 	add	r3,r2,r2
    4ac8:	18c7883a 	add	r3,r3,r3
    4acc:	18c7883a 	add	r3,r3,r3
    4ad0:	28c7883a 	add	r3,r5,r3
    4ad4:	1005d0ba 	srai	r2,r2,2
    4ad8:	19000217 	ldw	r4,8(r3)
    4adc:	30c00315 	stw	r3,12(r6)
    4ae0:	4084983a 	sll	r2,r8,r2
    4ae4:	31000215 	stw	r4,8(r6)
    4ae8:	19800215 	stw	r6,8(r3)
    4aec:	11c4b03a 	or	r2,r2,r7
    4af0:	21800315 	stw	r6,12(r4)
    4af4:	8809883a 	mov	r4,r17
    4af8:	28800115 	stw	r2,4(r5)
    4afc:	dfc00217 	ldw	ra,8(sp)
    4b00:	dc400117 	ldw	r17,4(sp)
    4b04:	dc000017 	ldw	r16,0(sp)
    4b08:	dec00304 	addi	sp,sp,12
    4b0c:	000d0b01 	jmpi	d0b0 <__malloc_unlock>
    4b10:	02000074 	movhi	r8,1
    4b14:	423e0704 	addi	r8,r8,-2020
    4b18:	3a3faf1e 	bne	r7,r8,49d8 <__alt_data_end+0xfe0049d8>
    4b1c:	29800515 	stw	r6,20(r5)
    4b20:	29800415 	stw	r6,16(r5)
    4b24:	10c00054 	ori	r3,r2,1
    4b28:	31c00315 	stw	r7,12(r6)
    4b2c:	31c00215 	stw	r7,8(r6)
    4b30:	30c00115 	stw	r3,4(r6)
    4b34:	308d883a 	add	r6,r6,r2
    4b38:	30800015 	stw	r2,0(r6)
    4b3c:	003fc806 	br	4a60 <__alt_data_end+0xfe004a60>
    4b40:	4200004c 	andi	r8,r8,1
    4b44:	3885883a 	add	r2,r7,r2
    4b48:	4000071e 	bne	r8,zero,4b68 <_free_r+0x20c>
    4b4c:	81fffe17 	ldw	r7,-8(r16)
    4b50:	31cdc83a 	sub	r6,r6,r7
    4b54:	30c00317 	ldw	r3,12(r6)
    4b58:	31000217 	ldw	r4,8(r6)
    4b5c:	11c5883a 	add	r2,r2,r7
    4b60:	20c00315 	stw	r3,12(r4)
    4b64:	19000215 	stw	r4,8(r3)
    4b68:	00c00074 	movhi	r3,1
    4b6c:	18c38d04 	addi	r3,r3,3636
    4b70:	11000054 	ori	r4,r2,1
    4b74:	18c00017 	ldw	r3,0(r3)
    4b78:	31000115 	stw	r4,4(r6)
    4b7c:	29800215 	stw	r6,8(r5)
    4b80:	10ffb736 	bltu	r2,r3,4a60 <__alt_data_end+0xfe004a60>
    4b84:	00800074 	movhi	r2,1
    4b88:	108a5b04 	addi	r2,r2,10604
    4b8c:	11400017 	ldw	r5,0(r2)
    4b90:	8809883a 	mov	r4,r17
    4b94:	00048200 	call	4820 <_malloc_trim_r>
    4b98:	003fb106 	br	4a60 <__alt_data_end+0xfe004a60>
    4b9c:	01000044 	movi	r4,1
    4ba0:	003f8606 	br	49bc <__alt_data_end+0xfe0049bc>
    4ba4:	01000504 	movi	r4,20
    4ba8:	20c00b36 	bltu	r4,r3,4bd8 <_free_r+0x27c>
    4bac:	190016c4 	addi	r4,r3,91
    4bb0:	210f883a 	add	r7,r4,r4
    4bb4:	003f9806 	br	4a18 <__alt_data_end+0xfe004a18>
    4bb8:	2009d0ba 	srai	r4,r4,2
    4bbc:	00800044 	movi	r2,1
    4bc0:	29c00117 	ldw	r7,4(r5)
    4bc4:	1108983a 	sll	r4,r2,r4
    4bc8:	1805883a 	mov	r2,r3
    4bcc:	21c8b03a 	or	r4,r4,r7
    4bd0:	29000115 	stw	r4,4(r5)
    4bd4:	003f9e06 	br	4a50 <__alt_data_end+0xfe004a50>
    4bd8:	01001504 	movi	r4,84
    4bdc:	20c00436 	bltu	r4,r3,4bf0 <_free_r+0x294>
    4be0:	1008d33a 	srli	r4,r2,12
    4be4:	21001b84 	addi	r4,r4,110
    4be8:	210f883a 	add	r7,r4,r4
    4bec:	003f8a06 	br	4a18 <__alt_data_end+0xfe004a18>
    4bf0:	01005504 	movi	r4,340
    4bf4:	20c00436 	bltu	r4,r3,4c08 <_free_r+0x2ac>
    4bf8:	1008d3fa 	srli	r4,r2,15
    4bfc:	21001dc4 	addi	r4,r4,119
    4c00:	210f883a 	add	r7,r4,r4
    4c04:	003f8406 	br	4a18 <__alt_data_end+0xfe004a18>
    4c08:	01015504 	movi	r4,1364
    4c0c:	20c00436 	bltu	r4,r3,4c20 <_free_r+0x2c4>
    4c10:	1008d4ba 	srli	r4,r2,18
    4c14:	21001f04 	addi	r4,r4,124
    4c18:	210f883a 	add	r7,r4,r4
    4c1c:	003f7e06 	br	4a18 <__alt_data_end+0xfe004a18>
    4c20:	01c03f04 	movi	r7,252
    4c24:	01001f84 	movi	r4,126
    4c28:	003f7b06 	br	4a18 <__alt_data_end+0xfe004a18>

00004c2c <__sfvwrite_r>:
    4c2c:	30800217 	ldw	r2,8(r6)
    4c30:	defff404 	addi	sp,sp,-48
    4c34:	dcc00515 	stw	r19,20(sp)
    4c38:	dfc00b15 	stw	ra,44(sp)
    4c3c:	df000a15 	stw	fp,40(sp)
    4c40:	ddc00915 	stw	r23,36(sp)
    4c44:	dd800815 	stw	r22,32(sp)
    4c48:	dd400715 	stw	r21,28(sp)
    4c4c:	dd000615 	stw	r20,24(sp)
    4c50:	dc800415 	stw	r18,16(sp)
    4c54:	dc400315 	stw	r17,12(sp)
    4c58:	dc000215 	stw	r16,8(sp)
    4c5c:	3027883a 	mov	r19,r6
    4c60:	10001d26 	beq	r2,zero,4cd8 <__sfvwrite_r+0xac>
    4c64:	2880030b 	ldhu	r2,12(r5)
    4c68:	202b883a 	mov	r21,r4
    4c6c:	2821883a 	mov	r16,r5
    4c70:	10c0020c 	andi	r3,r2,8
    4c74:	18002526 	beq	r3,zero,4d0c <__sfvwrite_r+0xe0>
    4c78:	28c00417 	ldw	r3,16(r5)
    4c7c:	18002326 	beq	r3,zero,4d0c <__sfvwrite_r+0xe0>
    4c80:	10c0008c 	andi	r3,r2,2
    4c84:	9c400017 	ldw	r17,0(r19)
    4c88:	18002826 	beq	r3,zero,4d2c <__sfvwrite_r+0x100>
    4c8c:	0029883a 	mov	r20,zero
    4c90:	0025883a 	mov	r18,zero
    4c94:	05810004 	movi	r22,1024
    4c98:	a00d883a 	mov	r6,r20
    4c9c:	a809883a 	mov	r4,r21
    4ca0:	90004726 	beq	r18,zero,4dc0 <__sfvwrite_r+0x194>
    4ca4:	900f883a 	mov	r7,r18
    4ca8:	81400717 	ldw	r5,28(r16)
    4cac:	b480012e 	bgeu	r22,r18,4cb4 <__sfvwrite_r+0x88>
    4cb0:	01c10004 	movi	r7,1024
    4cb4:	80800917 	ldw	r2,36(r16)
    4cb8:	103ee83a 	callr	r2
    4cbc:	00804c0e 	bge	zero,r2,4df0 <__sfvwrite_r+0x1c4>
    4cc0:	98c00217 	ldw	r3,8(r19)
    4cc4:	a0a9883a 	add	r20,r20,r2
    4cc8:	90a5c83a 	sub	r18,r18,r2
    4ccc:	1885c83a 	sub	r2,r3,r2
    4cd0:	98800215 	stw	r2,8(r19)
    4cd4:	103ff01e 	bne	r2,zero,4c98 <__alt_data_end+0xfe004c98>
    4cd8:	0005883a 	mov	r2,zero
    4cdc:	dfc00b17 	ldw	ra,44(sp)
    4ce0:	df000a17 	ldw	fp,40(sp)
    4ce4:	ddc00917 	ldw	r23,36(sp)
    4ce8:	dd800817 	ldw	r22,32(sp)
    4cec:	dd400717 	ldw	r21,28(sp)
    4cf0:	dd000617 	ldw	r20,24(sp)
    4cf4:	dcc00517 	ldw	r19,20(sp)
    4cf8:	dc800417 	ldw	r18,16(sp)
    4cfc:	dc400317 	ldw	r17,12(sp)
    4d00:	dc000217 	ldw	r16,8(sp)
    4d04:	dec00c04 	addi	sp,sp,48
    4d08:	f800283a 	ret
    4d0c:	a809883a 	mov	r4,r21
    4d10:	800b883a 	mov	r5,r16
    4d14:	00028a40 	call	28a4 <__swsetup_r>
    4d18:	1000e81e 	bne	r2,zero,50bc <__sfvwrite_r+0x490>
    4d1c:	8080030b 	ldhu	r2,12(r16)
    4d20:	9c400017 	ldw	r17,0(r19)
    4d24:	10c0008c 	andi	r3,r2,2
    4d28:	183fd81e 	bne	r3,zero,4c8c <__alt_data_end+0xfe004c8c>
    4d2c:	10c0004c 	andi	r3,r2,1
    4d30:	002d883a 	mov	r22,zero
    4d34:	1800331e 	bne	r3,zero,4e04 <__sfvwrite_r+0x1d8>
    4d38:	0025883a 	mov	r18,zero
    4d3c:	90001c26 	beq	r18,zero,4db0 <__sfvwrite_r+0x184>
    4d40:	10c0800c 	andi	r3,r2,512
    4d44:	85000217 	ldw	r20,8(r16)
    4d48:	18006f26 	beq	r3,zero,4f08 <__sfvwrite_r+0x2dc>
    4d4c:	95008936 	bltu	r18,r20,4f74 <__sfvwrite_r+0x348>
    4d50:	10c1200c 	andi	r3,r2,1152
    4d54:	1800a11e 	bne	r3,zero,4fdc <__sfvwrite_r+0x3b0>
    4d58:	81000017 	ldw	r4,0(r16)
    4d5c:	a02f883a 	mov	r23,r20
    4d60:	a039883a 	mov	fp,r20
    4d64:	9029883a 	mov	r20,r18
    4d68:	b00b883a 	mov	r5,r22
    4d6c:	b80d883a 	mov	r6,r23
    4d70:	0005e780 	call	5e78 <memmove>
    4d74:	81400217 	ldw	r5,8(r16)
    4d78:	81000017 	ldw	r4,0(r16)
    4d7c:	9005883a 	mov	r2,r18
    4d80:	2f39c83a 	sub	fp,r5,fp
    4d84:	25c7883a 	add	r3,r4,r23
    4d88:	87000215 	stw	fp,8(r16)
    4d8c:	80c00015 	stw	r3,0(r16)
    4d90:	98c00217 	ldw	r3,8(r19)
    4d94:	b0ad883a 	add	r22,r22,r2
    4d98:	90a5c83a 	sub	r18,r18,r2
    4d9c:	1d29c83a 	sub	r20,r3,r20
    4da0:	9d000215 	stw	r20,8(r19)
    4da4:	a03fcc26 	beq	r20,zero,4cd8 <__alt_data_end+0xfe004cd8>
    4da8:	8080030b 	ldhu	r2,12(r16)
    4dac:	903fe41e 	bne	r18,zero,4d40 <__alt_data_end+0xfe004d40>
    4db0:	8d800017 	ldw	r22,0(r17)
    4db4:	8c800117 	ldw	r18,4(r17)
    4db8:	8c400204 	addi	r17,r17,8
    4dbc:	003fdf06 	br	4d3c <__alt_data_end+0xfe004d3c>
    4dc0:	8d000017 	ldw	r20,0(r17)
    4dc4:	8c800117 	ldw	r18,4(r17)
    4dc8:	8c400204 	addi	r17,r17,8
    4dcc:	003fb206 	br	4c98 <__alt_data_end+0xfe004c98>
    4dd0:	00070400 	call	7040 <_realloc_r>
    4dd4:	1039883a 	mov	fp,r2
    4dd8:	10009d1e 	bne	r2,zero,5050 <__sfvwrite_r+0x424>
    4ddc:	81400417 	ldw	r5,16(r16)
    4de0:	a809883a 	mov	r4,r21
    4de4:	000495c0 	call	495c <_free_r>
    4de8:	00800304 	movi	r2,12
    4dec:	a8800015 	stw	r2,0(r21)
    4df0:	80c0030b 	ldhu	r3,12(r16)
    4df4:	00bfffc4 	movi	r2,-1
    4df8:	18c01014 	ori	r3,r3,64
    4dfc:	80c0030d 	sth	r3,12(r16)
    4e00:	003fb606 	br	4cdc <__alt_data_end+0xfe004cdc>
    4e04:	0007883a 	mov	r3,zero
    4e08:	0039883a 	mov	fp,zero
    4e0c:	0025883a 	mov	r18,zero
    4e10:	90001f26 	beq	r18,zero,4e90 <__sfvwrite_r+0x264>
    4e14:	18006826 	beq	r3,zero,4fb8 <__sfvwrite_r+0x38c>
    4e18:	b02f883a 	mov	r23,r22
    4e1c:	9580012e 	bgeu	r18,r22,4e24 <__sfvwrite_r+0x1f8>
    4e20:	902f883a 	mov	r23,r18
    4e24:	81000017 	ldw	r4,0(r16)
    4e28:	80800417 	ldw	r2,16(r16)
    4e2c:	b829883a 	mov	r20,r23
    4e30:	81800217 	ldw	r6,8(r16)
    4e34:	81c00517 	ldw	r7,20(r16)
    4e38:	1100022e 	bgeu	r2,r4,4e44 <__sfvwrite_r+0x218>
    4e3c:	31d1883a 	add	r8,r6,r7
    4e40:	45c01816 	blt	r8,r23,4ea4 <__sfvwrite_r+0x278>
    4e44:	b9c03f16 	blt	r23,r7,4f44 <__sfvwrite_r+0x318>
    4e48:	80800917 	ldw	r2,36(r16)
    4e4c:	81400717 	ldw	r5,28(r16)
    4e50:	a809883a 	mov	r4,r21
    4e54:	d8c00115 	stw	r3,4(sp)
    4e58:	e00d883a 	mov	r6,fp
    4e5c:	103ee83a 	callr	r2
    4e60:	1029883a 	mov	r20,r2
    4e64:	d8c00117 	ldw	r3,4(sp)
    4e68:	00bfe10e 	bge	zero,r2,4df0 <__alt_data_end+0xfe004df0>
    4e6c:	b52dc83a 	sub	r22,r22,r20
    4e70:	b0001f26 	beq	r22,zero,4ef0 <__sfvwrite_r+0x2c4>
    4e74:	98800217 	ldw	r2,8(r19)
    4e78:	e539883a 	add	fp,fp,r20
    4e7c:	9525c83a 	sub	r18,r18,r20
    4e80:	1529c83a 	sub	r20,r2,r20
    4e84:	9d000215 	stw	r20,8(r19)
    4e88:	a03f9326 	beq	r20,zero,4cd8 <__alt_data_end+0xfe004cd8>
    4e8c:	903fe11e 	bne	r18,zero,4e14 <__alt_data_end+0xfe004e14>
    4e90:	8f000017 	ldw	fp,0(r17)
    4e94:	8c800117 	ldw	r18,4(r17)
    4e98:	0007883a 	mov	r3,zero
    4e9c:	8c400204 	addi	r17,r17,8
    4ea0:	003fdb06 	br	4e10 <__alt_data_end+0xfe004e10>
    4ea4:	400d883a 	mov	r6,r8
    4ea8:	e00b883a 	mov	r5,fp
    4eac:	d8c00115 	stw	r3,4(sp)
    4eb0:	da000015 	stw	r8,0(sp)
    4eb4:	0005e780 	call	5e78 <memmove>
    4eb8:	da000017 	ldw	r8,0(sp)
    4ebc:	80800017 	ldw	r2,0(r16)
    4ec0:	a809883a 	mov	r4,r21
    4ec4:	800b883a 	mov	r5,r16
    4ec8:	1205883a 	add	r2,r2,r8
    4ecc:	80800015 	stw	r2,0(r16)
    4ed0:	da000015 	stw	r8,0(sp)
    4ed4:	000421c0 	call	421c <_fflush_r>
    4ed8:	d8c00117 	ldw	r3,4(sp)
    4edc:	da000017 	ldw	r8,0(sp)
    4ee0:	103fc31e 	bne	r2,zero,4df0 <__alt_data_end+0xfe004df0>
    4ee4:	4029883a 	mov	r20,r8
    4ee8:	b52dc83a 	sub	r22,r22,r20
    4eec:	b03fe11e 	bne	r22,zero,4e74 <__alt_data_end+0xfe004e74>
    4ef0:	a809883a 	mov	r4,r21
    4ef4:	800b883a 	mov	r5,r16
    4ef8:	000421c0 	call	421c <_fflush_r>
    4efc:	103fbc1e 	bne	r2,zero,4df0 <__alt_data_end+0xfe004df0>
    4f00:	0007883a 	mov	r3,zero
    4f04:	003fdb06 	br	4e74 <__alt_data_end+0xfe004e74>
    4f08:	81000017 	ldw	r4,0(r16)
    4f0c:	80800417 	ldw	r2,16(r16)
    4f10:	1100012e 	bgeu	r2,r4,4f18 <__sfvwrite_r+0x2ec>
    4f14:	a4805836 	bltu	r20,r18,5078 <__sfvwrite_r+0x44c>
    4f18:	81c00517 	ldw	r7,20(r16)
    4f1c:	91c01a36 	bltu	r18,r7,4f88 <__sfvwrite_r+0x35c>
    4f20:	80800917 	ldw	r2,36(r16)
    4f24:	81400717 	ldw	r5,28(r16)
    4f28:	a809883a 	mov	r4,r21
    4f2c:	b00d883a 	mov	r6,r22
    4f30:	103ee83a 	callr	r2
    4f34:	1029883a 	mov	r20,r2
    4f38:	00bfad0e 	bge	zero,r2,4df0 <__alt_data_end+0xfe004df0>
    4f3c:	a005883a 	mov	r2,r20
    4f40:	003f9306 	br	4d90 <__alt_data_end+0xfe004d90>
    4f44:	b80d883a 	mov	r6,r23
    4f48:	e00b883a 	mov	r5,fp
    4f4c:	d8c00115 	stw	r3,4(sp)
    4f50:	0005e780 	call	5e78 <memmove>
    4f54:	80800217 	ldw	r2,8(r16)
    4f58:	81000017 	ldw	r4,0(r16)
    4f5c:	d8c00117 	ldw	r3,4(sp)
    4f60:	15c5c83a 	sub	r2,r2,r23
    4f64:	25ef883a 	add	r23,r4,r23
    4f68:	80800215 	stw	r2,8(r16)
    4f6c:	85c00015 	stw	r23,0(r16)
    4f70:	003fbe06 	br	4e6c <__alt_data_end+0xfe004e6c>
    4f74:	81000017 	ldw	r4,0(r16)
    4f78:	9039883a 	mov	fp,r18
    4f7c:	9029883a 	mov	r20,r18
    4f80:	902f883a 	mov	r23,r18
    4f84:	003f7806 	br	4d68 <__alt_data_end+0xfe004d68>
    4f88:	b00b883a 	mov	r5,r22
    4f8c:	900d883a 	mov	r6,r18
    4f90:	0005e780 	call	5e78 <memmove>
    4f94:	80c00217 	ldw	r3,8(r16)
    4f98:	80800017 	ldw	r2,0(r16)
    4f9c:	9029883a 	mov	r20,r18
    4fa0:	1c87c83a 	sub	r3,r3,r18
    4fa4:	1485883a 	add	r2,r2,r18
    4fa8:	80800015 	stw	r2,0(r16)
    4fac:	80c00215 	stw	r3,8(r16)
    4fb0:	9005883a 	mov	r2,r18
    4fb4:	003f7606 	br	4d90 <__alt_data_end+0xfe004d90>
    4fb8:	e009883a 	mov	r4,fp
    4fbc:	01400284 	movi	r5,10
    4fc0:	900d883a 	mov	r6,r18
    4fc4:	0005c840 	call	5c84 <memchr>
    4fc8:	10003926 	beq	r2,zero,50b0 <__sfvwrite_r+0x484>
    4fcc:	15800044 	addi	r22,r2,1
    4fd0:	b72dc83a 	sub	r22,r22,fp
    4fd4:	00c00044 	movi	r3,1
    4fd8:	003f8f06 	br	4e18 <__alt_data_end+0xfe004e18>
    4fdc:	81000517 	ldw	r4,20(r16)
    4fe0:	81400417 	ldw	r5,16(r16)
    4fe4:	80c00017 	ldw	r3,0(r16)
    4fe8:	210d883a 	add	r6,r4,r4
    4fec:	3109883a 	add	r4,r6,r4
    4ff0:	2028d7fa 	srli	r20,r4,31
    4ff4:	196fc83a 	sub	r23,r3,r5
    4ff8:	b9800044 	addi	r6,r23,1
    4ffc:	a109883a 	add	r4,r20,r4
    5000:	2029d07a 	srai	r20,r4,1
    5004:	348d883a 	add	r6,r6,r18
    5008:	a180272e 	bgeu	r20,r6,50a8 <__sfvwrite_r+0x47c>
    500c:	3029883a 	mov	r20,r6
    5010:	1081000c 	andi	r2,r2,1024
    5014:	a809883a 	mov	r4,r21
    5018:	103f6d26 	beq	r2,zero,4dd0 <__alt_data_end+0xfe004dd0>
    501c:	300b883a 	mov	r5,r6
    5020:	00054c00 	call	54c0 <_malloc_r>
    5024:	1039883a 	mov	fp,r2
    5028:	103f6f26 	beq	r2,zero,4de8 <__alt_data_end+0xfe004de8>
    502c:	81400417 	ldw	r5,16(r16)
    5030:	1009883a 	mov	r4,r2
    5034:	b80d883a 	mov	r6,r23
    5038:	0005d6c0 	call	5d6c <memcpy>
    503c:	8080030b 	ldhu	r2,12(r16)
    5040:	00fedfc4 	movi	r3,-1153
    5044:	10c4703a 	and	r2,r2,r3
    5048:	10802014 	ori	r2,r2,128
    504c:	8080030d 	sth	r2,12(r16)
    5050:	e5c9883a 	add	r4,fp,r23
    5054:	a5c7c83a 	sub	r3,r20,r23
    5058:	87000415 	stw	fp,16(r16)
    505c:	85000515 	stw	r20,20(r16)
    5060:	81000015 	stw	r4,0(r16)
    5064:	9039883a 	mov	fp,r18
    5068:	80c00215 	stw	r3,8(r16)
    506c:	9029883a 	mov	r20,r18
    5070:	902f883a 	mov	r23,r18
    5074:	003f3c06 	br	4d68 <__alt_data_end+0xfe004d68>
    5078:	b00b883a 	mov	r5,r22
    507c:	a00d883a 	mov	r6,r20
    5080:	0005e780 	call	5e78 <memmove>
    5084:	80800017 	ldw	r2,0(r16)
    5088:	a809883a 	mov	r4,r21
    508c:	800b883a 	mov	r5,r16
    5090:	1505883a 	add	r2,r2,r20
    5094:	80800015 	stw	r2,0(r16)
    5098:	000421c0 	call	421c <_fflush_r>
    509c:	103f541e 	bne	r2,zero,4df0 <__alt_data_end+0xfe004df0>
    50a0:	a005883a 	mov	r2,r20
    50a4:	003f3a06 	br	4d90 <__alt_data_end+0xfe004d90>
    50a8:	a00d883a 	mov	r6,r20
    50ac:	003fd806 	br	5010 <__alt_data_end+0xfe005010>
    50b0:	95800044 	addi	r22,r18,1
    50b4:	00c00044 	movi	r3,1
    50b8:	003f5706 	br	4e18 <__alt_data_end+0xfe004e18>
    50bc:	80c0030b 	ldhu	r3,12(r16)
    50c0:	00bfffc4 	movi	r2,-1
    50c4:	18c01014 	ori	r3,r3,64
    50c8:	80c0030d 	sth	r3,12(r16)
    50cc:	00c00244 	movi	r3,9
    50d0:	a8c00015 	stw	r3,0(r21)
    50d4:	003f0106 	br	4cdc <__alt_data_end+0xfe004cdc>

000050d8 <_fwalk>:
    50d8:	defff904 	addi	sp,sp,-28
    50dc:	dcc00315 	stw	r19,12(sp)
    50e0:	24c0b804 	addi	r19,r4,736
    50e4:	dd400515 	stw	r21,20(sp)
    50e8:	dd000415 	stw	r20,16(sp)
    50ec:	dfc00615 	stw	ra,24(sp)
    50f0:	dc800215 	stw	r18,8(sp)
    50f4:	dc400115 	stw	r17,4(sp)
    50f8:	dc000015 	stw	r16,0(sp)
    50fc:	282b883a 	mov	r21,r5
    5100:	0029883a 	mov	r20,zero
    5104:	00047e00 	call	47e0 <__sfp_lock_acquire>
    5108:	98001226 	beq	r19,zero,5154 <_fwalk+0x7c>
    510c:	04bfffc4 	movi	r18,-1
    5110:	9c400117 	ldw	r17,4(r19)
    5114:	9c000217 	ldw	r16,8(r19)
    5118:	8c7fffc4 	addi	r17,r17,-1
    511c:	88000b16 	blt	r17,zero,514c <_fwalk+0x74>
    5120:	84000304 	addi	r16,r16,12
    5124:	80c0000f 	ldh	r3,0(r16)
    5128:	8c7fffc4 	addi	r17,r17,-1
    512c:	813ffd04 	addi	r4,r16,-12
    5130:	18000426 	beq	r3,zero,5144 <_fwalk+0x6c>
    5134:	80c0008f 	ldh	r3,2(r16)
    5138:	1c800226 	beq	r3,r18,5144 <_fwalk+0x6c>
    513c:	a83ee83a 	callr	r21
    5140:	a0a8b03a 	or	r20,r20,r2
    5144:	84001a04 	addi	r16,r16,104
    5148:	8cbff61e 	bne	r17,r18,5124 <__alt_data_end+0xfe005124>
    514c:	9cc00017 	ldw	r19,0(r19)
    5150:	983fef1e 	bne	r19,zero,5110 <__alt_data_end+0xfe005110>
    5154:	00047e40 	call	47e4 <__sfp_lock_release>
    5158:	a005883a 	mov	r2,r20
    515c:	dfc00617 	ldw	ra,24(sp)
    5160:	dd400517 	ldw	r21,20(sp)
    5164:	dd000417 	ldw	r20,16(sp)
    5168:	dcc00317 	ldw	r19,12(sp)
    516c:	dc800217 	ldw	r18,8(sp)
    5170:	dc400117 	ldw	r17,4(sp)
    5174:	dc000017 	ldw	r16,0(sp)
    5178:	dec00704 	addi	sp,sp,28
    517c:	f800283a 	ret

00005180 <_fwalk_reent>:
    5180:	defff804 	addi	sp,sp,-32
    5184:	dcc00315 	stw	r19,12(sp)
    5188:	24c0b804 	addi	r19,r4,736
    518c:	dd800615 	stw	r22,24(sp)
    5190:	dd400515 	stw	r21,20(sp)
    5194:	dd000415 	stw	r20,16(sp)
    5198:	dfc00715 	stw	ra,28(sp)
    519c:	dc800215 	stw	r18,8(sp)
    51a0:	dc400115 	stw	r17,4(sp)
    51a4:	dc000015 	stw	r16,0(sp)
    51a8:	2029883a 	mov	r20,r4
    51ac:	282b883a 	mov	r21,r5
    51b0:	002d883a 	mov	r22,zero
    51b4:	00047e00 	call	47e0 <__sfp_lock_acquire>
    51b8:	98001326 	beq	r19,zero,5208 <_fwalk_reent+0x88>
    51bc:	04bfffc4 	movi	r18,-1
    51c0:	9c400117 	ldw	r17,4(r19)
    51c4:	9c000217 	ldw	r16,8(r19)
    51c8:	8c7fffc4 	addi	r17,r17,-1
    51cc:	88000c16 	blt	r17,zero,5200 <_fwalk_reent+0x80>
    51d0:	84000304 	addi	r16,r16,12
    51d4:	80c0000f 	ldh	r3,0(r16)
    51d8:	8c7fffc4 	addi	r17,r17,-1
    51dc:	817ffd04 	addi	r5,r16,-12
    51e0:	18000526 	beq	r3,zero,51f8 <_fwalk_reent+0x78>
    51e4:	80c0008f 	ldh	r3,2(r16)
    51e8:	a009883a 	mov	r4,r20
    51ec:	1c800226 	beq	r3,r18,51f8 <_fwalk_reent+0x78>
    51f0:	a83ee83a 	callr	r21
    51f4:	b0acb03a 	or	r22,r22,r2
    51f8:	84001a04 	addi	r16,r16,104
    51fc:	8cbff51e 	bne	r17,r18,51d4 <__alt_data_end+0xfe0051d4>
    5200:	9cc00017 	ldw	r19,0(r19)
    5204:	983fee1e 	bne	r19,zero,51c0 <__alt_data_end+0xfe0051c0>
    5208:	00047e40 	call	47e4 <__sfp_lock_release>
    520c:	b005883a 	mov	r2,r22
    5210:	dfc00717 	ldw	ra,28(sp)
    5214:	dd800617 	ldw	r22,24(sp)
    5218:	dd400517 	ldw	r21,20(sp)
    521c:	dd000417 	ldw	r20,16(sp)
    5220:	dcc00317 	ldw	r19,12(sp)
    5224:	dc800217 	ldw	r18,8(sp)
    5228:	dc400117 	ldw	r17,4(sp)
    522c:	dc000017 	ldw	r16,0(sp)
    5230:	dec00804 	addi	sp,sp,32
    5234:	f800283a 	ret

00005238 <_setlocale_r>:
    5238:	defffe04 	addi	sp,sp,-8
    523c:	dc000015 	stw	r16,0(sp)
    5240:	dfc00115 	stw	ra,4(sp)
    5244:	3021883a 	mov	r16,r6
    5248:	30000526 	beq	r6,zero,5260 <_setlocale_r+0x28>
    524c:	3009883a 	mov	r4,r6
    5250:	01400074 	movhi	r5,1
    5254:	297c3d04 	addi	r5,r5,-3852
    5258:	00077ac0 	call	77ac <strcmp>
    525c:	1000061e 	bne	r2,zero,5278 <_setlocale_r+0x40>
    5260:	00800074 	movhi	r2,1
    5264:	10bc3c04 	addi	r2,r2,-3856
    5268:	dfc00117 	ldw	ra,4(sp)
    526c:	dc000017 	ldw	r16,0(sp)
    5270:	dec00204 	addi	sp,sp,8
    5274:	f800283a 	ret
    5278:	8009883a 	mov	r4,r16
    527c:	01400074 	movhi	r5,1
    5280:	297c3c04 	addi	r5,r5,-3856
    5284:	00077ac0 	call	77ac <strcmp>
    5288:	103ff526 	beq	r2,zero,5260 <__alt_data_end+0xfe005260>
    528c:	8009883a 	mov	r4,r16
    5290:	01400074 	movhi	r5,1
    5294:	297c2704 	addi	r5,r5,-3940
    5298:	00077ac0 	call	77ac <strcmp>
    529c:	103ff026 	beq	r2,zero,5260 <__alt_data_end+0xfe005260>
    52a0:	0005883a 	mov	r2,zero
    52a4:	003ff006 	br	5268 <__alt_data_end+0xfe005268>

000052a8 <__locale_charset>:
    52a8:	00800074 	movhi	r2,1
    52ac:	10bdef04 	addi	r2,r2,-2116
    52b0:	f800283a 	ret

000052b4 <__locale_mb_cur_max>:
    52b4:	00800074 	movhi	r2,1
    52b8:	10838b04 	addi	r2,r2,3628
    52bc:	10800017 	ldw	r2,0(r2)
    52c0:	f800283a 	ret

000052c4 <__locale_msgcharset>:
    52c4:	00800074 	movhi	r2,1
    52c8:	10bde704 	addi	r2,r2,-2148
    52cc:	f800283a 	ret

000052d0 <__locale_cjk_lang>:
    52d0:	0005883a 	mov	r2,zero
    52d4:	f800283a 	ret

000052d8 <_localeconv_r>:
    52d8:	00800074 	movhi	r2,1
    52dc:	10bdf704 	addi	r2,r2,-2084
    52e0:	f800283a 	ret

000052e4 <setlocale>:
    52e4:	00c00074 	movhi	r3,1
    52e8:	18c38a04 	addi	r3,r3,3624
    52ec:	2005883a 	mov	r2,r4
    52f0:	19000017 	ldw	r4,0(r3)
    52f4:	280d883a 	mov	r6,r5
    52f8:	100b883a 	mov	r5,r2
    52fc:	00052381 	jmpi	5238 <_setlocale_r>

00005300 <localeconv>:
    5300:	00800074 	movhi	r2,1
    5304:	10bdf704 	addi	r2,r2,-2084
    5308:	f800283a 	ret

0000530c <__smakebuf_r>:
    530c:	2880030b 	ldhu	r2,12(r5)
    5310:	deffec04 	addi	sp,sp,-80
    5314:	dc000f15 	stw	r16,60(sp)
    5318:	dfc01315 	stw	ra,76(sp)
    531c:	dcc01215 	stw	r19,72(sp)
    5320:	dc801115 	stw	r18,68(sp)
    5324:	dc401015 	stw	r17,64(sp)
    5328:	10c0008c 	andi	r3,r2,2
    532c:	2821883a 	mov	r16,r5
    5330:	18003a1e 	bne	r3,zero,541c <__smakebuf_r+0x110>
    5334:	2940038f 	ldh	r5,14(r5)
    5338:	2023883a 	mov	r17,r4
    533c:	28001b16 	blt	r5,zero,53ac <__smakebuf_r+0xa0>
    5340:	d80d883a 	mov	r6,sp
    5344:	00090c40 	call	90c4 <_fstat_r>
    5348:	10001716 	blt	r2,zero,53a8 <__smakebuf_r+0x9c>
    534c:	d8800117 	ldw	r2,4(sp)
    5350:	00e00014 	movui	r3,32768
    5354:	10bc000c 	andi	r2,r2,61440
    5358:	10c03e26 	beq	r2,r3,5454 <__smakebuf_r+0x148>
    535c:	80c0030b 	ldhu	r3,12(r16)
    5360:	18c20014 	ori	r3,r3,2048
    5364:	80c0030d 	sth	r3,12(r16)
    5368:	00c80004 	movi	r3,8192
    536c:	10c0431e 	bne	r2,r3,547c <__smakebuf_r+0x170>
    5370:	8140038f 	ldh	r5,14(r16)
    5374:	8809883a 	mov	r4,r17
    5378:	000912c0 	call	912c <_isatty_r>
    537c:	10004d26 	beq	r2,zero,54b4 <__smakebuf_r+0x1a8>
    5380:	80c0030b 	ldhu	r3,12(r16)
    5384:	04c00044 	movi	r19,1
    5388:	808010c4 	addi	r2,r16,67
    538c:	1cc6b03a 	or	r3,r3,r19
    5390:	80c0030d 	sth	r3,12(r16)
    5394:	80800015 	stw	r2,0(r16)
    5398:	80800415 	stw	r2,16(r16)
    539c:	84c00515 	stw	r19,20(r16)
    53a0:	04810004 	movi	r18,1024
    53a4:	00000706 	br	53c4 <__smakebuf_r+0xb8>
    53a8:	8080030b 	ldhu	r2,12(r16)
    53ac:	10c0200c 	andi	r3,r2,128
    53b0:	1800261e 	bne	r3,zero,544c <__smakebuf_r+0x140>
    53b4:	04810004 	movi	r18,1024
    53b8:	10820014 	ori	r2,r2,2048
    53bc:	8080030d 	sth	r2,12(r16)
    53c0:	0027883a 	mov	r19,zero
    53c4:	8809883a 	mov	r4,r17
    53c8:	900b883a 	mov	r5,r18
    53cc:	00054c00 	call	54c0 <_malloc_r>
    53d0:	10002d26 	beq	r2,zero,5488 <__smakebuf_r+0x17c>
    53d4:	80c0030b 	ldhu	r3,12(r16)
    53d8:	01000034 	movhi	r4,0
    53dc:	21112804 	addi	r4,r4,17568
    53e0:	89000f15 	stw	r4,60(r17)
    53e4:	18c02014 	ori	r3,r3,128
    53e8:	80c0030d 	sth	r3,12(r16)
    53ec:	80800015 	stw	r2,0(r16)
    53f0:	80800415 	stw	r2,16(r16)
    53f4:	84800515 	stw	r18,20(r16)
    53f8:	98000d26 	beq	r19,zero,5430 <__smakebuf_r+0x124>
    53fc:	8140038f 	ldh	r5,14(r16)
    5400:	8809883a 	mov	r4,r17
    5404:	000912c0 	call	912c <_isatty_r>
    5408:	10000926 	beq	r2,zero,5430 <__smakebuf_r+0x124>
    540c:	8080030b 	ldhu	r2,12(r16)
    5410:	10800054 	ori	r2,r2,1
    5414:	8080030d 	sth	r2,12(r16)
    5418:	00000506 	br	5430 <__smakebuf_r+0x124>
    541c:	288010c4 	addi	r2,r5,67
    5420:	28800015 	stw	r2,0(r5)
    5424:	28800415 	stw	r2,16(r5)
    5428:	00800044 	movi	r2,1
    542c:	28800515 	stw	r2,20(r5)
    5430:	dfc01317 	ldw	ra,76(sp)
    5434:	dcc01217 	ldw	r19,72(sp)
    5438:	dc801117 	ldw	r18,68(sp)
    543c:	dc401017 	ldw	r17,64(sp)
    5440:	dc000f17 	ldw	r16,60(sp)
    5444:	dec01404 	addi	sp,sp,80
    5448:	f800283a 	ret
    544c:	04801004 	movi	r18,64
    5450:	003fd906 	br	53b8 <__alt_data_end+0xfe0053b8>
    5454:	81000a17 	ldw	r4,40(r16)
    5458:	00c00034 	movhi	r3,0
    545c:	18ddd204 	addi	r3,r3,30536
    5460:	20ffbe1e 	bne	r4,r3,535c <__alt_data_end+0xfe00535c>
    5464:	80c0030b 	ldhu	r3,12(r16)
    5468:	01010004 	movi	r4,1024
    546c:	81001315 	stw	r4,76(r16)
    5470:	1906b03a 	or	r3,r3,r4
    5474:	80c0030d 	sth	r3,12(r16)
    5478:	003fbb06 	br	5368 <__alt_data_end+0xfe005368>
    547c:	0027883a 	mov	r19,zero
    5480:	04810004 	movi	r18,1024
    5484:	003fcf06 	br	53c4 <__alt_data_end+0xfe0053c4>
    5488:	8080030b 	ldhu	r2,12(r16)
    548c:	10c0800c 	andi	r3,r2,512
    5490:	183fe71e 	bne	r3,zero,5430 <__alt_data_end+0xfe005430>
    5494:	10800094 	ori	r2,r2,2
    5498:	80c010c4 	addi	r3,r16,67
    549c:	8080030d 	sth	r2,12(r16)
    54a0:	00800044 	movi	r2,1
    54a4:	80c00015 	stw	r3,0(r16)
    54a8:	80c00415 	stw	r3,16(r16)
    54ac:	80800515 	stw	r2,20(r16)
    54b0:	003fdf06 	br	5430 <__alt_data_end+0xfe005430>
    54b4:	04c00044 	movi	r19,1
    54b8:	04810004 	movi	r18,1024
    54bc:	003fc106 	br	53c4 <__alt_data_end+0xfe0053c4>

000054c0 <_malloc_r>:
    54c0:	defff504 	addi	sp,sp,-44
    54c4:	dc800315 	stw	r18,12(sp)
    54c8:	dfc00a15 	stw	ra,40(sp)
    54cc:	df000915 	stw	fp,36(sp)
    54d0:	ddc00815 	stw	r23,32(sp)
    54d4:	dd800715 	stw	r22,28(sp)
    54d8:	dd400615 	stw	r21,24(sp)
    54dc:	dd000515 	stw	r20,20(sp)
    54e0:	dcc00415 	stw	r19,16(sp)
    54e4:	dc400215 	stw	r17,8(sp)
    54e8:	dc000115 	stw	r16,4(sp)
    54ec:	288002c4 	addi	r2,r5,11
    54f0:	00c00584 	movi	r3,22
    54f4:	2025883a 	mov	r18,r4
    54f8:	18802b2e 	bgeu	r3,r2,55a8 <_malloc_r+0xe8>
    54fc:	047ffe04 	movi	r17,-8
    5500:	1462703a 	and	r17,r2,r17
    5504:	88002a16 	blt	r17,zero,55b0 <_malloc_r+0xf0>
    5508:	89402936 	bltu	r17,r5,55b0 <_malloc_r+0xf0>
    550c:	9009883a 	mov	r4,r18
    5510:	000d0900 	call	d090 <__malloc_lock>
    5514:	00807dc4 	movi	r2,503
    5518:	14402936 	bltu	r2,r17,55c0 <_malloc_r+0x100>
    551c:	8808d0fa 	srli	r4,r17,3
    5520:	04c00074 	movhi	r19,1
    5524:	9cfe0504 	addi	r19,r19,-2028
    5528:	2105883a 	add	r2,r4,r4
    552c:	1085883a 	add	r2,r2,r2
    5530:	1085883a 	add	r2,r2,r2
    5534:	9885883a 	add	r2,r19,r2
    5538:	14000317 	ldw	r16,12(r2)
    553c:	80815226 	beq	r16,r2,5a88 <_malloc_r+0x5c8>
    5540:	81000117 	ldw	r4,4(r16)
    5544:	00bfff04 	movi	r2,-4
    5548:	80c00317 	ldw	r3,12(r16)
    554c:	2084703a 	and	r2,r4,r2
    5550:	8085883a 	add	r2,r16,r2
    5554:	81000217 	ldw	r4,8(r16)
    5558:	11400117 	ldw	r5,4(r2)
    555c:	20c00315 	stw	r3,12(r4)
    5560:	19000215 	stw	r4,8(r3)
    5564:	28c00054 	ori	r3,r5,1
    5568:	10c00115 	stw	r3,4(r2)
    556c:	9009883a 	mov	r4,r18
    5570:	000d0b00 	call	d0b0 <__malloc_unlock>
    5574:	80800204 	addi	r2,r16,8
    5578:	dfc00a17 	ldw	ra,40(sp)
    557c:	df000917 	ldw	fp,36(sp)
    5580:	ddc00817 	ldw	r23,32(sp)
    5584:	dd800717 	ldw	r22,28(sp)
    5588:	dd400617 	ldw	r21,24(sp)
    558c:	dd000517 	ldw	r20,20(sp)
    5590:	dcc00417 	ldw	r19,16(sp)
    5594:	dc800317 	ldw	r18,12(sp)
    5598:	dc400217 	ldw	r17,8(sp)
    559c:	dc000117 	ldw	r16,4(sp)
    55a0:	dec00b04 	addi	sp,sp,44
    55a4:	f800283a 	ret
    55a8:	04400404 	movi	r17,16
    55ac:	897fd72e 	bgeu	r17,r5,550c <__alt_data_end+0xfe00550c>
    55b0:	00800304 	movi	r2,12
    55b4:	90800015 	stw	r2,0(r18)
    55b8:	0005883a 	mov	r2,zero
    55bc:	003fee06 	br	5578 <__alt_data_end+0xfe005578>
    55c0:	8808d27a 	srli	r4,r17,9
    55c4:	20007126 	beq	r4,zero,578c <_malloc_r+0x2cc>
    55c8:	00800104 	movi	r2,4
    55cc:	1100f536 	bltu	r2,r4,59a4 <_malloc_r+0x4e4>
    55d0:	8808d1ba 	srli	r4,r17,6
    55d4:	21000e04 	addi	r4,r4,56
    55d8:	210b883a 	add	r5,r4,r4
    55dc:	294b883a 	add	r5,r5,r5
    55e0:	294b883a 	add	r5,r5,r5
    55e4:	04c00074 	movhi	r19,1
    55e8:	9cfe0504 	addi	r19,r19,-2028
    55ec:	994b883a 	add	r5,r19,r5
    55f0:	2c000317 	ldw	r16,12(r5)
    55f4:	2c000e26 	beq	r5,r16,5630 <_malloc_r+0x170>
    55f8:	80c00117 	ldw	r3,4(r16)
    55fc:	01ffff04 	movi	r7,-4
    5600:	018003c4 	movi	r6,15
    5604:	19c6703a 	and	r3,r3,r7
    5608:	1c45c83a 	sub	r2,r3,r17
    560c:	30800716 	blt	r6,r2,562c <_malloc_r+0x16c>
    5610:	1000610e 	bge	r2,zero,5798 <_malloc_r+0x2d8>
    5614:	84000317 	ldw	r16,12(r16)
    5618:	2c000526 	beq	r5,r16,5630 <_malloc_r+0x170>
    561c:	80c00117 	ldw	r3,4(r16)
    5620:	19c6703a 	and	r3,r3,r7
    5624:	1c45c83a 	sub	r2,r3,r17
    5628:	30bff90e 	bge	r6,r2,5610 <__alt_data_end+0xfe005610>
    562c:	213fffc4 	addi	r4,r4,-1
    5630:	21000044 	addi	r4,r4,1
    5634:	9c000417 	ldw	r16,16(r19)
    5638:	00c00074 	movhi	r3,1
    563c:	18fe0504 	addi	r3,r3,-2028
    5640:	1a400204 	addi	r9,r3,8
    5644:	82410926 	beq	r16,r9,5a6c <_malloc_r+0x5ac>
    5648:	81400117 	ldw	r5,4(r16)
    564c:	00bfff04 	movi	r2,-4
    5650:	018003c4 	movi	r6,15
    5654:	2884703a 	and	r2,r5,r2
    5658:	144bc83a 	sub	r5,r2,r17
    565c:	3140f416 	blt	r6,r5,5a30 <_malloc_r+0x570>
    5660:	1a400515 	stw	r9,20(r3)
    5664:	1a400415 	stw	r9,16(r3)
    5668:	2800570e 	bge	r5,zero,57c8 <_malloc_r+0x308>
    566c:	01407fc4 	movi	r5,511
    5670:	2880d436 	bltu	r5,r2,59c4 <_malloc_r+0x504>
    5674:	1004d0fa 	srli	r2,r2,3
    5678:	02000044 	movi	r8,1
    567c:	19c00117 	ldw	r7,4(r3)
    5680:	108b883a 	add	r5,r2,r2
    5684:	294b883a 	add	r5,r5,r5
    5688:	1005d0ba 	srai	r2,r2,2
    568c:	294b883a 	add	r5,r5,r5
    5690:	28cb883a 	add	r5,r5,r3
    5694:	29800217 	ldw	r6,8(r5)
    5698:	4084983a 	sll	r2,r8,r2
    569c:	81400315 	stw	r5,12(r16)
    56a0:	81800215 	stw	r6,8(r16)
    56a4:	11c4b03a 	or	r2,r2,r7
    56a8:	2c000215 	stw	r16,8(r5)
    56ac:	18800115 	stw	r2,4(r3)
    56b0:	34000315 	stw	r16,12(r6)
    56b4:	2007d0ba 	srai	r3,r4,2
    56b8:	01400044 	movi	r5,1
    56bc:	28ca983a 	sll	r5,r5,r3
    56c0:	11404936 	bltu	r2,r5,57e8 <_malloc_r+0x328>
    56c4:	1146703a 	and	r3,r2,r5
    56c8:	18000a1e 	bne	r3,zero,56f4 <_malloc_r+0x234>
    56cc:	00ffff04 	movi	r3,-4
    56d0:	294b883a 	add	r5,r5,r5
    56d4:	20c8703a 	and	r4,r4,r3
    56d8:	1146703a 	and	r3,r2,r5
    56dc:	21000104 	addi	r4,r4,4
    56e0:	1800041e 	bne	r3,zero,56f4 <_malloc_r+0x234>
    56e4:	294b883a 	add	r5,r5,r5
    56e8:	1146703a 	and	r3,r2,r5
    56ec:	21000104 	addi	r4,r4,4
    56f0:	183ffc26 	beq	r3,zero,56e4 <__alt_data_end+0xfe0056e4>
    56f4:	023fff04 	movi	r8,-4
    56f8:	01c003c4 	movi	r7,15
    56fc:	2105883a 	add	r2,r4,r4
    5700:	1085883a 	add	r2,r2,r2
    5704:	1085883a 	add	r2,r2,r2
    5708:	9897883a 	add	r11,r19,r2
    570c:	5a800304 	addi	r10,r11,12
    5710:	2019883a 	mov	r12,r4
    5714:	54000017 	ldw	r16,0(r10)
    5718:	51bffd04 	addi	r6,r10,-12
    571c:	8180041e 	bne	r16,r6,5730 <_malloc_r+0x270>
    5720:	0000d406 	br	5a74 <_malloc_r+0x5b4>
    5724:	1000dd0e 	bge	r2,zero,5a9c <_malloc_r+0x5dc>
    5728:	84000317 	ldw	r16,12(r16)
    572c:	8180d126 	beq	r16,r6,5a74 <_malloc_r+0x5b4>
    5730:	80c00117 	ldw	r3,4(r16)
    5734:	1a06703a 	and	r3,r3,r8
    5738:	1c45c83a 	sub	r2,r3,r17
    573c:	38bff90e 	bge	r7,r2,5724 <__alt_data_end+0xfe005724>
    5740:	80c00317 	ldw	r3,12(r16)
    5744:	81000217 	ldw	r4,8(r16)
    5748:	89400054 	ori	r5,r17,1
    574c:	81400115 	stw	r5,4(r16)
    5750:	20c00315 	stw	r3,12(r4)
    5754:	19000215 	stw	r4,8(r3)
    5758:	8463883a 	add	r17,r16,r17
    575c:	9c400515 	stw	r17,20(r19)
    5760:	9c400415 	stw	r17,16(r19)
    5764:	10c00054 	ori	r3,r2,1
    5768:	8a400315 	stw	r9,12(r17)
    576c:	8a400215 	stw	r9,8(r17)
    5770:	88c00115 	stw	r3,4(r17)
    5774:	88a3883a 	add	r17,r17,r2
    5778:	88800015 	stw	r2,0(r17)
    577c:	9009883a 	mov	r4,r18
    5780:	000d0b00 	call	d0b0 <__malloc_unlock>
    5784:	80800204 	addi	r2,r16,8
    5788:	003f7b06 	br	5578 <__alt_data_end+0xfe005578>
    578c:	01401f84 	movi	r5,126
    5790:	01000fc4 	movi	r4,63
    5794:	003f9106 	br	55dc <__alt_data_end+0xfe0055dc>
    5798:	80800317 	ldw	r2,12(r16)
    579c:	81000217 	ldw	r4,8(r16)
    57a0:	80c7883a 	add	r3,r16,r3
    57a4:	19400117 	ldw	r5,4(r3)
    57a8:	20800315 	stw	r2,12(r4)
    57ac:	11000215 	stw	r4,8(r2)
    57b0:	28800054 	ori	r2,r5,1
    57b4:	18800115 	stw	r2,4(r3)
    57b8:	9009883a 	mov	r4,r18
    57bc:	000d0b00 	call	d0b0 <__malloc_unlock>
    57c0:	80800204 	addi	r2,r16,8
    57c4:	003f6c06 	br	5578 <__alt_data_end+0xfe005578>
    57c8:	8085883a 	add	r2,r16,r2
    57cc:	10c00117 	ldw	r3,4(r2)
    57d0:	9009883a 	mov	r4,r18
    57d4:	18c00054 	ori	r3,r3,1
    57d8:	10c00115 	stw	r3,4(r2)
    57dc:	000d0b00 	call	d0b0 <__malloc_unlock>
    57e0:	80800204 	addi	r2,r16,8
    57e4:	003f6406 	br	5578 <__alt_data_end+0xfe005578>
    57e8:	9c000217 	ldw	r16,8(r19)
    57ec:	00bfff04 	movi	r2,-4
    57f0:	85400117 	ldw	r21,4(r16)
    57f4:	a8aa703a 	and	r21,r21,r2
    57f8:	ac400336 	bltu	r21,r17,5808 <_malloc_r+0x348>
    57fc:	ac45c83a 	sub	r2,r21,r17
    5800:	00c003c4 	movi	r3,15
    5804:	18805d16 	blt	r3,r2,597c <_malloc_r+0x4bc>
    5808:	00800074 	movhi	r2,1
    580c:	108a5b04 	addi	r2,r2,10604
    5810:	00c00074 	movhi	r3,1
    5814:	18c38c04 	addi	r3,r3,3632
    5818:	15c00017 	ldw	r23,0(r2)
    581c:	19000017 	ldw	r4,0(r3)
    5820:	00bfffc4 	movi	r2,-1
    5824:	8579883a 	add	fp,r16,r21
    5828:	8def883a 	add	r23,r17,r23
    582c:	2080e426 	beq	r4,r2,5bc0 <_malloc_r+0x700>
    5830:	bdc403c4 	addi	r23,r23,4111
    5834:	00bc0004 	movi	r2,-4096
    5838:	b8ae703a 	and	r23,r23,r2
    583c:	9009883a 	mov	r4,r18
    5840:	b80b883a 	mov	r5,r23
    5844:	d8c00015 	stw	r3,0(sp)
    5848:	000760c0 	call	760c <_sbrk_r>
    584c:	1029883a 	mov	r20,r2
    5850:	00bfffc4 	movi	r2,-1
    5854:	d8c00017 	ldw	r3,0(sp)
    5858:	a080a426 	beq	r20,r2,5aec <_malloc_r+0x62c>
    585c:	a700a236 	bltu	r20,fp,5ae8 <_malloc_r+0x628>
    5860:	05800074 	movhi	r22,1
    5864:	b58a6304 	addi	r22,r22,10636
    5868:	b0800017 	ldw	r2,0(r22)
    586c:	b885883a 	add	r2,r23,r2
    5870:	b0800015 	stw	r2,0(r22)
    5874:	e500da26 	beq	fp,r20,5be0 <_malloc_r+0x720>
    5878:	19000017 	ldw	r4,0(r3)
    587c:	00ffffc4 	movi	r3,-1
    5880:	20c0e426 	beq	r4,r3,5c14 <_malloc_r+0x754>
    5884:	a739c83a 	sub	fp,r20,fp
    5888:	1705883a 	add	r2,r2,fp
    588c:	b0800015 	stw	r2,0(r22)
    5890:	a08001cc 	andi	r2,r20,7
    5894:	1000b526 	beq	r2,zero,5b6c <_malloc_r+0x6ac>
    5898:	a0a9c83a 	sub	r20,r20,r2
    589c:	00c40204 	movi	r3,4104
    58a0:	a5000204 	addi	r20,r20,8
    58a4:	1885c83a 	sub	r2,r3,r2
    58a8:	a5c7883a 	add	r3,r20,r23
    58ac:	18c3ffcc 	andi	r3,r3,4095
    58b0:	10efc83a 	sub	r23,r2,r3
    58b4:	9009883a 	mov	r4,r18
    58b8:	b80b883a 	mov	r5,r23
    58bc:	000760c0 	call	760c <_sbrk_r>
    58c0:	00ffffc4 	movi	r3,-1
    58c4:	10c0d026 	beq	r2,r3,5c08 <_malloc_r+0x748>
    58c8:	1505c83a 	sub	r2,r2,r20
    58cc:	b887883a 	add	r3,r23,r2
    58d0:	18c00054 	ori	r3,r3,1
    58d4:	b0800017 	ldw	r2,0(r22)
    58d8:	9d000215 	stw	r20,8(r19)
    58dc:	a0c00115 	stw	r3,4(r20)
    58e0:	b885883a 	add	r2,r23,r2
    58e4:	b0800015 	stw	r2,0(r22)
    58e8:	84c00e26 	beq	r16,r19,5924 <_malloc_r+0x464>
    58ec:	00c003c4 	movi	r3,15
    58f0:	1d40a02e 	bgeu	r3,r21,5b74 <_malloc_r+0x6b4>
    58f4:	81400117 	ldw	r5,4(r16)
    58f8:	ad7ffd04 	addi	r21,r21,-12
    58fc:	013ffe04 	movi	r4,-8
    5900:	a908703a 	and	r4,r21,r4
    5904:	2940004c 	andi	r5,r5,1
    5908:	214ab03a 	or	r5,r4,r5
    590c:	81400115 	stw	r5,4(r16)
    5910:	01800144 	movi	r6,5
    5914:	810b883a 	add	r5,r16,r4
    5918:	29800115 	stw	r6,4(r5)
    591c:	29800215 	stw	r6,8(r5)
    5920:	1900c036 	bltu	r3,r4,5c24 <_malloc_r+0x764>
    5924:	00c00074 	movhi	r3,1
    5928:	18ca5a04 	addi	r3,r3,10600
    592c:	19000017 	ldw	r4,0(r3)
    5930:	2080012e 	bgeu	r4,r2,5938 <_malloc_r+0x478>
    5934:	18800015 	stw	r2,0(r3)
    5938:	00c00074 	movhi	r3,1
    593c:	18ca5904 	addi	r3,r3,10596
    5940:	19000017 	ldw	r4,0(r3)
    5944:	9c000217 	ldw	r16,8(r19)
    5948:	2080012e 	bgeu	r4,r2,5950 <_malloc_r+0x490>
    594c:	18800015 	stw	r2,0(r3)
    5950:	80c00117 	ldw	r3,4(r16)
    5954:	00bfff04 	movi	r2,-4
    5958:	1886703a 	and	r3,r3,r2
    595c:	1c45c83a 	sub	r2,r3,r17
    5960:	1c400236 	bltu	r3,r17,596c <_malloc_r+0x4ac>
    5964:	00c003c4 	movi	r3,15
    5968:	18800416 	blt	r3,r2,597c <_malloc_r+0x4bc>
    596c:	9009883a 	mov	r4,r18
    5970:	000d0b00 	call	d0b0 <__malloc_unlock>
    5974:	0005883a 	mov	r2,zero
    5978:	003eff06 	br	5578 <__alt_data_end+0xfe005578>
    597c:	88c00054 	ori	r3,r17,1
    5980:	80c00115 	stw	r3,4(r16)
    5984:	8463883a 	add	r17,r16,r17
    5988:	10800054 	ori	r2,r2,1
    598c:	9c400215 	stw	r17,8(r19)
    5990:	88800115 	stw	r2,4(r17)
    5994:	9009883a 	mov	r4,r18
    5998:	000d0b00 	call	d0b0 <__malloc_unlock>
    599c:	80800204 	addi	r2,r16,8
    59a0:	003ef506 	br	5578 <__alt_data_end+0xfe005578>
    59a4:	00800504 	movi	r2,20
    59a8:	1100482e 	bgeu	r2,r4,5acc <_malloc_r+0x60c>
    59ac:	00801504 	movi	r2,84
    59b0:	11006836 	bltu	r2,r4,5b54 <_malloc_r+0x694>
    59b4:	8808d33a 	srli	r4,r17,12
    59b8:	21001b84 	addi	r4,r4,110
    59bc:	210b883a 	add	r5,r4,r4
    59c0:	003f0606 	br	55dc <__alt_data_end+0xfe0055dc>
    59c4:	1006d27a 	srli	r3,r2,9
    59c8:	01400104 	movi	r5,4
    59cc:	28c0422e 	bgeu	r5,r3,5ad8 <_malloc_r+0x618>
    59d0:	01400504 	movi	r5,20
    59d4:	28c07c36 	bltu	r5,r3,5bc8 <_malloc_r+0x708>
    59d8:	194016c4 	addi	r5,r3,91
    59dc:	294d883a 	add	r6,r5,r5
    59e0:	318d883a 	add	r6,r6,r6
    59e4:	318d883a 	add	r6,r6,r6
    59e8:	998d883a 	add	r6,r19,r6
    59ec:	30c00217 	ldw	r3,8(r6)
    59f0:	01c00074 	movhi	r7,1
    59f4:	39fe0504 	addi	r7,r7,-2028
    59f8:	19806326 	beq	r3,r6,5b88 <_malloc_r+0x6c8>
    59fc:	01ffff04 	movi	r7,-4
    5a00:	19400117 	ldw	r5,4(r3)
    5a04:	29ca703a 	and	r5,r5,r7
    5a08:	1140022e 	bgeu	r2,r5,5a14 <_malloc_r+0x554>
    5a0c:	18c00217 	ldw	r3,8(r3)
    5a10:	30fffb1e 	bne	r6,r3,5a00 <__alt_data_end+0xfe005a00>
    5a14:	19400317 	ldw	r5,12(r3)
    5a18:	98800117 	ldw	r2,4(r19)
    5a1c:	81400315 	stw	r5,12(r16)
    5a20:	80c00215 	stw	r3,8(r16)
    5a24:	2c000215 	stw	r16,8(r5)
    5a28:	1c000315 	stw	r16,12(r3)
    5a2c:	003f2106 	br	56b4 <__alt_data_end+0xfe0056b4>
    5a30:	88800054 	ori	r2,r17,1
    5a34:	80800115 	stw	r2,4(r16)
    5a38:	8463883a 	add	r17,r16,r17
    5a3c:	1c400515 	stw	r17,20(r3)
    5a40:	1c400415 	stw	r17,16(r3)
    5a44:	28800054 	ori	r2,r5,1
    5a48:	88800115 	stw	r2,4(r17)
    5a4c:	8a400315 	stw	r9,12(r17)
    5a50:	8a400215 	stw	r9,8(r17)
    5a54:	8963883a 	add	r17,r17,r5
    5a58:	89400015 	stw	r5,0(r17)
    5a5c:	9009883a 	mov	r4,r18
    5a60:	000d0b00 	call	d0b0 <__malloc_unlock>
    5a64:	80800204 	addi	r2,r16,8
    5a68:	003ec306 	br	5578 <__alt_data_end+0xfe005578>
    5a6c:	18800117 	ldw	r2,4(r3)
    5a70:	003f1006 	br	56b4 <__alt_data_end+0xfe0056b4>
    5a74:	63000044 	addi	r12,r12,1
    5a78:	608000cc 	andi	r2,r12,3
    5a7c:	52800204 	addi	r10,r10,8
    5a80:	103f241e 	bne	r2,zero,5714 <__alt_data_end+0xfe005714>
    5a84:	00002106 	br	5b0c <_malloc_r+0x64c>
    5a88:	80800204 	addi	r2,r16,8
    5a8c:	84000517 	ldw	r16,20(r16)
    5a90:	143eab1e 	bne	r2,r16,5540 <__alt_data_end+0xfe005540>
    5a94:	21000084 	addi	r4,r4,2
    5a98:	003ee606 	br	5634 <__alt_data_end+0xfe005634>
    5a9c:	80c7883a 	add	r3,r16,r3
    5aa0:	19400117 	ldw	r5,4(r3)
    5aa4:	80800317 	ldw	r2,12(r16)
    5aa8:	81000217 	ldw	r4,8(r16)
    5aac:	29400054 	ori	r5,r5,1
    5ab0:	19400115 	stw	r5,4(r3)
    5ab4:	20800315 	stw	r2,12(r4)
    5ab8:	11000215 	stw	r4,8(r2)
    5abc:	9009883a 	mov	r4,r18
    5ac0:	000d0b00 	call	d0b0 <__malloc_unlock>
    5ac4:	80800204 	addi	r2,r16,8
    5ac8:	003eab06 	br	5578 <__alt_data_end+0xfe005578>
    5acc:	210016c4 	addi	r4,r4,91
    5ad0:	210b883a 	add	r5,r4,r4
    5ad4:	003ec106 	br	55dc <__alt_data_end+0xfe0055dc>
    5ad8:	100ad1ba 	srli	r5,r2,6
    5adc:	29400e04 	addi	r5,r5,56
    5ae0:	294d883a 	add	r6,r5,r5
    5ae4:	003fbe06 	br	59e0 <__alt_data_end+0xfe0059e0>
    5ae8:	84ff5d26 	beq	r16,r19,5860 <__alt_data_end+0xfe005860>
    5aec:	9c000217 	ldw	r16,8(r19)
    5af0:	00bfff04 	movi	r2,-4
    5af4:	80c00117 	ldw	r3,4(r16)
    5af8:	1886703a 	and	r3,r3,r2
    5afc:	003f9706 	br	595c <__alt_data_end+0xfe00595c>
    5b00:	5ac00017 	ldw	r11,0(r11)
    5b04:	213fffc4 	addi	r4,r4,-1
    5b08:	58805c1e 	bne	r11,r2,5c7c <_malloc_r+0x7bc>
    5b0c:	20c000cc 	andi	r3,r4,3
    5b10:	58bffe04 	addi	r2,r11,-8
    5b14:	183ffa1e 	bne	r3,zero,5b00 <__alt_data_end+0xfe005b00>
    5b18:	98800117 	ldw	r2,4(r19)
    5b1c:	0146303a 	nor	r3,zero,r5
    5b20:	1884703a 	and	r2,r3,r2
    5b24:	98800115 	stw	r2,4(r19)
    5b28:	294b883a 	add	r5,r5,r5
    5b2c:	117f2e36 	bltu	r2,r5,57e8 <__alt_data_end+0xfe0057e8>
    5b30:	283f2d26 	beq	r5,zero,57e8 <__alt_data_end+0xfe0057e8>
    5b34:	1146703a 	and	r3,r2,r5
    5b38:	6009883a 	mov	r4,r12
    5b3c:	183eef1e 	bne	r3,zero,56fc <__alt_data_end+0xfe0056fc>
    5b40:	294b883a 	add	r5,r5,r5
    5b44:	1146703a 	and	r3,r2,r5
    5b48:	21000104 	addi	r4,r4,4
    5b4c:	183ffc26 	beq	r3,zero,5b40 <__alt_data_end+0xfe005b40>
    5b50:	003eea06 	br	56fc <__alt_data_end+0xfe0056fc>
    5b54:	00805504 	movi	r2,340
    5b58:	11001336 	bltu	r2,r4,5ba8 <_malloc_r+0x6e8>
    5b5c:	8808d3fa 	srli	r4,r17,15
    5b60:	21001dc4 	addi	r4,r4,119
    5b64:	210b883a 	add	r5,r4,r4
    5b68:	003e9c06 	br	55dc <__alt_data_end+0xfe0055dc>
    5b6c:	00840004 	movi	r2,4096
    5b70:	003f4d06 	br	58a8 <__alt_data_end+0xfe0058a8>
    5b74:	00800044 	movi	r2,1
    5b78:	a0800115 	stw	r2,4(r20)
    5b7c:	a021883a 	mov	r16,r20
    5b80:	0007883a 	mov	r3,zero
    5b84:	003f7506 	br	595c <__alt_data_end+0xfe00595c>
    5b88:	280bd0ba 	srai	r5,r5,2
    5b8c:	01800044 	movi	r6,1
    5b90:	38800117 	ldw	r2,4(r7)
    5b94:	314c983a 	sll	r6,r6,r5
    5b98:	180b883a 	mov	r5,r3
    5b9c:	3084b03a 	or	r2,r6,r2
    5ba0:	38800115 	stw	r2,4(r7)
    5ba4:	003f9d06 	br	5a1c <__alt_data_end+0xfe005a1c>
    5ba8:	00815504 	movi	r2,1364
    5bac:	11001336 	bltu	r2,r4,5bfc <_malloc_r+0x73c>
    5bb0:	8808d4ba 	srli	r4,r17,18
    5bb4:	21001f04 	addi	r4,r4,124
    5bb8:	210b883a 	add	r5,r4,r4
    5bbc:	003e8706 	br	55dc <__alt_data_end+0xfe0055dc>
    5bc0:	bdc00404 	addi	r23,r23,16
    5bc4:	003f1d06 	br	583c <__alt_data_end+0xfe00583c>
    5bc8:	01401504 	movi	r5,84
    5bcc:	28c01c36 	bltu	r5,r3,5c40 <_malloc_r+0x780>
    5bd0:	100ad33a 	srli	r5,r2,12
    5bd4:	29401b84 	addi	r5,r5,110
    5bd8:	294d883a 	add	r6,r5,r5
    5bdc:	003f8006 	br	59e0 <__alt_data_end+0xfe0059e0>
    5be0:	e103ffcc 	andi	r4,fp,4095
    5be4:	203f241e 	bne	r4,zero,5878 <__alt_data_end+0xfe005878>
    5be8:	98c00217 	ldw	r3,8(r19)
    5bec:	bd49883a 	add	r4,r23,r21
    5bf0:	21000054 	ori	r4,r4,1
    5bf4:	19000115 	stw	r4,4(r3)
    5bf8:	003f4a06 	br	5924 <__alt_data_end+0xfe005924>
    5bfc:	01403f04 	movi	r5,252
    5c00:	01001f84 	movi	r4,126
    5c04:	003e7506 	br	55dc <__alt_data_end+0xfe0055dc>
    5c08:	00c00044 	movi	r3,1
    5c0c:	002f883a 	mov	r23,zero
    5c10:	003f3006 	br	58d4 <__alt_data_end+0xfe0058d4>
    5c14:	00800074 	movhi	r2,1
    5c18:	10838c04 	addi	r2,r2,3632
    5c1c:	15000015 	stw	r20,0(r2)
    5c20:	003f1b06 	br	5890 <__alt_data_end+0xfe005890>
    5c24:	9009883a 	mov	r4,r18
    5c28:	81400204 	addi	r5,r16,8
    5c2c:	000495c0 	call	495c <_free_r>
    5c30:	00800074 	movhi	r2,1
    5c34:	108a6304 	addi	r2,r2,10636
    5c38:	10800017 	ldw	r2,0(r2)
    5c3c:	003f3906 	br	5924 <__alt_data_end+0xfe005924>
    5c40:	01405504 	movi	r5,340
    5c44:	28c00436 	bltu	r5,r3,5c58 <_malloc_r+0x798>
    5c48:	100ad3fa 	srli	r5,r2,15
    5c4c:	29401dc4 	addi	r5,r5,119
    5c50:	294d883a 	add	r6,r5,r5
    5c54:	003f6206 	br	59e0 <__alt_data_end+0xfe0059e0>
    5c58:	01415504 	movi	r5,1364
    5c5c:	28c00436 	bltu	r5,r3,5c70 <_malloc_r+0x7b0>
    5c60:	100ad4ba 	srli	r5,r2,18
    5c64:	29401f04 	addi	r5,r5,124
    5c68:	294d883a 	add	r6,r5,r5
    5c6c:	003f5c06 	br	59e0 <__alt_data_end+0xfe0059e0>
    5c70:	01803f04 	movi	r6,252
    5c74:	01401f84 	movi	r5,126
    5c78:	003f5906 	br	59e0 <__alt_data_end+0xfe0059e0>
    5c7c:	98800117 	ldw	r2,4(r19)
    5c80:	003fa906 	br	5b28 <__alt_data_end+0xfe005b28>

00005c84 <memchr>:
    5c84:	208000cc 	andi	r2,r4,3
    5c88:	2811883a 	mov	r8,r5
    5c8c:	10003526 	beq	r2,zero,5d64 <memchr+0xe0>
    5c90:	30bfffc4 	addi	r2,r6,-1
    5c94:	30001b26 	beq	r6,zero,5d04 <memchr+0x80>
    5c98:	21800003 	ldbu	r6,0(r4)
    5c9c:	28c03fcc 	andi	r3,r5,255
    5ca0:	30c01a26 	beq	r6,r3,5d0c <memchr+0x88>
    5ca4:	180d883a 	mov	r6,r3
    5ca8:	00000406 	br	5cbc <memchr+0x38>
    5cac:	10001526 	beq	r2,zero,5d04 <memchr+0x80>
    5cb0:	20c00003 	ldbu	r3,0(r4)
    5cb4:	10bfffc4 	addi	r2,r2,-1
    5cb8:	19801426 	beq	r3,r6,5d0c <memchr+0x88>
    5cbc:	21000044 	addi	r4,r4,1
    5cc0:	20c000cc 	andi	r3,r4,3
    5cc4:	183ff91e 	bne	r3,zero,5cac <__alt_data_end+0xfe005cac>
    5cc8:	02c000c4 	movi	r11,3
    5ccc:	58801136 	bltu	r11,r2,5d14 <memchr+0x90>
    5cd0:	10000c26 	beq	r2,zero,5d04 <memchr+0x80>
    5cd4:	20c00003 	ldbu	r3,0(r4)
    5cd8:	29403fcc 	andi	r5,r5,255
    5cdc:	19400b26 	beq	r3,r5,5d0c <memchr+0x88>
    5ce0:	20c00044 	addi	r3,r4,1
    5ce4:	2085883a 	add	r2,r4,r2
    5ce8:	41803fcc 	andi	r6,r8,255
    5cec:	00000306 	br	5cfc <memchr+0x78>
    5cf0:	18c00044 	addi	r3,r3,1
    5cf4:	197fffc3 	ldbu	r5,-1(r3)
    5cf8:	29800426 	beq	r5,r6,5d0c <memchr+0x88>
    5cfc:	1809883a 	mov	r4,r3
    5d00:	18bffb1e 	bne	r3,r2,5cf0 <__alt_data_end+0xfe005cf0>
    5d04:	0005883a 	mov	r2,zero
    5d08:	f800283a 	ret
    5d0c:	2005883a 	mov	r2,r4
    5d10:	f800283a 	ret
    5d14:	28c03fcc 	andi	r3,r5,255
    5d18:	180c923a 	slli	r6,r3,8
    5d1c:	02bfbff4 	movhi	r10,65279
    5d20:	52bfbfc4 	addi	r10,r10,-257
    5d24:	02602074 	movhi	r9,32897
    5d28:	4a602004 	addi	r9,r9,-32640
    5d2c:	30c6b03a 	or	r3,r6,r3
    5d30:	180c943a 	slli	r6,r3,16
    5d34:	30ccb03a 	or	r6,r6,r3
    5d38:	20c00017 	ldw	r3,0(r4)
    5d3c:	30c6f03a 	xor	r3,r6,r3
    5d40:	1a8f883a 	add	r7,r3,r10
    5d44:	00c6303a 	nor	r3,zero,r3
    5d48:	38c6703a 	and	r3,r7,r3
    5d4c:	1a46703a 	and	r3,r3,r9
    5d50:	183fdf1e 	bne	r3,zero,5cd0 <__alt_data_end+0xfe005cd0>
    5d54:	10bfff04 	addi	r2,r2,-4
    5d58:	21000104 	addi	r4,r4,4
    5d5c:	58bff636 	bltu	r11,r2,5d38 <__alt_data_end+0xfe005d38>
    5d60:	003fdb06 	br	5cd0 <__alt_data_end+0xfe005cd0>
    5d64:	3005883a 	mov	r2,r6
    5d68:	003fd706 	br	5cc8 <__alt_data_end+0xfe005cc8>

00005d6c <memcpy>:
    5d6c:	00c003c4 	movi	r3,15
    5d70:	2005883a 	mov	r2,r4
    5d74:	1980372e 	bgeu	r3,r6,5e54 <memcpy+0xe8>
    5d78:	2146b03a 	or	r3,r4,r5
    5d7c:	18c000cc 	andi	r3,r3,3
    5d80:	1800371e 	bne	r3,zero,5e60 <memcpy+0xf4>
    5d84:	327ffc04 	addi	r9,r6,-16
    5d88:	4812d13a 	srli	r9,r9,4
    5d8c:	2007883a 	mov	r3,r4
    5d90:	280f883a 	mov	r7,r5
    5d94:	4808913a 	slli	r4,r9,4
    5d98:	1109883a 	add	r4,r2,r4
    5d9c:	21000404 	addi	r4,r4,16
    5da0:	3a000017 	ldw	r8,0(r7)
    5da4:	18c00404 	addi	r3,r3,16
    5da8:	39c00404 	addi	r7,r7,16
    5dac:	1a3ffc15 	stw	r8,-16(r3)
    5db0:	3a3ffd17 	ldw	r8,-12(r7)
    5db4:	1a3ffd15 	stw	r8,-12(r3)
    5db8:	3a3ffe17 	ldw	r8,-8(r7)
    5dbc:	1a3ffe15 	stw	r8,-8(r3)
    5dc0:	3a3fff17 	ldw	r8,-4(r7)
    5dc4:	1a3fff15 	stw	r8,-4(r3)
    5dc8:	193ff51e 	bne	r3,r4,5da0 <__alt_data_end+0xfe005da0>
    5dcc:	49000044 	addi	r4,r9,1
    5dd0:	2008913a 	slli	r4,r4,4
    5dd4:	328003cc 	andi	r10,r6,15
    5dd8:	1107883a 	add	r3,r2,r4
    5ddc:	290b883a 	add	r5,r5,r4
    5de0:	010000c4 	movi	r4,3
    5de4:	2280212e 	bgeu	r4,r10,5e6c <memcpy+0x100>
    5de8:	52bfff04 	addi	r10,r10,-4
    5dec:	5014d0ba 	srli	r10,r10,2
    5df0:	180f883a 	mov	r7,r3
    5df4:	2811883a 	mov	r8,r5
    5df8:	5289883a 	add	r4,r10,r10
    5dfc:	2109883a 	add	r4,r4,r4
    5e00:	21000104 	addi	r4,r4,4
    5e04:	1909883a 	add	r4,r3,r4
    5e08:	42400017 	ldw	r9,0(r8)
    5e0c:	39c00104 	addi	r7,r7,4
    5e10:	42000104 	addi	r8,r8,4
    5e14:	3a7fff15 	stw	r9,-4(r7)
    5e18:	393ffb1e 	bne	r7,r4,5e08 <__alt_data_end+0xfe005e08>
    5e1c:	51000044 	addi	r4,r10,1
    5e20:	2109883a 	add	r4,r4,r4
    5e24:	2109883a 	add	r4,r4,r4
    5e28:	318000cc 	andi	r6,r6,3
    5e2c:	1907883a 	add	r3,r3,r4
    5e30:	290b883a 	add	r5,r5,r4
    5e34:	30000c26 	beq	r6,zero,5e68 <memcpy+0xfc>
    5e38:	298d883a 	add	r6,r5,r6
    5e3c:	29c00003 	ldbu	r7,0(r5)
    5e40:	18c00044 	addi	r3,r3,1
    5e44:	29400044 	addi	r5,r5,1
    5e48:	19ffffc5 	stb	r7,-1(r3)
    5e4c:	29bffb1e 	bne	r5,r6,5e3c <__alt_data_end+0xfe005e3c>
    5e50:	f800283a 	ret
    5e54:	2007883a 	mov	r3,r4
    5e58:	303ff71e 	bne	r6,zero,5e38 <__alt_data_end+0xfe005e38>
    5e5c:	00000206 	br	5e68 <memcpy+0xfc>
    5e60:	2007883a 	mov	r3,r4
    5e64:	003ff406 	br	5e38 <__alt_data_end+0xfe005e38>
    5e68:	f800283a 	ret
    5e6c:	500d883a 	mov	r6,r10
    5e70:	303ff11e 	bne	r6,zero,5e38 <__alt_data_end+0xfe005e38>
    5e74:	003ffc06 	br	5e68 <__alt_data_end+0xfe005e68>

00005e78 <memmove>:
    5e78:	2005883a 	mov	r2,r4
    5e7c:	29000b2e 	bgeu	r5,r4,5eac <memmove+0x34>
    5e80:	298f883a 	add	r7,r5,r6
    5e84:	21c0092e 	bgeu	r4,r7,5eac <memmove+0x34>
    5e88:	2187883a 	add	r3,r4,r6
    5e8c:	198bc83a 	sub	r5,r3,r6
    5e90:	30003e26 	beq	r6,zero,5f8c <memmove+0x114>
    5e94:	39ffffc4 	addi	r7,r7,-1
    5e98:	39000003 	ldbu	r4,0(r7)
    5e9c:	18ffffc4 	addi	r3,r3,-1
    5ea0:	19000005 	stb	r4,0(r3)
    5ea4:	197ffb1e 	bne	r3,r5,5e94 <__alt_data_end+0xfe005e94>
    5ea8:	f800283a 	ret
    5eac:	00c003c4 	movi	r3,15
    5eb0:	1980372e 	bgeu	r3,r6,5f90 <memmove+0x118>
    5eb4:	1146b03a 	or	r3,r2,r5
    5eb8:	18c000cc 	andi	r3,r3,3
    5ebc:	1800371e 	bne	r3,zero,5f9c <memmove+0x124>
    5ec0:	327ffc04 	addi	r9,r6,-16
    5ec4:	4812d13a 	srli	r9,r9,4
    5ec8:	280f883a 	mov	r7,r5
    5ecc:	1007883a 	mov	r3,r2
    5ed0:	4810913a 	slli	r8,r9,4
    5ed4:	1211883a 	add	r8,r2,r8
    5ed8:	42000404 	addi	r8,r8,16
    5edc:	39000017 	ldw	r4,0(r7)
    5ee0:	18c00404 	addi	r3,r3,16
    5ee4:	39c00404 	addi	r7,r7,16
    5ee8:	193ffc15 	stw	r4,-16(r3)
    5eec:	393ffd17 	ldw	r4,-12(r7)
    5ef0:	193ffd15 	stw	r4,-12(r3)
    5ef4:	393ffe17 	ldw	r4,-8(r7)
    5ef8:	193ffe15 	stw	r4,-8(r3)
    5efc:	393fff17 	ldw	r4,-4(r7)
    5f00:	193fff15 	stw	r4,-4(r3)
    5f04:	1a3ff51e 	bne	r3,r8,5edc <__alt_data_end+0xfe005edc>
    5f08:	49000044 	addi	r4,r9,1
    5f0c:	2008913a 	slli	r4,r4,4
    5f10:	328003cc 	andi	r10,r6,15
    5f14:	1107883a 	add	r3,r2,r4
    5f18:	290b883a 	add	r5,r5,r4
    5f1c:	010000c4 	movi	r4,3
    5f20:	2280212e 	bgeu	r4,r10,5fa8 <memmove+0x130>
    5f24:	52bfff04 	addi	r10,r10,-4
    5f28:	5014d0ba 	srli	r10,r10,2
    5f2c:	180f883a 	mov	r7,r3
    5f30:	2809883a 	mov	r4,r5
    5f34:	5291883a 	add	r8,r10,r10
    5f38:	4211883a 	add	r8,r8,r8
    5f3c:	42400104 	addi	r9,r8,4
    5f40:	1a53883a 	add	r9,r3,r9
    5f44:	22000017 	ldw	r8,0(r4)
    5f48:	39c00104 	addi	r7,r7,4
    5f4c:	21000104 	addi	r4,r4,4
    5f50:	3a3fff15 	stw	r8,-4(r7)
    5f54:	3a7ffb1e 	bne	r7,r9,5f44 <__alt_data_end+0xfe005f44>
    5f58:	51000044 	addi	r4,r10,1
    5f5c:	2109883a 	add	r4,r4,r4
    5f60:	2109883a 	add	r4,r4,r4
    5f64:	318000cc 	andi	r6,r6,3
    5f68:	1907883a 	add	r3,r3,r4
    5f6c:	290b883a 	add	r5,r5,r4
    5f70:	30000c26 	beq	r6,zero,5fa4 <memmove+0x12c>
    5f74:	198d883a 	add	r6,r3,r6
    5f78:	29c00003 	ldbu	r7,0(r5)
    5f7c:	18c00044 	addi	r3,r3,1
    5f80:	29400044 	addi	r5,r5,1
    5f84:	19ffffc5 	stb	r7,-1(r3)
    5f88:	19bffb1e 	bne	r3,r6,5f78 <__alt_data_end+0xfe005f78>
    5f8c:	f800283a 	ret
    5f90:	1007883a 	mov	r3,r2
    5f94:	303ff71e 	bne	r6,zero,5f74 <__alt_data_end+0xfe005f74>
    5f98:	00000206 	br	5fa4 <memmove+0x12c>
    5f9c:	1007883a 	mov	r3,r2
    5fa0:	003ff406 	br	5f74 <__alt_data_end+0xfe005f74>
    5fa4:	f800283a 	ret
    5fa8:	500d883a 	mov	r6,r10
    5fac:	303ff11e 	bne	r6,zero,5f74 <__alt_data_end+0xfe005f74>
    5fb0:	003ffc06 	br	5fa4 <__alt_data_end+0xfe005fa4>

00005fb4 <memset>:
    5fb4:	20c000cc 	andi	r3,r4,3
    5fb8:	2005883a 	mov	r2,r4
    5fbc:	18003f26 	beq	r3,zero,60bc <memset+0x108>
    5fc0:	31ffffc4 	addi	r7,r6,-1
    5fc4:	30003b26 	beq	r6,zero,60b4 <memset+0x100>
    5fc8:	2813883a 	mov	r9,r5
    5fcc:	200d883a 	mov	r6,r4
    5fd0:	2007883a 	mov	r3,r4
    5fd4:	00000406 	br	5fe8 <memset+0x34>
    5fd8:	3a3fffc4 	addi	r8,r7,-1
    5fdc:	31800044 	addi	r6,r6,1
    5fe0:	38003426 	beq	r7,zero,60b4 <memset+0x100>
    5fe4:	400f883a 	mov	r7,r8
    5fe8:	18c00044 	addi	r3,r3,1
    5fec:	32400005 	stb	r9,0(r6)
    5ff0:	1a0000cc 	andi	r8,r3,3
    5ff4:	403ff81e 	bne	r8,zero,5fd8 <__alt_data_end+0xfe005fd8>
    5ff8:	010000c4 	movi	r4,3
    5ffc:	21c0282e 	bgeu	r4,r7,60a0 <memset+0xec>
    6000:	29003fcc 	andi	r4,r5,255
    6004:	2010923a 	slli	r8,r4,8
    6008:	4108b03a 	or	r4,r8,r4
    600c:	2010943a 	slli	r8,r4,16
    6010:	4110b03a 	or	r8,r8,r4
    6014:	010003c4 	movi	r4,15
    6018:	21c0122e 	bgeu	r4,r7,6064 <memset+0xb0>
    601c:	3a7ffc04 	addi	r9,r7,-16
    6020:	4812d13a 	srli	r9,r9,4
    6024:	19000404 	addi	r4,r3,16
    6028:	180d883a 	mov	r6,r3
    602c:	4814913a 	slli	r10,r9,4
    6030:	2289883a 	add	r4,r4,r10
    6034:	32000015 	stw	r8,0(r6)
    6038:	32000115 	stw	r8,4(r6)
    603c:	32000215 	stw	r8,8(r6)
    6040:	32000315 	stw	r8,12(r6)
    6044:	31800404 	addi	r6,r6,16
    6048:	313ffa1e 	bne	r6,r4,6034 <__alt_data_end+0xfe006034>
    604c:	4a400044 	addi	r9,r9,1
    6050:	4812913a 	slli	r9,r9,4
    6054:	39c003cc 	andi	r7,r7,15
    6058:	010000c4 	movi	r4,3
    605c:	1a47883a 	add	r3,r3,r9
    6060:	21c00f2e 	bgeu	r4,r7,60a0 <memset+0xec>
    6064:	3a7fff04 	addi	r9,r7,-4
    6068:	4812d0ba 	srli	r9,r9,2
    606c:	19000104 	addi	r4,r3,4
    6070:	180d883a 	mov	r6,r3
    6074:	4a55883a 	add	r10,r9,r9
    6078:	5295883a 	add	r10,r10,r10
    607c:	2289883a 	add	r4,r4,r10
    6080:	32000015 	stw	r8,0(r6)
    6084:	31800104 	addi	r6,r6,4
    6088:	313ffd1e 	bne	r6,r4,6080 <__alt_data_end+0xfe006080>
    608c:	4a400044 	addi	r9,r9,1
    6090:	4a53883a 	add	r9,r9,r9
    6094:	4a53883a 	add	r9,r9,r9
    6098:	1a47883a 	add	r3,r3,r9
    609c:	39c000cc 	andi	r7,r7,3
    60a0:	38000526 	beq	r7,zero,60b8 <memset+0x104>
    60a4:	19cf883a 	add	r7,r3,r7
    60a8:	19400005 	stb	r5,0(r3)
    60ac:	18c00044 	addi	r3,r3,1
    60b0:	19fffd1e 	bne	r3,r7,60a8 <__alt_data_end+0xfe0060a8>
    60b4:	f800283a 	ret
    60b8:	f800283a 	ret
    60bc:	2007883a 	mov	r3,r4
    60c0:	300f883a 	mov	r7,r6
    60c4:	003fcc06 	br	5ff8 <__alt_data_end+0xfe005ff8>

000060c8 <_Balloc>:
    60c8:	20801317 	ldw	r2,76(r4)
    60cc:	defffc04 	addi	sp,sp,-16
    60d0:	dc400115 	stw	r17,4(sp)
    60d4:	dc000015 	stw	r16,0(sp)
    60d8:	dfc00315 	stw	ra,12(sp)
    60dc:	dc800215 	stw	r18,8(sp)
    60e0:	2023883a 	mov	r17,r4
    60e4:	2821883a 	mov	r16,r5
    60e8:	10000f26 	beq	r2,zero,6128 <_Balloc+0x60>
    60ec:	8407883a 	add	r3,r16,r16
    60f0:	18c7883a 	add	r3,r3,r3
    60f4:	10c7883a 	add	r3,r2,r3
    60f8:	18800017 	ldw	r2,0(r3)
    60fc:	10001126 	beq	r2,zero,6144 <_Balloc+0x7c>
    6100:	11000017 	ldw	r4,0(r2)
    6104:	19000015 	stw	r4,0(r3)
    6108:	10000415 	stw	zero,16(r2)
    610c:	10000315 	stw	zero,12(r2)
    6110:	dfc00317 	ldw	ra,12(sp)
    6114:	dc800217 	ldw	r18,8(sp)
    6118:	dc400117 	ldw	r17,4(sp)
    611c:	dc000017 	ldw	r16,0(sp)
    6120:	dec00404 	addi	sp,sp,16
    6124:	f800283a 	ret
    6128:	01400104 	movi	r5,4
    612c:	01800844 	movi	r6,33
    6130:	0008cc80 	call	8cc8 <_calloc_r>
    6134:	88801315 	stw	r2,76(r17)
    6138:	103fec1e 	bne	r2,zero,60ec <__alt_data_end+0xfe0060ec>
    613c:	0005883a 	mov	r2,zero
    6140:	003ff306 	br	6110 <__alt_data_end+0xfe006110>
    6144:	01400044 	movi	r5,1
    6148:	2c24983a 	sll	r18,r5,r16
    614c:	8809883a 	mov	r4,r17
    6150:	91800144 	addi	r6,r18,5
    6154:	318d883a 	add	r6,r6,r6
    6158:	318d883a 	add	r6,r6,r6
    615c:	0008cc80 	call	8cc8 <_calloc_r>
    6160:	103ff626 	beq	r2,zero,613c <__alt_data_end+0xfe00613c>
    6164:	14000115 	stw	r16,4(r2)
    6168:	14800215 	stw	r18,8(r2)
    616c:	003fe606 	br	6108 <__alt_data_end+0xfe006108>

00006170 <_Bfree>:
    6170:	28000826 	beq	r5,zero,6194 <_Bfree+0x24>
    6174:	28c00117 	ldw	r3,4(r5)
    6178:	20801317 	ldw	r2,76(r4)
    617c:	18c7883a 	add	r3,r3,r3
    6180:	18c7883a 	add	r3,r3,r3
    6184:	10c5883a 	add	r2,r2,r3
    6188:	10c00017 	ldw	r3,0(r2)
    618c:	28c00015 	stw	r3,0(r5)
    6190:	11400015 	stw	r5,0(r2)
    6194:	f800283a 	ret

00006198 <__multadd>:
    6198:	defffa04 	addi	sp,sp,-24
    619c:	dc000115 	stw	r16,4(sp)
    61a0:	2c000417 	ldw	r16,16(r5)
    61a4:	dc800315 	stw	r18,12(sp)
    61a8:	dc400215 	stw	r17,8(sp)
    61ac:	dfc00515 	stw	ra,20(sp)
    61b0:	dcc00415 	stw	r19,16(sp)
    61b4:	2823883a 	mov	r17,r5
    61b8:	2025883a 	mov	r18,r4
    61bc:	28c00504 	addi	r3,r5,20
    61c0:	0011883a 	mov	r8,zero
    61c4:	1a800017 	ldw	r10,0(r3)
    61c8:	18c00104 	addi	r3,r3,4
    61cc:	42000044 	addi	r8,r8,1
    61d0:	527fffcc 	andi	r9,r10,65535
    61d4:	4993383a 	mul	r9,r9,r6
    61d8:	5014d43a 	srli	r10,r10,16
    61dc:	49d3883a 	add	r9,r9,r7
    61e0:	480ed43a 	srli	r7,r9,16
    61e4:	5195383a 	mul	r10,r10,r6
    61e8:	4a7fffcc 	andi	r9,r9,65535
    61ec:	3a8f883a 	add	r7,r7,r10
    61f0:	3814943a 	slli	r10,r7,16
    61f4:	380ed43a 	srli	r7,r7,16
    61f8:	5253883a 	add	r9,r10,r9
    61fc:	1a7fff15 	stw	r9,-4(r3)
    6200:	443ff016 	blt	r8,r16,61c4 <__alt_data_end+0xfe0061c4>
    6204:	38000926 	beq	r7,zero,622c <__multadd+0x94>
    6208:	88800217 	ldw	r2,8(r17)
    620c:	80800f0e 	bge	r16,r2,624c <__multadd+0xb4>
    6210:	80800144 	addi	r2,r16,5
    6214:	1085883a 	add	r2,r2,r2
    6218:	1085883a 	add	r2,r2,r2
    621c:	8885883a 	add	r2,r17,r2
    6220:	11c00015 	stw	r7,0(r2)
    6224:	84000044 	addi	r16,r16,1
    6228:	8c000415 	stw	r16,16(r17)
    622c:	8805883a 	mov	r2,r17
    6230:	dfc00517 	ldw	ra,20(sp)
    6234:	dcc00417 	ldw	r19,16(sp)
    6238:	dc800317 	ldw	r18,12(sp)
    623c:	dc400217 	ldw	r17,8(sp)
    6240:	dc000117 	ldw	r16,4(sp)
    6244:	dec00604 	addi	sp,sp,24
    6248:	f800283a 	ret
    624c:	89400117 	ldw	r5,4(r17)
    6250:	9009883a 	mov	r4,r18
    6254:	d9c00015 	stw	r7,0(sp)
    6258:	29400044 	addi	r5,r5,1
    625c:	00060c80 	call	60c8 <_Balloc>
    6260:	89800417 	ldw	r6,16(r17)
    6264:	89400304 	addi	r5,r17,12
    6268:	11000304 	addi	r4,r2,12
    626c:	31800084 	addi	r6,r6,2
    6270:	318d883a 	add	r6,r6,r6
    6274:	318d883a 	add	r6,r6,r6
    6278:	1027883a 	mov	r19,r2
    627c:	0005d6c0 	call	5d6c <memcpy>
    6280:	88c00117 	ldw	r3,4(r17)
    6284:	90801317 	ldw	r2,76(r18)
    6288:	d9c00017 	ldw	r7,0(sp)
    628c:	18c7883a 	add	r3,r3,r3
    6290:	18c7883a 	add	r3,r3,r3
    6294:	10c5883a 	add	r2,r2,r3
    6298:	10c00017 	ldw	r3,0(r2)
    629c:	88c00015 	stw	r3,0(r17)
    62a0:	14400015 	stw	r17,0(r2)
    62a4:	9823883a 	mov	r17,r19
    62a8:	003fd906 	br	6210 <__alt_data_end+0xfe006210>

000062ac <__s2b>:
    62ac:	defff904 	addi	sp,sp,-28
    62b0:	dd000415 	stw	r20,16(sp)
    62b4:	dc400115 	stw	r17,4(sp)
    62b8:	2829883a 	mov	r20,r5
    62bc:	2023883a 	mov	r17,r4
    62c0:	01400244 	movi	r5,9
    62c4:	39000204 	addi	r4,r7,8
    62c8:	dcc00315 	stw	r19,12(sp)
    62cc:	dc800215 	stw	r18,8(sp)
    62d0:	dfc00615 	stw	ra,24(sp)
    62d4:	dd400515 	stw	r21,20(sp)
    62d8:	dc000015 	stw	r16,0(sp)
    62dc:	3827883a 	mov	r19,r7
    62e0:	3025883a 	mov	r18,r6
    62e4:	000a1d00 	call	a1d0 <__divsi3>
    62e8:	00c00044 	movi	r3,1
    62ec:	000b883a 	mov	r5,zero
    62f0:	1880030e 	bge	r3,r2,6300 <__s2b+0x54>
    62f4:	18c7883a 	add	r3,r3,r3
    62f8:	29400044 	addi	r5,r5,1
    62fc:	18bffd16 	blt	r3,r2,62f4 <__alt_data_end+0xfe0062f4>
    6300:	8809883a 	mov	r4,r17
    6304:	00060c80 	call	60c8 <_Balloc>
    6308:	d8c00717 	ldw	r3,28(sp)
    630c:	10c00515 	stw	r3,20(r2)
    6310:	00c00044 	movi	r3,1
    6314:	10c00415 	stw	r3,16(r2)
    6318:	00c00244 	movi	r3,9
    631c:	1c80210e 	bge	r3,r18,63a4 <__s2b+0xf8>
    6320:	a0eb883a 	add	r21,r20,r3
    6324:	a821883a 	mov	r16,r21
    6328:	a4a9883a 	add	r20,r20,r18
    632c:	81c00007 	ldb	r7,0(r16)
    6330:	8809883a 	mov	r4,r17
    6334:	84000044 	addi	r16,r16,1
    6338:	100b883a 	mov	r5,r2
    633c:	01800284 	movi	r6,10
    6340:	39fff404 	addi	r7,r7,-48
    6344:	00061980 	call	6198 <__multadd>
    6348:	853ff81e 	bne	r16,r20,632c <__alt_data_end+0xfe00632c>
    634c:	aca1883a 	add	r16,r21,r18
    6350:	843ffe04 	addi	r16,r16,-8
    6354:	94c00a0e 	bge	r18,r19,6380 <__s2b+0xd4>
    6358:	84e7883a 	add	r19,r16,r19
    635c:	9ca5c83a 	sub	r18,r19,r18
    6360:	81c00007 	ldb	r7,0(r16)
    6364:	8809883a 	mov	r4,r17
    6368:	84000044 	addi	r16,r16,1
    636c:	100b883a 	mov	r5,r2
    6370:	01800284 	movi	r6,10
    6374:	39fff404 	addi	r7,r7,-48
    6378:	00061980 	call	6198 <__multadd>
    637c:	84bff81e 	bne	r16,r18,6360 <__alt_data_end+0xfe006360>
    6380:	dfc00617 	ldw	ra,24(sp)
    6384:	dd400517 	ldw	r21,20(sp)
    6388:	dd000417 	ldw	r20,16(sp)
    638c:	dcc00317 	ldw	r19,12(sp)
    6390:	dc800217 	ldw	r18,8(sp)
    6394:	dc400117 	ldw	r17,4(sp)
    6398:	dc000017 	ldw	r16,0(sp)
    639c:	dec00704 	addi	sp,sp,28
    63a0:	f800283a 	ret
    63a4:	a4000284 	addi	r16,r20,10
    63a8:	1825883a 	mov	r18,r3
    63ac:	003fe906 	br	6354 <__alt_data_end+0xfe006354>

000063b0 <__hi0bits>:
    63b0:	20bfffec 	andhi	r2,r4,65535
    63b4:	1000141e 	bne	r2,zero,6408 <__hi0bits+0x58>
    63b8:	2008943a 	slli	r4,r4,16
    63bc:	00800404 	movi	r2,16
    63c0:	20ffc02c 	andhi	r3,r4,65280
    63c4:	1800021e 	bne	r3,zero,63d0 <__hi0bits+0x20>
    63c8:	2008923a 	slli	r4,r4,8
    63cc:	10800204 	addi	r2,r2,8
    63d0:	20fc002c 	andhi	r3,r4,61440
    63d4:	1800021e 	bne	r3,zero,63e0 <__hi0bits+0x30>
    63d8:	2008913a 	slli	r4,r4,4
    63dc:	10800104 	addi	r2,r2,4
    63e0:	20f0002c 	andhi	r3,r4,49152
    63e4:	1800031e 	bne	r3,zero,63f4 <__hi0bits+0x44>
    63e8:	2109883a 	add	r4,r4,r4
    63ec:	10800084 	addi	r2,r2,2
    63f0:	2109883a 	add	r4,r4,r4
    63f4:	20000316 	blt	r4,zero,6404 <__hi0bits+0x54>
    63f8:	2110002c 	andhi	r4,r4,16384
    63fc:	2000041e 	bne	r4,zero,6410 <__hi0bits+0x60>
    6400:	00800804 	movi	r2,32
    6404:	f800283a 	ret
    6408:	0005883a 	mov	r2,zero
    640c:	003fec06 	br	63c0 <__alt_data_end+0xfe0063c0>
    6410:	10800044 	addi	r2,r2,1
    6414:	f800283a 	ret

00006418 <__lo0bits>:
    6418:	20c00017 	ldw	r3,0(r4)
    641c:	188001cc 	andi	r2,r3,7
    6420:	10000826 	beq	r2,zero,6444 <__lo0bits+0x2c>
    6424:	1880004c 	andi	r2,r3,1
    6428:	1000211e 	bne	r2,zero,64b0 <__lo0bits+0x98>
    642c:	1880008c 	andi	r2,r3,2
    6430:	1000211e 	bne	r2,zero,64b8 <__lo0bits+0xa0>
    6434:	1806d0ba 	srli	r3,r3,2
    6438:	00800084 	movi	r2,2
    643c:	20c00015 	stw	r3,0(r4)
    6440:	f800283a 	ret
    6444:	18bfffcc 	andi	r2,r3,65535
    6448:	10001326 	beq	r2,zero,6498 <__lo0bits+0x80>
    644c:	0005883a 	mov	r2,zero
    6450:	19403fcc 	andi	r5,r3,255
    6454:	2800021e 	bne	r5,zero,6460 <__lo0bits+0x48>
    6458:	1806d23a 	srli	r3,r3,8
    645c:	10800204 	addi	r2,r2,8
    6460:	194003cc 	andi	r5,r3,15
    6464:	2800021e 	bne	r5,zero,6470 <__lo0bits+0x58>
    6468:	1806d13a 	srli	r3,r3,4
    646c:	10800104 	addi	r2,r2,4
    6470:	194000cc 	andi	r5,r3,3
    6474:	2800021e 	bne	r5,zero,6480 <__lo0bits+0x68>
    6478:	1806d0ba 	srli	r3,r3,2
    647c:	10800084 	addi	r2,r2,2
    6480:	1940004c 	andi	r5,r3,1
    6484:	2800081e 	bne	r5,zero,64a8 <__lo0bits+0x90>
    6488:	1806d07a 	srli	r3,r3,1
    648c:	1800051e 	bne	r3,zero,64a4 <__lo0bits+0x8c>
    6490:	00800804 	movi	r2,32
    6494:	f800283a 	ret
    6498:	1806d43a 	srli	r3,r3,16
    649c:	00800404 	movi	r2,16
    64a0:	003feb06 	br	6450 <__alt_data_end+0xfe006450>
    64a4:	10800044 	addi	r2,r2,1
    64a8:	20c00015 	stw	r3,0(r4)
    64ac:	f800283a 	ret
    64b0:	0005883a 	mov	r2,zero
    64b4:	f800283a 	ret
    64b8:	1806d07a 	srli	r3,r3,1
    64bc:	00800044 	movi	r2,1
    64c0:	20c00015 	stw	r3,0(r4)
    64c4:	f800283a 	ret

000064c8 <__i2b>:
    64c8:	defffd04 	addi	sp,sp,-12
    64cc:	dc000015 	stw	r16,0(sp)
    64d0:	04000044 	movi	r16,1
    64d4:	dc400115 	stw	r17,4(sp)
    64d8:	2823883a 	mov	r17,r5
    64dc:	800b883a 	mov	r5,r16
    64e0:	dfc00215 	stw	ra,8(sp)
    64e4:	00060c80 	call	60c8 <_Balloc>
    64e8:	14400515 	stw	r17,20(r2)
    64ec:	14000415 	stw	r16,16(r2)
    64f0:	dfc00217 	ldw	ra,8(sp)
    64f4:	dc400117 	ldw	r17,4(sp)
    64f8:	dc000017 	ldw	r16,0(sp)
    64fc:	dec00304 	addi	sp,sp,12
    6500:	f800283a 	ret

00006504 <__multiply>:
    6504:	defffa04 	addi	sp,sp,-24
    6508:	dcc00315 	stw	r19,12(sp)
    650c:	dc800215 	stw	r18,8(sp)
    6510:	34c00417 	ldw	r19,16(r6)
    6514:	2c800417 	ldw	r18,16(r5)
    6518:	dd000415 	stw	r20,16(sp)
    651c:	dc400115 	stw	r17,4(sp)
    6520:	dfc00515 	stw	ra,20(sp)
    6524:	dc000015 	stw	r16,0(sp)
    6528:	2823883a 	mov	r17,r5
    652c:	3029883a 	mov	r20,r6
    6530:	94c0050e 	bge	r18,r19,6548 <__multiply+0x44>
    6534:	9007883a 	mov	r3,r18
    6538:	3023883a 	mov	r17,r6
    653c:	9825883a 	mov	r18,r19
    6540:	2829883a 	mov	r20,r5
    6544:	1827883a 	mov	r19,r3
    6548:	88800217 	ldw	r2,8(r17)
    654c:	94e1883a 	add	r16,r18,r19
    6550:	89400117 	ldw	r5,4(r17)
    6554:	1400010e 	bge	r2,r16,655c <__multiply+0x58>
    6558:	29400044 	addi	r5,r5,1
    655c:	00060c80 	call	60c8 <_Balloc>
    6560:	841b883a 	add	r13,r16,r16
    6564:	13000504 	addi	r12,r2,20
    6568:	6b5b883a 	add	r13,r13,r13
    656c:	635b883a 	add	r13,r12,r13
    6570:	6007883a 	mov	r3,r12
    6574:	6340032e 	bgeu	r12,r13,6584 <__multiply+0x80>
    6578:	18000015 	stw	zero,0(r3)
    657c:	18c00104 	addi	r3,r3,4
    6580:	1b7ffd36 	bltu	r3,r13,6578 <__alt_data_end+0xfe006578>
    6584:	9ce7883a 	add	r19,r19,r19
    6588:	94a5883a 	add	r18,r18,r18
    658c:	a2c00504 	addi	r11,r20,20
    6590:	9ce7883a 	add	r19,r19,r19
    6594:	8bc00504 	addi	r15,r17,20
    6598:	94a5883a 	add	r18,r18,r18
    659c:	5cdd883a 	add	r14,r11,r19
    65a0:	7c95883a 	add	r10,r15,r18
    65a4:	5b803f2e 	bgeu	r11,r14,66a4 <__multiply+0x1a0>
    65a8:	5a000017 	ldw	r8,0(r11)
    65ac:	427fffcc 	andi	r9,r8,65535
    65b0:	48001b26 	beq	r9,zero,6620 <__multiply+0x11c>
    65b4:	6007883a 	mov	r3,r12
    65b8:	7809883a 	mov	r4,r15
    65bc:	000b883a 	mov	r5,zero
    65c0:	22000017 	ldw	r8,0(r4)
    65c4:	19c00017 	ldw	r7,0(r3)
    65c8:	21000104 	addi	r4,r4,4
    65cc:	41bfffcc 	andi	r6,r8,65535
    65d0:	324d383a 	mul	r6,r6,r9
    65d4:	4010d43a 	srli	r8,r8,16
    65d8:	3fffffcc 	andi	ra,r7,65535
    65dc:	f98d883a 	add	r6,ra,r6
    65e0:	314d883a 	add	r6,r6,r5
    65e4:	380ed43a 	srli	r7,r7,16
    65e8:	4251383a 	mul	r8,r8,r9
    65ec:	303ed43a 	srli	ra,r6,16
    65f0:	31bfffcc 	andi	r6,r6,65535
    65f4:	3a0b883a 	add	r5,r7,r8
    65f8:	2fcb883a 	add	r5,r5,ra
    65fc:	280e943a 	slli	r7,r5,16
    6600:	1811883a 	mov	r8,r3
    6604:	280ad43a 	srli	r5,r5,16
    6608:	398cb03a 	or	r6,r7,r6
    660c:	19800015 	stw	r6,0(r3)
    6610:	18c00104 	addi	r3,r3,4
    6614:	22bfea36 	bltu	r4,r10,65c0 <__alt_data_end+0xfe0065c0>
    6618:	41400115 	stw	r5,4(r8)
    661c:	5a000017 	ldw	r8,0(r11)
    6620:	4010d43a 	srli	r8,r8,16
    6624:	40001c26 	beq	r8,zero,6698 <__multiply+0x194>
    6628:	61400017 	ldw	r5,0(r12)
    662c:	7809883a 	mov	r4,r15
    6630:	6007883a 	mov	r3,r12
    6634:	280d883a 	mov	r6,r5
    6638:	0013883a 	mov	r9,zero
    663c:	21c0000b 	ldhu	r7,0(r4)
    6640:	303ed43a 	srli	ra,r6,16
    6644:	297fffcc 	andi	r5,r5,65535
    6648:	3a0f383a 	mul	r7,r7,r8
    664c:	21000104 	addi	r4,r4,4
    6650:	19800117 	ldw	r6,4(r3)
    6654:	3fcf883a 	add	r7,r7,ra
    6658:	3a4f883a 	add	r7,r7,r9
    665c:	383e943a 	slli	ra,r7,16
    6660:	380ed43a 	srli	r7,r7,16
    6664:	327fffcc 	andi	r9,r6,65535
    6668:	f94ab03a 	or	r5,ra,r5
    666c:	19400015 	stw	r5,0(r3)
    6670:	217fff17 	ldw	r5,-4(r4)
    6674:	183f883a 	mov	ra,r3
    6678:	18c00104 	addi	r3,r3,4
    667c:	280ad43a 	srli	r5,r5,16
    6680:	2a0b383a 	mul	r5,r5,r8
    6684:	2a4b883a 	add	r5,r5,r9
    6688:	29cb883a 	add	r5,r5,r7
    668c:	2812d43a 	srli	r9,r5,16
    6690:	22bfea36 	bltu	r4,r10,663c <__alt_data_end+0xfe00663c>
    6694:	f9400115 	stw	r5,4(ra)
    6698:	5ac00104 	addi	r11,r11,4
    669c:	63000104 	addi	r12,r12,4
    66a0:	5bbfc136 	bltu	r11,r14,65a8 <__alt_data_end+0xfe0065a8>
    66a4:	0400090e 	bge	zero,r16,66cc <__multiply+0x1c8>
    66a8:	68ffff17 	ldw	r3,-4(r13)
    66ac:	6b7fff04 	addi	r13,r13,-4
    66b0:	18000326 	beq	r3,zero,66c0 <__multiply+0x1bc>
    66b4:	00000506 	br	66cc <__multiply+0x1c8>
    66b8:	68c00017 	ldw	r3,0(r13)
    66bc:	1800031e 	bne	r3,zero,66cc <__multiply+0x1c8>
    66c0:	843fffc4 	addi	r16,r16,-1
    66c4:	6b7fff04 	addi	r13,r13,-4
    66c8:	803ffb1e 	bne	r16,zero,66b8 <__alt_data_end+0xfe0066b8>
    66cc:	14000415 	stw	r16,16(r2)
    66d0:	dfc00517 	ldw	ra,20(sp)
    66d4:	dd000417 	ldw	r20,16(sp)
    66d8:	dcc00317 	ldw	r19,12(sp)
    66dc:	dc800217 	ldw	r18,8(sp)
    66e0:	dc400117 	ldw	r17,4(sp)
    66e4:	dc000017 	ldw	r16,0(sp)
    66e8:	dec00604 	addi	sp,sp,24
    66ec:	f800283a 	ret

000066f0 <__pow5mult>:
    66f0:	defffa04 	addi	sp,sp,-24
    66f4:	dcc00315 	stw	r19,12(sp)
    66f8:	dc800215 	stw	r18,8(sp)
    66fc:	dc000015 	stw	r16,0(sp)
    6700:	dfc00515 	stw	ra,20(sp)
    6704:	dd000415 	stw	r20,16(sp)
    6708:	dc400115 	stw	r17,4(sp)
    670c:	308000cc 	andi	r2,r6,3
    6710:	3021883a 	mov	r16,r6
    6714:	2027883a 	mov	r19,r4
    6718:	2825883a 	mov	r18,r5
    671c:	1000301e 	bne	r2,zero,67e0 <__pow5mult+0xf0>
    6720:	8021d0ba 	srai	r16,r16,2
    6724:	80001b26 	beq	r16,zero,6794 <__pow5mult+0xa4>
    6728:	9c401217 	ldw	r17,72(r19)
    672c:	88003726 	beq	r17,zero,680c <__pow5mult+0x11c>
    6730:	80c0004c 	andi	r3,r16,1
    6734:	1800071e 	bne	r3,zero,6754 <__pow5mult+0x64>
    6738:	8021d07a 	srai	r16,r16,1
    673c:	80001526 	beq	r16,zero,6794 <__pow5mult+0xa4>
    6740:	88800017 	ldw	r2,0(r17)
    6744:	10001c26 	beq	r2,zero,67b8 <__pow5mult+0xc8>
    6748:	1023883a 	mov	r17,r2
    674c:	80c0004c 	andi	r3,r16,1
    6750:	183ff926 	beq	r3,zero,6738 <__alt_data_end+0xfe006738>
    6754:	900b883a 	mov	r5,r18
    6758:	880d883a 	mov	r6,r17
    675c:	9809883a 	mov	r4,r19
    6760:	00065040 	call	6504 <__multiply>
    6764:	90001c26 	beq	r18,zero,67d8 <__pow5mult+0xe8>
    6768:	91000117 	ldw	r4,4(r18)
    676c:	98c01317 	ldw	r3,76(r19)
    6770:	8021d07a 	srai	r16,r16,1
    6774:	2109883a 	add	r4,r4,r4
    6778:	2109883a 	add	r4,r4,r4
    677c:	1907883a 	add	r3,r3,r4
    6780:	19000017 	ldw	r4,0(r3)
    6784:	91000015 	stw	r4,0(r18)
    6788:	1c800015 	stw	r18,0(r3)
    678c:	1025883a 	mov	r18,r2
    6790:	803feb1e 	bne	r16,zero,6740 <__alt_data_end+0xfe006740>
    6794:	9005883a 	mov	r2,r18
    6798:	dfc00517 	ldw	ra,20(sp)
    679c:	dd000417 	ldw	r20,16(sp)
    67a0:	dcc00317 	ldw	r19,12(sp)
    67a4:	dc800217 	ldw	r18,8(sp)
    67a8:	dc400117 	ldw	r17,4(sp)
    67ac:	dc000017 	ldw	r16,0(sp)
    67b0:	dec00604 	addi	sp,sp,24
    67b4:	f800283a 	ret
    67b8:	880b883a 	mov	r5,r17
    67bc:	880d883a 	mov	r6,r17
    67c0:	9809883a 	mov	r4,r19
    67c4:	00065040 	call	6504 <__multiply>
    67c8:	88800015 	stw	r2,0(r17)
    67cc:	10000015 	stw	zero,0(r2)
    67d0:	1023883a 	mov	r17,r2
    67d4:	003fdd06 	br	674c <__alt_data_end+0xfe00674c>
    67d8:	1025883a 	mov	r18,r2
    67dc:	003fd606 	br	6738 <__alt_data_end+0xfe006738>
    67e0:	10bfffc4 	addi	r2,r2,-1
    67e4:	1085883a 	add	r2,r2,r2
    67e8:	00c00074 	movhi	r3,1
    67ec:	18fc4004 	addi	r3,r3,-3840
    67f0:	1085883a 	add	r2,r2,r2
    67f4:	1885883a 	add	r2,r3,r2
    67f8:	11800017 	ldw	r6,0(r2)
    67fc:	000f883a 	mov	r7,zero
    6800:	00061980 	call	6198 <__multadd>
    6804:	1025883a 	mov	r18,r2
    6808:	003fc506 	br	6720 <__alt_data_end+0xfe006720>
    680c:	05000044 	movi	r20,1
    6810:	9809883a 	mov	r4,r19
    6814:	a00b883a 	mov	r5,r20
    6818:	00060c80 	call	60c8 <_Balloc>
    681c:	1023883a 	mov	r17,r2
    6820:	00809c44 	movi	r2,625
    6824:	88800515 	stw	r2,20(r17)
    6828:	8d000415 	stw	r20,16(r17)
    682c:	9c401215 	stw	r17,72(r19)
    6830:	88000015 	stw	zero,0(r17)
    6834:	003fbe06 	br	6730 <__alt_data_end+0xfe006730>

00006838 <__lshift>:
    6838:	defff904 	addi	sp,sp,-28
    683c:	dd000415 	stw	r20,16(sp)
    6840:	dc400115 	stw	r17,4(sp)
    6844:	2d000417 	ldw	r20,16(r5)
    6848:	3023d17a 	srai	r17,r6,5
    684c:	28800217 	ldw	r2,8(r5)
    6850:	dd400515 	stw	r21,20(sp)
    6854:	8d29883a 	add	r20,r17,r20
    6858:	dcc00315 	stw	r19,12(sp)
    685c:	dc800215 	stw	r18,8(sp)
    6860:	dc000015 	stw	r16,0(sp)
    6864:	dfc00615 	stw	ra,24(sp)
    6868:	a4000044 	addi	r16,r20,1
    686c:	2825883a 	mov	r18,r5
    6870:	302b883a 	mov	r21,r6
    6874:	2027883a 	mov	r19,r4
    6878:	29400117 	ldw	r5,4(r5)
    687c:	1400030e 	bge	r2,r16,688c <__lshift+0x54>
    6880:	1085883a 	add	r2,r2,r2
    6884:	29400044 	addi	r5,r5,1
    6888:	143ffd16 	blt	r2,r16,6880 <__alt_data_end+0xfe006880>
    688c:	9809883a 	mov	r4,r19
    6890:	00060c80 	call	60c8 <_Balloc>
    6894:	11000504 	addi	r4,r2,20
    6898:	0440090e 	bge	zero,r17,68c0 <__lshift+0x88>
    689c:	200f883a 	mov	r7,r4
    68a0:	0007883a 	mov	r3,zero
    68a4:	38000015 	stw	zero,0(r7)
    68a8:	18c00044 	addi	r3,r3,1
    68ac:	39c00104 	addi	r7,r7,4
    68b0:	1c7ffc1e 	bne	r3,r17,68a4 <__alt_data_end+0xfe0068a4>
    68b4:	18c7883a 	add	r3,r3,r3
    68b8:	18c7883a 	add	r3,r3,r3
    68bc:	20c9883a 	add	r4,r4,r3
    68c0:	92400417 	ldw	r9,16(r18)
    68c4:	90c00504 	addi	r3,r18,20
    68c8:	a98007cc 	andi	r6,r21,31
    68cc:	4a53883a 	add	r9,r9,r9
    68d0:	4a53883a 	add	r9,r9,r9
    68d4:	1a53883a 	add	r9,r3,r9
    68d8:	30002426 	beq	r6,zero,696c <__lshift+0x134>
    68dc:	01400804 	movi	r5,32
    68e0:	298bc83a 	sub	r5,r5,r6
    68e4:	200f883a 	mov	r7,r4
    68e8:	0011883a 	mov	r8,zero
    68ec:	1a800017 	ldw	r10,0(r3)
    68f0:	3809883a 	mov	r4,r7
    68f4:	39c00104 	addi	r7,r7,4
    68f8:	5194983a 	sll	r10,r10,r6
    68fc:	18c00104 	addi	r3,r3,4
    6900:	4290b03a 	or	r8,r8,r10
    6904:	3a3fff15 	stw	r8,-4(r7)
    6908:	1a3fff17 	ldw	r8,-4(r3)
    690c:	4150d83a 	srl	r8,r8,r5
    6910:	1a7ff636 	bltu	r3,r9,68ec <__alt_data_end+0xfe0068ec>
    6914:	22000115 	stw	r8,4(r4)
    6918:	40000126 	beq	r8,zero,6920 <__lshift+0xe8>
    691c:	a4000084 	addi	r16,r20,2
    6920:	91000117 	ldw	r4,4(r18)
    6924:	98c01317 	ldw	r3,76(r19)
    6928:	843fffc4 	addi	r16,r16,-1
    692c:	2109883a 	add	r4,r4,r4
    6930:	2109883a 	add	r4,r4,r4
    6934:	1907883a 	add	r3,r3,r4
    6938:	19000017 	ldw	r4,0(r3)
    693c:	14000415 	stw	r16,16(r2)
    6940:	91000015 	stw	r4,0(r18)
    6944:	1c800015 	stw	r18,0(r3)
    6948:	dfc00617 	ldw	ra,24(sp)
    694c:	dd400517 	ldw	r21,20(sp)
    6950:	dd000417 	ldw	r20,16(sp)
    6954:	dcc00317 	ldw	r19,12(sp)
    6958:	dc800217 	ldw	r18,8(sp)
    695c:	dc400117 	ldw	r17,4(sp)
    6960:	dc000017 	ldw	r16,0(sp)
    6964:	dec00704 	addi	sp,sp,28
    6968:	f800283a 	ret
    696c:	200f883a 	mov	r7,r4
    6970:	19800017 	ldw	r6,0(r3)
    6974:	39c00104 	addi	r7,r7,4
    6978:	18c00104 	addi	r3,r3,4
    697c:	39bfff15 	stw	r6,-4(r7)
    6980:	1a7ffb36 	bltu	r3,r9,6970 <__alt_data_end+0xfe006970>
    6984:	003fe606 	br	6920 <__alt_data_end+0xfe006920>

00006988 <__mcmp>:
    6988:	20800417 	ldw	r2,16(r4)
    698c:	28c00417 	ldw	r3,16(r5)
    6990:	10c5c83a 	sub	r2,r2,r3
    6994:	1000111e 	bne	r2,zero,69dc <__mcmp+0x54>
    6998:	18c7883a 	add	r3,r3,r3
    699c:	18c7883a 	add	r3,r3,r3
    69a0:	21000504 	addi	r4,r4,20
    69a4:	29400504 	addi	r5,r5,20
    69a8:	20c5883a 	add	r2,r4,r3
    69ac:	28cb883a 	add	r5,r5,r3
    69b0:	00000106 	br	69b8 <__mcmp+0x30>
    69b4:	2080082e 	bgeu	r4,r2,69d8 <__mcmp+0x50>
    69b8:	10bfff04 	addi	r2,r2,-4
    69bc:	297fff04 	addi	r5,r5,-4
    69c0:	11800017 	ldw	r6,0(r2)
    69c4:	28c00017 	ldw	r3,0(r5)
    69c8:	30fffa26 	beq	r6,r3,69b4 <__alt_data_end+0xfe0069b4>
    69cc:	30c00436 	bltu	r6,r3,69e0 <__mcmp+0x58>
    69d0:	00800044 	movi	r2,1
    69d4:	f800283a 	ret
    69d8:	0005883a 	mov	r2,zero
    69dc:	f800283a 	ret
    69e0:	00bfffc4 	movi	r2,-1
    69e4:	f800283a 	ret

000069e8 <__mdiff>:
    69e8:	defffc04 	addi	sp,sp,-16
    69ec:	dc000015 	stw	r16,0(sp)
    69f0:	2821883a 	mov	r16,r5
    69f4:	200f883a 	mov	r7,r4
    69f8:	300b883a 	mov	r5,r6
    69fc:	8009883a 	mov	r4,r16
    6a00:	dc400115 	stw	r17,4(sp)
    6a04:	dfc00315 	stw	ra,12(sp)
    6a08:	dc800215 	stw	r18,8(sp)
    6a0c:	3023883a 	mov	r17,r6
    6a10:	00069880 	call	6988 <__mcmp>
    6a14:	10005226 	beq	r2,zero,6b60 <__mdiff+0x178>
    6a18:	10004c16 	blt	r2,zero,6b4c <__mdiff+0x164>
    6a1c:	0025883a 	mov	r18,zero
    6a20:	81400117 	ldw	r5,4(r16)
    6a24:	3809883a 	mov	r4,r7
    6a28:	00060c80 	call	60c8 <_Balloc>
    6a2c:	82800417 	ldw	r10,16(r16)
    6a30:	8b400417 	ldw	r13,16(r17)
    6a34:	81000504 	addi	r4,r16,20
    6a38:	5299883a 	add	r12,r10,r10
    6a3c:	6b5b883a 	add	r13,r13,r13
    6a40:	6319883a 	add	r12,r12,r12
    6a44:	89800504 	addi	r6,r17,20
    6a48:	6b5b883a 	add	r13,r13,r13
    6a4c:	14800315 	stw	r18,12(r2)
    6a50:	2319883a 	add	r12,r4,r12
    6a54:	335b883a 	add	r13,r6,r13
    6a58:	11400504 	addi	r5,r2,20
    6a5c:	0007883a 	mov	r3,zero
    6a60:	00000106 	br	6a68 <__mdiff+0x80>
    6a64:	400b883a 	mov	r5,r8
    6a68:	22400017 	ldw	r9,0(r4)
    6a6c:	32000017 	ldw	r8,0(r6)
    6a70:	31800104 	addi	r6,r6,4
    6a74:	49ffffcc 	andi	r7,r9,65535
    6a78:	42ffffcc 	andi	r11,r8,65535
    6a7c:	38c7883a 	add	r3,r7,r3
    6a80:	1acfc83a 	sub	r7,r3,r11
    6a84:	4010d43a 	srli	r8,r8,16
    6a88:	4806d43a 	srli	r3,r9,16
    6a8c:	3817d43a 	srai	r11,r7,16
    6a90:	39ffffcc 	andi	r7,r7,65535
    6a94:	1a07c83a 	sub	r3,r3,r8
    6a98:	1ac7883a 	add	r3,r3,r11
    6a9c:	1812943a 	slli	r9,r3,16
    6aa0:	2a000104 	addi	r8,r5,4
    6aa4:	21000104 	addi	r4,r4,4
    6aa8:	49ceb03a 	or	r7,r9,r7
    6aac:	29c00015 	stw	r7,0(r5)
    6ab0:	1807d43a 	srai	r3,r3,16
    6ab4:	337feb36 	bltu	r6,r13,6a64 <__alt_data_end+0xfe006a64>
    6ab8:	2013883a 	mov	r9,r4
    6abc:	2300342e 	bgeu	r4,r12,6b90 <__mdiff+0x1a8>
    6ac0:	400b883a 	mov	r5,r8
    6ac4:	21c00017 	ldw	r7,0(r4)
    6ac8:	29400104 	addi	r5,r5,4
    6acc:	21000104 	addi	r4,r4,4
    6ad0:	39bfffcc 	andi	r6,r7,65535
    6ad4:	30cd883a 	add	r6,r6,r3
    6ad8:	3007d43a 	srai	r3,r6,16
    6adc:	380ed43a 	srli	r7,r7,16
    6ae0:	31bfffcc 	andi	r6,r6,65535
    6ae4:	19c7883a 	add	r3,r3,r7
    6ae8:	180e943a 	slli	r7,r3,16
    6aec:	1807d43a 	srai	r3,r3,16
    6af0:	398cb03a 	or	r6,r7,r6
    6af4:	29bfff15 	stw	r6,-4(r5)
    6af8:	233ff236 	bltu	r4,r12,6ac4 <__alt_data_end+0xfe006ac4>
    6afc:	0248303a 	nor	r4,zero,r9
    6b00:	2309883a 	add	r4,r4,r12
    6b04:	2008d0ba 	srli	r4,r4,2
    6b08:	21000044 	addi	r4,r4,1
    6b0c:	2109883a 	add	r4,r4,r4
    6b10:	2109883a 	add	r4,r4,r4
    6b14:	4111883a 	add	r8,r8,r4
    6b18:	413fff04 	addi	r4,r8,-4
    6b1c:	3000041e 	bne	r6,zero,6b30 <__mdiff+0x148>
    6b20:	213fff04 	addi	r4,r4,-4
    6b24:	20c00017 	ldw	r3,0(r4)
    6b28:	52bfffc4 	addi	r10,r10,-1
    6b2c:	183ffc26 	beq	r3,zero,6b20 <__alt_data_end+0xfe006b20>
    6b30:	12800415 	stw	r10,16(r2)
    6b34:	dfc00317 	ldw	ra,12(sp)
    6b38:	dc800217 	ldw	r18,8(sp)
    6b3c:	dc400117 	ldw	r17,4(sp)
    6b40:	dc000017 	ldw	r16,0(sp)
    6b44:	dec00404 	addi	sp,sp,16
    6b48:	f800283a 	ret
    6b4c:	8005883a 	mov	r2,r16
    6b50:	04800044 	movi	r18,1
    6b54:	8821883a 	mov	r16,r17
    6b58:	1023883a 	mov	r17,r2
    6b5c:	003fb006 	br	6a20 <__alt_data_end+0xfe006a20>
    6b60:	3809883a 	mov	r4,r7
    6b64:	000b883a 	mov	r5,zero
    6b68:	00060c80 	call	60c8 <_Balloc>
    6b6c:	00c00044 	movi	r3,1
    6b70:	10c00415 	stw	r3,16(r2)
    6b74:	10000515 	stw	zero,20(r2)
    6b78:	dfc00317 	ldw	ra,12(sp)
    6b7c:	dc800217 	ldw	r18,8(sp)
    6b80:	dc400117 	ldw	r17,4(sp)
    6b84:	dc000017 	ldw	r16,0(sp)
    6b88:	dec00404 	addi	sp,sp,16
    6b8c:	f800283a 	ret
    6b90:	380d883a 	mov	r6,r7
    6b94:	003fe006 	br	6b18 <__alt_data_end+0xfe006b18>

00006b98 <__ulp>:
    6b98:	295ffc2c 	andhi	r5,r5,32752
    6b9c:	00bf3034 	movhi	r2,64704
    6ba0:	2887883a 	add	r3,r5,r2
    6ba4:	00c0020e 	bge	zero,r3,6bb0 <__ulp+0x18>
    6ba8:	0005883a 	mov	r2,zero
    6bac:	f800283a 	ret
    6bb0:	00c7c83a 	sub	r3,zero,r3
    6bb4:	1805d53a 	srai	r2,r3,20
    6bb8:	00c004c4 	movi	r3,19
    6bbc:	18800a0e 	bge	r3,r2,6be8 <__ulp+0x50>
    6bc0:	01000c84 	movi	r4,50
    6bc4:	0007883a 	mov	r3,zero
    6bc8:	20800516 	blt	r4,r2,6be0 <__ulp+0x48>
    6bcc:	01000cc4 	movi	r4,51
    6bd0:	2085c83a 	sub	r2,r4,r2
    6bd4:	01000044 	movi	r4,1
    6bd8:	2084983a 	sll	r2,r4,r2
    6bdc:	f800283a 	ret
    6be0:	00800044 	movi	r2,1
    6be4:	f800283a 	ret
    6be8:	00c00234 	movhi	r3,8
    6bec:	1887d83a 	sra	r3,r3,r2
    6bf0:	0005883a 	mov	r2,zero
    6bf4:	f800283a 	ret

00006bf8 <__b2d>:
    6bf8:	21800417 	ldw	r6,16(r4)
    6bfc:	22000504 	addi	r8,r4,20
    6c00:	deffff04 	addi	sp,sp,-4
    6c04:	318d883a 	add	r6,r6,r6
    6c08:	318d883a 	add	r6,r6,r6
    6c0c:	418d883a 	add	r6,r8,r6
    6c10:	31ffff17 	ldw	r7,-4(r6)
    6c14:	327fff04 	addi	r9,r6,-4
    6c18:	dfc00015 	stw	ra,0(sp)
    6c1c:	3809883a 	mov	r4,r7
    6c20:	00063b00 	call	63b0 <__hi0bits>
    6c24:	00c00804 	movi	r3,32
    6c28:	1887c83a 	sub	r3,r3,r2
    6c2c:	28c00015 	stw	r3,0(r5)
    6c30:	00c00284 	movi	r3,10
    6c34:	18800d16 	blt	r3,r2,6c6c <__b2d+0x74>
    6c38:	010002c4 	movi	r4,11
    6c3c:	2089c83a 	sub	r4,r4,r2
    6c40:	3906d83a 	srl	r3,r7,r4
    6c44:	18cffc34 	orhi	r3,r3,16368
    6c48:	4240232e 	bgeu	r8,r9,6cd8 <__b2d+0xe0>
    6c4c:	317ffe17 	ldw	r5,-8(r6)
    6c50:	2908d83a 	srl	r4,r5,r4
    6c54:	10800544 	addi	r2,r2,21
    6c58:	388e983a 	sll	r7,r7,r2
    6c5c:	21c4b03a 	or	r2,r4,r7
    6c60:	dfc00017 	ldw	ra,0(sp)
    6c64:	dec00104 	addi	sp,sp,4
    6c68:	f800283a 	ret
    6c6c:	42401136 	bltu	r8,r9,6cb4 <__b2d+0xbc>
    6c70:	113ffd44 	addi	r4,r2,-11
    6c74:	000b883a 	mov	r5,zero
    6c78:	20001226 	beq	r4,zero,6cc4 <__b2d+0xcc>
    6c7c:	00c00ac4 	movi	r3,43
    6c80:	1885c83a 	sub	r2,r3,r2
    6c84:	3906983a 	sll	r3,r7,r4
    6c88:	288cd83a 	srl	r6,r5,r2
    6c8c:	18cffc34 	orhi	r3,r3,16368
    6c90:	1986b03a 	or	r3,r3,r6
    6c94:	4240122e 	bgeu	r8,r9,6ce0 <__b2d+0xe8>
    6c98:	49bfff17 	ldw	r6,-4(r9)
    6c9c:	3084d83a 	srl	r2,r6,r2
    6ca0:	2908983a 	sll	r4,r5,r4
    6ca4:	1104b03a 	or	r2,r2,r4
    6ca8:	dfc00017 	ldw	ra,0(sp)
    6cac:	dec00104 	addi	sp,sp,4
    6cb0:	f800283a 	ret
    6cb4:	113ffd44 	addi	r4,r2,-11
    6cb8:	327ffe04 	addi	r9,r6,-8
    6cbc:	317ffe17 	ldw	r5,-8(r6)
    6cc0:	203fee1e 	bne	r4,zero,6c7c <__alt_data_end+0xfe006c7c>
    6cc4:	38cffc34 	orhi	r3,r7,16368
    6cc8:	2805883a 	mov	r2,r5
    6ccc:	dfc00017 	ldw	ra,0(sp)
    6cd0:	dec00104 	addi	sp,sp,4
    6cd4:	f800283a 	ret
    6cd8:	0009883a 	mov	r4,zero
    6cdc:	003fdd06 	br	6c54 <__alt_data_end+0xfe006c54>
    6ce0:	0005883a 	mov	r2,zero
    6ce4:	003fee06 	br	6ca0 <__alt_data_end+0xfe006ca0>

00006ce8 <__d2b>:
    6ce8:	defffa04 	addi	sp,sp,-24
    6cec:	dc400315 	stw	r17,12(sp)
    6cf0:	2823883a 	mov	r17,r5
    6cf4:	01400044 	movi	r5,1
    6cf8:	dc800415 	stw	r18,16(sp)
    6cfc:	dc000215 	stw	r16,8(sp)
    6d00:	dfc00515 	stw	ra,20(sp)
    6d04:	3021883a 	mov	r16,r6
    6d08:	3825883a 	mov	r18,r7
    6d0c:	00060c80 	call	60c8 <_Balloc>
    6d10:	8012907a 	slli	r9,r16,1
    6d14:	1011883a 	mov	r8,r2
    6d18:	00800434 	movhi	r2,16
    6d1c:	10bfffc4 	addi	r2,r2,-1
    6d20:	4812d57a 	srli	r9,r9,21
    6d24:	80a0703a 	and	r16,r16,r2
    6d28:	48000126 	beq	r9,zero,6d30 <__d2b+0x48>
    6d2c:	84000434 	orhi	r16,r16,16
    6d30:	dc000015 	stw	r16,0(sp)
    6d34:	88001e26 	beq	r17,zero,6db0 <__d2b+0xc8>
    6d38:	d9000104 	addi	r4,sp,4
    6d3c:	dc400115 	stw	r17,4(sp)
    6d40:	00064180 	call	6418 <__lo0bits>
    6d44:	d8c00017 	ldw	r3,0(sp)
    6d48:	10002f1e 	bne	r2,zero,6e08 <__d2b+0x120>
    6d4c:	d9000117 	ldw	r4,4(sp)
    6d50:	41000515 	stw	r4,20(r8)
    6d54:	180b003a 	cmpeq	r5,r3,zero
    6d58:	01000084 	movi	r4,2
    6d5c:	214bc83a 	sub	r5,r4,r5
    6d60:	40c00615 	stw	r3,24(r8)
    6d64:	41400415 	stw	r5,16(r8)
    6d68:	4800191e 	bne	r9,zero,6dd0 <__d2b+0xe8>
    6d6c:	280690ba 	slli	r3,r5,2
    6d70:	10bef384 	addi	r2,r2,-1074
    6d74:	90800015 	stw	r2,0(r18)
    6d78:	40c5883a 	add	r2,r8,r3
    6d7c:	11000417 	ldw	r4,16(r2)
    6d80:	00063b00 	call	63b0 <__hi0bits>
    6d84:	280a917a 	slli	r5,r5,5
    6d88:	d8c00617 	ldw	r3,24(sp)
    6d8c:	2885c83a 	sub	r2,r5,r2
    6d90:	18800015 	stw	r2,0(r3)
    6d94:	4005883a 	mov	r2,r8
    6d98:	dfc00517 	ldw	ra,20(sp)
    6d9c:	dc800417 	ldw	r18,16(sp)
    6da0:	dc400317 	ldw	r17,12(sp)
    6da4:	dc000217 	ldw	r16,8(sp)
    6da8:	dec00604 	addi	sp,sp,24
    6dac:	f800283a 	ret
    6db0:	d809883a 	mov	r4,sp
    6db4:	00064180 	call	6418 <__lo0bits>
    6db8:	d8c00017 	ldw	r3,0(sp)
    6dbc:	01400044 	movi	r5,1
    6dc0:	41400415 	stw	r5,16(r8)
    6dc4:	40c00515 	stw	r3,20(r8)
    6dc8:	10800804 	addi	r2,r2,32
    6dcc:	483fe726 	beq	r9,zero,6d6c <__alt_data_end+0xfe006d6c>
    6dd0:	00c00d44 	movi	r3,53
    6dd4:	4a7ef344 	addi	r9,r9,-1075
    6dd8:	4893883a 	add	r9,r9,r2
    6ddc:	1885c83a 	sub	r2,r3,r2
    6de0:	d8c00617 	ldw	r3,24(sp)
    6de4:	92400015 	stw	r9,0(r18)
    6de8:	18800015 	stw	r2,0(r3)
    6dec:	4005883a 	mov	r2,r8
    6df0:	dfc00517 	ldw	ra,20(sp)
    6df4:	dc800417 	ldw	r18,16(sp)
    6df8:	dc400317 	ldw	r17,12(sp)
    6dfc:	dc000217 	ldw	r16,8(sp)
    6e00:	dec00604 	addi	sp,sp,24
    6e04:	f800283a 	ret
    6e08:	01000804 	movi	r4,32
    6e0c:	2089c83a 	sub	r4,r4,r2
    6e10:	1908983a 	sll	r4,r3,r4
    6e14:	d9400117 	ldw	r5,4(sp)
    6e18:	1886d83a 	srl	r3,r3,r2
    6e1c:	2148b03a 	or	r4,r4,r5
    6e20:	41000515 	stw	r4,20(r8)
    6e24:	d8c00015 	stw	r3,0(sp)
    6e28:	003fca06 	br	6d54 <__alt_data_end+0xfe006d54>

00006e2c <__ratio>:
    6e2c:	defffd04 	addi	sp,sp,-12
    6e30:	2817883a 	mov	r11,r5
    6e34:	201b883a 	mov	r13,r4
    6e38:	d9400104 	addi	r5,sp,4
    6e3c:	dfc00215 	stw	ra,8(sp)
    6e40:	0006bf80 	call	6bf8 <__b2d>
    6e44:	5809883a 	mov	r4,r11
    6e48:	d80b883a 	mov	r5,sp
    6e4c:	1019883a 	mov	r12,r2
    6e50:	1815883a 	mov	r10,r3
    6e54:	0006bf80 	call	6bf8 <__b2d>
    6e58:	69400417 	ldw	r5,16(r13)
    6e5c:	59000417 	ldw	r4,16(r11)
    6e60:	d9800117 	ldw	r6,4(sp)
    6e64:	2909c83a 	sub	r4,r5,r4
    6e68:	d9400017 	ldw	r5,0(sp)
    6e6c:	2008917a 	slli	r4,r4,5
    6e70:	314bc83a 	sub	r5,r6,r5
    6e74:	290b883a 	add	r5,r5,r4
    6e78:	01400a0e 	bge	zero,r5,6ea4 <__ratio+0x78>
    6e7c:	280a953a 	slli	r5,r5,20
    6e80:	6009883a 	mov	r4,r12
    6e84:	100d883a 	mov	r6,r2
    6e88:	2a95883a 	add	r10,r5,r10
    6e8c:	500b883a 	mov	r5,r10
    6e90:	180f883a 	mov	r7,r3
    6e94:	000aaf00 	call	aaf0 <__divdf3>
    6e98:	dfc00217 	ldw	ra,8(sp)
    6e9c:	dec00304 	addi	sp,sp,12
    6ea0:	f800283a 	ret
    6ea4:	280a953a 	slli	r5,r5,20
    6ea8:	6009883a 	mov	r4,r12
    6eac:	100d883a 	mov	r6,r2
    6eb0:	1947c83a 	sub	r3,r3,r5
    6eb4:	180f883a 	mov	r7,r3
    6eb8:	500b883a 	mov	r5,r10
    6ebc:	000aaf00 	call	aaf0 <__divdf3>
    6ec0:	dfc00217 	ldw	ra,8(sp)
    6ec4:	dec00304 	addi	sp,sp,12
    6ec8:	f800283a 	ret

00006ecc <_mprec_log10>:
    6ecc:	defffe04 	addi	sp,sp,-8
    6ed0:	dc000015 	stw	r16,0(sp)
    6ed4:	dfc00115 	stw	ra,4(sp)
    6ed8:	008005c4 	movi	r2,23
    6edc:	2021883a 	mov	r16,r4
    6ee0:	11000d0e 	bge	r2,r4,6f18 <_mprec_log10+0x4c>
    6ee4:	0005883a 	mov	r2,zero
    6ee8:	00cffc34 	movhi	r3,16368
    6eec:	843fffc4 	addi	r16,r16,-1
    6ef0:	1009883a 	mov	r4,r2
    6ef4:	180b883a 	mov	r5,r3
    6ef8:	000d883a 	mov	r6,zero
    6efc:	01d00934 	movhi	r7,16420
    6f00:	000b60c0 	call	b60c <__muldf3>
    6f04:	803ff91e 	bne	r16,zero,6eec <__alt_data_end+0xfe006eec>
    6f08:	dfc00117 	ldw	ra,4(sp)
    6f0c:	dc000017 	ldw	r16,0(sp)
    6f10:	dec00204 	addi	sp,sp,8
    6f14:	f800283a 	ret
    6f18:	202090fa 	slli	r16,r4,3
    6f1c:	00800074 	movhi	r2,1
    6f20:	10bc5704 	addi	r2,r2,-3748
    6f24:	1421883a 	add	r16,r2,r16
    6f28:	80800017 	ldw	r2,0(r16)
    6f2c:	80c00117 	ldw	r3,4(r16)
    6f30:	dfc00117 	ldw	ra,4(sp)
    6f34:	dc000017 	ldw	r16,0(sp)
    6f38:	dec00204 	addi	sp,sp,8
    6f3c:	f800283a 	ret

00006f40 <__copybits>:
    6f40:	297fffc4 	addi	r5,r5,-1
    6f44:	2811d17a 	srai	r8,r5,5
    6f48:	31c00417 	ldw	r7,16(r6)
    6f4c:	30800504 	addi	r2,r6,20
    6f50:	42000044 	addi	r8,r8,1
    6f54:	39cf883a 	add	r7,r7,r7
    6f58:	4211883a 	add	r8,r8,r8
    6f5c:	39cf883a 	add	r7,r7,r7
    6f60:	4211883a 	add	r8,r8,r8
    6f64:	11cf883a 	add	r7,r2,r7
    6f68:	2211883a 	add	r8,r4,r8
    6f6c:	11c00d2e 	bgeu	r2,r7,6fa4 <__copybits+0x64>
    6f70:	2007883a 	mov	r3,r4
    6f74:	11400017 	ldw	r5,0(r2)
    6f78:	18c00104 	addi	r3,r3,4
    6f7c:	10800104 	addi	r2,r2,4
    6f80:	197fff15 	stw	r5,-4(r3)
    6f84:	11fffb36 	bltu	r2,r7,6f74 <__alt_data_end+0xfe006f74>
    6f88:	3985c83a 	sub	r2,r7,r6
    6f8c:	10bffac4 	addi	r2,r2,-21
    6f90:	1004d0ba 	srli	r2,r2,2
    6f94:	10800044 	addi	r2,r2,1
    6f98:	1085883a 	add	r2,r2,r2
    6f9c:	1085883a 	add	r2,r2,r2
    6fa0:	2089883a 	add	r4,r4,r2
    6fa4:	2200032e 	bgeu	r4,r8,6fb4 <__copybits+0x74>
    6fa8:	20000015 	stw	zero,0(r4)
    6fac:	21000104 	addi	r4,r4,4
    6fb0:	223ffd36 	bltu	r4,r8,6fa8 <__alt_data_end+0xfe006fa8>
    6fb4:	f800283a 	ret

00006fb8 <__any_on>:
    6fb8:	20800417 	ldw	r2,16(r4)
    6fbc:	2807d17a 	srai	r3,r5,5
    6fc0:	21000504 	addi	r4,r4,20
    6fc4:	10c00d0e 	bge	r2,r3,6ffc <__any_on+0x44>
    6fc8:	1085883a 	add	r2,r2,r2
    6fcc:	1085883a 	add	r2,r2,r2
    6fd0:	2085883a 	add	r2,r4,r2
    6fd4:	2080182e 	bgeu	r4,r2,7038 <__any_on+0x80>
    6fd8:	10ffff17 	ldw	r3,-4(r2)
    6fdc:	10bfff04 	addi	r2,r2,-4
    6fe0:	1800041e 	bne	r3,zero,6ff4 <__any_on+0x3c>
    6fe4:	2080142e 	bgeu	r4,r2,7038 <__any_on+0x80>
    6fe8:	10bfff04 	addi	r2,r2,-4
    6fec:	10c00017 	ldw	r3,0(r2)
    6ff0:	183ffc26 	beq	r3,zero,6fe4 <__alt_data_end+0xfe006fe4>
    6ff4:	00800044 	movi	r2,1
    6ff8:	f800283a 	ret
    6ffc:	18800a0e 	bge	r3,r2,7028 <__any_on+0x70>
    7000:	18c7883a 	add	r3,r3,r3
    7004:	18c7883a 	add	r3,r3,r3
    7008:	294007cc 	andi	r5,r5,31
    700c:	20c5883a 	add	r2,r4,r3
    7010:	283ff026 	beq	r5,zero,6fd4 <__alt_data_end+0xfe006fd4>
    7014:	10c00017 	ldw	r3,0(r2)
    7018:	194cd83a 	srl	r6,r3,r5
    701c:	314a983a 	sll	r5,r6,r5
    7020:	28fff41e 	bne	r5,r3,6ff4 <__alt_data_end+0xfe006ff4>
    7024:	003feb06 	br	6fd4 <__alt_data_end+0xfe006fd4>
    7028:	18c7883a 	add	r3,r3,r3
    702c:	18c7883a 	add	r3,r3,r3
    7030:	20c5883a 	add	r2,r4,r3
    7034:	003fe706 	br	6fd4 <__alt_data_end+0xfe006fd4>
    7038:	0005883a 	mov	r2,zero
    703c:	f800283a 	ret

00007040 <_realloc_r>:
    7040:	defff604 	addi	sp,sp,-40
    7044:	dd000415 	stw	r20,16(sp)
    7048:	dc000015 	stw	r16,0(sp)
    704c:	dfc00915 	stw	ra,36(sp)
    7050:	df000815 	stw	fp,32(sp)
    7054:	ddc00715 	stw	r23,28(sp)
    7058:	dd800615 	stw	r22,24(sp)
    705c:	dd400515 	stw	r21,20(sp)
    7060:	dcc00315 	stw	r19,12(sp)
    7064:	dc800215 	stw	r18,8(sp)
    7068:	dc400115 	stw	r17,4(sp)
    706c:	2821883a 	mov	r16,r5
    7070:	3029883a 	mov	r20,r6
    7074:	28009a26 	beq	r5,zero,72e0 <_realloc_r+0x2a0>
    7078:	202b883a 	mov	r21,r4
    707c:	000d0900 	call	d090 <__malloc_lock>
    7080:	80ffff17 	ldw	r3,-4(r16)
    7084:	047fff04 	movi	r17,-4
    7088:	a08002c4 	addi	r2,r20,11
    708c:	01000584 	movi	r4,22
    7090:	84fffe04 	addi	r19,r16,-8
    7094:	1c62703a 	and	r17,r3,r17
    7098:	2080372e 	bgeu	r4,r2,7178 <_realloc_r+0x138>
    709c:	04bffe04 	movi	r18,-8
    70a0:	14a4703a 	and	r18,r2,r18
    70a4:	9005883a 	mov	r2,r18
    70a8:	90005b16 	blt	r18,zero,7218 <_realloc_r+0x1d8>
    70ac:	95005a36 	bltu	r18,r20,7218 <_realloc_r+0x1d8>
    70b0:	8880340e 	bge	r17,r2,7184 <_realloc_r+0x144>
    70b4:	05c00074 	movhi	r23,1
    70b8:	bdfe0504 	addi	r23,r23,-2028
    70bc:	b9000217 	ldw	r4,8(r23)
    70c0:	9c4b883a 	add	r5,r19,r17
    70c4:	21409626 	beq	r4,r5,7320 <_realloc_r+0x2e0>
    70c8:	29800117 	ldw	r6,4(r5)
    70cc:	01ffff84 	movi	r7,-2
    70d0:	31ce703a 	and	r7,r6,r7
    70d4:	29cf883a 	add	r7,r5,r7
    70d8:	39c00117 	ldw	r7,4(r7)
    70dc:	39c0004c 	andi	r7,r7,1
    70e0:	38004226 	beq	r7,zero,71ec <_realloc_r+0x1ac>
    70e4:	000d883a 	mov	r6,zero
    70e8:	000b883a 	mov	r5,zero
    70ec:	18c0004c 	andi	r3,r3,1
    70f0:	18005c1e 	bne	r3,zero,7264 <_realloc_r+0x224>
    70f4:	85bffe17 	ldw	r22,-8(r16)
    70f8:	00ffff04 	movi	r3,-4
    70fc:	9dadc83a 	sub	r22,r19,r22
    7100:	b1c00117 	ldw	r7,4(r22)
    7104:	38c6703a 	and	r3,r7,r3
    7108:	28005426 	beq	r5,zero,725c <_realloc_r+0x21c>
    710c:	1c47883a 	add	r3,r3,r17
    7110:	2900bf26 	beq	r5,r4,7410 <_realloc_r+0x3d0>
    7114:	30ef883a 	add	r23,r6,r3
    7118:	b8807e16 	blt	r23,r2,7314 <_realloc_r+0x2d4>
    711c:	28800317 	ldw	r2,12(r5)
    7120:	28c00217 	ldw	r3,8(r5)
    7124:	89bfff04 	addi	r6,r17,-4
    7128:	01000904 	movi	r4,36
    712c:	18800315 	stw	r2,12(r3)
    7130:	10c00215 	stw	r3,8(r2)
    7134:	b1400217 	ldw	r5,8(r22)
    7138:	b0c00317 	ldw	r3,12(r22)
    713c:	b5000204 	addi	r20,r22,8
    7140:	28c00315 	stw	r3,12(r5)
    7144:	19400215 	stw	r5,8(r3)
    7148:	21808536 	bltu	r4,r6,7360 <_realloc_r+0x320>
    714c:	008004c4 	movi	r2,19
    7150:	1180932e 	bgeu	r2,r6,73a0 <_realloc_r+0x360>
    7154:	80800017 	ldw	r2,0(r16)
    7158:	b0800215 	stw	r2,8(r22)
    715c:	80800117 	ldw	r2,4(r16)
    7160:	b0800315 	stw	r2,12(r22)
    7164:	008006c4 	movi	r2,27
    7168:	1180df36 	bltu	r2,r6,74e8 <_realloc_r+0x4a8>
    716c:	b0c00404 	addi	r3,r22,16
    7170:	84000204 	addi	r16,r16,8
    7174:	00008b06 	br	73a4 <_realloc_r+0x364>
    7178:	00800404 	movi	r2,16
    717c:	1025883a 	mov	r18,r2
    7180:	003fca06 	br	70ac <__alt_data_end+0xfe0070ac>
    7184:	8029883a 	mov	r20,r16
    7188:	8c8dc83a 	sub	r6,r17,r18
    718c:	008003c4 	movi	r2,15
    7190:	18c0004c 	andi	r3,r3,1
    7194:	11802436 	bltu	r2,r6,7228 <_realloc_r+0x1e8>
    7198:	1c46b03a 	or	r3,r3,r17
    719c:	98c00115 	stw	r3,4(r19)
    71a0:	9c63883a 	add	r17,r19,r17
    71a4:	88800117 	ldw	r2,4(r17)
    71a8:	10800054 	ori	r2,r2,1
    71ac:	88800115 	stw	r2,4(r17)
    71b0:	a809883a 	mov	r4,r21
    71b4:	000d0b00 	call	d0b0 <__malloc_unlock>
    71b8:	a005883a 	mov	r2,r20
    71bc:	dfc00917 	ldw	ra,36(sp)
    71c0:	df000817 	ldw	fp,32(sp)
    71c4:	ddc00717 	ldw	r23,28(sp)
    71c8:	dd800617 	ldw	r22,24(sp)
    71cc:	dd400517 	ldw	r21,20(sp)
    71d0:	dd000417 	ldw	r20,16(sp)
    71d4:	dcc00317 	ldw	r19,12(sp)
    71d8:	dc800217 	ldw	r18,8(sp)
    71dc:	dc400117 	ldw	r17,4(sp)
    71e0:	dc000017 	ldw	r16,0(sp)
    71e4:	dec00a04 	addi	sp,sp,40
    71e8:	f800283a 	ret
    71ec:	01ffff04 	movi	r7,-4
    71f0:	31cc703a 	and	r6,r6,r7
    71f4:	344f883a 	add	r7,r6,r17
    71f8:	38bfbc16 	blt	r7,r2,70ec <__alt_data_end+0xfe0070ec>
    71fc:	28800317 	ldw	r2,12(r5)
    7200:	29000217 	ldw	r4,8(r5)
    7204:	8029883a 	mov	r20,r16
    7208:	3823883a 	mov	r17,r7
    720c:	20800315 	stw	r2,12(r4)
    7210:	11000215 	stw	r4,8(r2)
    7214:	003fdc06 	br	7188 <__alt_data_end+0xfe007188>
    7218:	00800304 	movi	r2,12
    721c:	a8800015 	stw	r2,0(r21)
    7220:	0005883a 	mov	r2,zero
    7224:	003fe506 	br	71bc <__alt_data_end+0xfe0071bc>
    7228:	1c86b03a 	or	r3,r3,r18
    722c:	9c8b883a 	add	r5,r19,r18
    7230:	98c00115 	stw	r3,4(r19)
    7234:	30800054 	ori	r2,r6,1
    7238:	28800115 	stw	r2,4(r5)
    723c:	298d883a 	add	r6,r5,r6
    7240:	30800117 	ldw	r2,4(r6)
    7244:	a809883a 	mov	r4,r21
    7248:	29400204 	addi	r5,r5,8
    724c:	10800054 	ori	r2,r2,1
    7250:	30800115 	stw	r2,4(r6)
    7254:	000495c0 	call	495c <_free_r>
    7258:	003fd506 	br	71b0 <__alt_data_end+0xfe0071b0>
    725c:	1c6f883a 	add	r23,r3,r17
    7260:	b880370e 	bge	r23,r2,7340 <_realloc_r+0x300>
    7264:	a00b883a 	mov	r5,r20
    7268:	a809883a 	mov	r4,r21
    726c:	00054c00 	call	54c0 <_malloc_r>
    7270:	1029883a 	mov	r20,r2
    7274:	1000c026 	beq	r2,zero,7578 <_realloc_r+0x538>
    7278:	80ffff17 	ldw	r3,-4(r16)
    727c:	113ffe04 	addi	r4,r2,-8
    7280:	00bfff84 	movi	r2,-2
    7284:	1884703a 	and	r2,r3,r2
    7288:	9885883a 	add	r2,r19,r2
    728c:	20809026 	beq	r4,r2,74d0 <_realloc_r+0x490>
    7290:	89bfff04 	addi	r6,r17,-4
    7294:	00800904 	movi	r2,36
    7298:	11805936 	bltu	r2,r6,7400 <_realloc_r+0x3c0>
    729c:	00c004c4 	movi	r3,19
    72a0:	19803636 	bltu	r3,r6,737c <_realloc_r+0x33c>
    72a4:	a005883a 	mov	r2,r20
    72a8:	8007883a 	mov	r3,r16
    72ac:	19000017 	ldw	r4,0(r3)
    72b0:	11000015 	stw	r4,0(r2)
    72b4:	19000117 	ldw	r4,4(r3)
    72b8:	11000115 	stw	r4,4(r2)
    72bc:	18c00217 	ldw	r3,8(r3)
    72c0:	10c00215 	stw	r3,8(r2)
    72c4:	800b883a 	mov	r5,r16
    72c8:	a809883a 	mov	r4,r21
    72cc:	000495c0 	call	495c <_free_r>
    72d0:	a809883a 	mov	r4,r21
    72d4:	000d0b00 	call	d0b0 <__malloc_unlock>
    72d8:	a005883a 	mov	r2,r20
    72dc:	003fb706 	br	71bc <__alt_data_end+0xfe0071bc>
    72e0:	300b883a 	mov	r5,r6
    72e4:	dfc00917 	ldw	ra,36(sp)
    72e8:	df000817 	ldw	fp,32(sp)
    72ec:	ddc00717 	ldw	r23,28(sp)
    72f0:	dd800617 	ldw	r22,24(sp)
    72f4:	dd400517 	ldw	r21,20(sp)
    72f8:	dd000417 	ldw	r20,16(sp)
    72fc:	dcc00317 	ldw	r19,12(sp)
    7300:	dc800217 	ldw	r18,8(sp)
    7304:	dc400117 	ldw	r17,4(sp)
    7308:	dc000017 	ldw	r16,0(sp)
    730c:	dec00a04 	addi	sp,sp,40
    7310:	00054c01 	jmpi	54c0 <_malloc_r>
    7314:	182f883a 	mov	r23,r3
    7318:	b8bfd216 	blt	r23,r2,7264 <__alt_data_end+0xfe007264>
    731c:	00000806 	br	7340 <_realloc_r+0x300>
    7320:	21800117 	ldw	r6,4(r4)
    7324:	017fff04 	movi	r5,-4
    7328:	91c00404 	addi	r7,r18,16
    732c:	314c703a 	and	r6,r6,r5
    7330:	344b883a 	add	r5,r6,r17
    7334:	29c0250e 	bge	r5,r7,73cc <_realloc_r+0x38c>
    7338:	200b883a 	mov	r5,r4
    733c:	003f6b06 	br	70ec <__alt_data_end+0xfe0070ec>
    7340:	b0800317 	ldw	r2,12(r22)
    7344:	b0c00217 	ldw	r3,8(r22)
    7348:	89bfff04 	addi	r6,r17,-4
    734c:	01000904 	movi	r4,36
    7350:	18800315 	stw	r2,12(r3)
    7354:	10c00215 	stw	r3,8(r2)
    7358:	b5000204 	addi	r20,r22,8
    735c:	21bf7b2e 	bgeu	r4,r6,714c <__alt_data_end+0xfe00714c>
    7360:	a009883a 	mov	r4,r20
    7364:	800b883a 	mov	r5,r16
    7368:	0005e780 	call	5e78 <memmove>
    736c:	b0c00117 	ldw	r3,4(r22)
    7370:	b823883a 	mov	r17,r23
    7374:	b027883a 	mov	r19,r22
    7378:	003f8306 	br	7188 <__alt_data_end+0xfe007188>
    737c:	80c00017 	ldw	r3,0(r16)
    7380:	a0c00015 	stw	r3,0(r20)
    7384:	80c00117 	ldw	r3,4(r16)
    7388:	a0c00115 	stw	r3,4(r20)
    738c:	00c006c4 	movi	r3,27
    7390:	19804736 	bltu	r3,r6,74b0 <_realloc_r+0x470>
    7394:	a0800204 	addi	r2,r20,8
    7398:	80c00204 	addi	r3,r16,8
    739c:	003fc306 	br	72ac <__alt_data_end+0xfe0072ac>
    73a0:	a007883a 	mov	r3,r20
    73a4:	80800017 	ldw	r2,0(r16)
    73a8:	b823883a 	mov	r17,r23
    73ac:	b027883a 	mov	r19,r22
    73b0:	18800015 	stw	r2,0(r3)
    73b4:	80800117 	ldw	r2,4(r16)
    73b8:	18800115 	stw	r2,4(r3)
    73bc:	80800217 	ldw	r2,8(r16)
    73c0:	18800215 	stw	r2,8(r3)
    73c4:	b0c00117 	ldw	r3,4(r22)
    73c8:	003f6f06 	br	7188 <__alt_data_end+0xfe007188>
    73cc:	9ca7883a 	add	r19,r19,r18
    73d0:	2c85c83a 	sub	r2,r5,r18
    73d4:	bcc00215 	stw	r19,8(r23)
    73d8:	10800054 	ori	r2,r2,1
    73dc:	98800115 	stw	r2,4(r19)
    73e0:	80bfff17 	ldw	r2,-4(r16)
    73e4:	a809883a 	mov	r4,r21
    73e8:	1080004c 	andi	r2,r2,1
    73ec:	90a4b03a 	or	r18,r18,r2
    73f0:	84bfff15 	stw	r18,-4(r16)
    73f4:	000d0b00 	call	d0b0 <__malloc_unlock>
    73f8:	8005883a 	mov	r2,r16
    73fc:	003f6f06 	br	71bc <__alt_data_end+0xfe0071bc>
    7400:	a009883a 	mov	r4,r20
    7404:	800b883a 	mov	r5,r16
    7408:	0005e780 	call	5e78 <memmove>
    740c:	003fad06 	br	72c4 <__alt_data_end+0xfe0072c4>
    7410:	30f9883a 	add	fp,r6,r3
    7414:	91000404 	addi	r4,r18,16
    7418:	e13fbe16 	blt	fp,r4,7314 <__alt_data_end+0xfe007314>
    741c:	b0800317 	ldw	r2,12(r22)
    7420:	b0c00217 	ldw	r3,8(r22)
    7424:	89bfff04 	addi	r6,r17,-4
    7428:	01000904 	movi	r4,36
    742c:	18800315 	stw	r2,12(r3)
    7430:	10c00215 	stw	r3,8(r2)
    7434:	b4400204 	addi	r17,r22,8
    7438:	21804336 	bltu	r4,r6,7548 <_realloc_r+0x508>
    743c:	008004c4 	movi	r2,19
    7440:	11803f2e 	bgeu	r2,r6,7540 <_realloc_r+0x500>
    7444:	80800017 	ldw	r2,0(r16)
    7448:	b0800215 	stw	r2,8(r22)
    744c:	80800117 	ldw	r2,4(r16)
    7450:	b0800315 	stw	r2,12(r22)
    7454:	008006c4 	movi	r2,27
    7458:	11803f36 	bltu	r2,r6,7558 <_realloc_r+0x518>
    745c:	b0c00404 	addi	r3,r22,16
    7460:	84000204 	addi	r16,r16,8
    7464:	80800017 	ldw	r2,0(r16)
    7468:	18800015 	stw	r2,0(r3)
    746c:	80800117 	ldw	r2,4(r16)
    7470:	18800115 	stw	r2,4(r3)
    7474:	80800217 	ldw	r2,8(r16)
    7478:	18800215 	stw	r2,8(r3)
    747c:	b487883a 	add	r3,r22,r18
    7480:	e485c83a 	sub	r2,fp,r18
    7484:	b8c00215 	stw	r3,8(r23)
    7488:	10800054 	ori	r2,r2,1
    748c:	18800115 	stw	r2,4(r3)
    7490:	b0800117 	ldw	r2,4(r22)
    7494:	a809883a 	mov	r4,r21
    7498:	1080004c 	andi	r2,r2,1
    749c:	90a4b03a 	or	r18,r18,r2
    74a0:	b4800115 	stw	r18,4(r22)
    74a4:	000d0b00 	call	d0b0 <__malloc_unlock>
    74a8:	8805883a 	mov	r2,r17
    74ac:	003f4306 	br	71bc <__alt_data_end+0xfe0071bc>
    74b0:	80c00217 	ldw	r3,8(r16)
    74b4:	a0c00215 	stw	r3,8(r20)
    74b8:	80c00317 	ldw	r3,12(r16)
    74bc:	a0c00315 	stw	r3,12(r20)
    74c0:	30801126 	beq	r6,r2,7508 <_realloc_r+0x4c8>
    74c4:	a0800404 	addi	r2,r20,16
    74c8:	80c00404 	addi	r3,r16,16
    74cc:	003f7706 	br	72ac <__alt_data_end+0xfe0072ac>
    74d0:	a13fff17 	ldw	r4,-4(r20)
    74d4:	00bfff04 	movi	r2,-4
    74d8:	8029883a 	mov	r20,r16
    74dc:	2084703a 	and	r2,r4,r2
    74e0:	88a3883a 	add	r17,r17,r2
    74e4:	003f2806 	br	7188 <__alt_data_end+0xfe007188>
    74e8:	80800217 	ldw	r2,8(r16)
    74ec:	b0800415 	stw	r2,16(r22)
    74f0:	80800317 	ldw	r2,12(r16)
    74f4:	b0800515 	stw	r2,20(r22)
    74f8:	31000a26 	beq	r6,r4,7524 <_realloc_r+0x4e4>
    74fc:	b0c00604 	addi	r3,r22,24
    7500:	84000404 	addi	r16,r16,16
    7504:	003fa706 	br	73a4 <__alt_data_end+0xfe0073a4>
    7508:	81000417 	ldw	r4,16(r16)
    750c:	a0800604 	addi	r2,r20,24
    7510:	80c00604 	addi	r3,r16,24
    7514:	a1000415 	stw	r4,16(r20)
    7518:	81000517 	ldw	r4,20(r16)
    751c:	a1000515 	stw	r4,20(r20)
    7520:	003f6206 	br	72ac <__alt_data_end+0xfe0072ac>
    7524:	80800417 	ldw	r2,16(r16)
    7528:	84000604 	addi	r16,r16,24
    752c:	b0c00804 	addi	r3,r22,32
    7530:	b0800615 	stw	r2,24(r22)
    7534:	80bfff17 	ldw	r2,-4(r16)
    7538:	b0800715 	stw	r2,28(r22)
    753c:	003f9906 	br	73a4 <__alt_data_end+0xfe0073a4>
    7540:	8807883a 	mov	r3,r17
    7544:	003fc706 	br	7464 <__alt_data_end+0xfe007464>
    7548:	8809883a 	mov	r4,r17
    754c:	800b883a 	mov	r5,r16
    7550:	0005e780 	call	5e78 <memmove>
    7554:	003fc906 	br	747c <__alt_data_end+0xfe00747c>
    7558:	80800217 	ldw	r2,8(r16)
    755c:	b0800415 	stw	r2,16(r22)
    7560:	80800317 	ldw	r2,12(r16)
    7564:	b0800515 	stw	r2,20(r22)
    7568:	31000726 	beq	r6,r4,7588 <_realloc_r+0x548>
    756c:	b0c00604 	addi	r3,r22,24
    7570:	84000404 	addi	r16,r16,16
    7574:	003fbb06 	br	7464 <__alt_data_end+0xfe007464>
    7578:	a809883a 	mov	r4,r21
    757c:	000d0b00 	call	d0b0 <__malloc_unlock>
    7580:	0005883a 	mov	r2,zero
    7584:	003f0d06 	br	71bc <__alt_data_end+0xfe0071bc>
    7588:	80800417 	ldw	r2,16(r16)
    758c:	84000604 	addi	r16,r16,24
    7590:	b0c00804 	addi	r3,r22,32
    7594:	b0800615 	stw	r2,24(r22)
    7598:	80bfff17 	ldw	r2,-4(r16)
    759c:	b0800715 	stw	r2,28(r22)
    75a0:	003fb006 	br	7464 <__alt_data_end+0xfe007464>

000075a4 <__fpclassifyd>:
    75a4:	00a00034 	movhi	r2,32768
    75a8:	10bfffc4 	addi	r2,r2,-1
    75ac:	288a703a 	and	r5,r5,r2
    75b0:	28000726 	beq	r5,zero,75d0 <__fpclassifyd+0x2c>
    75b4:	00bffc34 	movhi	r2,65520
    75b8:	2885883a 	add	r2,r5,r2
    75bc:	00dff834 	movhi	r3,32736
    75c0:	18ffffc4 	addi	r3,r3,-1
    75c4:	18800636 	bltu	r3,r2,75e0 <__fpclassifyd+0x3c>
    75c8:	00800104 	movi	r2,4
    75cc:	f800283a 	ret
    75d0:	2005003a 	cmpeq	r2,r4,zero
    75d4:	00c000c4 	movi	r3,3
    75d8:	1885c83a 	sub	r2,r3,r2
    75dc:	f800283a 	ret
    75e0:	00800434 	movhi	r2,16
    75e4:	10bfffc4 	addi	r2,r2,-1
    75e8:	11400236 	bltu	r2,r5,75f4 <__fpclassifyd+0x50>
    75ec:	008000c4 	movi	r2,3
    75f0:	f800283a 	ret
    75f4:	009ffc34 	movhi	r2,32752
    75f8:	28800226 	beq	r5,r2,7604 <__fpclassifyd+0x60>
    75fc:	0005883a 	mov	r2,zero
    7600:	f800283a 	ret
    7604:	2005003a 	cmpeq	r2,r4,zero
    7608:	f800283a 	ret

0000760c <_sbrk_r>:
    760c:	defffd04 	addi	sp,sp,-12
    7610:	dc400115 	stw	r17,4(sp)
    7614:	dc000015 	stw	r16,0(sp)
    7618:	2023883a 	mov	r17,r4
    761c:	04000074 	movhi	r16,1
    7620:	840a5c04 	addi	r16,r16,10608
    7624:	2809883a 	mov	r4,r5
    7628:	dfc00215 	stw	ra,8(sp)
    762c:	80000015 	stw	zero,0(r16)
    7630:	000d2700 	call	d270 <sbrk>
    7634:	00ffffc4 	movi	r3,-1
    7638:	10c00526 	beq	r2,r3,7650 <_sbrk_r+0x44>
    763c:	dfc00217 	ldw	ra,8(sp)
    7640:	dc400117 	ldw	r17,4(sp)
    7644:	dc000017 	ldw	r16,0(sp)
    7648:	dec00304 	addi	sp,sp,12
    764c:	f800283a 	ret
    7650:	80c00017 	ldw	r3,0(r16)
    7654:	183ff926 	beq	r3,zero,763c <__alt_data_end+0xfe00763c>
    7658:	88c00015 	stw	r3,0(r17)
    765c:	dfc00217 	ldw	ra,8(sp)
    7660:	dc400117 	ldw	r17,4(sp)
    7664:	dc000017 	ldw	r16,0(sp)
    7668:	dec00304 	addi	sp,sp,12
    766c:	f800283a 	ret

00007670 <__sread>:
    7670:	defffe04 	addi	sp,sp,-8
    7674:	dc000015 	stw	r16,0(sp)
    7678:	2821883a 	mov	r16,r5
    767c:	2940038f 	ldh	r5,14(r5)
    7680:	dfc00115 	stw	ra,4(sp)
    7684:	00091fc0 	call	91fc <_read_r>
    7688:	10000716 	blt	r2,zero,76a8 <__sread+0x38>
    768c:	80c01417 	ldw	r3,80(r16)
    7690:	1887883a 	add	r3,r3,r2
    7694:	80c01415 	stw	r3,80(r16)
    7698:	dfc00117 	ldw	ra,4(sp)
    769c:	dc000017 	ldw	r16,0(sp)
    76a0:	dec00204 	addi	sp,sp,8
    76a4:	f800283a 	ret
    76a8:	80c0030b 	ldhu	r3,12(r16)
    76ac:	18fbffcc 	andi	r3,r3,61439
    76b0:	80c0030d 	sth	r3,12(r16)
    76b4:	dfc00117 	ldw	ra,4(sp)
    76b8:	dc000017 	ldw	r16,0(sp)
    76bc:	dec00204 	addi	sp,sp,8
    76c0:	f800283a 	ret

000076c4 <__seofread>:
    76c4:	0005883a 	mov	r2,zero
    76c8:	f800283a 	ret

000076cc <__swrite>:
    76cc:	2880030b 	ldhu	r2,12(r5)
    76d0:	defffb04 	addi	sp,sp,-20
    76d4:	dcc00315 	stw	r19,12(sp)
    76d8:	dc800215 	stw	r18,8(sp)
    76dc:	dc400115 	stw	r17,4(sp)
    76e0:	dc000015 	stw	r16,0(sp)
    76e4:	dfc00415 	stw	ra,16(sp)
    76e8:	10c0400c 	andi	r3,r2,256
    76ec:	2821883a 	mov	r16,r5
    76f0:	2027883a 	mov	r19,r4
    76f4:	3025883a 	mov	r18,r6
    76f8:	3823883a 	mov	r17,r7
    76fc:	18000526 	beq	r3,zero,7714 <__swrite+0x48>
    7700:	2940038f 	ldh	r5,14(r5)
    7704:	000d883a 	mov	r6,zero
    7708:	01c00084 	movi	r7,2
    770c:	00091900 	call	9190 <_lseek_r>
    7710:	8080030b 	ldhu	r2,12(r16)
    7714:	8140038f 	ldh	r5,14(r16)
    7718:	10bbffcc 	andi	r2,r2,61439
    771c:	9809883a 	mov	r4,r19
    7720:	900d883a 	mov	r6,r18
    7724:	880f883a 	mov	r7,r17
    7728:	8080030d 	sth	r2,12(r16)
    772c:	dfc00417 	ldw	ra,16(sp)
    7730:	dcc00317 	ldw	r19,12(sp)
    7734:	dc800217 	ldw	r18,8(sp)
    7738:	dc400117 	ldw	r17,4(sp)
    773c:	dc000017 	ldw	r16,0(sp)
    7740:	dec00504 	addi	sp,sp,20
    7744:	0008bf81 	jmpi	8bf8 <_write_r>

00007748 <__sseek>:
    7748:	defffe04 	addi	sp,sp,-8
    774c:	dc000015 	stw	r16,0(sp)
    7750:	2821883a 	mov	r16,r5
    7754:	2940038f 	ldh	r5,14(r5)
    7758:	dfc00115 	stw	ra,4(sp)
    775c:	00091900 	call	9190 <_lseek_r>
    7760:	00ffffc4 	movi	r3,-1
    7764:	10c00826 	beq	r2,r3,7788 <__sseek+0x40>
    7768:	80c0030b 	ldhu	r3,12(r16)
    776c:	80801415 	stw	r2,80(r16)
    7770:	18c40014 	ori	r3,r3,4096
    7774:	80c0030d 	sth	r3,12(r16)
    7778:	dfc00117 	ldw	ra,4(sp)
    777c:	dc000017 	ldw	r16,0(sp)
    7780:	dec00204 	addi	sp,sp,8
    7784:	f800283a 	ret
    7788:	80c0030b 	ldhu	r3,12(r16)
    778c:	18fbffcc 	andi	r3,r3,61439
    7790:	80c0030d 	sth	r3,12(r16)
    7794:	dfc00117 	ldw	ra,4(sp)
    7798:	dc000017 	ldw	r16,0(sp)
    779c:	dec00204 	addi	sp,sp,8
    77a0:	f800283a 	ret

000077a4 <__sclose>:
    77a4:	2940038f 	ldh	r5,14(r5)
    77a8:	0008c641 	jmpi	8c64 <_close_r>

000077ac <strcmp>:
    77ac:	2144b03a 	or	r2,r4,r5
    77b0:	108000cc 	andi	r2,r2,3
    77b4:	1000171e 	bne	r2,zero,7814 <strcmp+0x68>
    77b8:	20800017 	ldw	r2,0(r4)
    77bc:	28c00017 	ldw	r3,0(r5)
    77c0:	10c0141e 	bne	r2,r3,7814 <strcmp+0x68>
    77c4:	027fbff4 	movhi	r9,65279
    77c8:	4a7fbfc4 	addi	r9,r9,-257
    77cc:	1247883a 	add	r3,r2,r9
    77d0:	0084303a 	nor	r2,zero,r2
    77d4:	1884703a 	and	r2,r3,r2
    77d8:	02202074 	movhi	r8,32897
    77dc:	42202004 	addi	r8,r8,-32640
    77e0:	1204703a 	and	r2,r2,r8
    77e4:	10000226 	beq	r2,zero,77f0 <strcmp+0x44>
    77e8:	00001706 	br	7848 <strcmp+0x9c>
    77ec:	3000161e 	bne	r6,zero,7848 <strcmp+0x9c>
    77f0:	21000104 	addi	r4,r4,4
    77f4:	20800017 	ldw	r2,0(r4)
    77f8:	29400104 	addi	r5,r5,4
    77fc:	28c00017 	ldw	r3,0(r5)
    7800:	124f883a 	add	r7,r2,r9
    7804:	008c303a 	nor	r6,zero,r2
    7808:	398c703a 	and	r6,r7,r6
    780c:	320c703a 	and	r6,r6,r8
    7810:	10fff626 	beq	r2,r3,77ec <__alt_data_end+0xfe0077ec>
    7814:	20800007 	ldb	r2,0(r4)
    7818:	1000051e 	bne	r2,zero,7830 <strcmp+0x84>
    781c:	00000606 	br	7838 <strcmp+0x8c>
    7820:	21000044 	addi	r4,r4,1
    7824:	20800007 	ldb	r2,0(r4)
    7828:	29400044 	addi	r5,r5,1
    782c:	10000226 	beq	r2,zero,7838 <strcmp+0x8c>
    7830:	28c00007 	ldb	r3,0(r5)
    7834:	10fffa26 	beq	r2,r3,7820 <__alt_data_end+0xfe007820>
    7838:	20c00003 	ldbu	r3,0(r4)
    783c:	28800003 	ldbu	r2,0(r5)
    7840:	1885c83a 	sub	r2,r3,r2
    7844:	f800283a 	ret
    7848:	0005883a 	mov	r2,zero
    784c:	f800283a 	ret

00007850 <__sprint_r.part.0>:
    7850:	28801917 	ldw	r2,100(r5)
    7854:	defff604 	addi	sp,sp,-40
    7858:	dd800615 	stw	r22,24(sp)
    785c:	dcc00315 	stw	r19,12(sp)
    7860:	dfc00915 	stw	ra,36(sp)
    7864:	df000815 	stw	fp,32(sp)
    7868:	ddc00715 	stw	r23,28(sp)
    786c:	dd400515 	stw	r21,20(sp)
    7870:	dd000415 	stw	r20,16(sp)
    7874:	dc800215 	stw	r18,8(sp)
    7878:	dc400115 	stw	r17,4(sp)
    787c:	dc000015 	stw	r16,0(sp)
    7880:	1088000c 	andi	r2,r2,8192
    7884:	2827883a 	mov	r19,r5
    7888:	302d883a 	mov	r22,r6
    788c:	10002d26 	beq	r2,zero,7944 <__sprint_r.part.0+0xf4>
    7890:	30800217 	ldw	r2,8(r6)
    7894:	35c00017 	ldw	r23,0(r6)
    7898:	10002826 	beq	r2,zero,793c <__sprint_r.part.0+0xec>
    789c:	202b883a 	mov	r21,r4
    78a0:	bf000104 	addi	fp,r23,4
    78a4:	053fffc4 	movi	r20,-1
    78a8:	e4800017 	ldw	r18,0(fp)
    78ac:	bc400017 	ldw	r17,0(r23)
    78b0:	0021883a 	mov	r16,zero
    78b4:	9024d0ba 	srli	r18,r18,2
    78b8:	04800316 	blt	zero,r18,78c8 <__sprint_r.part.0+0x78>
    78bc:	00001806 	br	7920 <__sprint_r.part.0+0xd0>
    78c0:	8c400104 	addi	r17,r17,4
    78c4:	94001526 	beq	r18,r16,791c <__sprint_r.part.0+0xcc>
    78c8:	89400017 	ldw	r5,0(r17)
    78cc:	a809883a 	mov	r4,r21
    78d0:	980d883a 	mov	r6,r19
    78d4:	0008ec80 	call	8ec8 <_fputwc_r>
    78d8:	84000044 	addi	r16,r16,1
    78dc:	153ff81e 	bne	r2,r20,78c0 <__alt_data_end+0xfe0078c0>
    78e0:	a005883a 	mov	r2,r20
    78e4:	b0000215 	stw	zero,8(r22)
    78e8:	b0000115 	stw	zero,4(r22)
    78ec:	dfc00917 	ldw	ra,36(sp)
    78f0:	df000817 	ldw	fp,32(sp)
    78f4:	ddc00717 	ldw	r23,28(sp)
    78f8:	dd800617 	ldw	r22,24(sp)
    78fc:	dd400517 	ldw	r21,20(sp)
    7900:	dd000417 	ldw	r20,16(sp)
    7904:	dcc00317 	ldw	r19,12(sp)
    7908:	dc800217 	ldw	r18,8(sp)
    790c:	dc400117 	ldw	r17,4(sp)
    7910:	dc000017 	ldw	r16,0(sp)
    7914:	dec00a04 	addi	sp,sp,40
    7918:	f800283a 	ret
    791c:	b0800217 	ldw	r2,8(r22)
    7920:	94a5883a 	add	r18,r18,r18
    7924:	94a5883a 	add	r18,r18,r18
    7928:	1485c83a 	sub	r2,r2,r18
    792c:	b0800215 	stw	r2,8(r22)
    7930:	bdc00204 	addi	r23,r23,8
    7934:	e7000204 	addi	fp,fp,8
    7938:	103fdb1e 	bne	r2,zero,78a8 <__alt_data_end+0xfe0078a8>
    793c:	0005883a 	mov	r2,zero
    7940:	003fe806 	br	78e4 <__alt_data_end+0xfe0078e4>
    7944:	0004c2c0 	call	4c2c <__sfvwrite_r>
    7948:	003fe606 	br	78e4 <__alt_data_end+0xfe0078e4>

0000794c <__sprint_r>:
    794c:	30c00217 	ldw	r3,8(r6)
    7950:	18000126 	beq	r3,zero,7958 <__sprint_r+0xc>
    7954:	00078501 	jmpi	7850 <__sprint_r.part.0>
    7958:	30000115 	stw	zero,4(r6)
    795c:	0005883a 	mov	r2,zero
    7960:	f800283a 	ret

00007964 <___vfiprintf_internal_r>:
    7964:	defeca04 	addi	sp,sp,-1240
    7968:	dd813215 	stw	r22,1224(sp)
    796c:	dcc12f15 	stw	r19,1212(sp)
    7970:	dfc13515 	stw	ra,1236(sp)
    7974:	df013415 	stw	fp,1232(sp)
    7978:	ddc13315 	stw	r23,1228(sp)
    797c:	dd413115 	stw	r21,1220(sp)
    7980:	dd013015 	stw	r20,1216(sp)
    7984:	dc812e15 	stw	r18,1208(sp)
    7988:	dc412d15 	stw	r17,1204(sp)
    798c:	dc012c15 	stw	r16,1200(sp)
    7990:	d9012115 	stw	r4,1156(sp)
    7994:	d9c12315 	stw	r7,1164(sp)
    7998:	2827883a 	mov	r19,r5
    799c:	302d883a 	mov	r22,r6
    79a0:	20000226 	beq	r4,zero,79ac <___vfiprintf_internal_r+0x48>
    79a4:	20800e17 	ldw	r2,56(r4)
    79a8:	1001ca26 	beq	r2,zero,80d4 <___vfiprintf_internal_r+0x770>
    79ac:	9880030b 	ldhu	r2,12(r19)
    79b0:	1108000c 	andi	r4,r2,8192
    79b4:	1007883a 	mov	r3,r2
    79b8:	2000071e 	bne	r4,zero,79d8 <___vfiprintf_internal_r+0x74>
    79bc:	99001917 	ldw	r4,100(r19)
    79c0:	10c80014 	ori	r3,r2,8192
    79c4:	00b7ffc4 	movi	r2,-8193
    79c8:	2088703a 	and	r4,r4,r2
    79cc:	98c0030d 	sth	r3,12(r19)
    79d0:	1805883a 	mov	r2,r3
    79d4:	99001915 	stw	r4,100(r19)
    79d8:	1900020c 	andi	r4,r3,8
    79dc:	20018026 	beq	r4,zero,7fe0 <___vfiprintf_internal_r+0x67c>
    79e0:	99000417 	ldw	r4,16(r19)
    79e4:	20017e26 	beq	r4,zero,7fe0 <___vfiprintf_internal_r+0x67c>
    79e8:	18c0068c 	andi	r3,r3,26
    79ec:	01000284 	movi	r4,10
    79f0:	19018426 	beq	r3,r4,8004 <___vfiprintf_internal_r+0x6a0>
    79f4:	da4109c4 	addi	r9,sp,1063
    79f8:	da411e15 	stw	r9,1144(sp)
    79fc:	d8811e17 	ldw	r2,1144(sp)
    7a00:	da410a04 	addi	r9,sp,1064
    7a04:	da411f15 	stw	r9,1148(sp)
    7a08:	4893c83a 	sub	r9,r9,r2
    7a0c:	dec11a15 	stw	sp,1128(sp)
    7a10:	d8011c15 	stw	zero,1136(sp)
    7a14:	d8011b15 	stw	zero,1132(sp)
    7a18:	d8012615 	stw	zero,1176(sp)
    7a1c:	d8012415 	stw	zero,1168(sp)
    7a20:	d821883a 	mov	r16,sp
    7a24:	05000074 	movhi	r20,1
    7a28:	a53c8d04 	addi	r20,r20,-3532
    7a2c:	05c00074 	movhi	r23,1
    7a30:	bdfc8904 	addi	r23,r23,-3548
    7a34:	da412715 	stw	r9,1180(sp)
    7a38:	dcc12215 	stw	r19,1160(sp)
    7a3c:	b02b883a 	mov	r21,r22
    7a40:	a8800007 	ldb	r2,0(r21)
    7a44:	1003b926 	beq	r2,zero,892c <___vfiprintf_internal_r+0xfc8>
    7a48:	00c00944 	movi	r3,37
    7a4c:	a823883a 	mov	r17,r21
    7a50:	10c0021e 	bne	r2,r3,7a5c <___vfiprintf_internal_r+0xf8>
    7a54:	00001606 	br	7ab0 <___vfiprintf_internal_r+0x14c>
    7a58:	10c00326 	beq	r2,r3,7a68 <___vfiprintf_internal_r+0x104>
    7a5c:	8c400044 	addi	r17,r17,1
    7a60:	88800007 	ldb	r2,0(r17)
    7a64:	103ffc1e 	bne	r2,zero,7a58 <__alt_data_end+0xfe007a58>
    7a68:	8d65c83a 	sub	r18,r17,r21
    7a6c:	90001026 	beq	r18,zero,7ab0 <___vfiprintf_internal_r+0x14c>
    7a70:	d8c11c17 	ldw	r3,1136(sp)
    7a74:	d8811b17 	ldw	r2,1132(sp)
    7a78:	85400015 	stw	r21,0(r16)
    7a7c:	90c7883a 	add	r3,r18,r3
    7a80:	10800044 	addi	r2,r2,1
    7a84:	84800115 	stw	r18,4(r16)
    7a88:	d8c11c15 	stw	r3,1136(sp)
    7a8c:	d8811b15 	stw	r2,1132(sp)
    7a90:	010001c4 	movi	r4,7
    7a94:	2080760e 	bge	r4,r2,7c70 <___vfiprintf_internal_r+0x30c>
    7a98:	1803741e 	bne	r3,zero,886c <___vfiprintf_internal_r+0xf08>
    7a9c:	da412417 	ldw	r9,1168(sp)
    7aa0:	d8011b15 	stw	zero,1132(sp)
    7aa4:	d821883a 	mov	r16,sp
    7aa8:	4c93883a 	add	r9,r9,r18
    7aac:	da412415 	stw	r9,1168(sp)
    7ab0:	88800007 	ldb	r2,0(r17)
    7ab4:	1003f126 	beq	r2,zero,8a7c <___vfiprintf_internal_r+0x1118>
    7ab8:	88c00047 	ldb	r3,1(r17)
    7abc:	8d400044 	addi	r21,r17,1
    7ac0:	d8011d85 	stb	zero,1142(sp)
    7ac4:	000d883a 	mov	r6,zero
    7ac8:	02bfffc4 	movi	r10,-1
    7acc:	d8012015 	stw	zero,1152(sp)
    7ad0:	0039883a 	mov	fp,zero
    7ad4:	01001604 	movi	r4,88
    7ad8:	01400244 	movi	r5,9
    7adc:	02000a84 	movi	r8,42
    7ae0:	01c01b04 	movi	r7,108
    7ae4:	ad400044 	addi	r21,r21,1
    7ae8:	18bff804 	addi	r2,r3,-32
    7aec:	20825236 	bltu	r4,r2,8438 <___vfiprintf_internal_r+0xad4>
    7af0:	1085883a 	add	r2,r2,r2
    7af4:	1085883a 	add	r2,r2,r2
    7af8:	02400034 	movhi	r9,0
    7afc:	4a5ec304 	addi	r9,r9,31500
    7b00:	1245883a 	add	r2,r2,r9
    7b04:	10800017 	ldw	r2,0(r2)
    7b08:	1000683a 	jmp	r2
    7b0c:	00008234 	movhi	zero,520
    7b10:	00008438 	rdprs	zero,zero,528
    7b14:	00008438 	rdprs	zero,zero,528
    7b18:	000083b8 	rdprs	zero,zero,526
    7b1c:	00008438 	rdprs	zero,zero,528
    7b20:	00008438 	rdprs	zero,zero,528
    7b24:	00008438 	rdprs	zero,zero,528
    7b28:	00008438 	rdprs	zero,zero,528
    7b2c:	00008438 	rdprs	zero,zero,528
    7b30:	00008438 	rdprs	zero,zero,528
    7b34:	00008390 	cmplti	zero,zero,526
    7b38:	0000842c 	andhi	zero,zero,528
    7b3c:	00008438 	rdprs	zero,zero,528
    7b40:	000080ec 	andhi	zero,zero,515
    7b44:	000081bc 	xorhi	zero,zero,518
    7b48:	00008438 	rdprs	zero,zero,528
    7b4c:	00008120 	cmpeqi	zero,zero,516
    7b50:	0000812c 	andhi	zero,zero,516
    7b54:	0000812c 	andhi	zero,zero,516
    7b58:	0000812c 	andhi	zero,zero,516
    7b5c:	0000812c 	andhi	zero,zero,516
    7b60:	0000812c 	andhi	zero,zero,516
    7b64:	0000812c 	andhi	zero,zero,516
    7b68:	0000812c 	andhi	zero,zero,516
    7b6c:	0000812c 	andhi	zero,zero,516
    7b70:	0000812c 	andhi	zero,zero,516
    7b74:	00008438 	rdprs	zero,zero,528
    7b78:	00008438 	rdprs	zero,zero,528
    7b7c:	00008438 	rdprs	zero,zero,528
    7b80:	00008438 	rdprs	zero,zero,528
    7b84:	00008438 	rdprs	zero,zero,528
    7b88:	00008438 	rdprs	zero,zero,528
    7b8c:	00008438 	rdprs	zero,zero,528
    7b90:	00008438 	rdprs	zero,zero,528
    7b94:	00008438 	rdprs	zero,zero,528
    7b98:	00008438 	rdprs	zero,zero,528
    7b9c:	0000815c 	xori	zero,zero,517
    7ba0:	00008438 	rdprs	zero,zero,528
    7ba4:	00008438 	rdprs	zero,zero,528
    7ba8:	00008438 	rdprs	zero,zero,528
    7bac:	00008438 	rdprs	zero,zero,528
    7bb0:	00008438 	rdprs	zero,zero,528
    7bb4:	00008438 	rdprs	zero,zero,528
    7bb8:	00008438 	rdprs	zero,zero,528
    7bbc:	00008438 	rdprs	zero,zero,528
    7bc0:	00008438 	rdprs	zero,zero,528
    7bc4:	00008438 	rdprs	zero,zero,528
    7bc8:	00007fa8 	cmpgeui	zero,zero,510
    7bcc:	00008438 	rdprs	zero,zero,528
    7bd0:	00008438 	rdprs	zero,zero,528
    7bd4:	00008438 	rdprs	zero,zero,528
    7bd8:	00008438 	rdprs	zero,zero,528
    7bdc:	00008438 	rdprs	zero,zero,528
    7be0:	00007c84 	movi	zero,498
    7be4:	00008438 	rdprs	zero,zero,528
    7be8:	00008438 	rdprs	zero,zero,528
    7bec:	000083c4 	movi	zero,527
    7bf0:	00008438 	rdprs	zero,zero,528
    7bf4:	00008438 	rdprs	zero,zero,528
    7bf8:	00008438 	rdprs	zero,zero,528
    7bfc:	00008438 	rdprs	zero,zero,528
    7c00:	00008438 	rdprs	zero,zero,528
    7c04:	00008438 	rdprs	zero,zero,528
    7c08:	00008438 	rdprs	zero,zero,528
    7c0c:	00008438 	rdprs	zero,zero,528
    7c10:	00008438 	rdprs	zero,zero,528
    7c14:	00008438 	rdprs	zero,zero,528
    7c18:	000082a4 	muli	zero,zero,522
    7c1c:	000083fc 	xorhi	zero,zero,527
    7c20:	00008438 	rdprs	zero,zero,528
    7c24:	00008438 	rdprs	zero,zero,528
    7c28:	00008438 	rdprs	zero,zero,528
    7c2c:	0000831c 	xori	zero,zero,524
    7c30:	000083fc 	xorhi	zero,zero,527
    7c34:	00008438 	rdprs	zero,zero,528
    7c38:	00008438 	rdprs	zero,zero,528
    7c3c:	00008328 	cmpgeui	zero,zero,524
    7c40:	00008438 	rdprs	zero,zero,528
    7c44:	000081fc 	xorhi	zero,zero,519
    7c48:	00007fac 	andhi	zero,zero,510
    7c4c:	000082d0 	cmplti	zero,zero,523
    7c50:	00008310 	cmplti	zero,zero,524
    7c54:	00008438 	rdprs	zero,zero,528
    7c58:	00008250 	cmplti	zero,zero,521
    7c5c:	00008438 	rdprs	zero,zero,528
    7c60:	00007c88 	cmpgei	zero,zero,498
    7c64:	00008438 	rdprs	zero,zero,528
    7c68:	00008438 	rdprs	zero,zero,528
    7c6c:	0000833c 	xorhi	zero,zero,524
    7c70:	84000204 	addi	r16,r16,8
    7c74:	da412417 	ldw	r9,1168(sp)
    7c78:	4c93883a 	add	r9,r9,r18
    7c7c:	da412415 	stw	r9,1168(sp)
    7c80:	003f8b06 	br	7ab0 <__alt_data_end+0xfe007ab0>
    7c84:	e7000414 	ori	fp,fp,16
    7c88:	e080080c 	andi	r2,fp,32
    7c8c:	1001431e 	bne	r2,zero,819c <___vfiprintf_internal_r+0x838>
    7c90:	e080040c 	andi	r2,fp,16
    7c94:	10033826 	beq	r2,zero,8978 <___vfiprintf_internal_r+0x1014>
    7c98:	da412317 	ldw	r9,1164(sp)
    7c9c:	4c400017 	ldw	r17,0(r9)
    7ca0:	4a400104 	addi	r9,r9,4
    7ca4:	0017883a 	mov	r11,zero
    7ca8:	da412315 	stw	r9,1164(sp)
    7cac:	00800044 	movi	r2,1
    7cb0:	8809883a 	mov	r4,r17
    7cb4:	d8011d85 	stb	zero,1142(sp)
    7cb8:	5025883a 	mov	r18,r10
    7cbc:	002d883a 	mov	r22,zero
    7cc0:	50000216 	blt	r10,zero,7ccc <___vfiprintf_internal_r+0x368>
    7cc4:	00ffdfc4 	movi	r3,-129
    7cc8:	e0f8703a 	and	fp,fp,r3
    7ccc:	10803fcc 	andi	r2,r2,255
    7cd0:	2002101e 	bne	r4,zero,8514 <___vfiprintf_internal_r+0xbb0>
    7cd4:	50020f1e 	bne	r10,zero,8514 <___vfiprintf_internal_r+0xbb0>
    7cd8:	1002af1e 	bne	r2,zero,8798 <___vfiprintf_internal_r+0xe34>
    7cdc:	e080004c 	andi	r2,fp,1
    7ce0:	1002ad26 	beq	r2,zero,8798 <___vfiprintf_internal_r+0xe34>
    7ce4:	dc812717 	ldw	r18,1180(sp)
    7ce8:	00800c04 	movi	r2,48
    7cec:	d88109c5 	stb	r2,1063(sp)
    7cf0:	dcc109c4 	addi	r19,sp,1063
    7cf4:	9023883a 	mov	r17,r18
    7cf8:	9280010e 	bge	r18,r10,7d00 <___vfiprintf_internal_r+0x39c>
    7cfc:	5023883a 	mov	r17,r10
    7d00:	b5803fcc 	andi	r22,r22,255
    7d04:	b580201c 	xori	r22,r22,128
    7d08:	b5bfe004 	addi	r22,r22,-128
    7d0c:	b0000126 	beq	r22,zero,7d14 <___vfiprintf_internal_r+0x3b0>
    7d10:	8c400044 	addi	r17,r17,1
    7d14:	e380008c 	andi	r14,fp,2
    7d18:	70000126 	beq	r14,zero,7d20 <___vfiprintf_internal_r+0x3bc>
    7d1c:	8c400084 	addi	r17,r17,2
    7d20:	e580210c 	andi	r22,fp,132
    7d24:	b001db1e 	bne	r22,zero,8494 <___vfiprintf_internal_r+0xb30>
    7d28:	da412017 	ldw	r9,1152(sp)
    7d2c:	4c47c83a 	sub	r3,r9,r17
    7d30:	00c1d80e 	bge	zero,r3,8494 <___vfiprintf_internal_r+0xb30>
    7d34:	01c00404 	movi	r7,16
    7d38:	d8811c17 	ldw	r2,1136(sp)
    7d3c:	38c36f0e 	bge	r7,r3,8afc <___vfiprintf_internal_r+0x1198>
    7d40:	02400074 	movhi	r9,1
    7d44:	4a7c8d04 	addi	r9,r9,-3532
    7d48:	8011883a 	mov	r8,r16
    7d4c:	d9811b17 	ldw	r6,1132(sp)
    7d50:	da412515 	stw	r9,1172(sp)
    7d54:	02c001c4 	movi	r11,7
    7d58:	da812815 	stw	r10,1184(sp)
    7d5c:	db812915 	stw	r14,1188(sp)
    7d60:	1821883a 	mov	r16,r3
    7d64:	00000506 	br	7d7c <___vfiprintf_internal_r+0x418>
    7d68:	31000084 	addi	r4,r6,2
    7d6c:	42000204 	addi	r8,r8,8
    7d70:	280d883a 	mov	r6,r5
    7d74:	843ffc04 	addi	r16,r16,-16
    7d78:	3c000d0e 	bge	r7,r16,7db0 <___vfiprintf_internal_r+0x44c>
    7d7c:	10800404 	addi	r2,r2,16
    7d80:	31400044 	addi	r5,r6,1
    7d84:	45000015 	stw	r20,0(r8)
    7d88:	41c00115 	stw	r7,4(r8)
    7d8c:	d8811c15 	stw	r2,1136(sp)
    7d90:	d9411b15 	stw	r5,1132(sp)
    7d94:	597ff40e 	bge	r11,r5,7d68 <__alt_data_end+0xfe007d68>
    7d98:	1001b01e 	bne	r2,zero,845c <___vfiprintf_internal_r+0xaf8>
    7d9c:	843ffc04 	addi	r16,r16,-16
    7da0:	000d883a 	mov	r6,zero
    7da4:	01000044 	movi	r4,1
    7da8:	d811883a 	mov	r8,sp
    7dac:	3c3ff316 	blt	r7,r16,7d7c <__alt_data_end+0xfe007d7c>
    7db0:	da812817 	ldw	r10,1184(sp)
    7db4:	db812917 	ldw	r14,1188(sp)
    7db8:	8007883a 	mov	r3,r16
    7dbc:	4021883a 	mov	r16,r8
    7dc0:	da412517 	ldw	r9,1172(sp)
    7dc4:	1885883a 	add	r2,r3,r2
    7dc8:	80c00115 	stw	r3,4(r16)
    7dcc:	82400015 	stw	r9,0(r16)
    7dd0:	d8811c15 	stw	r2,1136(sp)
    7dd4:	d9011b15 	stw	r4,1132(sp)
    7dd8:	00c001c4 	movi	r3,7
    7ddc:	19029316 	blt	r3,r4,882c <___vfiprintf_internal_r+0xec8>
    7de0:	d8c11d87 	ldb	r3,1142(sp)
    7de4:	84000204 	addi	r16,r16,8
    7de8:	21800044 	addi	r6,r4,1
    7dec:	1801ae1e 	bne	r3,zero,84a8 <___vfiprintf_internal_r+0xb44>
    7df0:	70000c26 	beq	r14,zero,7e24 <___vfiprintf_internal_r+0x4c0>
    7df4:	d8c11d04 	addi	r3,sp,1140
    7df8:	10800084 	addi	r2,r2,2
    7dfc:	80c00015 	stw	r3,0(r16)
    7e00:	00c00084 	movi	r3,2
    7e04:	80c00115 	stw	r3,4(r16)
    7e08:	d8811c15 	stw	r2,1136(sp)
    7e0c:	d9811b15 	stw	r6,1132(sp)
    7e10:	00c001c4 	movi	r3,7
    7e14:	19824216 	blt	r3,r6,8720 <___vfiprintf_internal_r+0xdbc>
    7e18:	3009883a 	mov	r4,r6
    7e1c:	84000204 	addi	r16,r16,8
    7e20:	31800044 	addi	r6,r6,1
    7e24:	00c02004 	movi	r3,128
    7e28:	b0c1fe26 	beq	r22,r3,8624 <___vfiprintf_internal_r+0xcc0>
    7e2c:	54adc83a 	sub	r22,r10,r18
    7e30:	0580230e 	bge	zero,r22,7ec0 <___vfiprintf_internal_r+0x55c>
    7e34:	02400074 	movhi	r9,1
    7e38:	4a7c8904 	addi	r9,r9,-3548
    7e3c:	00c00404 	movi	r3,16
    7e40:	da412515 	stw	r9,1172(sp)
    7e44:	1d80140e 	bge	r3,r22,7e98 <___vfiprintf_internal_r+0x534>
    7e48:	01c001c4 	movi	r7,7
    7e4c:	00000506 	br	7e64 <___vfiprintf_internal_r+0x500>
    7e50:	21800084 	addi	r6,r4,2
    7e54:	84000204 	addi	r16,r16,8
    7e58:	2809883a 	mov	r4,r5
    7e5c:	b5bffc04 	addi	r22,r22,-16
    7e60:	1d800d0e 	bge	r3,r22,7e98 <___vfiprintf_internal_r+0x534>
    7e64:	10800404 	addi	r2,r2,16
    7e68:	21400044 	addi	r5,r4,1
    7e6c:	85c00015 	stw	r23,0(r16)
    7e70:	80c00115 	stw	r3,4(r16)
    7e74:	d8811c15 	stw	r2,1136(sp)
    7e78:	d9411b15 	stw	r5,1132(sp)
    7e7c:	397ff40e 	bge	r7,r5,7e50 <__alt_data_end+0xfe007e50>
    7e80:	1001961e 	bne	r2,zero,84dc <___vfiprintf_internal_r+0xb78>
    7e84:	b5bffc04 	addi	r22,r22,-16
    7e88:	0009883a 	mov	r4,zero
    7e8c:	01800044 	movi	r6,1
    7e90:	d821883a 	mov	r16,sp
    7e94:	1dbff316 	blt	r3,r22,7e64 <__alt_data_end+0xfe007e64>
    7e98:	d8c12517 	ldw	r3,1172(sp)
    7e9c:	1585883a 	add	r2,r2,r22
    7ea0:	85800115 	stw	r22,4(r16)
    7ea4:	80c00015 	stw	r3,0(r16)
    7ea8:	d8811c15 	stw	r2,1136(sp)
    7eac:	d9811b15 	stw	r6,1132(sp)
    7eb0:	00c001c4 	movi	r3,7
    7eb4:	1981d116 	blt	r3,r6,85fc <___vfiprintf_internal_r+0xc98>
    7eb8:	84000204 	addi	r16,r16,8
    7ebc:	31800044 	addi	r6,r6,1
    7ec0:	9085883a 	add	r2,r18,r2
    7ec4:	84c00015 	stw	r19,0(r16)
    7ec8:	84800115 	stw	r18,4(r16)
    7ecc:	d8811c15 	stw	r2,1136(sp)
    7ed0:	d9811b15 	stw	r6,1132(sp)
    7ed4:	00c001c4 	movi	r3,7
    7ed8:	1981d00e 	bge	r3,r6,861c <___vfiprintf_internal_r+0xcb8>
    7edc:	1002581e 	bne	r2,zero,8840 <___vfiprintf_internal_r+0xedc>
    7ee0:	d8011b15 	stw	zero,1132(sp)
    7ee4:	d821883a 	mov	r16,sp
    7ee8:	e280010c 	andi	r10,fp,4
    7eec:	5001a426 	beq	r10,zero,8580 <___vfiprintf_internal_r+0xc1c>
    7ef0:	da412017 	ldw	r9,1152(sp)
    7ef4:	4c65c83a 	sub	r18,r9,r17
    7ef8:	0481a10e 	bge	zero,r18,8580 <___vfiprintf_internal_r+0xc1c>
    7efc:	02000404 	movi	r8,16
    7f00:	4483100e 	bge	r8,r18,8b44 <___vfiprintf_internal_r+0x11e0>
    7f04:	02400074 	movhi	r9,1
    7f08:	4a7c8d04 	addi	r9,r9,-3532
    7f0c:	d9011b17 	ldw	r4,1132(sp)
    7f10:	da412515 	stw	r9,1172(sp)
    7f14:	4039883a 	mov	fp,r8
    7f18:	04c001c4 	movi	r19,7
    7f1c:	dd812117 	ldw	r22,1156(sp)
    7f20:	00000506 	br	7f38 <___vfiprintf_internal_r+0x5d4>
    7f24:	21400084 	addi	r5,r4,2
    7f28:	84000204 	addi	r16,r16,8
    7f2c:	1809883a 	mov	r4,r3
    7f30:	94bffc04 	addi	r18,r18,-16
    7f34:	e4800d0e 	bge	fp,r18,7f6c <___vfiprintf_internal_r+0x608>
    7f38:	10800404 	addi	r2,r2,16
    7f3c:	20c00044 	addi	r3,r4,1
    7f40:	85000015 	stw	r20,0(r16)
    7f44:	87000115 	stw	fp,4(r16)
    7f48:	d8811c15 	stw	r2,1136(sp)
    7f4c:	d8c11b15 	stw	r3,1132(sp)
    7f50:	98fff40e 	bge	r19,r3,7f24 <__alt_data_end+0xfe007f24>
    7f54:	10019f1e 	bne	r2,zero,85d4 <___vfiprintf_internal_r+0xc70>
    7f58:	94bffc04 	addi	r18,r18,-16
    7f5c:	0009883a 	mov	r4,zero
    7f60:	01400044 	movi	r5,1
    7f64:	d821883a 	mov	r16,sp
    7f68:	e4bff316 	blt	fp,r18,7f38 <__alt_data_end+0xfe007f38>
    7f6c:	d8c12517 	ldw	r3,1172(sp)
    7f70:	1485883a 	add	r2,r2,r18
    7f74:	84800115 	stw	r18,4(r16)
    7f78:	80c00015 	stw	r3,0(r16)
    7f7c:	d8811c15 	stw	r2,1136(sp)
    7f80:	d9411b15 	stw	r5,1132(sp)
    7f84:	00c001c4 	movi	r3,7
    7f88:	19417d0e 	bge	r3,r5,8580 <___vfiprintf_internal_r+0xc1c>
    7f8c:	1001761e 	bne	r2,zero,8568 <___vfiprintf_internal_r+0xc04>
    7f90:	da412017 	ldw	r9,1152(sp)
    7f94:	8a42b016 	blt	r17,r9,8a58 <___vfiprintf_internal_r+0x10f4>
    7f98:	da412417 	ldw	r9,1168(sp)
    7f9c:	4c53883a 	add	r9,r9,r17
    7fa0:	da412415 	stw	r9,1168(sp)
    7fa4:	00018206 	br	85b0 <___vfiprintf_internal_r+0xc4c>
    7fa8:	e7000414 	ori	fp,fp,16
    7fac:	e080080c 	andi	r2,fp,32
    7fb0:	10005126 	beq	r2,zero,80f8 <___vfiprintf_internal_r+0x794>
    7fb4:	da412317 	ldw	r9,1164(sp)
    7fb8:	0005883a 	mov	r2,zero
    7fbc:	4c400017 	ldw	r17,0(r9)
    7fc0:	4ac00117 	ldw	r11,4(r9)
    7fc4:	4a400204 	addi	r9,r9,8
    7fc8:	da412315 	stw	r9,1164(sp)
    7fcc:	8ac8b03a 	or	r4,r17,r11
    7fd0:	d8011d85 	stb	zero,1142(sp)
    7fd4:	5025883a 	mov	r18,r10
    7fd8:	002d883a 	mov	r22,zero
    7fdc:	003f3806 	br	7cc0 <__alt_data_end+0xfe007cc0>
    7fe0:	d9012117 	ldw	r4,1156(sp)
    7fe4:	980b883a 	mov	r5,r19
    7fe8:	00028a40 	call	28a4 <__swsetup_r>
    7fec:	10002c1e 	bne	r2,zero,80a0 <___vfiprintf_internal_r+0x73c>
    7ff0:	9880030b 	ldhu	r2,12(r19)
    7ff4:	01000284 	movi	r4,10
    7ff8:	1007883a 	mov	r3,r2
    7ffc:	18c0068c 	andi	r3,r3,26
    8000:	193e7c1e 	bne	r3,r4,79f4 <__alt_data_end+0xfe0079f4>
    8004:	98c0038b 	ldhu	r3,14(r19)
    8008:	193fffcc 	andi	r4,r3,65535
    800c:	2120001c 	xori	r4,r4,32768
    8010:	21200004 	addi	r4,r4,-32768
    8014:	203e7716 	blt	r4,zero,79f4 <__alt_data_end+0xfe0079f4>
    8018:	9b001917 	ldw	r12,100(r19)
    801c:	9ac00717 	ldw	r11,28(r19)
    8020:	9a800917 	ldw	r10,36(r19)
    8024:	d9012117 	ldw	r4,1156(sp)
    8028:	d9c12317 	ldw	r7,1164(sp)
    802c:	02410004 	movi	r9,1024
    8030:	10bfff4c 	andi	r2,r2,65533
    8034:	da4b883a 	add	r5,sp,r9
    8038:	b00d883a 	mov	r6,r22
    803c:	d881030d 	sth	r2,1036(sp)
    8040:	db011915 	stw	r12,1124(sp)
    8044:	d8c1038d 	sth	r3,1038(sp)
    8048:	dac10715 	stw	r11,1052(sp)
    804c:	da810915 	stw	r10,1060(sp)
    8050:	dec10015 	stw	sp,1024(sp)
    8054:	dec10415 	stw	sp,1040(sp)
    8058:	da410215 	stw	r9,1032(sp)
    805c:	da410515 	stw	r9,1044(sp)
    8060:	d8010615 	stw	zero,1048(sp)
    8064:	00079640 	call	7964 <___vfiprintf_internal_r>
    8068:	1021883a 	mov	r16,r2
    806c:	10000416 	blt	r2,zero,8080 <___vfiprintf_internal_r+0x71c>
    8070:	d9012117 	ldw	r4,1156(sp)
    8074:	d9410004 	addi	r5,sp,1024
    8078:	000421c0 	call	421c <_fflush_r>
    807c:	1002c31e 	bne	r2,zero,8b8c <___vfiprintf_internal_r+0x1228>
    8080:	d881030b 	ldhu	r2,1036(sp)
    8084:	1080100c 	andi	r2,r2,64
    8088:	10000326 	beq	r2,zero,8098 <___vfiprintf_internal_r+0x734>
    808c:	9880030b 	ldhu	r2,12(r19)
    8090:	10801014 	ori	r2,r2,64
    8094:	9880030d 	sth	r2,12(r19)
    8098:	8005883a 	mov	r2,r16
    809c:	00000106 	br	80a4 <___vfiprintf_internal_r+0x740>
    80a0:	00bfffc4 	movi	r2,-1
    80a4:	dfc13517 	ldw	ra,1236(sp)
    80a8:	df013417 	ldw	fp,1232(sp)
    80ac:	ddc13317 	ldw	r23,1228(sp)
    80b0:	dd813217 	ldw	r22,1224(sp)
    80b4:	dd413117 	ldw	r21,1220(sp)
    80b8:	dd013017 	ldw	r20,1216(sp)
    80bc:	dcc12f17 	ldw	r19,1212(sp)
    80c0:	dc812e17 	ldw	r18,1208(sp)
    80c4:	dc412d17 	ldw	r17,1204(sp)
    80c8:	dc012c17 	ldw	r16,1200(sp)
    80cc:	dec13604 	addi	sp,sp,1240
    80d0:	f800283a 	ret
    80d4:	00045280 	call	4528 <__sinit>
    80d8:	003e3406 	br	79ac <__alt_data_end+0xfe0079ac>
    80dc:	da412017 	ldw	r9,1152(sp)
    80e0:	d8812315 	stw	r2,1164(sp)
    80e4:	0253c83a 	sub	r9,zero,r9
    80e8:	da412015 	stw	r9,1152(sp)
    80ec:	e7000114 	ori	fp,fp,4
    80f0:	a8c00007 	ldb	r3,0(r21)
    80f4:	003e7b06 	br	7ae4 <__alt_data_end+0xfe007ae4>
    80f8:	e080040c 	andi	r2,fp,16
    80fc:	10021926 	beq	r2,zero,8964 <___vfiprintf_internal_r+0x1000>
    8100:	da412317 	ldw	r9,1164(sp)
    8104:	4c400017 	ldw	r17,0(r9)
    8108:	4a400104 	addi	r9,r9,4
    810c:	0017883a 	mov	r11,zero
    8110:	da412315 	stw	r9,1164(sp)
    8114:	0005883a 	mov	r2,zero
    8118:	8809883a 	mov	r4,r17
    811c:	003fac06 	br	7fd0 <__alt_data_end+0xfe007fd0>
    8120:	e7002014 	ori	fp,fp,128
    8124:	a8c00007 	ldb	r3,0(r21)
    8128:	003e6e06 	br	7ae4 <__alt_data_end+0xfe007ae4>
    812c:	d8012015 	stw	zero,1152(sp)
    8130:	18bff404 	addi	r2,r3,-48
    8134:	da412017 	ldw	r9,1152(sp)
    8138:	a8c00007 	ldb	r3,0(r21)
    813c:	4ac002a4 	muli	r11,r9,10
    8140:	aa400044 	addi	r9,r21,1
    8144:	482b883a 	mov	r21,r9
    8148:	5885883a 	add	r2,r11,r2
    814c:	d8812015 	stw	r2,1152(sp)
    8150:	18bff404 	addi	r2,r3,-48
    8154:	28bff72e 	bgeu	r5,r2,8134 <__alt_data_end+0xfe008134>
    8158:	003e6306 	br	7ae8 <__alt_data_end+0xfe007ae8>
    815c:	e7000414 	ori	fp,fp,16
    8160:	d9811d85 	stb	r6,1142(sp)
    8164:	e080080c 	andi	r2,fp,32
    8168:	1000a726 	beq	r2,zero,8408 <___vfiprintf_internal_r+0xaa4>
    816c:	da412317 	ldw	r9,1164(sp)
    8170:	48800117 	ldw	r2,4(r9)
    8174:	4c400017 	ldw	r17,0(r9)
    8178:	4a400204 	addi	r9,r9,8
    817c:	da412315 	stw	r9,1164(sp)
    8180:	1017883a 	mov	r11,r2
    8184:	1001eb16 	blt	r2,zero,8934 <___vfiprintf_internal_r+0xfd0>
    8188:	dd811d83 	ldbu	r22,1142(sp)
    818c:	5025883a 	mov	r18,r10
    8190:	00800044 	movi	r2,1
    8194:	8ac8b03a 	or	r4,r17,r11
    8198:	003ec906 	br	7cc0 <__alt_data_end+0xfe007cc0>
    819c:	da412317 	ldw	r9,1164(sp)
    81a0:	00800044 	movi	r2,1
    81a4:	4c400017 	ldw	r17,0(r9)
    81a8:	4ac00117 	ldw	r11,4(r9)
    81ac:	4a400204 	addi	r9,r9,8
    81b0:	da412315 	stw	r9,1164(sp)
    81b4:	8ac8b03a 	or	r4,r17,r11
    81b8:	003f8506 	br	7fd0 <__alt_data_end+0xfe007fd0>
    81bc:	a8c00007 	ldb	r3,0(r21)
    81c0:	aa400044 	addi	r9,r21,1
    81c4:	1a027326 	beq	r3,r8,8b94 <___vfiprintf_internal_r+0x1230>
    81c8:	18bff404 	addi	r2,r3,-48
    81cc:	482b883a 	mov	r21,r9
    81d0:	0015883a 	mov	r10,zero
    81d4:	28be4436 	bltu	r5,r2,7ae8 <__alt_data_end+0xfe007ae8>
    81d8:	a8c00007 	ldb	r3,0(r21)
    81dc:	528002a4 	muli	r10,r10,10
    81e0:	ad400044 	addi	r21,r21,1
    81e4:	1295883a 	add	r10,r2,r10
    81e8:	18bff404 	addi	r2,r3,-48
    81ec:	28bffa2e 	bgeu	r5,r2,81d8 <__alt_data_end+0xfe0081d8>
    81f0:	503e3d0e 	bge	r10,zero,7ae8 <__alt_data_end+0xfe007ae8>
    81f4:	02bfffc4 	movi	r10,-1
    81f8:	003e3b06 	br	7ae8 <__alt_data_end+0xfe007ae8>
    81fc:	d9811d85 	stb	r6,1142(sp)
    8200:	e080080c 	andi	r2,fp,32
    8204:	1001e326 	beq	r2,zero,8994 <___vfiprintf_internal_r+0x1030>
    8208:	da412317 	ldw	r9,1164(sp)
    820c:	48800017 	ldw	r2,0(r9)
    8210:	da412417 	ldw	r9,1168(sp)
    8214:	4807d7fa 	srai	r3,r9,31
    8218:	da412317 	ldw	r9,1164(sp)
    821c:	10c00115 	stw	r3,4(r2)
    8220:	4a400104 	addi	r9,r9,4
    8224:	da412315 	stw	r9,1164(sp)
    8228:	da412417 	ldw	r9,1168(sp)
    822c:	12400015 	stw	r9,0(r2)
    8230:	003e0306 	br	7a40 <__alt_data_end+0xfe007a40>
    8234:	30803fcc 	andi	r2,r6,255
    8238:	1080201c 	xori	r2,r2,128
    823c:	10bfe004 	addi	r2,r2,-128
    8240:	1001d21e 	bne	r2,zero,898c <___vfiprintf_internal_r+0x1028>
    8244:	01800804 	movi	r6,32
    8248:	a8c00007 	ldb	r3,0(r21)
    824c:	003e2506 	br	7ae4 <__alt_data_end+0xfe007ae4>
    8250:	da412317 	ldw	r9,1164(sp)
    8254:	d8011d85 	stb	zero,1142(sp)
    8258:	4cc00017 	ldw	r19,0(r9)
    825c:	48c00104 	addi	r3,r9,4
    8260:	98022c26 	beq	r19,zero,8b14 <___vfiprintf_internal_r+0x11b0>
    8264:	9809883a 	mov	r4,r19
    8268:	50021016 	blt	r10,zero,8aac <___vfiprintf_internal_r+0x1148>
    826c:	500d883a 	mov	r6,r10
    8270:	000b883a 	mov	r5,zero
    8274:	d8c12a15 	stw	r3,1192(sp)
    8278:	da812b15 	stw	r10,1196(sp)
    827c:	0005c840 	call	5c84 <memchr>
    8280:	d8c12a17 	ldw	r3,1192(sp)
    8284:	da812b17 	ldw	r10,1196(sp)
    8288:	10023426 	beq	r2,zero,8b5c <___vfiprintf_internal_r+0x11f8>
    828c:	14e5c83a 	sub	r18,r2,r19
    8290:	5481f316 	blt	r10,r18,8a60 <___vfiprintf_internal_r+0x10fc>
    8294:	dd811d83 	ldbu	r22,1142(sp)
    8298:	d8c12315 	stw	r3,1164(sp)
    829c:	0015883a 	mov	r10,zero
    82a0:	003e9406 	br	7cf4 <__alt_data_end+0xfe007cf4>
    82a4:	da412317 	ldw	r9,1164(sp)
    82a8:	04400044 	movi	r17,1
    82ac:	d8011d85 	stb	zero,1142(sp)
    82b0:	48800017 	ldw	r2,0(r9)
    82b4:	4a400104 	addi	r9,r9,4
    82b8:	da412315 	stw	r9,1164(sp)
    82bc:	d8810005 	stb	r2,1024(sp)
    82c0:	8825883a 	mov	r18,r17
    82c4:	dcc10004 	addi	r19,sp,1024
    82c8:	0015883a 	mov	r10,zero
    82cc:	003e9106 	br	7d14 <__alt_data_end+0xfe007d14>
    82d0:	da412317 	ldw	r9,1164(sp)
    82d4:	00800c04 	movi	r2,48
    82d8:	d8811d05 	stb	r2,1140(sp)
    82dc:	4c400017 	ldw	r17,0(r9)
    82e0:	4a400104 	addi	r9,r9,4
    82e4:	00801e04 	movi	r2,120
    82e8:	da412315 	stw	r9,1164(sp)
    82ec:	02400074 	movhi	r9,1
    82f0:	4a7c2804 	addi	r9,r9,-3936
    82f4:	d8811d45 	stb	r2,1141(sp)
    82f8:	0017883a 	mov	r11,zero
    82fc:	e7000094 	ori	fp,fp,2
    8300:	da412615 	stw	r9,1176(sp)
    8304:	00800084 	movi	r2,2
    8308:	8809883a 	mov	r4,r17
    830c:	003f3006 	br	7fd0 <__alt_data_end+0xfe007fd0>
    8310:	e7000814 	ori	fp,fp,32
    8314:	a8c00007 	ldb	r3,0(r21)
    8318:	003df206 	br	7ae4 <__alt_data_end+0xfe007ae4>
    831c:	e7001014 	ori	fp,fp,64
    8320:	a8c00007 	ldb	r3,0(r21)
    8324:	003def06 	br	7ae4 <__alt_data_end+0xfe007ae4>
    8328:	a8c00007 	ldb	r3,0(r21)
    832c:	a805883a 	mov	r2,r21
    8330:	19c1da26 	beq	r3,r7,8a9c <___vfiprintf_internal_r+0x1138>
    8334:	e7000414 	ori	fp,fp,16
    8338:	003dea06 	br	7ae4 <__alt_data_end+0xfe007ae4>
    833c:	02400074 	movhi	r9,1
    8340:	4a7c2804 	addi	r9,r9,-3936
    8344:	d9811d85 	stb	r6,1142(sp)
    8348:	da412615 	stw	r9,1176(sp)
    834c:	e080080c 	andi	r2,fp,32
    8350:	10002226 	beq	r2,zero,83dc <___vfiprintf_internal_r+0xa78>
    8354:	da412317 	ldw	r9,1164(sp)
    8358:	4c400017 	ldw	r17,0(r9)
    835c:	4ac00117 	ldw	r11,4(r9)
    8360:	4a400204 	addi	r9,r9,8
    8364:	da412315 	stw	r9,1164(sp)
    8368:	e080004c 	andi	r2,fp,1
    836c:	10013c26 	beq	r2,zero,8860 <___vfiprintf_internal_r+0xefc>
    8370:	8ac8b03a 	or	r4,r17,r11
    8374:	20017926 	beq	r4,zero,895c <___vfiprintf_internal_r+0xff8>
    8378:	00800c04 	movi	r2,48
    837c:	d8811d05 	stb	r2,1140(sp)
    8380:	d8c11d45 	stb	r3,1141(sp)
    8384:	e7000094 	ori	fp,fp,2
    8388:	00800084 	movi	r2,2
    838c:	003f1006 	br	7fd0 <__alt_data_end+0xfe007fd0>
    8390:	da412317 	ldw	r9,1164(sp)
    8394:	4a400017 	ldw	r9,0(r9)
    8398:	da412015 	stw	r9,1152(sp)
    839c:	da412317 	ldw	r9,1164(sp)
    83a0:	48800104 	addi	r2,r9,4
    83a4:	da412017 	ldw	r9,1152(sp)
    83a8:	483f4c16 	blt	r9,zero,80dc <__alt_data_end+0xfe0080dc>
    83ac:	d8812315 	stw	r2,1164(sp)
    83b0:	a8c00007 	ldb	r3,0(r21)
    83b4:	003dcb06 	br	7ae4 <__alt_data_end+0xfe007ae4>
    83b8:	e7000054 	ori	fp,fp,1
    83bc:	a8c00007 	ldb	r3,0(r21)
    83c0:	003dc806 	br	7ae4 <__alt_data_end+0xfe007ae4>
    83c4:	02400074 	movhi	r9,1
    83c8:	4a7c2304 	addi	r9,r9,-3956
    83cc:	d9811d85 	stb	r6,1142(sp)
    83d0:	da412615 	stw	r9,1176(sp)
    83d4:	e080080c 	andi	r2,fp,32
    83d8:	103fde1e 	bne	r2,zero,8354 <__alt_data_end+0xfe008354>
    83dc:	e080040c 	andi	r2,fp,16
    83e0:	10017e26 	beq	r2,zero,89dc <___vfiprintf_internal_r+0x1078>
    83e4:	da412317 	ldw	r9,1164(sp)
    83e8:	0017883a 	mov	r11,zero
    83ec:	4c400017 	ldw	r17,0(r9)
    83f0:	4a400104 	addi	r9,r9,4
    83f4:	da412315 	stw	r9,1164(sp)
    83f8:	003fdb06 	br	8368 <__alt_data_end+0xfe008368>
    83fc:	d9811d85 	stb	r6,1142(sp)
    8400:	e080080c 	andi	r2,fp,32
    8404:	103f591e 	bne	r2,zero,816c <__alt_data_end+0xfe00816c>
    8408:	e080040c 	andi	r2,fp,16
    840c:	10017b26 	beq	r2,zero,89fc <___vfiprintf_internal_r+0x1098>
    8410:	da412317 	ldw	r9,1164(sp)
    8414:	4c400017 	ldw	r17,0(r9)
    8418:	4a400104 	addi	r9,r9,4
    841c:	da412315 	stw	r9,1164(sp)
    8420:	8817d7fa 	srai	r11,r17,31
    8424:	5805883a 	mov	r2,r11
    8428:	003f5606 	br	8184 <__alt_data_end+0xfe008184>
    842c:	01800ac4 	movi	r6,43
    8430:	a8c00007 	ldb	r3,0(r21)
    8434:	003dab06 	br	7ae4 <__alt_data_end+0xfe007ae4>
    8438:	d9811d85 	stb	r6,1142(sp)
    843c:	18018f26 	beq	r3,zero,8a7c <___vfiprintf_internal_r+0x1118>
    8440:	04400044 	movi	r17,1
    8444:	d8c10005 	stb	r3,1024(sp)
    8448:	d8011d85 	stb	zero,1142(sp)
    844c:	8825883a 	mov	r18,r17
    8450:	dcc10004 	addi	r19,sp,1024
    8454:	0015883a 	mov	r10,zero
    8458:	003e2e06 	br	7d14 <__alt_data_end+0xfe007d14>
    845c:	d9012117 	ldw	r4,1156(sp)
    8460:	d9412217 	ldw	r5,1160(sp)
    8464:	d9811a04 	addi	r6,sp,1128
    8468:	d9c12b15 	stw	r7,1196(sp)
    846c:	dac12a15 	stw	r11,1192(sp)
    8470:	00078500 	call	7850 <__sprint_r.part.0>
    8474:	d9c12b17 	ldw	r7,1196(sp)
    8478:	dac12a17 	ldw	r11,1192(sp)
    847c:	10004f1e 	bne	r2,zero,85bc <___vfiprintf_internal_r+0xc58>
    8480:	d9811b17 	ldw	r6,1132(sp)
    8484:	d8811c17 	ldw	r2,1136(sp)
    8488:	d811883a 	mov	r8,sp
    848c:	31000044 	addi	r4,r6,1
    8490:	003e3806 	br	7d74 <__alt_data_end+0xfe007d74>
    8494:	d9011b17 	ldw	r4,1132(sp)
    8498:	d8811c17 	ldw	r2,1136(sp)
    849c:	21800044 	addi	r6,r4,1
    84a0:	d8c11d87 	ldb	r3,1142(sp)
    84a4:	183e5226 	beq	r3,zero,7df0 <__alt_data_end+0xfe007df0>
    84a8:	00c00044 	movi	r3,1
    84ac:	d9011d84 	addi	r4,sp,1142
    84b0:	10c5883a 	add	r2,r2,r3
    84b4:	81000015 	stw	r4,0(r16)
    84b8:	80c00115 	stw	r3,4(r16)
    84bc:	d8811c15 	stw	r2,1136(sp)
    84c0:	d9811b15 	stw	r6,1132(sp)
    84c4:	010001c4 	movi	r4,7
    84c8:	21809016 	blt	r4,r6,870c <___vfiprintf_internal_r+0xda8>
    84cc:	3009883a 	mov	r4,r6
    84d0:	84000204 	addi	r16,r16,8
    84d4:	30cd883a 	add	r6,r6,r3
    84d8:	003e4506 	br	7df0 <__alt_data_end+0xfe007df0>
    84dc:	d9012117 	ldw	r4,1156(sp)
    84e0:	d9412217 	ldw	r5,1160(sp)
    84e4:	d9811a04 	addi	r6,sp,1128
    84e8:	d8c12a15 	stw	r3,1192(sp)
    84ec:	d9c12b15 	stw	r7,1196(sp)
    84f0:	00078500 	call	7850 <__sprint_r.part.0>
    84f4:	d8c12a17 	ldw	r3,1192(sp)
    84f8:	d9c12b17 	ldw	r7,1196(sp)
    84fc:	10002f1e 	bne	r2,zero,85bc <___vfiprintf_internal_r+0xc58>
    8500:	d9011b17 	ldw	r4,1132(sp)
    8504:	d8811c17 	ldw	r2,1136(sp)
    8508:	d821883a 	mov	r16,sp
    850c:	21800044 	addi	r6,r4,1
    8510:	003e5206 	br	7e5c <__alt_data_end+0xfe007e5c>
    8514:	00c00044 	movi	r3,1
    8518:	10c0a126 	beq	r2,r3,87a0 <___vfiprintf_internal_r+0xe3c>
    851c:	00c00084 	movi	r3,2
    8520:	10c0841e 	bne	r2,r3,8734 <___vfiprintf_internal_r+0xdd0>
    8524:	d9412617 	ldw	r5,1176(sp)
    8528:	d88109c4 	addi	r2,sp,1063
    852c:	88c003cc 	andi	r3,r17,15
    8530:	5808973a 	slli	r4,r11,28
    8534:	28c7883a 	add	r3,r5,r3
    8538:	8822d13a 	srli	r17,r17,4
    853c:	18c00003 	ldbu	r3,0(r3)
    8540:	5816d13a 	srli	r11,r11,4
    8544:	2462b03a 	or	r17,r4,r17
    8548:	10c00005 	stb	r3,0(r2)
    854c:	8ac6b03a 	or	r3,r17,r11
    8550:	1027883a 	mov	r19,r2
    8554:	10bfffc4 	addi	r2,r2,-1
    8558:	183ff41e 	bne	r3,zero,852c <__alt_data_end+0xfe00852c>
    855c:	da411f17 	ldw	r9,1148(sp)
    8560:	4ce5c83a 	sub	r18,r9,r19
    8564:	003de306 	br	7cf4 <__alt_data_end+0xfe007cf4>
    8568:	d9012117 	ldw	r4,1156(sp)
    856c:	d9412217 	ldw	r5,1160(sp)
    8570:	d9811a04 	addi	r6,sp,1128
    8574:	00078500 	call	7850 <__sprint_r.part.0>
    8578:	1000101e 	bne	r2,zero,85bc <___vfiprintf_internal_r+0xc58>
    857c:	d8811c17 	ldw	r2,1136(sp)
    8580:	da412017 	ldw	r9,1152(sp)
    8584:	8a40010e 	bge	r17,r9,858c <___vfiprintf_internal_r+0xc28>
    8588:	4823883a 	mov	r17,r9
    858c:	da412417 	ldw	r9,1168(sp)
    8590:	4c53883a 	add	r9,r9,r17
    8594:	da412415 	stw	r9,1168(sp)
    8598:	10000526 	beq	r2,zero,85b0 <___vfiprintf_internal_r+0xc4c>
    859c:	d9012117 	ldw	r4,1156(sp)
    85a0:	d9412217 	ldw	r5,1160(sp)
    85a4:	d9811a04 	addi	r6,sp,1128
    85a8:	00078500 	call	7850 <__sprint_r.part.0>
    85ac:	1000031e 	bne	r2,zero,85bc <___vfiprintf_internal_r+0xc58>
    85b0:	d8011b15 	stw	zero,1132(sp)
    85b4:	d821883a 	mov	r16,sp
    85b8:	003d2106 	br	7a40 <__alt_data_end+0xfe007a40>
    85bc:	dcc12217 	ldw	r19,1160(sp)
    85c0:	9880030b 	ldhu	r2,12(r19)
    85c4:	1080100c 	andi	r2,r2,64
    85c8:	103eb51e 	bne	r2,zero,80a0 <__alt_data_end+0xfe0080a0>
    85cc:	d8812417 	ldw	r2,1168(sp)
    85d0:	003eb406 	br	80a4 <__alt_data_end+0xfe0080a4>
    85d4:	d9412217 	ldw	r5,1160(sp)
    85d8:	b009883a 	mov	r4,r22
    85dc:	d9811a04 	addi	r6,sp,1128
    85e0:	00078500 	call	7850 <__sprint_r.part.0>
    85e4:	103ff51e 	bne	r2,zero,85bc <__alt_data_end+0xfe0085bc>
    85e8:	d9011b17 	ldw	r4,1132(sp)
    85ec:	d8811c17 	ldw	r2,1136(sp)
    85f0:	d821883a 	mov	r16,sp
    85f4:	21400044 	addi	r5,r4,1
    85f8:	003e4d06 	br	7f30 <__alt_data_end+0xfe007f30>
    85fc:	1000c11e 	bne	r2,zero,8904 <___vfiprintf_internal_r+0xfa0>
    8600:	00800044 	movi	r2,1
    8604:	d8811b15 	stw	r2,1132(sp)
    8608:	dcc00015 	stw	r19,0(sp)
    860c:	dc800115 	stw	r18,4(sp)
    8610:	dc811c15 	stw	r18,1136(sp)
    8614:	9005883a 	mov	r2,r18
    8618:	d821883a 	mov	r16,sp
    861c:	84000204 	addi	r16,r16,8
    8620:	003e3106 	br	7ee8 <__alt_data_end+0xfe007ee8>
    8624:	da412017 	ldw	r9,1152(sp)
    8628:	4c6dc83a 	sub	r22,r9,r17
    862c:	05bdff0e 	bge	zero,r22,7e2c <__alt_data_end+0xfe007e2c>
    8630:	01c00404 	movi	r7,16
    8634:	3d814e0e 	bge	r7,r22,8b70 <___vfiprintf_internal_r+0x120c>
    8638:	00c00074 	movhi	r3,1
    863c:	18fc8904 	addi	r3,r3,-3548
    8640:	800b883a 	mov	r5,r16
    8644:	d8c12515 	stw	r3,1172(sp)
    8648:	02c001c4 	movi	r11,7
    864c:	5021883a 	mov	r16,r10
    8650:	00000506 	br	8668 <___vfiprintf_internal_r+0xd04>
    8654:	23800084 	addi	r14,r4,2
    8658:	29400204 	addi	r5,r5,8
    865c:	1809883a 	mov	r4,r3
    8660:	b5bffc04 	addi	r22,r22,-16
    8664:	3d800d0e 	bge	r7,r22,869c <___vfiprintf_internal_r+0xd38>
    8668:	10800404 	addi	r2,r2,16
    866c:	20c00044 	addi	r3,r4,1
    8670:	2dc00015 	stw	r23,0(r5)
    8674:	29c00115 	stw	r7,4(r5)
    8678:	d8811c15 	stw	r2,1136(sp)
    867c:	d8c11b15 	stw	r3,1132(sp)
    8680:	58fff40e 	bge	r11,r3,8654 <__alt_data_end+0xfe008654>
    8684:	1000131e 	bne	r2,zero,86d4 <___vfiprintf_internal_r+0xd70>
    8688:	b5bffc04 	addi	r22,r22,-16
    868c:	0009883a 	mov	r4,zero
    8690:	03800044 	movi	r14,1
    8694:	d80b883a 	mov	r5,sp
    8698:	3dbff316 	blt	r7,r22,8668 <__alt_data_end+0xfe008668>
    869c:	8015883a 	mov	r10,r16
    86a0:	2821883a 	mov	r16,r5
    86a4:	d8c12517 	ldw	r3,1172(sp)
    86a8:	1585883a 	add	r2,r2,r22
    86ac:	85800115 	stw	r22,4(r16)
    86b0:	80c00015 	stw	r3,0(r16)
    86b4:	d8811c15 	stw	r2,1136(sp)
    86b8:	db811b15 	stw	r14,1132(sp)
    86bc:	00c001c4 	movi	r3,7
    86c0:	1b808b16 	blt	r3,r14,88f0 <___vfiprintf_internal_r+0xf8c>
    86c4:	84000204 	addi	r16,r16,8
    86c8:	71800044 	addi	r6,r14,1
    86cc:	7009883a 	mov	r4,r14
    86d0:	003dd606 	br	7e2c <__alt_data_end+0xfe007e2c>
    86d4:	d9012117 	ldw	r4,1156(sp)
    86d8:	d9412217 	ldw	r5,1160(sp)
    86dc:	d9811a04 	addi	r6,sp,1128
    86e0:	d9c12b15 	stw	r7,1196(sp)
    86e4:	dac12a15 	stw	r11,1192(sp)
    86e8:	00078500 	call	7850 <__sprint_r.part.0>
    86ec:	d9c12b17 	ldw	r7,1196(sp)
    86f0:	dac12a17 	ldw	r11,1192(sp)
    86f4:	103fb11e 	bne	r2,zero,85bc <__alt_data_end+0xfe0085bc>
    86f8:	d9011b17 	ldw	r4,1132(sp)
    86fc:	d8811c17 	ldw	r2,1136(sp)
    8700:	d80b883a 	mov	r5,sp
    8704:	23800044 	addi	r14,r4,1
    8708:	003fd506 	br	8660 <__alt_data_end+0xfe008660>
    870c:	10005e1e 	bne	r2,zero,8888 <___vfiprintf_internal_r+0xf24>
    8710:	0009883a 	mov	r4,zero
    8714:	180d883a 	mov	r6,r3
    8718:	d821883a 	mov	r16,sp
    871c:	003db406 	br	7df0 <__alt_data_end+0xfe007df0>
    8720:	1000671e 	bne	r2,zero,88c0 <___vfiprintf_internal_r+0xf5c>
    8724:	0009883a 	mov	r4,zero
    8728:	01800044 	movi	r6,1
    872c:	d821883a 	mov	r16,sp
    8730:	003dbc06 	br	7e24 <__alt_data_end+0xfe007e24>
    8734:	d8c109c4 	addi	r3,sp,1063
    8738:	8808d0fa 	srli	r4,r17,3
    873c:	580a977a 	slli	r5,r11,29
    8740:	5816d0fa 	srli	r11,r11,3
    8744:	8c4001cc 	andi	r17,r17,7
    8748:	88800c04 	addi	r2,r17,48
    874c:	2922b03a 	or	r17,r5,r4
    8750:	18800005 	stb	r2,0(r3)
    8754:	8ac8b03a 	or	r4,r17,r11
    8758:	1827883a 	mov	r19,r3
    875c:	18ffffc4 	addi	r3,r3,-1
    8760:	203ff51e 	bne	r4,zero,8738 <__alt_data_end+0xfe008738>
    8764:	e100004c 	andi	r4,fp,1
    8768:	980b883a 	mov	r5,r19
    876c:	203f7b26 	beq	r4,zero,855c <__alt_data_end+0xfe00855c>
    8770:	10803fcc 	andi	r2,r2,255
    8774:	1080201c 	xori	r2,r2,128
    8778:	10bfe004 	addi	r2,r2,-128
    877c:	01000c04 	movi	r4,48
    8780:	113f7626 	beq	r2,r4,855c <__alt_data_end+0xfe00855c>
    8784:	da411f17 	ldw	r9,1148(sp)
    8788:	1827883a 	mov	r19,r3
    878c:	293fffc5 	stb	r4,-1(r5)
    8790:	48e5c83a 	sub	r18,r9,r3
    8794:	003d5706 	br	7cf4 <__alt_data_end+0xfe007cf4>
    8798:	dcc10a04 	addi	r19,sp,1064
    879c:	003d5506 	br	7cf4 <__alt_data_end+0xfe007cf4>
    87a0:	5800021e 	bne	r11,zero,87ac <___vfiprintf_internal_r+0xe48>
    87a4:	00800244 	movi	r2,9
    87a8:	14401b2e 	bgeu	r2,r17,8818 <___vfiprintf_internal_r+0xeb4>
    87ac:	dc012515 	stw	r16,1172(sp)
    87b0:	d88109c4 	addi	r2,sp,1063
    87b4:	5025883a 	mov	r18,r10
    87b8:	5821883a 	mov	r16,r11
    87bc:	8809883a 	mov	r4,r17
    87c0:	800b883a 	mov	r5,r16
    87c4:	01800284 	movi	r6,10
    87c8:	000f883a 	mov	r7,zero
    87cc:	1027883a 	mov	r19,r2
    87d0:	0009bc80 	call	9bc8 <__umoddi3>
    87d4:	10800c04 	addi	r2,r2,48
    87d8:	8809883a 	mov	r4,r17
    87dc:	800b883a 	mov	r5,r16
    87e0:	98800005 	stb	r2,0(r19)
    87e4:	01800284 	movi	r6,10
    87e8:	000f883a 	mov	r7,zero
    87ec:	00096040 	call	9604 <__udivdi3>
    87f0:	1821883a 	mov	r16,r3
    87f4:	10c6b03a 	or	r3,r2,r3
    87f8:	1023883a 	mov	r17,r2
    87fc:	98bfffc4 	addi	r2,r19,-1
    8800:	183fee1e 	bne	r3,zero,87bc <__alt_data_end+0xfe0087bc>
    8804:	da411f17 	ldw	r9,1148(sp)
    8808:	9015883a 	mov	r10,r18
    880c:	dc012517 	ldw	r16,1172(sp)
    8810:	4ce5c83a 	sub	r18,r9,r19
    8814:	003d3706 	br	7cf4 <__alt_data_end+0xfe007cf4>
    8818:	8c400c04 	addi	r17,r17,48
    881c:	dc4109c5 	stb	r17,1063(sp)
    8820:	dc812717 	ldw	r18,1180(sp)
    8824:	dcc109c4 	addi	r19,sp,1063
    8828:	003d3206 	br	7cf4 <__alt_data_end+0xfe007cf4>
    882c:	10007c1e 	bne	r2,zero,8a20 <___vfiprintf_internal_r+0x10bc>
    8830:	0009883a 	mov	r4,zero
    8834:	01800044 	movi	r6,1
    8838:	d821883a 	mov	r16,sp
    883c:	003f1806 	br	84a0 <__alt_data_end+0xfe0084a0>
    8840:	d9012117 	ldw	r4,1156(sp)
    8844:	d9412217 	ldw	r5,1160(sp)
    8848:	d9811a04 	addi	r6,sp,1128
    884c:	00078500 	call	7850 <__sprint_r.part.0>
    8850:	103f5a1e 	bne	r2,zero,85bc <__alt_data_end+0xfe0085bc>
    8854:	d8811c17 	ldw	r2,1136(sp)
    8858:	d821883a 	mov	r16,sp
    885c:	003da206 	br	7ee8 <__alt_data_end+0xfe007ee8>
    8860:	00800084 	movi	r2,2
    8864:	8ac8b03a 	or	r4,r17,r11
    8868:	003dd906 	br	7fd0 <__alt_data_end+0xfe007fd0>
    886c:	d9012117 	ldw	r4,1156(sp)
    8870:	d9412217 	ldw	r5,1160(sp)
    8874:	d9811a04 	addi	r6,sp,1128
    8878:	00078500 	call	7850 <__sprint_r.part.0>
    887c:	103f4f1e 	bne	r2,zero,85bc <__alt_data_end+0xfe0085bc>
    8880:	d821883a 	mov	r16,sp
    8884:	003cfb06 	br	7c74 <__alt_data_end+0xfe007c74>
    8888:	d9012117 	ldw	r4,1156(sp)
    888c:	d9412217 	ldw	r5,1160(sp)
    8890:	d9811a04 	addi	r6,sp,1128
    8894:	da812b15 	stw	r10,1196(sp)
    8898:	db812a15 	stw	r14,1192(sp)
    889c:	00078500 	call	7850 <__sprint_r.part.0>
    88a0:	da812b17 	ldw	r10,1196(sp)
    88a4:	db812a17 	ldw	r14,1192(sp)
    88a8:	103f441e 	bne	r2,zero,85bc <__alt_data_end+0xfe0085bc>
    88ac:	d9011b17 	ldw	r4,1132(sp)
    88b0:	d8811c17 	ldw	r2,1136(sp)
    88b4:	d821883a 	mov	r16,sp
    88b8:	21800044 	addi	r6,r4,1
    88bc:	003d4c06 	br	7df0 <__alt_data_end+0xfe007df0>
    88c0:	d9012117 	ldw	r4,1156(sp)
    88c4:	d9412217 	ldw	r5,1160(sp)
    88c8:	d9811a04 	addi	r6,sp,1128
    88cc:	da812b15 	stw	r10,1196(sp)
    88d0:	00078500 	call	7850 <__sprint_r.part.0>
    88d4:	da812b17 	ldw	r10,1196(sp)
    88d8:	103f381e 	bne	r2,zero,85bc <__alt_data_end+0xfe0085bc>
    88dc:	d9011b17 	ldw	r4,1132(sp)
    88e0:	d8811c17 	ldw	r2,1136(sp)
    88e4:	d821883a 	mov	r16,sp
    88e8:	21800044 	addi	r6,r4,1
    88ec:	003d4d06 	br	7e24 <__alt_data_end+0xfe007e24>
    88f0:	1000761e 	bne	r2,zero,8acc <___vfiprintf_internal_r+0x1168>
    88f4:	0009883a 	mov	r4,zero
    88f8:	01800044 	movi	r6,1
    88fc:	d821883a 	mov	r16,sp
    8900:	003d4a06 	br	7e2c <__alt_data_end+0xfe007e2c>
    8904:	d9012117 	ldw	r4,1156(sp)
    8908:	d9412217 	ldw	r5,1160(sp)
    890c:	d9811a04 	addi	r6,sp,1128
    8910:	00078500 	call	7850 <__sprint_r.part.0>
    8914:	103f291e 	bne	r2,zero,85bc <__alt_data_end+0xfe0085bc>
    8918:	d9811b17 	ldw	r6,1132(sp)
    891c:	d8811c17 	ldw	r2,1136(sp)
    8920:	d821883a 	mov	r16,sp
    8924:	31800044 	addi	r6,r6,1
    8928:	003d6506 	br	7ec0 <__alt_data_end+0xfe007ec0>
    892c:	a823883a 	mov	r17,r21
    8930:	003c5f06 	br	7ab0 <__alt_data_end+0xfe007ab0>
    8934:	0463c83a 	sub	r17,zero,r17
    8938:	8804c03a 	cmpne	r2,r17,zero
    893c:	02d7c83a 	sub	r11,zero,r11
    8940:	5897c83a 	sub	r11,r11,r2
    8944:	05800b44 	movi	r22,45
    8948:	dd811d85 	stb	r22,1142(sp)
    894c:	5025883a 	mov	r18,r10
    8950:	00800044 	movi	r2,1
    8954:	8ac8b03a 	or	r4,r17,r11
    8958:	003cd906 	br	7cc0 <__alt_data_end+0xfe007cc0>
    895c:	00800084 	movi	r2,2
    8960:	003d9b06 	br	7fd0 <__alt_data_end+0xfe007fd0>
    8964:	e080100c 	andi	r2,fp,64
    8968:	da412317 	ldw	r9,1164(sp)
    896c:	103de526 	beq	r2,zero,8104 <__alt_data_end+0xfe008104>
    8970:	4c40000b 	ldhu	r17,0(r9)
    8974:	003de406 	br	8108 <__alt_data_end+0xfe008108>
    8978:	e080100c 	andi	r2,fp,64
    897c:	da412317 	ldw	r9,1164(sp)
    8980:	103cc626 	beq	r2,zero,7c9c <__alt_data_end+0xfe007c9c>
    8984:	4c40000b 	ldhu	r17,0(r9)
    8988:	003cc506 	br	7ca0 <__alt_data_end+0xfe007ca0>
    898c:	a8c00007 	ldb	r3,0(r21)
    8990:	003c5406 	br	7ae4 <__alt_data_end+0xfe007ae4>
    8994:	e080040c 	andi	r2,fp,16
    8998:	1000091e 	bne	r2,zero,89c0 <___vfiprintf_internal_r+0x105c>
    899c:	e280100c 	andi	r10,fp,64
    89a0:	50000726 	beq	r10,zero,89c0 <___vfiprintf_internal_r+0x105c>
    89a4:	da412317 	ldw	r9,1164(sp)
    89a8:	48800017 	ldw	r2,0(r9)
    89ac:	4a400104 	addi	r9,r9,4
    89b0:	da412315 	stw	r9,1164(sp)
    89b4:	da412417 	ldw	r9,1168(sp)
    89b8:	1240000d 	sth	r9,0(r2)
    89bc:	003c2006 	br	7a40 <__alt_data_end+0xfe007a40>
    89c0:	da412317 	ldw	r9,1164(sp)
    89c4:	48800017 	ldw	r2,0(r9)
    89c8:	4a400104 	addi	r9,r9,4
    89cc:	da412315 	stw	r9,1164(sp)
    89d0:	da412417 	ldw	r9,1168(sp)
    89d4:	12400015 	stw	r9,0(r2)
    89d8:	003c1906 	br	7a40 <__alt_data_end+0xfe007a40>
    89dc:	e080100c 	andi	r2,fp,64
    89e0:	da412317 	ldw	r9,1164(sp)
    89e4:	10002026 	beq	r2,zero,8a68 <___vfiprintf_internal_r+0x1104>
    89e8:	4c40000b 	ldhu	r17,0(r9)
    89ec:	4a400104 	addi	r9,r9,4
    89f0:	0017883a 	mov	r11,zero
    89f4:	da412315 	stw	r9,1164(sp)
    89f8:	003e5b06 	br	8368 <__alt_data_end+0xfe008368>
    89fc:	e080100c 	andi	r2,fp,64
    8a00:	da412317 	ldw	r9,1164(sp)
    8a04:	103e8326 	beq	r2,zero,8414 <__alt_data_end+0xfe008414>
    8a08:	4c40000f 	ldh	r17,0(r9)
    8a0c:	4a400104 	addi	r9,r9,4
    8a10:	da412315 	stw	r9,1164(sp)
    8a14:	8817d7fa 	srai	r11,r17,31
    8a18:	5805883a 	mov	r2,r11
    8a1c:	003dd906 	br	8184 <__alt_data_end+0xfe008184>
    8a20:	d9012117 	ldw	r4,1156(sp)
    8a24:	d9412217 	ldw	r5,1160(sp)
    8a28:	d9811a04 	addi	r6,sp,1128
    8a2c:	da812b15 	stw	r10,1196(sp)
    8a30:	db812a15 	stw	r14,1192(sp)
    8a34:	00078500 	call	7850 <__sprint_r.part.0>
    8a38:	da812b17 	ldw	r10,1196(sp)
    8a3c:	db812a17 	ldw	r14,1192(sp)
    8a40:	103ede1e 	bne	r2,zero,85bc <__alt_data_end+0xfe0085bc>
    8a44:	d9011b17 	ldw	r4,1132(sp)
    8a48:	d8811c17 	ldw	r2,1136(sp)
    8a4c:	d821883a 	mov	r16,sp
    8a50:	21800044 	addi	r6,r4,1
    8a54:	003e9206 	br	84a0 <__alt_data_end+0xfe0084a0>
    8a58:	4823883a 	mov	r17,r9
    8a5c:	003d4e06 	br	7f98 <__alt_data_end+0xfe007f98>
    8a60:	5025883a 	mov	r18,r10
    8a64:	003e0b06 	br	8294 <__alt_data_end+0xfe008294>
    8a68:	4c400017 	ldw	r17,0(r9)
    8a6c:	4a400104 	addi	r9,r9,4
    8a70:	0017883a 	mov	r11,zero
    8a74:	da412315 	stw	r9,1164(sp)
    8a78:	003e3b06 	br	8368 <__alt_data_end+0xfe008368>
    8a7c:	d8811c17 	ldw	r2,1136(sp)
    8a80:	dcc12217 	ldw	r19,1160(sp)
    8a84:	103ece26 	beq	r2,zero,85c0 <__alt_data_end+0xfe0085c0>
    8a88:	d9012117 	ldw	r4,1156(sp)
    8a8c:	980b883a 	mov	r5,r19
    8a90:	d9811a04 	addi	r6,sp,1128
    8a94:	00078500 	call	7850 <__sprint_r.part.0>
    8a98:	003ec906 	br	85c0 <__alt_data_end+0xfe0085c0>
    8a9c:	ad400044 	addi	r21,r21,1
    8aa0:	e7000814 	ori	fp,fp,32
    8aa4:	10c00047 	ldb	r3,1(r2)
    8aa8:	003c0e06 	br	7ae4 <__alt_data_end+0xfe007ae4>
    8aac:	d8c12a15 	stw	r3,1192(sp)
    8ab0:	00008180 	call	818 <strlen>
    8ab4:	d8c12a17 	ldw	r3,1192(sp)
    8ab8:	1025883a 	mov	r18,r2
    8abc:	dd811d83 	ldbu	r22,1142(sp)
    8ac0:	d8c12315 	stw	r3,1164(sp)
    8ac4:	0015883a 	mov	r10,zero
    8ac8:	003c8a06 	br	7cf4 <__alt_data_end+0xfe007cf4>
    8acc:	d9012117 	ldw	r4,1156(sp)
    8ad0:	d9412217 	ldw	r5,1160(sp)
    8ad4:	d9811a04 	addi	r6,sp,1128
    8ad8:	da812b15 	stw	r10,1196(sp)
    8adc:	00078500 	call	7850 <__sprint_r.part.0>
    8ae0:	da812b17 	ldw	r10,1196(sp)
    8ae4:	103eb51e 	bne	r2,zero,85bc <__alt_data_end+0xfe0085bc>
    8ae8:	d9011b17 	ldw	r4,1132(sp)
    8aec:	d8811c17 	ldw	r2,1136(sp)
    8af0:	d821883a 	mov	r16,sp
    8af4:	21800044 	addi	r6,r4,1
    8af8:	003ccc06 	br	7e2c <__alt_data_end+0xfe007e2c>
    8afc:	d9011b17 	ldw	r4,1132(sp)
    8b00:	02400074 	movhi	r9,1
    8b04:	4a7c8d04 	addi	r9,r9,-3532
    8b08:	da412515 	stw	r9,1172(sp)
    8b0c:	21000044 	addi	r4,r4,1
    8b10:	003cab06 	br	7dc0 <__alt_data_end+0xfe007dc0>
    8b14:	00800184 	movi	r2,6
    8b18:	5019883a 	mov	r12,r10
    8b1c:	1280012e 	bgeu	r2,r10,8b24 <___vfiprintf_internal_r+0x11c0>
    8b20:	1019883a 	mov	r12,r2
    8b24:	6025883a 	mov	r18,r12
    8b28:	6023883a 	mov	r17,r12
    8b2c:	60001516 	blt	r12,zero,8b84 <___vfiprintf_internal_r+0x1220>
    8b30:	d8c12315 	stw	r3,1164(sp)
    8b34:	04c00074 	movhi	r19,1
    8b38:	9cfc2d04 	addi	r19,r19,-3916
    8b3c:	0015883a 	mov	r10,zero
    8b40:	003c7406 	br	7d14 <__alt_data_end+0xfe007d14>
    8b44:	d9411b17 	ldw	r5,1132(sp)
    8b48:	00c00074 	movhi	r3,1
    8b4c:	18fc8d04 	addi	r3,r3,-3532
    8b50:	d8c12515 	stw	r3,1172(sp)
    8b54:	29400044 	addi	r5,r5,1
    8b58:	003d0406 	br	7f6c <__alt_data_end+0xfe007f6c>
    8b5c:	5025883a 	mov	r18,r10
    8b60:	dd811d83 	ldbu	r22,1142(sp)
    8b64:	d8c12315 	stw	r3,1164(sp)
    8b68:	0015883a 	mov	r10,zero
    8b6c:	003c6106 	br	7cf4 <__alt_data_end+0xfe007cf4>
    8b70:	02400074 	movhi	r9,1
    8b74:	4a7c8904 	addi	r9,r9,-3548
    8b78:	301d883a 	mov	r14,r6
    8b7c:	da412515 	stw	r9,1172(sp)
    8b80:	003ec806 	br	86a4 <__alt_data_end+0xfe0086a4>
    8b84:	0023883a 	mov	r17,zero
    8b88:	003fe906 	br	8b30 <__alt_data_end+0xfe008b30>
    8b8c:	043fffc4 	movi	r16,-1
    8b90:	003d3b06 	br	8080 <__alt_data_end+0xfe008080>
    8b94:	d8812317 	ldw	r2,1164(sp)
    8b98:	a8c00043 	ldbu	r3,1(r21)
    8b9c:	482b883a 	mov	r21,r9
    8ba0:	12800017 	ldw	r10,0(r2)
    8ba4:	10800104 	addi	r2,r2,4
    8ba8:	d8812315 	stw	r2,1164(sp)
    8bac:	50000416 	blt	r10,zero,8bc0 <___vfiprintf_internal_r+0x125c>
    8bb0:	18c03fcc 	andi	r3,r3,255
    8bb4:	18c0201c 	xori	r3,r3,128
    8bb8:	18ffe004 	addi	r3,r3,-128
    8bbc:	003bc906 	br	7ae4 <__alt_data_end+0xfe007ae4>
    8bc0:	18c03fcc 	andi	r3,r3,255
    8bc4:	18c0201c 	xori	r3,r3,128
    8bc8:	02bfffc4 	movi	r10,-1
    8bcc:	18ffe004 	addi	r3,r3,-128
    8bd0:	003bc406 	br	7ae4 <__alt_data_end+0xfe007ae4>

00008bd4 <__vfiprintf_internal>:
    8bd4:	00800074 	movhi	r2,1
    8bd8:	10838a04 	addi	r2,r2,3624
    8bdc:	2007883a 	mov	r3,r4
    8be0:	11000017 	ldw	r4,0(r2)
    8be4:	2805883a 	mov	r2,r5
    8be8:	300f883a 	mov	r7,r6
    8bec:	180b883a 	mov	r5,r3
    8bf0:	100d883a 	mov	r6,r2
    8bf4:	00079641 	jmpi	7964 <___vfiprintf_internal_r>

00008bf8 <_write_r>:
    8bf8:	defffd04 	addi	sp,sp,-12
    8bfc:	dc400115 	stw	r17,4(sp)
    8c00:	dc000015 	stw	r16,0(sp)
    8c04:	2023883a 	mov	r17,r4
    8c08:	04000074 	movhi	r16,1
    8c0c:	840a5c04 	addi	r16,r16,10608
    8c10:	2809883a 	mov	r4,r5
    8c14:	300b883a 	mov	r5,r6
    8c18:	380d883a 	mov	r6,r7
    8c1c:	dfc00215 	stw	ra,8(sp)
    8c20:	80000015 	stw	zero,0(r16)
    8c24:	000d3a00 	call	d3a0 <write>
    8c28:	00ffffc4 	movi	r3,-1
    8c2c:	10c00526 	beq	r2,r3,8c44 <_write_r+0x4c>
    8c30:	dfc00217 	ldw	ra,8(sp)
    8c34:	dc400117 	ldw	r17,4(sp)
    8c38:	dc000017 	ldw	r16,0(sp)
    8c3c:	dec00304 	addi	sp,sp,12
    8c40:	f800283a 	ret
    8c44:	80c00017 	ldw	r3,0(r16)
    8c48:	183ff926 	beq	r3,zero,8c30 <__alt_data_end+0xfe008c30>
    8c4c:	88c00015 	stw	r3,0(r17)
    8c50:	dfc00217 	ldw	ra,8(sp)
    8c54:	dc400117 	ldw	r17,4(sp)
    8c58:	dc000017 	ldw	r16,0(sp)
    8c5c:	dec00304 	addi	sp,sp,12
    8c60:	f800283a 	ret

00008c64 <_close_r>:
    8c64:	defffd04 	addi	sp,sp,-12
    8c68:	dc400115 	stw	r17,4(sp)
    8c6c:	dc000015 	stw	r16,0(sp)
    8c70:	2023883a 	mov	r17,r4
    8c74:	04000074 	movhi	r16,1
    8c78:	840a5c04 	addi	r16,r16,10608
    8c7c:	2809883a 	mov	r4,r5
    8c80:	dfc00215 	stw	ra,8(sp)
    8c84:	80000015 	stw	zero,0(r16)
    8c88:	000c86c0 	call	c86c <close>
    8c8c:	00ffffc4 	movi	r3,-1
    8c90:	10c00526 	beq	r2,r3,8ca8 <_close_r+0x44>
    8c94:	dfc00217 	ldw	ra,8(sp)
    8c98:	dc400117 	ldw	r17,4(sp)
    8c9c:	dc000017 	ldw	r16,0(sp)
    8ca0:	dec00304 	addi	sp,sp,12
    8ca4:	f800283a 	ret
    8ca8:	80c00017 	ldw	r3,0(r16)
    8cac:	183ff926 	beq	r3,zero,8c94 <__alt_data_end+0xfe008c94>
    8cb0:	88c00015 	stw	r3,0(r17)
    8cb4:	dfc00217 	ldw	ra,8(sp)
    8cb8:	dc400117 	ldw	r17,4(sp)
    8cbc:	dc000017 	ldw	r16,0(sp)
    8cc0:	dec00304 	addi	sp,sp,12
    8cc4:	f800283a 	ret

00008cc8 <_calloc_r>:
    8cc8:	298b383a 	mul	r5,r5,r6
    8ccc:	defffe04 	addi	sp,sp,-8
    8cd0:	dc000015 	stw	r16,0(sp)
    8cd4:	dfc00115 	stw	ra,4(sp)
    8cd8:	00054c00 	call	54c0 <_malloc_r>
    8cdc:	1021883a 	mov	r16,r2
    8ce0:	10002826 	beq	r2,zero,8d84 <_calloc_r+0xbc>
    8ce4:	11bfff17 	ldw	r6,-4(r2)
    8ce8:	00ffff04 	movi	r3,-4
    8cec:	00800904 	movi	r2,36
    8cf0:	30cc703a 	and	r6,r6,r3
    8cf4:	30cd883a 	add	r6,r6,r3
    8cf8:	11801436 	bltu	r2,r6,8d4c <_calloc_r+0x84>
    8cfc:	00c004c4 	movi	r3,19
    8d00:	19800936 	bltu	r3,r6,8d28 <_calloc_r+0x60>
    8d04:	8005883a 	mov	r2,r16
    8d08:	10000015 	stw	zero,0(r2)
    8d0c:	10000115 	stw	zero,4(r2)
    8d10:	10000215 	stw	zero,8(r2)
    8d14:	8005883a 	mov	r2,r16
    8d18:	dfc00117 	ldw	ra,4(sp)
    8d1c:	dc000017 	ldw	r16,0(sp)
    8d20:	dec00204 	addi	sp,sp,8
    8d24:	f800283a 	ret
    8d28:	80000015 	stw	zero,0(r16)
    8d2c:	80000115 	stw	zero,4(r16)
    8d30:	00c006c4 	movi	r3,27
    8d34:	19800d2e 	bgeu	r3,r6,8d6c <_calloc_r+0xa4>
    8d38:	80000215 	stw	zero,8(r16)
    8d3c:	80000315 	stw	zero,12(r16)
    8d40:	30800c26 	beq	r6,r2,8d74 <_calloc_r+0xac>
    8d44:	80800404 	addi	r2,r16,16
    8d48:	003fef06 	br	8d08 <__alt_data_end+0xfe008d08>
    8d4c:	8009883a 	mov	r4,r16
    8d50:	000b883a 	mov	r5,zero
    8d54:	0005fb40 	call	5fb4 <memset>
    8d58:	8005883a 	mov	r2,r16
    8d5c:	dfc00117 	ldw	ra,4(sp)
    8d60:	dc000017 	ldw	r16,0(sp)
    8d64:	dec00204 	addi	sp,sp,8
    8d68:	f800283a 	ret
    8d6c:	80800204 	addi	r2,r16,8
    8d70:	003fe506 	br	8d08 <__alt_data_end+0xfe008d08>
    8d74:	80000415 	stw	zero,16(r16)
    8d78:	80800604 	addi	r2,r16,24
    8d7c:	80000515 	stw	zero,20(r16)
    8d80:	003fe106 	br	8d08 <__alt_data_end+0xfe008d08>
    8d84:	0005883a 	mov	r2,zero
    8d88:	003fe306 	br	8d18 <__alt_data_end+0xfe008d18>

00008d8c <_fclose_r>:
    8d8c:	defffc04 	addi	sp,sp,-16
    8d90:	dc000015 	stw	r16,0(sp)
    8d94:	dfc00315 	stw	ra,12(sp)
    8d98:	dc800215 	stw	r18,8(sp)
    8d9c:	dc400115 	stw	r17,4(sp)
    8da0:	2821883a 	mov	r16,r5
    8da4:	28003126 	beq	r5,zero,8e6c <_fclose_r+0xe0>
    8da8:	2023883a 	mov	r17,r4
    8dac:	00047e00 	call	47e0 <__sfp_lock_acquire>
    8db0:	88000226 	beq	r17,zero,8dbc <_fclose_r+0x30>
    8db4:	88800e17 	ldw	r2,56(r17)
    8db8:	10003326 	beq	r2,zero,8e88 <_fclose_r+0xfc>
    8dbc:	8080030f 	ldh	r2,12(r16)
    8dc0:	10002226 	beq	r2,zero,8e4c <_fclose_r+0xc0>
    8dc4:	8809883a 	mov	r4,r17
    8dc8:	800b883a 	mov	r5,r16
    8dcc:	000421c0 	call	421c <_fflush_r>
    8dd0:	80c00b17 	ldw	r3,44(r16)
    8dd4:	1025883a 	mov	r18,r2
    8dd8:	18000426 	beq	r3,zero,8dec <_fclose_r+0x60>
    8ddc:	81400717 	ldw	r5,28(r16)
    8de0:	8809883a 	mov	r4,r17
    8de4:	183ee83a 	callr	r3
    8de8:	10003016 	blt	r2,zero,8eac <_fclose_r+0x120>
    8dec:	8080030b 	ldhu	r2,12(r16)
    8df0:	1080200c 	andi	r2,r2,128
    8df4:	1000291e 	bne	r2,zero,8e9c <_fclose_r+0x110>
    8df8:	81400c17 	ldw	r5,48(r16)
    8dfc:	28000526 	beq	r5,zero,8e14 <_fclose_r+0x88>
    8e00:	80801004 	addi	r2,r16,64
    8e04:	28800226 	beq	r5,r2,8e10 <_fclose_r+0x84>
    8e08:	8809883a 	mov	r4,r17
    8e0c:	000495c0 	call	495c <_free_r>
    8e10:	80000c15 	stw	zero,48(r16)
    8e14:	81401117 	ldw	r5,68(r16)
    8e18:	28000326 	beq	r5,zero,8e28 <_fclose_r+0x9c>
    8e1c:	8809883a 	mov	r4,r17
    8e20:	000495c0 	call	495c <_free_r>
    8e24:	80001115 	stw	zero,68(r16)
    8e28:	8000030d 	sth	zero,12(r16)
    8e2c:	00047e40 	call	47e4 <__sfp_lock_release>
    8e30:	9005883a 	mov	r2,r18
    8e34:	dfc00317 	ldw	ra,12(sp)
    8e38:	dc800217 	ldw	r18,8(sp)
    8e3c:	dc400117 	ldw	r17,4(sp)
    8e40:	dc000017 	ldw	r16,0(sp)
    8e44:	dec00404 	addi	sp,sp,16
    8e48:	f800283a 	ret
    8e4c:	00047e40 	call	47e4 <__sfp_lock_release>
    8e50:	0005883a 	mov	r2,zero
    8e54:	dfc00317 	ldw	ra,12(sp)
    8e58:	dc800217 	ldw	r18,8(sp)
    8e5c:	dc400117 	ldw	r17,4(sp)
    8e60:	dc000017 	ldw	r16,0(sp)
    8e64:	dec00404 	addi	sp,sp,16
    8e68:	f800283a 	ret
    8e6c:	0005883a 	mov	r2,zero
    8e70:	dfc00317 	ldw	ra,12(sp)
    8e74:	dc800217 	ldw	r18,8(sp)
    8e78:	dc400117 	ldw	r17,4(sp)
    8e7c:	dc000017 	ldw	r16,0(sp)
    8e80:	dec00404 	addi	sp,sp,16
    8e84:	f800283a 	ret
    8e88:	8809883a 	mov	r4,r17
    8e8c:	00045280 	call	4528 <__sinit>
    8e90:	8080030f 	ldh	r2,12(r16)
    8e94:	103fcb1e 	bne	r2,zero,8dc4 <__alt_data_end+0xfe008dc4>
    8e98:	003fec06 	br	8e4c <__alt_data_end+0xfe008e4c>
    8e9c:	81400417 	ldw	r5,16(r16)
    8ea0:	8809883a 	mov	r4,r17
    8ea4:	000495c0 	call	495c <_free_r>
    8ea8:	003fd306 	br	8df8 <__alt_data_end+0xfe008df8>
    8eac:	04bfffc4 	movi	r18,-1
    8eb0:	003fce06 	br	8dec <__alt_data_end+0xfe008dec>

00008eb4 <fclose>:
    8eb4:	00800074 	movhi	r2,1
    8eb8:	10838a04 	addi	r2,r2,3624
    8ebc:	200b883a 	mov	r5,r4
    8ec0:	11000017 	ldw	r4,0(r2)
    8ec4:	0008d8c1 	jmpi	8d8c <_fclose_r>

00008ec8 <_fputwc_r>:
    8ec8:	3080030b 	ldhu	r2,12(r6)
    8ecc:	defff804 	addi	sp,sp,-32
    8ed0:	dcc00415 	stw	r19,16(sp)
    8ed4:	dc800315 	stw	r18,12(sp)
    8ed8:	dc000115 	stw	r16,4(sp)
    8edc:	dfc00715 	stw	ra,28(sp)
    8ee0:	dd400615 	stw	r21,24(sp)
    8ee4:	dd000515 	stw	r20,20(sp)
    8ee8:	dc400215 	stw	r17,8(sp)
    8eec:	10c8000c 	andi	r3,r2,8192
    8ef0:	3021883a 	mov	r16,r6
    8ef4:	2027883a 	mov	r19,r4
    8ef8:	2825883a 	mov	r18,r5
    8efc:	1800051e 	bne	r3,zero,8f14 <_fputwc_r+0x4c>
    8f00:	30c01917 	ldw	r3,100(r6)
    8f04:	10880014 	ori	r2,r2,8192
    8f08:	3080030d 	sth	r2,12(r6)
    8f0c:	18880014 	ori	r2,r3,8192
    8f10:	30801915 	stw	r2,100(r6)
    8f14:	00052b40 	call	52b4 <__locale_mb_cur_max>
    8f18:	00c00044 	movi	r3,1
    8f1c:	10c03e26 	beq	r2,r3,9018 <_fputwc_r+0x150>
    8f20:	9809883a 	mov	r4,r19
    8f24:	d80b883a 	mov	r5,sp
    8f28:	900d883a 	mov	r6,r18
    8f2c:	81c01704 	addi	r7,r16,92
    8f30:	00094040 	call	9404 <_wcrtomb_r>
    8f34:	1029883a 	mov	r20,r2
    8f38:	00bfffc4 	movi	r2,-1
    8f3c:	a0802026 	beq	r20,r2,8fc0 <_fputwc_r+0xf8>
    8f40:	d9400003 	ldbu	r5,0(sp)
    8f44:	a0001c26 	beq	r20,zero,8fb8 <_fputwc_r+0xf0>
    8f48:	0023883a 	mov	r17,zero
    8f4c:	05400284 	movi	r21,10
    8f50:	00000906 	br	8f78 <_fputwc_r+0xb0>
    8f54:	80c00017 	ldw	r3,0(r16)
    8f58:	19400005 	stb	r5,0(r3)
    8f5c:	80c00017 	ldw	r3,0(r16)
    8f60:	18c00044 	addi	r3,r3,1
    8f64:	80c00015 	stw	r3,0(r16)
    8f68:	8c400044 	addi	r17,r17,1
    8f6c:	dc47883a 	add	r3,sp,r17
    8f70:	8d00112e 	bgeu	r17,r20,8fb8 <_fputwc_r+0xf0>
    8f74:	19400003 	ldbu	r5,0(r3)
    8f78:	80c00217 	ldw	r3,8(r16)
    8f7c:	18ffffc4 	addi	r3,r3,-1
    8f80:	80c00215 	stw	r3,8(r16)
    8f84:	183ff30e 	bge	r3,zero,8f54 <__alt_data_end+0xfe008f54>
    8f88:	80800617 	ldw	r2,24(r16)
    8f8c:	18801916 	blt	r3,r2,8ff4 <_fputwc_r+0x12c>
    8f90:	80800017 	ldw	r2,0(r16)
    8f94:	11400005 	stb	r5,0(r2)
    8f98:	80800017 	ldw	r2,0(r16)
    8f9c:	10c00003 	ldbu	r3,0(r2)
    8fa0:	10800044 	addi	r2,r2,1
    8fa4:	1d402326 	beq	r3,r21,9034 <_fputwc_r+0x16c>
    8fa8:	8c400044 	addi	r17,r17,1
    8fac:	80800015 	stw	r2,0(r16)
    8fb0:	dc47883a 	add	r3,sp,r17
    8fb4:	8d3fef36 	bltu	r17,r20,8f74 <__alt_data_end+0xfe008f74>
    8fb8:	9005883a 	mov	r2,r18
    8fbc:	00000406 	br	8fd0 <_fputwc_r+0x108>
    8fc0:	80c0030b 	ldhu	r3,12(r16)
    8fc4:	a005883a 	mov	r2,r20
    8fc8:	18c01014 	ori	r3,r3,64
    8fcc:	80c0030d 	sth	r3,12(r16)
    8fd0:	dfc00717 	ldw	ra,28(sp)
    8fd4:	dd400617 	ldw	r21,24(sp)
    8fd8:	dd000517 	ldw	r20,20(sp)
    8fdc:	dcc00417 	ldw	r19,16(sp)
    8fe0:	dc800317 	ldw	r18,12(sp)
    8fe4:	dc400217 	ldw	r17,8(sp)
    8fe8:	dc000117 	ldw	r16,4(sp)
    8fec:	dec00804 	addi	sp,sp,32
    8ff0:	f800283a 	ret
    8ff4:	9809883a 	mov	r4,r19
    8ff8:	29403fcc 	andi	r5,r5,255
    8ffc:	800d883a 	mov	r6,r16
    9000:	00092680 	call	9268 <__swbuf_r>
    9004:	10bfffe0 	cmpeqi	r2,r2,-1
    9008:	10803fcc 	andi	r2,r2,255
    900c:	103fd626 	beq	r2,zero,8f68 <__alt_data_end+0xfe008f68>
    9010:	00bfffc4 	movi	r2,-1
    9014:	003fee06 	br	8fd0 <__alt_data_end+0xfe008fd0>
    9018:	90ffffc4 	addi	r3,r18,-1
    901c:	01003f84 	movi	r4,254
    9020:	20ffbf36 	bltu	r4,r3,8f20 <__alt_data_end+0xfe008f20>
    9024:	900b883a 	mov	r5,r18
    9028:	dc800005 	stb	r18,0(sp)
    902c:	1029883a 	mov	r20,r2
    9030:	003fc506 	br	8f48 <__alt_data_end+0xfe008f48>
    9034:	9809883a 	mov	r4,r19
    9038:	a80b883a 	mov	r5,r21
    903c:	800d883a 	mov	r6,r16
    9040:	00092680 	call	9268 <__swbuf_r>
    9044:	10bfffe0 	cmpeqi	r2,r2,-1
    9048:	003fef06 	br	9008 <__alt_data_end+0xfe009008>

0000904c <fputwc>:
    904c:	defffc04 	addi	sp,sp,-16
    9050:	dc000115 	stw	r16,4(sp)
    9054:	04000074 	movhi	r16,1
    9058:	84038a04 	addi	r16,r16,3624
    905c:	80800017 	ldw	r2,0(r16)
    9060:	dc400215 	stw	r17,8(sp)
    9064:	dfc00315 	stw	ra,12(sp)
    9068:	2023883a 	mov	r17,r4
    906c:	280d883a 	mov	r6,r5
    9070:	10000d26 	beq	r2,zero,90a8 <fputwc+0x5c>
    9074:	10c00e17 	ldw	r3,56(r2)
    9078:	1009883a 	mov	r4,r2
    907c:	1800041e 	bne	r3,zero,9090 <fputwc+0x44>
    9080:	d9400015 	stw	r5,0(sp)
    9084:	00045280 	call	4528 <__sinit>
    9088:	81000017 	ldw	r4,0(r16)
    908c:	d9800017 	ldw	r6,0(sp)
    9090:	880b883a 	mov	r5,r17
    9094:	dfc00317 	ldw	ra,12(sp)
    9098:	dc400217 	ldw	r17,8(sp)
    909c:	dc000117 	ldw	r16,4(sp)
    90a0:	dec00404 	addi	sp,sp,16
    90a4:	0008ec81 	jmpi	8ec8 <_fputwc_r>
    90a8:	0009883a 	mov	r4,zero
    90ac:	880b883a 	mov	r5,r17
    90b0:	dfc00317 	ldw	ra,12(sp)
    90b4:	dc400217 	ldw	r17,8(sp)
    90b8:	dc000117 	ldw	r16,4(sp)
    90bc:	dec00404 	addi	sp,sp,16
    90c0:	0008ec81 	jmpi	8ec8 <_fputwc_r>

000090c4 <_fstat_r>:
    90c4:	defffd04 	addi	sp,sp,-12
    90c8:	dc400115 	stw	r17,4(sp)
    90cc:	dc000015 	stw	r16,0(sp)
    90d0:	2023883a 	mov	r17,r4
    90d4:	04000074 	movhi	r16,1
    90d8:	840a5c04 	addi	r16,r16,10608
    90dc:	2809883a 	mov	r4,r5
    90e0:	300b883a 	mov	r5,r6
    90e4:	dfc00215 	stw	ra,8(sp)
    90e8:	80000015 	stw	zero,0(r16)
    90ec:	000c9b00 	call	c9b0 <fstat>
    90f0:	00ffffc4 	movi	r3,-1
    90f4:	10c00526 	beq	r2,r3,910c <_fstat_r+0x48>
    90f8:	dfc00217 	ldw	ra,8(sp)
    90fc:	dc400117 	ldw	r17,4(sp)
    9100:	dc000017 	ldw	r16,0(sp)
    9104:	dec00304 	addi	sp,sp,12
    9108:	f800283a 	ret
    910c:	80c00017 	ldw	r3,0(r16)
    9110:	183ff926 	beq	r3,zero,90f8 <__alt_data_end+0xfe0090f8>
    9114:	88c00015 	stw	r3,0(r17)
    9118:	dfc00217 	ldw	ra,8(sp)
    911c:	dc400117 	ldw	r17,4(sp)
    9120:	dc000017 	ldw	r16,0(sp)
    9124:	dec00304 	addi	sp,sp,12
    9128:	f800283a 	ret

0000912c <_isatty_r>:
    912c:	defffd04 	addi	sp,sp,-12
    9130:	dc400115 	stw	r17,4(sp)
    9134:	dc000015 	stw	r16,0(sp)
    9138:	2023883a 	mov	r17,r4
    913c:	04000074 	movhi	r16,1
    9140:	840a5c04 	addi	r16,r16,10608
    9144:	2809883a 	mov	r4,r5
    9148:	dfc00215 	stw	ra,8(sp)
    914c:	80000015 	stw	zero,0(r16)
    9150:	000cd740 	call	cd74 <isatty>
    9154:	00ffffc4 	movi	r3,-1
    9158:	10c00526 	beq	r2,r3,9170 <_isatty_r+0x44>
    915c:	dfc00217 	ldw	ra,8(sp)
    9160:	dc400117 	ldw	r17,4(sp)
    9164:	dc000017 	ldw	r16,0(sp)
    9168:	dec00304 	addi	sp,sp,12
    916c:	f800283a 	ret
    9170:	80c00017 	ldw	r3,0(r16)
    9174:	183ff926 	beq	r3,zero,915c <__alt_data_end+0xfe00915c>
    9178:	88c00015 	stw	r3,0(r17)
    917c:	dfc00217 	ldw	ra,8(sp)
    9180:	dc400117 	ldw	r17,4(sp)
    9184:	dc000017 	ldw	r16,0(sp)
    9188:	dec00304 	addi	sp,sp,12
    918c:	f800283a 	ret

00009190 <_lseek_r>:
    9190:	defffd04 	addi	sp,sp,-12
    9194:	dc400115 	stw	r17,4(sp)
    9198:	dc000015 	stw	r16,0(sp)
    919c:	2023883a 	mov	r17,r4
    91a0:	04000074 	movhi	r16,1
    91a4:	840a5c04 	addi	r16,r16,10608
    91a8:	2809883a 	mov	r4,r5
    91ac:	300b883a 	mov	r5,r6
    91b0:	380d883a 	mov	r6,r7
    91b4:	dfc00215 	stw	ra,8(sp)
    91b8:	80000015 	stw	zero,0(r16)
    91bc:	000cf480 	call	cf48 <lseek>
    91c0:	00ffffc4 	movi	r3,-1
    91c4:	10c00526 	beq	r2,r3,91dc <_lseek_r+0x4c>
    91c8:	dfc00217 	ldw	ra,8(sp)
    91cc:	dc400117 	ldw	r17,4(sp)
    91d0:	dc000017 	ldw	r16,0(sp)
    91d4:	dec00304 	addi	sp,sp,12
    91d8:	f800283a 	ret
    91dc:	80c00017 	ldw	r3,0(r16)
    91e0:	183ff926 	beq	r3,zero,91c8 <__alt_data_end+0xfe0091c8>
    91e4:	88c00015 	stw	r3,0(r17)
    91e8:	dfc00217 	ldw	ra,8(sp)
    91ec:	dc400117 	ldw	r17,4(sp)
    91f0:	dc000017 	ldw	r16,0(sp)
    91f4:	dec00304 	addi	sp,sp,12
    91f8:	f800283a 	ret

000091fc <_read_r>:
    91fc:	defffd04 	addi	sp,sp,-12
    9200:	dc400115 	stw	r17,4(sp)
    9204:	dc000015 	stw	r16,0(sp)
    9208:	2023883a 	mov	r17,r4
    920c:	04000074 	movhi	r16,1
    9210:	840a5c04 	addi	r16,r16,10608
    9214:	2809883a 	mov	r4,r5
    9218:	300b883a 	mov	r5,r6
    921c:	380d883a 	mov	r6,r7
    9220:	dfc00215 	stw	ra,8(sp)
    9224:	80000015 	stw	zero,0(r16)
    9228:	000d1200 	call	d120 <read>
    922c:	00ffffc4 	movi	r3,-1
    9230:	10c00526 	beq	r2,r3,9248 <_read_r+0x4c>
    9234:	dfc00217 	ldw	ra,8(sp)
    9238:	dc400117 	ldw	r17,4(sp)
    923c:	dc000017 	ldw	r16,0(sp)
    9240:	dec00304 	addi	sp,sp,12
    9244:	f800283a 	ret
    9248:	80c00017 	ldw	r3,0(r16)
    924c:	183ff926 	beq	r3,zero,9234 <__alt_data_end+0xfe009234>
    9250:	88c00015 	stw	r3,0(r17)
    9254:	dfc00217 	ldw	ra,8(sp)
    9258:	dc400117 	ldw	r17,4(sp)
    925c:	dc000017 	ldw	r16,0(sp)
    9260:	dec00304 	addi	sp,sp,12
    9264:	f800283a 	ret

00009268 <__swbuf_r>:
    9268:	defffc04 	addi	sp,sp,-16
    926c:	dc800215 	stw	r18,8(sp)
    9270:	dc400115 	stw	r17,4(sp)
    9274:	dc000015 	stw	r16,0(sp)
    9278:	dfc00315 	stw	ra,12(sp)
    927c:	2023883a 	mov	r17,r4
    9280:	2825883a 	mov	r18,r5
    9284:	3021883a 	mov	r16,r6
    9288:	20000226 	beq	r4,zero,9294 <__swbuf_r+0x2c>
    928c:	20800e17 	ldw	r2,56(r4)
    9290:	10004d26 	beq	r2,zero,93c8 <__swbuf_r+0x160>
    9294:	80800617 	ldw	r2,24(r16)
    9298:	80c0030b 	ldhu	r3,12(r16)
    929c:	80800215 	stw	r2,8(r16)
    92a0:	1880020c 	andi	r2,r3,8
    92a4:	10004126 	beq	r2,zero,93ac <__swbuf_r+0x144>
    92a8:	80800417 	ldw	r2,16(r16)
    92ac:	10003f26 	beq	r2,zero,93ac <__swbuf_r+0x144>
    92b0:	1908000c 	andi	r4,r3,8192
    92b4:	94803fcc 	andi	r18,r18,255
    92b8:	20001726 	beq	r4,zero,9318 <__swbuf_r+0xb0>
    92bc:	80c00017 	ldw	r3,0(r16)
    92c0:	81000517 	ldw	r4,20(r16)
    92c4:	1885c83a 	sub	r2,r3,r2
    92c8:	11001d0e 	bge	r2,r4,9340 <__swbuf_r+0xd8>
    92cc:	81000217 	ldw	r4,8(r16)
    92d0:	19400044 	addi	r5,r3,1
    92d4:	81400015 	stw	r5,0(r16)
    92d8:	213fffc4 	addi	r4,r4,-1
    92dc:	81000215 	stw	r4,8(r16)
    92e0:	1c800005 	stb	r18,0(r3)
    92e4:	80c00517 	ldw	r3,20(r16)
    92e8:	10800044 	addi	r2,r2,1
    92ec:	18802226 	beq	r3,r2,9378 <__swbuf_r+0x110>
    92f0:	8080030b 	ldhu	r2,12(r16)
    92f4:	1080004c 	andi	r2,r2,1
    92f8:	1000251e 	bne	r2,zero,9390 <__swbuf_r+0x128>
    92fc:	9005883a 	mov	r2,r18
    9300:	dfc00317 	ldw	ra,12(sp)
    9304:	dc800217 	ldw	r18,8(sp)
    9308:	dc400117 	ldw	r17,4(sp)
    930c:	dc000017 	ldw	r16,0(sp)
    9310:	dec00404 	addi	sp,sp,16
    9314:	f800283a 	ret
    9318:	81401917 	ldw	r5,100(r16)
    931c:	18c80014 	ori	r3,r3,8192
    9320:	0137ffc4 	movi	r4,-8193
    9324:	2908703a 	and	r4,r5,r4
    9328:	80c0030d 	sth	r3,12(r16)
    932c:	80c00017 	ldw	r3,0(r16)
    9330:	81001915 	stw	r4,100(r16)
    9334:	81000517 	ldw	r4,20(r16)
    9338:	1885c83a 	sub	r2,r3,r2
    933c:	113fe316 	blt	r2,r4,92cc <__alt_data_end+0xfe0092cc>
    9340:	8809883a 	mov	r4,r17
    9344:	800b883a 	mov	r5,r16
    9348:	000421c0 	call	421c <_fflush_r>
    934c:	10000e1e 	bne	r2,zero,9388 <__swbuf_r+0x120>
    9350:	80c00017 	ldw	r3,0(r16)
    9354:	81000217 	ldw	r4,8(r16)
    9358:	00800044 	movi	r2,1
    935c:	19400044 	addi	r5,r3,1
    9360:	213fffc4 	addi	r4,r4,-1
    9364:	81400015 	stw	r5,0(r16)
    9368:	81000215 	stw	r4,8(r16)
    936c:	1c800005 	stb	r18,0(r3)
    9370:	80c00517 	ldw	r3,20(r16)
    9374:	18bfde1e 	bne	r3,r2,92f0 <__alt_data_end+0xfe0092f0>
    9378:	8809883a 	mov	r4,r17
    937c:	800b883a 	mov	r5,r16
    9380:	000421c0 	call	421c <_fflush_r>
    9384:	103fdd26 	beq	r2,zero,92fc <__alt_data_end+0xfe0092fc>
    9388:	00bfffc4 	movi	r2,-1
    938c:	003fdc06 	br	9300 <__alt_data_end+0xfe009300>
    9390:	00800284 	movi	r2,10
    9394:	90bfd91e 	bne	r18,r2,92fc <__alt_data_end+0xfe0092fc>
    9398:	8809883a 	mov	r4,r17
    939c:	800b883a 	mov	r5,r16
    93a0:	000421c0 	call	421c <_fflush_r>
    93a4:	103fd526 	beq	r2,zero,92fc <__alt_data_end+0xfe0092fc>
    93a8:	003ff706 	br	9388 <__alt_data_end+0xfe009388>
    93ac:	8809883a 	mov	r4,r17
    93b0:	800b883a 	mov	r5,r16
    93b4:	00028a40 	call	28a4 <__swsetup_r>
    93b8:	80c0030b 	ldhu	r3,12(r16)
    93bc:	1000041e 	bne	r2,zero,93d0 <__swbuf_r+0x168>
    93c0:	80800417 	ldw	r2,16(r16)
    93c4:	003fba06 	br	92b0 <__alt_data_end+0xfe0092b0>
    93c8:	00045280 	call	4528 <__sinit>
    93cc:	003fb106 	br	9294 <__alt_data_end+0xfe009294>
    93d0:	18c01014 	ori	r3,r3,64
    93d4:	80c0030d 	sth	r3,12(r16)
    93d8:	00c00244 	movi	r3,9
    93dc:	00bfffc4 	movi	r2,-1
    93e0:	88c00015 	stw	r3,0(r17)
    93e4:	003fc606 	br	9300 <__alt_data_end+0xfe009300>

000093e8 <__swbuf>:
    93e8:	00c00074 	movhi	r3,1
    93ec:	18c38a04 	addi	r3,r3,3624
    93f0:	2005883a 	mov	r2,r4
    93f4:	19000017 	ldw	r4,0(r3)
    93f8:	280d883a 	mov	r6,r5
    93fc:	100b883a 	mov	r5,r2
    9400:	00092681 	jmpi	9268 <__swbuf_r>

00009404 <_wcrtomb_r>:
    9404:	defff604 	addi	sp,sp,-40
    9408:	dc800815 	stw	r18,32(sp)
    940c:	dc400715 	stw	r17,28(sp)
    9410:	dc000615 	stw	r16,24(sp)
    9414:	00800074 	movhi	r2,1
    9418:	10838e04 	addi	r2,r2,3640
    941c:	dfc00915 	stw	ra,36(sp)
    9420:	2021883a 	mov	r16,r4
    9424:	3823883a 	mov	r17,r7
    9428:	14800017 	ldw	r18,0(r2)
    942c:	28001426 	beq	r5,zero,9480 <_wcrtomb_r+0x7c>
    9430:	d9400415 	stw	r5,16(sp)
    9434:	d9800515 	stw	r6,20(sp)
    9438:	00052a80 	call	52a8 <__locale_charset>
    943c:	d9400417 	ldw	r5,16(sp)
    9440:	d9800517 	ldw	r6,20(sp)
    9444:	8009883a 	mov	r4,r16
    9448:	dc400015 	stw	r17,0(sp)
    944c:	100f883a 	mov	r7,r2
    9450:	903ee83a 	callr	r18
    9454:	00ffffc4 	movi	r3,-1
    9458:	10c0031e 	bne	r2,r3,9468 <_wcrtomb_r+0x64>
    945c:	88000015 	stw	zero,0(r17)
    9460:	00c02284 	movi	r3,138
    9464:	80c00015 	stw	r3,0(r16)
    9468:	dfc00917 	ldw	ra,36(sp)
    946c:	dc800817 	ldw	r18,32(sp)
    9470:	dc400717 	ldw	r17,28(sp)
    9474:	dc000617 	ldw	r16,24(sp)
    9478:	dec00a04 	addi	sp,sp,40
    947c:	f800283a 	ret
    9480:	00052a80 	call	52a8 <__locale_charset>
    9484:	8009883a 	mov	r4,r16
    9488:	dc400015 	stw	r17,0(sp)
    948c:	d9400104 	addi	r5,sp,4
    9490:	000d883a 	mov	r6,zero
    9494:	100f883a 	mov	r7,r2
    9498:	903ee83a 	callr	r18
    949c:	003fed06 	br	9454 <__alt_data_end+0xfe009454>

000094a0 <wcrtomb>:
    94a0:	defff504 	addi	sp,sp,-44
    94a4:	dc400515 	stw	r17,20(sp)
    94a8:	dc000415 	stw	r16,16(sp)
    94ac:	dfc00a15 	stw	ra,40(sp)
    94b0:	dd400915 	stw	r21,36(sp)
    94b4:	dd000815 	stw	r20,32(sp)
    94b8:	dcc00715 	stw	r19,28(sp)
    94bc:	dc800615 	stw	r18,24(sp)
    94c0:	2021883a 	mov	r16,r4
    94c4:	3023883a 	mov	r17,r6
    94c8:	20001d26 	beq	r4,zero,9540 <wcrtomb+0xa0>
    94cc:	04800074 	movhi	r18,1
    94d0:	94838a04 	addi	r18,r18,3624
    94d4:	95400017 	ldw	r21,0(r18)
    94d8:	00800074 	movhi	r2,1
    94dc:	10838e04 	addi	r2,r2,3640
    94e0:	15000017 	ldw	r20,0(r2)
    94e4:	2827883a 	mov	r19,r5
    94e8:	00052a80 	call	52a8 <__locale_charset>
    94ec:	a809883a 	mov	r4,r21
    94f0:	dc400015 	stw	r17,0(sp)
    94f4:	800b883a 	mov	r5,r16
    94f8:	980d883a 	mov	r6,r19
    94fc:	100f883a 	mov	r7,r2
    9500:	a03ee83a 	callr	r20
    9504:	00ffffc4 	movi	r3,-1
    9508:	10c0041e 	bne	r2,r3,951c <wcrtomb+0x7c>
    950c:	90c00017 	ldw	r3,0(r18)
    9510:	01002284 	movi	r4,138
    9514:	88000015 	stw	zero,0(r17)
    9518:	19000015 	stw	r4,0(r3)
    951c:	dfc00a17 	ldw	ra,40(sp)
    9520:	dd400917 	ldw	r21,36(sp)
    9524:	dd000817 	ldw	r20,32(sp)
    9528:	dcc00717 	ldw	r19,28(sp)
    952c:	dc800617 	ldw	r18,24(sp)
    9530:	dc400517 	ldw	r17,20(sp)
    9534:	dc000417 	ldw	r16,16(sp)
    9538:	dec00b04 	addi	sp,sp,44
    953c:	f800283a 	ret
    9540:	04800074 	movhi	r18,1
    9544:	94838a04 	addi	r18,r18,3624
    9548:	94c00017 	ldw	r19,0(r18)
    954c:	00800074 	movhi	r2,1
    9550:	10838e04 	addi	r2,r2,3640
    9554:	14000017 	ldw	r16,0(r2)
    9558:	00052a80 	call	52a8 <__locale_charset>
    955c:	9809883a 	mov	r4,r19
    9560:	dc400015 	stw	r17,0(sp)
    9564:	d9400104 	addi	r5,sp,4
    9568:	000d883a 	mov	r6,zero
    956c:	100f883a 	mov	r7,r2
    9570:	803ee83a 	callr	r16
    9574:	003fe306 	br	9504 <__alt_data_end+0xfe009504>

00009578 <__ascii_wctomb>:
    9578:	28000526 	beq	r5,zero,9590 <__ascii_wctomb+0x18>
    957c:	00803fc4 	movi	r2,255
    9580:	11800536 	bltu	r2,r6,9598 <__ascii_wctomb+0x20>
    9584:	29800005 	stb	r6,0(r5)
    9588:	00800044 	movi	r2,1
    958c:	f800283a 	ret
    9590:	0005883a 	mov	r2,zero
    9594:	f800283a 	ret
    9598:	00802284 	movi	r2,138
    959c:	20800015 	stw	r2,0(r4)
    95a0:	00bfffc4 	movi	r2,-1
    95a4:	f800283a 	ret

000095a8 <_wctomb_r>:
    95a8:	defff904 	addi	sp,sp,-28
    95ac:	00800074 	movhi	r2,1
    95b0:	10838e04 	addi	r2,r2,3640
    95b4:	dfc00615 	stw	ra,24(sp)
    95b8:	dc400515 	stw	r17,20(sp)
    95bc:	dc000415 	stw	r16,16(sp)
    95c0:	3823883a 	mov	r17,r7
    95c4:	14000017 	ldw	r16,0(r2)
    95c8:	d9000115 	stw	r4,4(sp)
    95cc:	d9400215 	stw	r5,8(sp)
    95d0:	d9800315 	stw	r6,12(sp)
    95d4:	00052a80 	call	52a8 <__locale_charset>
    95d8:	d9000117 	ldw	r4,4(sp)
    95dc:	d9400217 	ldw	r5,8(sp)
    95e0:	d9800317 	ldw	r6,12(sp)
    95e4:	dc400015 	stw	r17,0(sp)
    95e8:	100f883a 	mov	r7,r2
    95ec:	803ee83a 	callr	r16
    95f0:	dfc00617 	ldw	ra,24(sp)
    95f4:	dc400517 	ldw	r17,20(sp)
    95f8:	dc000417 	ldw	r16,16(sp)
    95fc:	dec00704 	addi	sp,sp,28
    9600:	f800283a 	ret

00009604 <__udivdi3>:
    9604:	defff504 	addi	sp,sp,-44
    9608:	dc800315 	stw	r18,12(sp)
    960c:	dc400215 	stw	r17,8(sp)
    9610:	dfc00a15 	stw	ra,40(sp)
    9614:	df000915 	stw	fp,36(sp)
    9618:	ddc00815 	stw	r23,32(sp)
    961c:	dd800715 	stw	r22,28(sp)
    9620:	dd400615 	stw	r21,24(sp)
    9624:	dd000515 	stw	r20,20(sp)
    9628:	dcc00415 	stw	r19,16(sp)
    962c:	dc000115 	stw	r16,4(sp)
    9630:	2025883a 	mov	r18,r4
    9634:	2823883a 	mov	r17,r5
    9638:	3800421e 	bne	r7,zero,9744 <__udivdi3+0x140>
    963c:	3021883a 	mov	r16,r6
    9640:	2027883a 	mov	r19,r4
    9644:	2980542e 	bgeu	r5,r6,9798 <__udivdi3+0x194>
    9648:	00bfffd4 	movui	r2,65535
    964c:	2829883a 	mov	r20,r5
    9650:	1180a836 	bltu	r2,r6,98f4 <__udivdi3+0x2f0>
    9654:	00803fc4 	movi	r2,255
    9658:	11814336 	bltu	r2,r6,9b68 <__udivdi3+0x564>
    965c:	0005883a 	mov	r2,zero
    9660:	0007883a 	mov	r3,zero
    9664:	3084d83a 	srl	r2,r6,r2
    9668:	01000074 	movhi	r4,1
    966c:	213c9104 	addi	r4,r4,-3516
    9670:	2085883a 	add	r2,r4,r2
    9674:	10800003 	ldbu	r2,0(r2)
    9678:	10c7883a 	add	r3,r2,r3
    967c:	00800804 	movi	r2,32
    9680:	10c5c83a 	sub	r2,r2,r3
    9684:	10000526 	beq	r2,zero,969c <__udivdi3+0x98>
    9688:	88a2983a 	sll	r17,r17,r2
    968c:	90c6d83a 	srl	r3,r18,r3
    9690:	30a0983a 	sll	r16,r6,r2
    9694:	90a6983a 	sll	r19,r18,r2
    9698:	88e8b03a 	or	r20,r17,r3
    969c:	8022d43a 	srli	r17,r16,16
    96a0:	a009883a 	mov	r4,r20
    96a4:	857fffcc 	andi	r21,r16,65535
    96a8:	880b883a 	mov	r5,r17
    96ac:	000a26c0 	call	a26c <__umodsi3>
    96b0:	a009883a 	mov	r4,r20
    96b4:	880b883a 	mov	r5,r17
    96b8:	102d883a 	mov	r22,r2
    96bc:	000a2640 	call	a264 <__udivsi3>
    96c0:	b02c943a 	slli	r22,r22,16
    96c4:	9806d43a 	srli	r3,r19,16
    96c8:	1549383a 	mul	r4,r2,r21
    96cc:	1025883a 	mov	r18,r2
    96d0:	b0c6b03a 	or	r3,r22,r3
    96d4:	1900052e 	bgeu	r3,r4,96ec <__udivdi3+0xe8>
    96d8:	1c07883a 	add	r3,r3,r16
    96dc:	10bfffc4 	addi	r2,r2,-1
    96e0:	1c000136 	bltu	r3,r16,96e8 <__udivdi3+0xe4>
    96e4:	19013536 	bltu	r3,r4,9bbc <__udivdi3+0x5b8>
    96e8:	1025883a 	mov	r18,r2
    96ec:	1929c83a 	sub	r20,r3,r4
    96f0:	a009883a 	mov	r4,r20
    96f4:	880b883a 	mov	r5,r17
    96f8:	000a26c0 	call	a26c <__umodsi3>
    96fc:	102d883a 	mov	r22,r2
    9700:	a009883a 	mov	r4,r20
    9704:	880b883a 	mov	r5,r17
    9708:	000a2640 	call	a264 <__udivsi3>
    970c:	b02c943a 	slli	r22,r22,16
    9710:	156b383a 	mul	r21,r2,r21
    9714:	9cffffcc 	andi	r19,r19,65535
    9718:	b4e6b03a 	or	r19,r22,r19
    971c:	9d40052e 	bgeu	r19,r21,9734 <__udivdi3+0x130>
    9720:	9c27883a 	add	r19,r19,r16
    9724:	10ffffc4 	addi	r3,r2,-1
    9728:	9c00f636 	bltu	r19,r16,9b04 <__udivdi3+0x500>
    972c:	9d40f52e 	bgeu	r19,r21,9b04 <__udivdi3+0x500>
    9730:	10bfff84 	addi	r2,r2,-2
    9734:	9024943a 	slli	r18,r18,16
    9738:	0007883a 	mov	r3,zero
    973c:	1484b03a 	or	r2,r2,r18
    9740:	00005b06 	br	98b0 <__udivdi3+0x2ac>
    9744:	29c05836 	bltu	r5,r7,98a8 <__udivdi3+0x2a4>
    9748:	00bfffd4 	movui	r2,65535
    974c:	11c0642e 	bgeu	r2,r7,98e0 <__udivdi3+0x2dc>
    9750:	00804034 	movhi	r2,256
    9754:	10bfffc4 	addi	r2,r2,-1
    9758:	11c0f436 	bltu	r2,r7,9b2c <__udivdi3+0x528>
    975c:	00c00404 	movi	r3,16
    9760:	180b883a 	mov	r5,r3
    9764:	38c6d83a 	srl	r3,r7,r3
    9768:	01000074 	movhi	r4,1
    976c:	213c9104 	addi	r4,r4,-3516
    9770:	04000804 	movi	r16,32
    9774:	20c7883a 	add	r3,r4,r3
    9778:	18800003 	ldbu	r2,0(r3)
    977c:	1145883a 	add	r2,r2,r5
    9780:	80a1c83a 	sub	r16,r16,r2
    9784:	8000661e 	bne	r16,zero,9920 <__udivdi3+0x31c>
    9788:	3c40fa36 	bltu	r7,r17,9b74 <__udivdi3+0x570>
    978c:	9185403a 	cmpgeu	r2,r18,r6
    9790:	0007883a 	mov	r3,zero
    9794:	00004606 	br	98b0 <__udivdi3+0x2ac>
    9798:	3000041e 	bne	r6,zero,97ac <__udivdi3+0x1a8>
    979c:	01000044 	movi	r4,1
    97a0:	000b883a 	mov	r5,zero
    97a4:	000a2640 	call	a264 <__udivsi3>
    97a8:	1021883a 	mov	r16,r2
    97ac:	00bfffd4 	movui	r2,65535
    97b0:	1400562e 	bgeu	r2,r16,990c <__udivdi3+0x308>
    97b4:	00804034 	movhi	r2,256
    97b8:	10bfffc4 	addi	r2,r2,-1
    97bc:	1400e436 	bltu	r2,r16,9b50 <__udivdi3+0x54c>
    97c0:	00800404 	movi	r2,16
    97c4:	1007883a 	mov	r3,r2
    97c8:	8084d83a 	srl	r2,r16,r2
    97cc:	01000074 	movhi	r4,1
    97d0:	213c9104 	addi	r4,r4,-3516
    97d4:	2085883a 	add	r2,r4,r2
    97d8:	10800003 	ldbu	r2,0(r2)
    97dc:	10c7883a 	add	r3,r2,r3
    97e0:	00800804 	movi	r2,32
    97e4:	10c5c83a 	sub	r2,r2,r3
    97e8:	1000921e 	bne	r2,zero,9a34 <__udivdi3+0x430>
    97ec:	8028d43a 	srli	r20,r16,16
    97f0:	8c23c83a 	sub	r17,r17,r16
    97f4:	857fffcc 	andi	r21,r16,65535
    97f8:	00c00044 	movi	r3,1
    97fc:	8809883a 	mov	r4,r17
    9800:	a00b883a 	mov	r5,r20
    9804:	d8c00015 	stw	r3,0(sp)
    9808:	000a26c0 	call	a26c <__umodsi3>
    980c:	8809883a 	mov	r4,r17
    9810:	a00b883a 	mov	r5,r20
    9814:	102d883a 	mov	r22,r2
    9818:	000a2640 	call	a264 <__udivsi3>
    981c:	b02c943a 	slli	r22,r22,16
    9820:	9808d43a 	srli	r4,r19,16
    9824:	154b383a 	mul	r5,r2,r21
    9828:	1025883a 	mov	r18,r2
    982c:	b108b03a 	or	r4,r22,r4
    9830:	d8c00017 	ldw	r3,0(sp)
    9834:	2140052e 	bgeu	r4,r5,984c <__udivdi3+0x248>
    9838:	2409883a 	add	r4,r4,r16
    983c:	10bfffc4 	addi	r2,r2,-1
    9840:	24000136 	bltu	r4,r16,9848 <__udivdi3+0x244>
    9844:	2140da36 	bltu	r4,r5,9bb0 <__udivdi3+0x5ac>
    9848:	1025883a 	mov	r18,r2
    984c:	2163c83a 	sub	r17,r4,r5
    9850:	8809883a 	mov	r4,r17
    9854:	a00b883a 	mov	r5,r20
    9858:	d8c00015 	stw	r3,0(sp)
    985c:	000a26c0 	call	a26c <__umodsi3>
    9860:	102d883a 	mov	r22,r2
    9864:	8809883a 	mov	r4,r17
    9868:	a00b883a 	mov	r5,r20
    986c:	000a2640 	call	a264 <__udivsi3>
    9870:	b02c943a 	slli	r22,r22,16
    9874:	156b383a 	mul	r21,r2,r21
    9878:	9cffffcc 	andi	r19,r19,65535
    987c:	b4e6b03a 	or	r19,r22,r19
    9880:	d8c00017 	ldw	r3,0(sp)
    9884:	9d40052e 	bgeu	r19,r21,989c <__udivdi3+0x298>
    9888:	9c27883a 	add	r19,r19,r16
    988c:	113fffc4 	addi	r4,r2,-1
    9890:	9c009a36 	bltu	r19,r16,9afc <__udivdi3+0x4f8>
    9894:	9d40992e 	bgeu	r19,r21,9afc <__udivdi3+0x4f8>
    9898:	10bfff84 	addi	r2,r2,-2
    989c:	9024943a 	slli	r18,r18,16
    98a0:	1484b03a 	or	r2,r2,r18
    98a4:	00000206 	br	98b0 <__udivdi3+0x2ac>
    98a8:	0007883a 	mov	r3,zero
    98ac:	0005883a 	mov	r2,zero
    98b0:	dfc00a17 	ldw	ra,40(sp)
    98b4:	df000917 	ldw	fp,36(sp)
    98b8:	ddc00817 	ldw	r23,32(sp)
    98bc:	dd800717 	ldw	r22,28(sp)
    98c0:	dd400617 	ldw	r21,24(sp)
    98c4:	dd000517 	ldw	r20,20(sp)
    98c8:	dcc00417 	ldw	r19,16(sp)
    98cc:	dc800317 	ldw	r18,12(sp)
    98d0:	dc400217 	ldw	r17,8(sp)
    98d4:	dc000117 	ldw	r16,4(sp)
    98d8:	dec00b04 	addi	sp,sp,44
    98dc:	f800283a 	ret
    98e0:	00803fc4 	movi	r2,255
    98e4:	11c09436 	bltu	r2,r7,9b38 <__udivdi3+0x534>
    98e8:	0007883a 	mov	r3,zero
    98ec:	000b883a 	mov	r5,zero
    98f0:	003f9c06 	br	9764 <__alt_data_end+0xfe009764>
    98f4:	00804034 	movhi	r2,256
    98f8:	10bfffc4 	addi	r2,r2,-1
    98fc:	11809136 	bltu	r2,r6,9b44 <__udivdi3+0x540>
    9900:	00800404 	movi	r2,16
    9904:	1007883a 	mov	r3,r2
    9908:	003f5606 	br	9664 <__alt_data_end+0xfe009664>
    990c:	00803fc4 	movi	r2,255
    9910:	14009236 	bltu	r2,r16,9b5c <__udivdi3+0x558>
    9914:	0005883a 	mov	r2,zero
    9918:	0007883a 	mov	r3,zero
    991c:	003faa06 	br	97c8 <__alt_data_end+0xfe0097c8>
    9920:	3086d83a 	srl	r3,r6,r2
    9924:	3c0e983a 	sll	r7,r7,r16
    9928:	88aad83a 	srl	r21,r17,r2
    992c:	9084d83a 	srl	r2,r18,r2
    9930:	38e6b03a 	or	r19,r7,r3
    9934:	9828d43a 	srli	r20,r19,16
    9938:	8c22983a 	sll	r17,r17,r16
    993c:	a809883a 	mov	r4,r21
    9940:	a00b883a 	mov	r5,r20
    9944:	342c983a 	sll	r22,r6,r16
    9948:	88a2b03a 	or	r17,r17,r2
    994c:	000a26c0 	call	a26c <__umodsi3>
    9950:	a809883a 	mov	r4,r21
    9954:	a00b883a 	mov	r5,r20
    9958:	1039883a 	mov	fp,r2
    995c:	000a2640 	call	a264 <__udivsi3>
    9960:	102b883a 	mov	r21,r2
    9964:	9dffffcc 	andi	r23,r19,65535
    9968:	e008943a 	slli	r4,fp,16
    996c:	8804d43a 	srli	r2,r17,16
    9970:	adcd383a 	mul	r6,r21,r23
    9974:	2088b03a 	or	r4,r4,r2
    9978:	2180042e 	bgeu	r4,r6,998c <__udivdi3+0x388>
    997c:	24c9883a 	add	r4,r4,r19
    9980:	a8bfffc4 	addi	r2,r21,-1
    9984:	24c0822e 	bgeu	r4,r19,9b90 <__udivdi3+0x58c>
    9988:	102b883a 	mov	r21,r2
    998c:	21b9c83a 	sub	fp,r4,r6
    9990:	e009883a 	mov	r4,fp
    9994:	a00b883a 	mov	r5,r20
    9998:	000a26c0 	call	a26c <__umodsi3>
    999c:	e009883a 	mov	r4,fp
    99a0:	a00b883a 	mov	r5,r20
    99a4:	d8800015 	stw	r2,0(sp)
    99a8:	000a2640 	call	a264 <__udivsi3>
    99ac:	d8c00017 	ldw	r3,0(sp)
    99b0:	15cb383a 	mul	r5,r2,r23
    99b4:	8c7fffcc 	andi	r17,r17,65535
    99b8:	1806943a 	slli	r3,r3,16
    99bc:	1009883a 	mov	r4,r2
    99c0:	1c46b03a 	or	r3,r3,r17
    99c4:	1940042e 	bgeu	r3,r5,99d8 <__udivdi3+0x3d4>
    99c8:	1cc7883a 	add	r3,r3,r19
    99cc:	10bfffc4 	addi	r2,r2,-1
    99d0:	1cc06b2e 	bgeu	r3,r19,9b80 <__udivdi3+0x57c>
    99d4:	1009883a 	mov	r4,r2
    99d8:	a804943a 	slli	r2,r21,16
    99dc:	b1ffffcc 	andi	r7,r22,65535
    99e0:	b02cd43a 	srli	r22,r22,16
    99e4:	2084b03a 	or	r2,r4,r2
    99e8:	113fffcc 	andi	r4,r2,65535
    99ec:	100cd43a 	srli	r6,r2,16
    99f0:	21d1383a 	mul	r8,r4,r7
    99f4:	2589383a 	mul	r4,r4,r22
    99f8:	31cf383a 	mul	r7,r6,r7
    99fc:	4012d43a 	srli	r9,r8,16
    9a00:	1947c83a 	sub	r3,r3,r5
    9a04:	3909883a 	add	r4,r7,r4
    9a08:	2249883a 	add	r4,r4,r9
    9a0c:	35ad383a 	mul	r22,r6,r22
    9a10:	21c0022e 	bgeu	r4,r7,9a1c <__udivdi3+0x418>
    9a14:	01400074 	movhi	r5,1
    9a18:	b16d883a 	add	r22,r22,r5
    9a1c:	200ad43a 	srli	r5,r4,16
    9a20:	b16d883a 	add	r22,r22,r5
    9a24:	1d803e36 	bltu	r3,r22,9b20 <__udivdi3+0x51c>
    9a28:	1d803826 	beq	r3,r22,9b0c <__udivdi3+0x508>
    9a2c:	0007883a 	mov	r3,zero
    9a30:	003f9f06 	br	98b0 <__alt_data_end+0xfe0098b0>
    9a34:	80a0983a 	sll	r16,r16,r2
    9a38:	88ead83a 	srl	r21,r17,r3
    9a3c:	90c6d83a 	srl	r3,r18,r3
    9a40:	8028d43a 	srli	r20,r16,16
    9a44:	88a2983a 	sll	r17,r17,r2
    9a48:	a809883a 	mov	r4,r21
    9a4c:	a00b883a 	mov	r5,r20
    9a50:	88ecb03a 	or	r22,r17,r3
    9a54:	90a6983a 	sll	r19,r18,r2
    9a58:	000a26c0 	call	a26c <__umodsi3>
    9a5c:	a809883a 	mov	r4,r21
    9a60:	a00b883a 	mov	r5,r20
    9a64:	1023883a 	mov	r17,r2
    9a68:	000a2640 	call	a264 <__udivsi3>
    9a6c:	1025883a 	mov	r18,r2
    9a70:	857fffcc 	andi	r21,r16,65535
    9a74:	8808943a 	slli	r4,r17,16
    9a78:	b004d43a 	srli	r2,r22,16
    9a7c:	9547383a 	mul	r3,r18,r21
    9a80:	2088b03a 	or	r4,r4,r2
    9a84:	20c0062e 	bgeu	r4,r3,9aa0 <__udivdi3+0x49c>
    9a88:	2409883a 	add	r4,r4,r16
    9a8c:	90bfffc4 	addi	r2,r18,-1
    9a90:	24004536 	bltu	r4,r16,9ba8 <__udivdi3+0x5a4>
    9a94:	20c0442e 	bgeu	r4,r3,9ba8 <__udivdi3+0x5a4>
    9a98:	94bfff84 	addi	r18,r18,-2
    9a9c:	2409883a 	add	r4,r4,r16
    9aa0:	20efc83a 	sub	r23,r4,r3
    9aa4:	b809883a 	mov	r4,r23
    9aa8:	a00b883a 	mov	r5,r20
    9aac:	000a26c0 	call	a26c <__umodsi3>
    9ab0:	1023883a 	mov	r17,r2
    9ab4:	a00b883a 	mov	r5,r20
    9ab8:	b809883a 	mov	r4,r23
    9abc:	000a2640 	call	a264 <__udivsi3>
    9ac0:	8822943a 	slli	r17,r17,16
    9ac4:	154b383a 	mul	r5,r2,r21
    9ac8:	b5bfffcc 	andi	r22,r22,65535
    9acc:	8da2b03a 	or	r17,r17,r22
    9ad0:	8940062e 	bgeu	r17,r5,9aec <__udivdi3+0x4e8>
    9ad4:	8c23883a 	add	r17,r17,r16
    9ad8:	10ffffc4 	addi	r3,r2,-1
    9adc:	8c003036 	bltu	r17,r16,9ba0 <__udivdi3+0x59c>
    9ae0:	89402f2e 	bgeu	r17,r5,9ba0 <__udivdi3+0x59c>
    9ae4:	10bfff84 	addi	r2,r2,-2
    9ae8:	8c23883a 	add	r17,r17,r16
    9aec:	9006943a 	slli	r3,r18,16
    9af0:	8963c83a 	sub	r17,r17,r5
    9af4:	10c6b03a 	or	r3,r2,r3
    9af8:	003f4006 	br	97fc <__alt_data_end+0xfe0097fc>
    9afc:	2005883a 	mov	r2,r4
    9b00:	003f6606 	br	989c <__alt_data_end+0xfe00989c>
    9b04:	1805883a 	mov	r2,r3
    9b08:	003f0a06 	br	9734 <__alt_data_end+0xfe009734>
    9b0c:	2008943a 	slli	r4,r4,16
    9b10:	9420983a 	sll	r16,r18,r16
    9b14:	423fffcc 	andi	r8,r8,65535
    9b18:	2209883a 	add	r4,r4,r8
    9b1c:	813fc32e 	bgeu	r16,r4,9a2c <__alt_data_end+0xfe009a2c>
    9b20:	10bfffc4 	addi	r2,r2,-1
    9b24:	0007883a 	mov	r3,zero
    9b28:	003f6106 	br	98b0 <__alt_data_end+0xfe0098b0>
    9b2c:	00c00604 	movi	r3,24
    9b30:	180b883a 	mov	r5,r3
    9b34:	003f0b06 	br	9764 <__alt_data_end+0xfe009764>
    9b38:	00c00204 	movi	r3,8
    9b3c:	180b883a 	mov	r5,r3
    9b40:	003f0806 	br	9764 <__alt_data_end+0xfe009764>
    9b44:	00800604 	movi	r2,24
    9b48:	1007883a 	mov	r3,r2
    9b4c:	003ec506 	br	9664 <__alt_data_end+0xfe009664>
    9b50:	00800604 	movi	r2,24
    9b54:	1007883a 	mov	r3,r2
    9b58:	003f1b06 	br	97c8 <__alt_data_end+0xfe0097c8>
    9b5c:	00800204 	movi	r2,8
    9b60:	1007883a 	mov	r3,r2
    9b64:	003f1806 	br	97c8 <__alt_data_end+0xfe0097c8>
    9b68:	00800204 	movi	r2,8
    9b6c:	1007883a 	mov	r3,r2
    9b70:	003ebc06 	br	9664 <__alt_data_end+0xfe009664>
    9b74:	0007883a 	mov	r3,zero
    9b78:	00800044 	movi	r2,1
    9b7c:	003f4c06 	br	98b0 <__alt_data_end+0xfe0098b0>
    9b80:	197f942e 	bgeu	r3,r5,99d4 <__alt_data_end+0xfe0099d4>
    9b84:	213fff84 	addi	r4,r4,-2
    9b88:	1cc7883a 	add	r3,r3,r19
    9b8c:	003f9206 	br	99d8 <__alt_data_end+0xfe0099d8>
    9b90:	21bf7d2e 	bgeu	r4,r6,9988 <__alt_data_end+0xfe009988>
    9b94:	ad7fff84 	addi	r21,r21,-2
    9b98:	24c9883a 	add	r4,r4,r19
    9b9c:	003f7b06 	br	998c <__alt_data_end+0xfe00998c>
    9ba0:	1805883a 	mov	r2,r3
    9ba4:	003fd106 	br	9aec <__alt_data_end+0xfe009aec>
    9ba8:	1025883a 	mov	r18,r2
    9bac:	003fbc06 	br	9aa0 <__alt_data_end+0xfe009aa0>
    9bb0:	94bfff84 	addi	r18,r18,-2
    9bb4:	2409883a 	add	r4,r4,r16
    9bb8:	003f2406 	br	984c <__alt_data_end+0xfe00984c>
    9bbc:	94bfff84 	addi	r18,r18,-2
    9bc0:	1c07883a 	add	r3,r3,r16
    9bc4:	003ec906 	br	96ec <__alt_data_end+0xfe0096ec>

00009bc8 <__umoddi3>:
    9bc8:	defff504 	addi	sp,sp,-44
    9bcc:	dd000515 	stw	r20,20(sp)
    9bd0:	dc800315 	stw	r18,12(sp)
    9bd4:	dc400215 	stw	r17,8(sp)
    9bd8:	dfc00a15 	stw	ra,40(sp)
    9bdc:	df000915 	stw	fp,36(sp)
    9be0:	ddc00815 	stw	r23,32(sp)
    9be4:	dd800715 	stw	r22,28(sp)
    9be8:	dd400615 	stw	r21,24(sp)
    9bec:	dcc00415 	stw	r19,16(sp)
    9bf0:	dc000115 	stw	r16,4(sp)
    9bf4:	2025883a 	mov	r18,r4
    9bf8:	2823883a 	mov	r17,r5
    9bfc:	2829883a 	mov	r20,r5
    9c00:	3800381e 	bne	r7,zero,9ce4 <__umoddi3+0x11c>
    9c04:	3021883a 	mov	r16,r6
    9c08:	2027883a 	mov	r19,r4
    9c0c:	29804e2e 	bgeu	r5,r6,9d48 <__umoddi3+0x180>
    9c10:	00bfffd4 	movui	r2,65535
    9c14:	11809c36 	bltu	r2,r6,9e88 <__umoddi3+0x2c0>
    9c18:	00803fc4 	movi	r2,255
    9c1c:	11813c36 	bltu	r2,r6,a110 <__umoddi3+0x548>
    9c20:	0005883a 	mov	r2,zero
    9c24:	0009883a 	mov	r4,zero
    9c28:	3084d83a 	srl	r2,r6,r2
    9c2c:	00c00074 	movhi	r3,1
    9c30:	18fc9104 	addi	r3,r3,-3516
    9c34:	1885883a 	add	r2,r3,r2
    9c38:	10800003 	ldbu	r2,0(r2)
    9c3c:	1109883a 	add	r4,r2,r4
    9c40:	00800804 	movi	r2,32
    9c44:	1105c83a 	sub	r2,r2,r4
    9c48:	1000ee26 	beq	r2,zero,a004 <__umoddi3+0x43c>
    9c4c:	9108d83a 	srl	r4,r18,r4
    9c50:	88a2983a 	sll	r17,r17,r2
    9c54:	30a0983a 	sll	r16,r6,r2
    9c58:	90a6983a 	sll	r19,r18,r2
    9c5c:	8928b03a 	or	r20,r17,r4
    9c60:	1025883a 	mov	r18,r2
    9c64:	8022d43a 	srli	r17,r16,16
    9c68:	a009883a 	mov	r4,r20
    9c6c:	857fffcc 	andi	r21,r16,65535
    9c70:	880b883a 	mov	r5,r17
    9c74:	000a26c0 	call	a26c <__umodsi3>
    9c78:	a009883a 	mov	r4,r20
    9c7c:	880b883a 	mov	r5,r17
    9c80:	102d883a 	mov	r22,r2
    9c84:	000a2640 	call	a264 <__udivsi3>
    9c88:	b02c943a 	slli	r22,r22,16
    9c8c:	9806d43a 	srli	r3,r19,16
    9c90:	1545383a 	mul	r2,r2,r21
    9c94:	b0c6b03a 	or	r3,r22,r3
    9c98:	1880042e 	bgeu	r3,r2,9cac <__umoddi3+0xe4>
    9c9c:	1c07883a 	add	r3,r3,r16
    9ca0:	1c000236 	bltu	r3,r16,9cac <__umoddi3+0xe4>
    9ca4:	1880012e 	bgeu	r3,r2,9cac <__umoddi3+0xe4>
    9ca8:	1c07883a 	add	r3,r3,r16
    9cac:	18a9c83a 	sub	r20,r3,r2
    9cb0:	a009883a 	mov	r4,r20
    9cb4:	880b883a 	mov	r5,r17
    9cb8:	000a26c0 	call	a26c <__umodsi3>
    9cbc:	102d883a 	mov	r22,r2
    9cc0:	a009883a 	mov	r4,r20
    9cc4:	880b883a 	mov	r5,r17
    9cc8:	000a2640 	call	a264 <__udivsi3>
    9ccc:	b02c943a 	slli	r22,r22,16
    9cd0:	1545383a 	mul	r2,r2,r21
    9cd4:	9cffffcc 	andi	r19,r19,65535
    9cd8:	b4e6b03a 	or	r19,r22,r19
    9cdc:	9880532e 	bgeu	r19,r2,9e2c <__umoddi3+0x264>
    9ce0:	00004e06 	br	9e1c <__umoddi3+0x254>
    9ce4:	29c05536 	bltu	r5,r7,9e3c <__umoddi3+0x274>
    9ce8:	00bfffd4 	movui	r2,65535
    9cec:	11c0612e 	bgeu	r2,r7,9e74 <__umoddi3+0x2ac>
    9cf0:	00804034 	movhi	r2,256
    9cf4:	10bfffc4 	addi	r2,r2,-1
    9cf8:	11c0f936 	bltu	r2,r7,a0e0 <__umoddi3+0x518>
    9cfc:	00c00404 	movi	r3,16
    9d00:	1827883a 	mov	r19,r3
    9d04:	38c6d83a 	srl	r3,r7,r3
    9d08:	01000074 	movhi	r4,1
    9d0c:	213c9104 	addi	r4,r4,-3516
    9d10:	04000804 	movi	r16,32
    9d14:	20c7883a 	add	r3,r4,r3
    9d18:	18800003 	ldbu	r2,0(r3)
    9d1c:	14e7883a 	add	r19,r2,r19
    9d20:	84e1c83a 	sub	r16,r16,r19
    9d24:	8000631e 	bne	r16,zero,9eb4 <__umoddi3+0x2ec>
    9d28:	3c400136 	bltu	r7,r17,9d30 <__umoddi3+0x168>
    9d2c:	91810536 	bltu	r18,r6,a144 <__umoddi3+0x57c>
    9d30:	9185c83a 	sub	r2,r18,r6
    9d34:	89e3c83a 	sub	r17,r17,r7
    9d38:	90a5803a 	cmpltu	r18,r18,r2
    9d3c:	8ca9c83a 	sub	r20,r17,r18
    9d40:	a007883a 	mov	r3,r20
    9d44:	00003f06 	br	9e44 <__umoddi3+0x27c>
    9d48:	3000041e 	bne	r6,zero,9d5c <__umoddi3+0x194>
    9d4c:	01000044 	movi	r4,1
    9d50:	000b883a 	mov	r5,zero
    9d54:	000a2640 	call	a264 <__udivsi3>
    9d58:	1021883a 	mov	r16,r2
    9d5c:	00bfffd4 	movui	r2,65535
    9d60:	14004f2e 	bgeu	r2,r16,9ea0 <__umoddi3+0x2d8>
    9d64:	00804034 	movhi	r2,256
    9d68:	10bfffc4 	addi	r2,r2,-1
    9d6c:	1400e536 	bltu	r2,r16,a104 <__umoddi3+0x53c>
    9d70:	00800404 	movi	r2,16
    9d74:	1007883a 	mov	r3,r2
    9d78:	8084d83a 	srl	r2,r16,r2
    9d7c:	01000074 	movhi	r4,1
    9d80:	213c9104 	addi	r4,r4,-3516
    9d84:	05400804 	movi	r21,32
    9d88:	2085883a 	add	r2,r4,r2
    9d8c:	10800003 	ldbu	r2,0(r2)
    9d90:	10c7883a 	add	r3,r2,r3
    9d94:	a8ebc83a 	sub	r21,r21,r3
    9d98:	a8009c1e 	bne	r21,zero,a00c <__umoddi3+0x444>
    9d9c:	8028d43a 	srli	r20,r16,16
    9da0:	8c23c83a 	sub	r17,r17,r16
    9da4:	85bfffcc 	andi	r22,r16,65535
    9da8:	0025883a 	mov	r18,zero
    9dac:	8809883a 	mov	r4,r17
    9db0:	a00b883a 	mov	r5,r20
    9db4:	000a26c0 	call	a26c <__umodsi3>
    9db8:	8809883a 	mov	r4,r17
    9dbc:	a00b883a 	mov	r5,r20
    9dc0:	102b883a 	mov	r21,r2
    9dc4:	000a2640 	call	a264 <__udivsi3>
    9dc8:	a82a943a 	slli	r21,r21,16
    9dcc:	9806d43a 	srli	r3,r19,16
    9dd0:	1585383a 	mul	r2,r2,r22
    9dd4:	a8c6b03a 	or	r3,r21,r3
    9dd8:	1880032e 	bgeu	r3,r2,9de8 <__umoddi3+0x220>
    9ddc:	1c07883a 	add	r3,r3,r16
    9de0:	1c000136 	bltu	r3,r16,9de8 <__umoddi3+0x220>
    9de4:	1880d536 	bltu	r3,r2,a13c <__umoddi3+0x574>
    9de8:	18a3c83a 	sub	r17,r3,r2
    9dec:	8809883a 	mov	r4,r17
    9df0:	a00b883a 	mov	r5,r20
    9df4:	000a26c0 	call	a26c <__umodsi3>
    9df8:	102b883a 	mov	r21,r2
    9dfc:	8809883a 	mov	r4,r17
    9e00:	a00b883a 	mov	r5,r20
    9e04:	000a2640 	call	a264 <__udivsi3>
    9e08:	a82a943a 	slli	r21,r21,16
    9e0c:	1585383a 	mul	r2,r2,r22
    9e10:	9cffffcc 	andi	r19,r19,65535
    9e14:	ace6b03a 	or	r19,r21,r19
    9e18:	9880042e 	bgeu	r19,r2,9e2c <__umoddi3+0x264>
    9e1c:	9c27883a 	add	r19,r19,r16
    9e20:	9c000236 	bltu	r19,r16,9e2c <__umoddi3+0x264>
    9e24:	9880012e 	bgeu	r19,r2,9e2c <__umoddi3+0x264>
    9e28:	9c27883a 	add	r19,r19,r16
    9e2c:	98a7c83a 	sub	r19,r19,r2
    9e30:	9c84d83a 	srl	r2,r19,r18
    9e34:	0007883a 	mov	r3,zero
    9e38:	00000206 	br	9e44 <__umoddi3+0x27c>
    9e3c:	2005883a 	mov	r2,r4
    9e40:	2807883a 	mov	r3,r5
    9e44:	dfc00a17 	ldw	ra,40(sp)
    9e48:	df000917 	ldw	fp,36(sp)
    9e4c:	ddc00817 	ldw	r23,32(sp)
    9e50:	dd800717 	ldw	r22,28(sp)
    9e54:	dd400617 	ldw	r21,24(sp)
    9e58:	dd000517 	ldw	r20,20(sp)
    9e5c:	dcc00417 	ldw	r19,16(sp)
    9e60:	dc800317 	ldw	r18,12(sp)
    9e64:	dc400217 	ldw	r17,8(sp)
    9e68:	dc000117 	ldw	r16,4(sp)
    9e6c:	dec00b04 	addi	sp,sp,44
    9e70:	f800283a 	ret
    9e74:	00803fc4 	movi	r2,255
    9e78:	11c09636 	bltu	r2,r7,a0d4 <__umoddi3+0x50c>
    9e7c:	0007883a 	mov	r3,zero
    9e80:	0027883a 	mov	r19,zero
    9e84:	003f9f06 	br	9d04 <__alt_data_end+0xfe009d04>
    9e88:	00804034 	movhi	r2,256
    9e8c:	10bfffc4 	addi	r2,r2,-1
    9e90:	11809636 	bltu	r2,r6,a0ec <__umoddi3+0x524>
    9e94:	00800404 	movi	r2,16
    9e98:	1009883a 	mov	r4,r2
    9e9c:	003f6206 	br	9c28 <__alt_data_end+0xfe009c28>
    9ea0:	00803fc4 	movi	r2,255
    9ea4:	14009436 	bltu	r2,r16,a0f8 <__umoddi3+0x530>
    9ea8:	0005883a 	mov	r2,zero
    9eac:	0007883a 	mov	r3,zero
    9eb0:	003fb106 	br	9d78 <__alt_data_end+0xfe009d78>
    9eb4:	3c0e983a 	sll	r7,r7,r16
    9eb8:	34c4d83a 	srl	r2,r6,r19
    9ebc:	8ceed83a 	srl	r23,r17,r19
    9ec0:	8c22983a 	sll	r17,r17,r16
    9ec4:	38a8b03a 	or	r20,r7,r2
    9ec8:	a02ad43a 	srli	r21,r20,16
    9ecc:	94c4d83a 	srl	r2,r18,r19
    9ed0:	b809883a 	mov	r4,r23
    9ed4:	a80b883a 	mov	r5,r21
    9ed8:	88a2b03a 	or	r17,r17,r2
    9edc:	342c983a 	sll	r22,r6,r16
    9ee0:	000a26c0 	call	a26c <__umodsi3>
    9ee4:	b809883a 	mov	r4,r23
    9ee8:	a80b883a 	mov	r5,r21
    9eec:	d8800015 	stw	r2,0(sp)
    9ef0:	000a2640 	call	a264 <__udivsi3>
    9ef4:	d8c00017 	ldw	r3,0(sp)
    9ef8:	102f883a 	mov	r23,r2
    9efc:	a73fffcc 	andi	fp,r20,65535
    9f00:	180a943a 	slli	r5,r3,16
    9f04:	8804d43a 	srli	r2,r17,16
    9f08:	bf0f383a 	mul	r7,r23,fp
    9f0c:	9424983a 	sll	r18,r18,r16
    9f10:	288ab03a 	or	r5,r5,r2
    9f14:	29c0042e 	bgeu	r5,r7,9f28 <__umoddi3+0x360>
    9f18:	2d0b883a 	add	r5,r5,r20
    9f1c:	b8bfffc4 	addi	r2,r23,-1
    9f20:	2d00822e 	bgeu	r5,r20,a12c <__umoddi3+0x564>
    9f24:	102f883a 	mov	r23,r2
    9f28:	29cfc83a 	sub	r7,r5,r7
    9f2c:	3809883a 	mov	r4,r7
    9f30:	a80b883a 	mov	r5,r21
    9f34:	d9c00015 	stw	r7,0(sp)
    9f38:	000a26c0 	call	a26c <__umodsi3>
    9f3c:	d9c00017 	ldw	r7,0(sp)
    9f40:	a80b883a 	mov	r5,r21
    9f44:	d8800015 	stw	r2,0(sp)
    9f48:	3809883a 	mov	r4,r7
    9f4c:	000a2640 	call	a264 <__udivsi3>
    9f50:	d8c00017 	ldw	r3,0(sp)
    9f54:	170d383a 	mul	r6,r2,fp
    9f58:	8c7fffcc 	andi	r17,r17,65535
    9f5c:	1808943a 	slli	r4,r3,16
    9f60:	2448b03a 	or	r4,r4,r17
    9f64:	2180042e 	bgeu	r4,r6,9f78 <__umoddi3+0x3b0>
    9f68:	2509883a 	add	r4,r4,r20
    9f6c:	10ffffc4 	addi	r3,r2,-1
    9f70:	25006a2e 	bgeu	r4,r20,a11c <__umoddi3+0x554>
    9f74:	1805883a 	mov	r2,r3
    9f78:	b82e943a 	slli	r23,r23,16
    9f7c:	b010d43a 	srli	r8,r22,16
    9f80:	b1ffffcc 	andi	r7,r22,65535
    9f84:	15eeb03a 	or	r23,r2,r23
    9f88:	b8bfffcc 	andi	r2,r23,65535
    9f8c:	b82ed43a 	srli	r23,r23,16
    9f90:	11c7383a 	mul	r3,r2,r7
    9f94:	1205383a 	mul	r2,r2,r8
    9f98:	b9cf383a 	mul	r7,r23,r7
    9f9c:	400b883a 	mov	r5,r8
    9fa0:	1810d43a 	srli	r8,r3,16
    9fa4:	3885883a 	add	r2,r7,r2
    9fa8:	2189c83a 	sub	r4,r4,r6
    9fac:	1205883a 	add	r2,r2,r8
    9fb0:	b94b383a 	mul	r5,r23,r5
    9fb4:	11c0022e 	bgeu	r2,r7,9fc0 <__umoddi3+0x3f8>
    9fb8:	01800074 	movhi	r6,1
    9fbc:	298b883a 	add	r5,r5,r6
    9fc0:	100cd43a 	srli	r6,r2,16
    9fc4:	1004943a 	slli	r2,r2,16
    9fc8:	18ffffcc 	andi	r3,r3,65535
    9fcc:	298b883a 	add	r5,r5,r6
    9fd0:	10c5883a 	add	r2,r2,r3
    9fd4:	21403936 	bltu	r4,r5,a0bc <__umoddi3+0x4f4>
    9fd8:	21405d26 	beq	r4,r5,a150 <__umoddi3+0x588>
    9fdc:	2147c83a 	sub	r3,r4,r5
    9fe0:	102d883a 	mov	r22,r2
    9fe4:	95adc83a 	sub	r22,r18,r22
    9fe8:	95a5803a 	cmpltu	r18,r18,r22
    9fec:	1c87c83a 	sub	r3,r3,r18
    9ff0:	1cc4983a 	sll	r2,r3,r19
    9ff4:	b42cd83a 	srl	r22,r22,r16
    9ff8:	1c06d83a 	srl	r3,r3,r16
    9ffc:	1584b03a 	or	r2,r2,r22
    a000:	003f9006 	br	9e44 <__alt_data_end+0xfe009e44>
    a004:	0025883a 	mov	r18,zero
    a008:	003f1606 	br	9c64 <__alt_data_end+0xfe009c64>
    a00c:	8560983a 	sll	r16,r16,r21
    a010:	88e6d83a 	srl	r19,r17,r3
    a014:	90c6d83a 	srl	r3,r18,r3
    a018:	8028d43a 	srli	r20,r16,16
    a01c:	8d62983a 	sll	r17,r17,r21
    a020:	9809883a 	mov	r4,r19
    a024:	a00b883a 	mov	r5,r20
    a028:	88eeb03a 	or	r23,r17,r3
    a02c:	000a26c0 	call	a26c <__umodsi3>
    a030:	9809883a 	mov	r4,r19
    a034:	a00b883a 	mov	r5,r20
    a038:	1023883a 	mov	r17,r2
    a03c:	000a2640 	call	a264 <__udivsi3>
    a040:	85bfffcc 	andi	r22,r16,65535
    a044:	8808943a 	slli	r4,r17,16
    a048:	b806d43a 	srli	r3,r23,16
    a04c:	1585383a 	mul	r2,r2,r22
    a050:	9566983a 	sll	r19,r18,r21
    a054:	20c8b03a 	or	r4,r4,r3
    a058:	2080042e 	bgeu	r4,r2,a06c <__umoddi3+0x4a4>
    a05c:	2409883a 	add	r4,r4,r16
    a060:	24000236 	bltu	r4,r16,a06c <__umoddi3+0x4a4>
    a064:	2080012e 	bgeu	r4,r2,a06c <__umoddi3+0x4a4>
    a068:	2409883a 	add	r4,r4,r16
    a06c:	20a5c83a 	sub	r18,r4,r2
    a070:	9009883a 	mov	r4,r18
    a074:	a00b883a 	mov	r5,r20
    a078:	000a26c0 	call	a26c <__umodsi3>
    a07c:	1023883a 	mov	r17,r2
    a080:	9009883a 	mov	r4,r18
    a084:	a00b883a 	mov	r5,r20
    a088:	000a2640 	call	a264 <__udivsi3>
    a08c:	8822943a 	slli	r17,r17,16
    a090:	1585383a 	mul	r2,r2,r22
    a094:	bdffffcc 	andi	r23,r23,65535
    a098:	8de2b03a 	or	r17,r17,r23
    a09c:	8880042e 	bgeu	r17,r2,a0b0 <__umoddi3+0x4e8>
    a0a0:	8c23883a 	add	r17,r17,r16
    a0a4:	8c000236 	bltu	r17,r16,a0b0 <__umoddi3+0x4e8>
    a0a8:	8880012e 	bgeu	r17,r2,a0b0 <__umoddi3+0x4e8>
    a0ac:	8c23883a 	add	r17,r17,r16
    a0b0:	88a3c83a 	sub	r17,r17,r2
    a0b4:	a825883a 	mov	r18,r21
    a0b8:	003f3c06 	br	9dac <__alt_data_end+0xfe009dac>
    a0bc:	15adc83a 	sub	r22,r2,r22
    a0c0:	2d07c83a 	sub	r3,r5,r20
    a0c4:	1585803a 	cmpltu	r2,r2,r22
    a0c8:	1887c83a 	sub	r3,r3,r2
    a0cc:	20c7c83a 	sub	r3,r4,r3
    a0d0:	003fc406 	br	9fe4 <__alt_data_end+0xfe009fe4>
    a0d4:	00c00204 	movi	r3,8
    a0d8:	1827883a 	mov	r19,r3
    a0dc:	003f0906 	br	9d04 <__alt_data_end+0xfe009d04>
    a0e0:	00c00604 	movi	r3,24
    a0e4:	1827883a 	mov	r19,r3
    a0e8:	003f0606 	br	9d04 <__alt_data_end+0xfe009d04>
    a0ec:	00800604 	movi	r2,24
    a0f0:	1009883a 	mov	r4,r2
    a0f4:	003ecc06 	br	9c28 <__alt_data_end+0xfe009c28>
    a0f8:	00800204 	movi	r2,8
    a0fc:	1007883a 	mov	r3,r2
    a100:	003f1d06 	br	9d78 <__alt_data_end+0xfe009d78>
    a104:	00800604 	movi	r2,24
    a108:	1007883a 	mov	r3,r2
    a10c:	003f1a06 	br	9d78 <__alt_data_end+0xfe009d78>
    a110:	00800204 	movi	r2,8
    a114:	1009883a 	mov	r4,r2
    a118:	003ec306 	br	9c28 <__alt_data_end+0xfe009c28>
    a11c:	21bf952e 	bgeu	r4,r6,9f74 <__alt_data_end+0xfe009f74>
    a120:	10bfff84 	addi	r2,r2,-2
    a124:	2509883a 	add	r4,r4,r20
    a128:	003f9306 	br	9f78 <__alt_data_end+0xfe009f78>
    a12c:	29ff7d2e 	bgeu	r5,r7,9f24 <__alt_data_end+0xfe009f24>
    a130:	bdffff84 	addi	r23,r23,-2
    a134:	2d0b883a 	add	r5,r5,r20
    a138:	003f7b06 	br	9f28 <__alt_data_end+0xfe009f28>
    a13c:	1c07883a 	add	r3,r3,r16
    a140:	003f2906 	br	9de8 <__alt_data_end+0xfe009de8>
    a144:	9005883a 	mov	r2,r18
    a148:	a007883a 	mov	r3,r20
    a14c:	003f3d06 	br	9e44 <__alt_data_end+0xfe009e44>
    a150:	90bfda36 	bltu	r18,r2,a0bc <__alt_data_end+0xfe00a0bc>
    a154:	102d883a 	mov	r22,r2
    a158:	0007883a 	mov	r3,zero
    a15c:	003fa106 	br	9fe4 <__alt_data_end+0xfe009fe4>

0000a160 <udivmodsi4>:
    a160:	2900182e 	bgeu	r5,r4,a1c4 <udivmodsi4+0x64>
    a164:	28001716 	blt	r5,zero,a1c4 <udivmodsi4+0x64>
    a168:	00800804 	movi	r2,32
    a16c:	00c00044 	movi	r3,1
    a170:	00000206 	br	a17c <udivmodsi4+0x1c>
    a174:	10001126 	beq	r2,zero,a1bc <udivmodsi4+0x5c>
    a178:	28000516 	blt	r5,zero,a190 <udivmodsi4+0x30>
    a17c:	294b883a 	add	r5,r5,r5
    a180:	10bfffc4 	addi	r2,r2,-1
    a184:	18c7883a 	add	r3,r3,r3
    a188:	293ffa36 	bltu	r5,r4,a174 <__alt_data_end+0xfe00a174>
    a18c:	18000b26 	beq	r3,zero,a1bc <udivmodsi4+0x5c>
    a190:	0005883a 	mov	r2,zero
    a194:	21400236 	bltu	r4,r5,a1a0 <udivmodsi4+0x40>
    a198:	2149c83a 	sub	r4,r4,r5
    a19c:	10c4b03a 	or	r2,r2,r3
    a1a0:	1806d07a 	srli	r3,r3,1
    a1a4:	280ad07a 	srli	r5,r5,1
    a1a8:	183ffa1e 	bne	r3,zero,a194 <__alt_data_end+0xfe00a194>
    a1ac:	3000011e 	bne	r6,zero,a1b4 <udivmodsi4+0x54>
    a1b0:	f800283a 	ret
    a1b4:	2005883a 	mov	r2,r4
    a1b8:	f800283a 	ret
    a1bc:	0005883a 	mov	r2,zero
    a1c0:	003ffa06 	br	a1ac <__alt_data_end+0xfe00a1ac>
    a1c4:	00c00044 	movi	r3,1
    a1c8:	0005883a 	mov	r2,zero
    a1cc:	003ff106 	br	a194 <__alt_data_end+0xfe00a194>

0000a1d0 <__divsi3>:
    a1d0:	deffff04 	addi	sp,sp,-4
    a1d4:	dfc00015 	stw	ra,0(sp)
    a1d8:	20000916 	blt	r4,zero,a200 <__divsi3+0x30>
    a1dc:	000f883a 	mov	r7,zero
    a1e0:	28000a16 	blt	r5,zero,a20c <__divsi3+0x3c>
    a1e4:	000d883a 	mov	r6,zero
    a1e8:	000a1600 	call	a160 <udivmodsi4>
    a1ec:	38000126 	beq	r7,zero,a1f4 <__divsi3+0x24>
    a1f0:	0085c83a 	sub	r2,zero,r2
    a1f4:	dfc00017 	ldw	ra,0(sp)
    a1f8:	dec00104 	addi	sp,sp,4
    a1fc:	f800283a 	ret
    a200:	0109c83a 	sub	r4,zero,r4
    a204:	01c00044 	movi	r7,1
    a208:	283ff60e 	bge	r5,zero,a1e4 <__alt_data_end+0xfe00a1e4>
    a20c:	014bc83a 	sub	r5,zero,r5
    a210:	39c0005c 	xori	r7,r7,1
    a214:	003ff306 	br	a1e4 <__alt_data_end+0xfe00a1e4>

0000a218 <__modsi3>:
    a218:	20000316 	blt	r4,zero,a228 <__modsi3+0x10>
    a21c:	28000c16 	blt	r5,zero,a250 <__modsi3+0x38>
    a220:	01800044 	movi	r6,1
    a224:	000a1601 	jmpi	a160 <udivmodsi4>
    a228:	deffff04 	addi	sp,sp,-4
    a22c:	dfc00015 	stw	ra,0(sp)
    a230:	0109c83a 	sub	r4,zero,r4
    a234:	28000916 	blt	r5,zero,a25c <__modsi3+0x44>
    a238:	01800044 	movi	r6,1
    a23c:	000a1600 	call	a160 <udivmodsi4>
    a240:	0085c83a 	sub	r2,zero,r2
    a244:	dfc00017 	ldw	ra,0(sp)
    a248:	dec00104 	addi	sp,sp,4
    a24c:	f800283a 	ret
    a250:	014bc83a 	sub	r5,zero,r5
    a254:	01800044 	movi	r6,1
    a258:	000a1601 	jmpi	a160 <udivmodsi4>
    a25c:	014bc83a 	sub	r5,zero,r5
    a260:	003ff506 	br	a238 <__alt_data_end+0xfe00a238>

0000a264 <__udivsi3>:
    a264:	000d883a 	mov	r6,zero
    a268:	000a1601 	jmpi	a160 <udivmodsi4>

0000a26c <__umodsi3>:
    a26c:	01800044 	movi	r6,1
    a270:	000a1601 	jmpi	a160 <udivmodsi4>

0000a274 <__adddf3>:
    a274:	00800434 	movhi	r2,16
    a278:	10bfffc4 	addi	r2,r2,-1
    a27c:	defffb04 	addi	sp,sp,-20
    a280:	2890703a 	and	r8,r5,r2
    a284:	2806d7fa 	srli	r3,r5,31
    a288:	3884703a 	and	r2,r7,r2
    a28c:	2014d77a 	srli	r10,r4,29
    a290:	3812d53a 	srli	r9,r7,20
    a294:	dc400115 	stw	r17,4(sp)
    a298:	100490fa 	slli	r2,r2,3
    a29c:	2822d53a 	srli	r17,r5,20
    a2a0:	380ed7fa 	srli	r7,r7,31
    a2a4:	400a90fa 	slli	r5,r8,3
    a2a8:	3010d77a 	srli	r8,r6,29
    a2ac:	dc800215 	stw	r18,8(sp)
    a2b0:	dc000015 	stw	r16,0(sp)
    a2b4:	dfc00415 	stw	ra,16(sp)
    a2b8:	dcc00315 	stw	r19,12(sp)
    a2bc:	1c803fcc 	andi	r18,r3,255
    a2c0:	202090fa 	slli	r16,r4,3
    a2c4:	8c41ffcc 	andi	r17,r17,2047
    a2c8:	2a8ab03a 	or	r5,r5,r10
    a2cc:	4901ffcc 	andi	r4,r9,2047
    a2d0:	1204b03a 	or	r2,r2,r8
    a2d4:	300c90fa 	slli	r6,r6,3
    a2d8:	91c07126 	beq	r18,r7,a4a0 <__adddf3+0x22c>
    a2dc:	8907c83a 	sub	r3,r17,r4
    a2e0:	00c0a00e 	bge	zero,r3,a564 <__adddf3+0x2f0>
    a2e4:	2000291e 	bne	r4,zero,a38c <__adddf3+0x118>
    a2e8:	1188b03a 	or	r4,r2,r6
    a2ec:	20008b1e 	bne	r4,zero,a51c <__adddf3+0x2a8>
    a2f0:	808001cc 	andi	r2,r16,7
    a2f4:	10005a26 	beq	r2,zero,a460 <__adddf3+0x1ec>
    a2f8:	80c003cc 	andi	r3,r16,15
    a2fc:	00800104 	movi	r2,4
    a300:	18805726 	beq	r3,r2,a460 <__adddf3+0x1ec>
    a304:	81000104 	addi	r4,r16,4
    a308:	2421803a 	cmpltu	r16,r4,r16
    a30c:	2c0b883a 	add	r5,r5,r16
    a310:	2880202c 	andhi	r2,r5,128
    a314:	9007883a 	mov	r3,r18
    a318:	2021883a 	mov	r16,r4
    a31c:	10005326 	beq	r2,zero,a46c <__adddf3+0x1f8>
    a320:	8c400044 	addi	r17,r17,1
    a324:	0081ffc4 	movi	r2,2047
    a328:	8880ae26 	beq	r17,r2,a5e4 <__adddf3+0x370>
    a32c:	00bfe034 	movhi	r2,65408
    a330:	10bfffc4 	addi	r2,r2,-1
    a334:	288a703a 	and	r5,r5,r2
    a338:	2804977a 	slli	r2,r5,29
    a33c:	280a927a 	slli	r5,r5,9
    a340:	8020d0fa 	srli	r16,r16,3
    a344:	280ad33a 	srli	r5,r5,12
    a348:	1404b03a 	or	r2,r2,r16
    a34c:	8c41ffcc 	andi	r17,r17,2047
    a350:	8822953a 	slli	r17,r17,20
    a354:	18c03fcc 	andi	r3,r3,255
    a358:	180897fa 	slli	r4,r3,31
    a35c:	00c00434 	movhi	r3,16
    a360:	18ffffc4 	addi	r3,r3,-1
    a364:	28c6703a 	and	r3,r5,r3
    a368:	1c46b03a 	or	r3,r3,r17
    a36c:	1906b03a 	or	r3,r3,r4
    a370:	dfc00417 	ldw	ra,16(sp)
    a374:	dcc00317 	ldw	r19,12(sp)
    a378:	dc800217 	ldw	r18,8(sp)
    a37c:	dc400117 	ldw	r17,4(sp)
    a380:	dc000017 	ldw	r16,0(sp)
    a384:	dec00504 	addi	sp,sp,20
    a388:	f800283a 	ret
    a38c:	0101ffc4 	movi	r4,2047
    a390:	893fd726 	beq	r17,r4,a2f0 <__alt_data_end+0xfe00a2f0>
    a394:	10802034 	orhi	r2,r2,128
    a398:	01000e04 	movi	r4,56
    a39c:	20c09416 	blt	r4,r3,a5f0 <__adddf3+0x37c>
    a3a0:	010007c4 	movi	r4,31
    a3a4:	20c0b716 	blt	r4,r3,a684 <__adddf3+0x410>
    a3a8:	01000804 	movi	r4,32
    a3ac:	20c9c83a 	sub	r4,r4,r3
    a3b0:	30ced83a 	srl	r7,r6,r3
    a3b4:	1110983a 	sll	r8,r2,r4
    a3b8:	3108983a 	sll	r4,r6,r4
    a3bc:	10c6d83a 	srl	r3,r2,r3
    a3c0:	41c4b03a 	or	r2,r8,r7
    a3c4:	2008c03a 	cmpne	r4,r4,zero
    a3c8:	110cb03a 	or	r6,r2,r4
    a3cc:	818dc83a 	sub	r6,r16,r6
    a3d0:	81a1803a 	cmpltu	r16,r16,r6
    a3d4:	28cbc83a 	sub	r5,r5,r3
    a3d8:	2c0bc83a 	sub	r5,r5,r16
    a3dc:	3021883a 	mov	r16,r6
    a3e0:	2880202c 	andhi	r2,r5,128
    a3e4:	103fc226 	beq	r2,zero,a2f0 <__alt_data_end+0xfe00a2f0>
    a3e8:	04c02034 	movhi	r19,128
    a3ec:	9cffffc4 	addi	r19,r19,-1
    a3f0:	2ce6703a 	and	r19,r5,r19
    a3f4:	98006c26 	beq	r19,zero,a5a8 <__adddf3+0x334>
    a3f8:	9809883a 	mov	r4,r19
    a3fc:	000c7700 	call	c770 <__clzsi2>
    a400:	10fffe04 	addi	r3,r2,-8
    a404:	010007c4 	movi	r4,31
    a408:	20c06d16 	blt	r4,r3,a5c0 <__adddf3+0x34c>
    a40c:	01000a04 	movi	r4,40
    a410:	2085c83a 	sub	r2,r4,r2
    a414:	8084d83a 	srl	r2,r16,r2
    a418:	98e6983a 	sll	r19,r19,r3
    a41c:	80e0983a 	sll	r16,r16,r3
    a420:	14c4b03a 	or	r2,r2,r19
    a424:	1c406a16 	blt	r3,r17,a5d0 <__adddf3+0x35c>
    a428:	1c63c83a 	sub	r17,r3,r17
    a42c:	89400044 	addi	r5,r17,1
    a430:	00c007c4 	movi	r3,31
    a434:	19408616 	blt	r3,r5,a650 <__adddf3+0x3dc>
    a438:	1c47c83a 	sub	r3,r3,r17
    a43c:	8148d83a 	srl	r4,r16,r5
    a440:	80e0983a 	sll	r16,r16,r3
    a444:	10c6983a 	sll	r3,r2,r3
    a448:	114ad83a 	srl	r5,r2,r5
    a44c:	8004c03a 	cmpne	r2,r16,zero
    a450:	20e0b03a 	or	r16,r4,r3
    a454:	80a0b03a 	or	r16,r16,r2
    a458:	0023883a 	mov	r17,zero
    a45c:	003fa406 	br	a2f0 <__alt_data_end+0xfe00a2f0>
    a460:	2880202c 	andhi	r2,r5,128
    a464:	9007883a 	mov	r3,r18
    a468:	103fad1e 	bne	r2,zero,a320 <__alt_data_end+0xfe00a320>
    a46c:	2804977a 	slli	r2,r5,29
    a470:	8020d0fa 	srli	r16,r16,3
    a474:	0101ffc4 	movi	r4,2047
    a478:	280ad0fa 	srli	r5,r5,3
    a47c:	1404b03a 	or	r2,r2,r16
    a480:	8900031e 	bne	r17,r4,a490 <__adddf3+0x21c>
    a484:	1148b03a 	or	r4,r2,r5
    a488:	20005626 	beq	r4,zero,a5e4 <__adddf3+0x370>
    a48c:	29400234 	orhi	r5,r5,8
    a490:	01000434 	movhi	r4,16
    a494:	213fffc4 	addi	r4,r4,-1
    a498:	290a703a 	and	r5,r5,r4
    a49c:	003fab06 	br	a34c <__alt_data_end+0xfe00a34c>
    a4a0:	890fc83a 	sub	r7,r17,r4
    a4a4:	01c0560e 	bge	zero,r7,a600 <__adddf3+0x38c>
    a4a8:	20002426 	beq	r4,zero,a53c <__adddf3+0x2c8>
    a4ac:	0101ffc4 	movi	r4,2047
    a4b0:	893f8f26 	beq	r17,r4,a2f0 <__alt_data_end+0xfe00a2f0>
    a4b4:	10802034 	orhi	r2,r2,128
    a4b8:	01000e04 	movi	r4,56
    a4bc:	21c09d0e 	bge	r4,r7,a734 <__adddf3+0x4c0>
    a4c0:	118cb03a 	or	r6,r2,r6
    a4c4:	300cc03a 	cmpne	r6,r6,zero
    a4c8:	000f883a 	mov	r7,zero
    a4cc:	340d883a 	add	r6,r6,r16
    a4d0:	3421803a 	cmpltu	r16,r6,r16
    a4d4:	394b883a 	add	r5,r7,r5
    a4d8:	2c0b883a 	add	r5,r5,r16
    a4dc:	3021883a 	mov	r16,r6
    a4e0:	2880202c 	andhi	r2,r5,128
    a4e4:	103f8226 	beq	r2,zero,a2f0 <__alt_data_end+0xfe00a2f0>
    a4e8:	8c400044 	addi	r17,r17,1
    a4ec:	0081ffc4 	movi	r2,2047
    a4f0:	8880cb26 	beq	r17,r2,a820 <__adddf3+0x5ac>
    a4f4:	00bfe034 	movhi	r2,65408
    a4f8:	10bfffc4 	addi	r2,r2,-1
    a4fc:	288a703a 	and	r5,r5,r2
    a500:	8006d07a 	srli	r3,r16,1
    a504:	280497fa 	slli	r2,r5,31
    a508:	8400004c 	andi	r16,r16,1
    a50c:	80e0b03a 	or	r16,r16,r3
    a510:	80a0b03a 	or	r16,r16,r2
    a514:	280ad07a 	srli	r5,r5,1
    a518:	003f7506 	br	a2f0 <__alt_data_end+0xfe00a2f0>
    a51c:	18ffffc4 	addi	r3,r3,-1
    a520:	1800481e 	bne	r3,zero,a644 <__adddf3+0x3d0>
    a524:	818dc83a 	sub	r6,r16,r6
    a528:	81a1803a 	cmpltu	r16,r16,r6
    a52c:	288bc83a 	sub	r5,r5,r2
    a530:	2c0bc83a 	sub	r5,r5,r16
    a534:	3021883a 	mov	r16,r6
    a538:	003fa906 	br	a3e0 <__alt_data_end+0xfe00a3e0>
    a53c:	1188b03a 	or	r4,r2,r6
    a540:	203f6b26 	beq	r4,zero,a2f0 <__alt_data_end+0xfe00a2f0>
    a544:	39ffffc4 	addi	r7,r7,-1
    a548:	3800931e 	bne	r7,zero,a798 <__adddf3+0x524>
    a54c:	340d883a 	add	r6,r6,r16
    a550:	3421803a 	cmpltu	r16,r6,r16
    a554:	114b883a 	add	r5,r2,r5
    a558:	2c0b883a 	add	r5,r5,r16
    a55c:	3021883a 	mov	r16,r6
    a560:	003fdf06 	br	a4e0 <__alt_data_end+0xfe00a4e0>
    a564:	1800531e 	bne	r3,zero,a6b4 <__adddf3+0x440>
    a568:	88c00044 	addi	r3,r17,1
    a56c:	18c1ffcc 	andi	r3,r3,2047
    a570:	01000044 	movi	r4,1
    a574:	20c0a00e 	bge	r4,r3,a7f8 <__adddf3+0x584>
    a578:	8187c83a 	sub	r3,r16,r6
    a57c:	80c9803a 	cmpltu	r4,r16,r3
    a580:	28a7c83a 	sub	r19,r5,r2
    a584:	9927c83a 	sub	r19,r19,r4
    a588:	9900202c 	andhi	r4,r19,128
    a58c:	20006226 	beq	r4,zero,a718 <__adddf3+0x4a4>
    a590:	3421c83a 	sub	r16,r6,r16
    a594:	1145c83a 	sub	r2,r2,r5
    a598:	340d803a 	cmpltu	r6,r6,r16
    a59c:	11a7c83a 	sub	r19,r2,r6
    a5a0:	3825883a 	mov	r18,r7
    a5a4:	983f941e 	bne	r19,zero,a3f8 <__alt_data_end+0xfe00a3f8>
    a5a8:	8009883a 	mov	r4,r16
    a5ac:	000c7700 	call	c770 <__clzsi2>
    a5b0:	10800804 	addi	r2,r2,32
    a5b4:	10fffe04 	addi	r3,r2,-8
    a5b8:	010007c4 	movi	r4,31
    a5bc:	20ff930e 	bge	r4,r3,a40c <__alt_data_end+0xfe00a40c>
    a5c0:	10bff604 	addi	r2,r2,-40
    a5c4:	8084983a 	sll	r2,r16,r2
    a5c8:	0021883a 	mov	r16,zero
    a5cc:	1c7f960e 	bge	r3,r17,a428 <__alt_data_end+0xfe00a428>
    a5d0:	017fe034 	movhi	r5,65408
    a5d4:	297fffc4 	addi	r5,r5,-1
    a5d8:	88e3c83a 	sub	r17,r17,r3
    a5dc:	114a703a 	and	r5,r2,r5
    a5e0:	003f4306 	br	a2f0 <__alt_data_end+0xfe00a2f0>
    a5e4:	000b883a 	mov	r5,zero
    a5e8:	0005883a 	mov	r2,zero
    a5ec:	003f5706 	br	a34c <__alt_data_end+0xfe00a34c>
    a5f0:	118cb03a 	or	r6,r2,r6
    a5f4:	300cc03a 	cmpne	r6,r6,zero
    a5f8:	0007883a 	mov	r3,zero
    a5fc:	003f7306 	br	a3cc <__alt_data_end+0xfe00a3cc>
    a600:	3800961e 	bne	r7,zero,a85c <__adddf3+0x5e8>
    a604:	89000044 	addi	r4,r17,1
    a608:	2201ffcc 	andi	r8,r4,2047
    a60c:	01c00044 	movi	r7,1
    a610:	3a00680e 	bge	r7,r8,a7b4 <__adddf3+0x540>
    a614:	01c1ffc4 	movi	r7,2047
    a618:	21c0a726 	beq	r4,r7,a8b8 <__adddf3+0x644>
    a61c:	340d883a 	add	r6,r6,r16
    a620:	3421803a 	cmpltu	r16,r6,r16
    a624:	114b883a 	add	r5,r2,r5
    a628:	2c0b883a 	add	r5,r5,r16
    a62c:	282097fa 	slli	r16,r5,31
    a630:	300cd07a 	srli	r6,r6,1
    a634:	280ad07a 	srli	r5,r5,1
    a638:	2023883a 	mov	r17,r4
    a63c:	81a0b03a 	or	r16,r16,r6
    a640:	003f2b06 	br	a2f0 <__alt_data_end+0xfe00a2f0>
    a644:	0101ffc4 	movi	r4,2047
    a648:	893f531e 	bne	r17,r4,a398 <__alt_data_end+0xfe00a398>
    a64c:	003f2806 	br	a2f0 <__alt_data_end+0xfe00a2f0>
    a650:	893ff844 	addi	r4,r17,-31
    a654:	00c00804 	movi	r3,32
    a658:	1108d83a 	srl	r4,r2,r4
    a65c:	28c05126 	beq	r5,r3,a7a4 <__adddf3+0x530>
    a660:	00c00fc4 	movi	r3,63
    a664:	1c63c83a 	sub	r17,r3,r17
    a668:	1444983a 	sll	r2,r2,r17
    a66c:	1420b03a 	or	r16,r2,r16
    a670:	8020c03a 	cmpne	r16,r16,zero
    a674:	8120b03a 	or	r16,r16,r4
    a678:	000b883a 	mov	r5,zero
    a67c:	0023883a 	mov	r17,zero
    a680:	003f1b06 	br	a2f0 <__alt_data_end+0xfe00a2f0>
    a684:	193ff804 	addi	r4,r3,-32
    a688:	01c00804 	movi	r7,32
    a68c:	1108d83a 	srl	r4,r2,r4
    a690:	19c04626 	beq	r3,r7,a7ac <__adddf3+0x538>
    a694:	01c01004 	movi	r7,64
    a698:	38c7c83a 	sub	r3,r7,r3
    a69c:	10c4983a 	sll	r2,r2,r3
    a6a0:	118cb03a 	or	r6,r2,r6
    a6a4:	300cc03a 	cmpne	r6,r6,zero
    a6a8:	310cb03a 	or	r6,r6,r4
    a6ac:	0007883a 	mov	r3,zero
    a6b0:	003f4606 	br	a3cc <__alt_data_end+0xfe00a3cc>
    a6b4:	88002b26 	beq	r17,zero,a764 <__adddf3+0x4f0>
    a6b8:	0201ffc4 	movi	r8,2047
    a6bc:	22002f26 	beq	r4,r8,a77c <__adddf3+0x508>
    a6c0:	00c7c83a 	sub	r3,zero,r3
    a6c4:	29402034 	orhi	r5,r5,128
    a6c8:	02000e04 	movi	r8,56
    a6cc:	40c07616 	blt	r8,r3,a8a8 <__adddf3+0x634>
    a6d0:	020007c4 	movi	r8,31
    a6d4:	40c0d216 	blt	r8,r3,aa20 <__adddf3+0x7ac>
    a6d8:	02000804 	movi	r8,32
    a6dc:	40d1c83a 	sub	r8,r8,r3
    a6e0:	2a14983a 	sll	r10,r5,r8
    a6e4:	80d2d83a 	srl	r9,r16,r3
    a6e8:	8210983a 	sll	r8,r16,r8
    a6ec:	28cad83a 	srl	r5,r5,r3
    a6f0:	5252b03a 	or	r9,r10,r9
    a6f4:	4006c03a 	cmpne	r3,r8,zero
    a6f8:	48e0b03a 	or	r16,r9,r3
    a6fc:	3421c83a 	sub	r16,r6,r16
    a700:	114bc83a 	sub	r5,r2,r5
    a704:	340d803a 	cmpltu	r6,r6,r16
    a708:	298bc83a 	sub	r5,r5,r6
    a70c:	2023883a 	mov	r17,r4
    a710:	3825883a 	mov	r18,r7
    a714:	003f3206 	br	a3e0 <__alt_data_end+0xfe00a3e0>
    a718:	98c4b03a 	or	r2,r19,r3
    a71c:	10001c1e 	bne	r2,zero,a790 <__adddf3+0x51c>
    a720:	0007883a 	mov	r3,zero
    a724:	000b883a 	mov	r5,zero
    a728:	0021883a 	mov	r16,zero
    a72c:	0023883a 	mov	r17,zero
    a730:	003f4e06 	br	a46c <__alt_data_end+0xfe00a46c>
    a734:	010007c4 	movi	r4,31
    a738:	21c03c16 	blt	r4,r7,a82c <__adddf3+0x5b8>
    a73c:	01000804 	movi	r4,32
    a740:	21c9c83a 	sub	r4,r4,r7
    a744:	31d0d83a 	srl	r8,r6,r7
    a748:	1112983a 	sll	r9,r2,r4
    a74c:	3108983a 	sll	r4,r6,r4
    a750:	11ced83a 	srl	r7,r2,r7
    a754:	4a04b03a 	or	r2,r9,r8
    a758:	2008c03a 	cmpne	r4,r4,zero
    a75c:	110cb03a 	or	r6,r2,r4
    a760:	003f5a06 	br	a4cc <__alt_data_end+0xfe00a4cc>
    a764:	2c10b03a 	or	r8,r5,r16
    a768:	40000426 	beq	r8,zero,a77c <__adddf3+0x508>
    a76c:	00c6303a 	nor	r3,zero,r3
    a770:	183fe226 	beq	r3,zero,a6fc <__alt_data_end+0xfe00a6fc>
    a774:	0201ffc4 	movi	r8,2047
    a778:	223fd31e 	bne	r4,r8,a6c8 <__alt_data_end+0xfe00a6c8>
    a77c:	100b883a 	mov	r5,r2
    a780:	3021883a 	mov	r16,r6
    a784:	2023883a 	mov	r17,r4
    a788:	3825883a 	mov	r18,r7
    a78c:	003ed806 	br	a2f0 <__alt_data_end+0xfe00a2f0>
    a790:	1821883a 	mov	r16,r3
    a794:	003f1706 	br	a3f4 <__alt_data_end+0xfe00a3f4>
    a798:	0101ffc4 	movi	r4,2047
    a79c:	893f461e 	bne	r17,r4,a4b8 <__alt_data_end+0xfe00a4b8>
    a7a0:	003ed306 	br	a2f0 <__alt_data_end+0xfe00a2f0>
    a7a4:	0005883a 	mov	r2,zero
    a7a8:	003fb006 	br	a66c <__alt_data_end+0xfe00a66c>
    a7ac:	0005883a 	mov	r2,zero
    a7b0:	003fbb06 	br	a6a0 <__alt_data_end+0xfe00a6a0>
    a7b4:	2c06b03a 	or	r3,r5,r16
    a7b8:	8800841e 	bne	r17,zero,a9cc <__adddf3+0x758>
    a7bc:	1800b226 	beq	r3,zero,aa88 <__adddf3+0x814>
    a7c0:	1186b03a 	or	r3,r2,r6
    a7c4:	183eca26 	beq	r3,zero,a2f0 <__alt_data_end+0xfe00a2f0>
    a7c8:	340d883a 	add	r6,r6,r16
    a7cc:	114b883a 	add	r5,r2,r5
    a7d0:	3421803a 	cmpltu	r16,r6,r16
    a7d4:	2c0b883a 	add	r5,r5,r16
    a7d8:	2880202c 	andhi	r2,r5,128
    a7dc:	1000c026 	beq	r2,zero,aae0 <__adddf3+0x86c>
    a7e0:	00bfe034 	movhi	r2,65408
    a7e4:	10bfffc4 	addi	r2,r2,-1
    a7e8:	288a703a 	and	r5,r5,r2
    a7ec:	3021883a 	mov	r16,r6
    a7f0:	3823883a 	mov	r17,r7
    a7f4:	003ebe06 	br	a2f0 <__alt_data_end+0xfe00a2f0>
    a7f8:	2c06b03a 	or	r3,r5,r16
    a7fc:	8800221e 	bne	r17,zero,a888 <__adddf3+0x614>
    a800:	1800481e 	bne	r3,zero,a924 <__adddf3+0x6b0>
    a804:	1186b03a 	or	r3,r2,r6
    a808:	18000426 	beq	r3,zero,a81c <__adddf3+0x5a8>
    a80c:	100b883a 	mov	r5,r2
    a810:	3021883a 	mov	r16,r6
    a814:	3825883a 	mov	r18,r7
    a818:	003eb506 	br	a2f0 <__alt_data_end+0xfe00a2f0>
    a81c:	0007883a 	mov	r3,zero
    a820:	000b883a 	mov	r5,zero
    a824:	0021883a 	mov	r16,zero
    a828:	003f1006 	br	a46c <__alt_data_end+0xfe00a46c>
    a82c:	393ff804 	addi	r4,r7,-32
    a830:	02000804 	movi	r8,32
    a834:	1108d83a 	srl	r4,r2,r4
    a838:	3a007726 	beq	r7,r8,aa18 <__adddf3+0x7a4>
    a83c:	02001004 	movi	r8,64
    a840:	41cfc83a 	sub	r7,r8,r7
    a844:	11c4983a 	sll	r2,r2,r7
    a848:	118cb03a 	or	r6,r2,r6
    a84c:	300cc03a 	cmpne	r6,r6,zero
    a850:	310cb03a 	or	r6,r6,r4
    a854:	000f883a 	mov	r7,zero
    a858:	003f1c06 	br	a4cc <__alt_data_end+0xfe00a4cc>
    a85c:	88001a1e 	bne	r17,zero,a8c8 <__adddf3+0x654>
    a860:	2c10b03a 	or	r8,r5,r16
    a864:	40005526 	beq	r8,zero,a9bc <__adddf3+0x748>
    a868:	01ce303a 	nor	r7,zero,r7
    a86c:	3800511e 	bne	r7,zero,a9b4 <__adddf3+0x740>
    a870:	81a1883a 	add	r16,r16,r6
    a874:	114b883a 	add	r5,r2,r5
    a878:	818d803a 	cmpltu	r6,r16,r6
    a87c:	298b883a 	add	r5,r5,r6
    a880:	2023883a 	mov	r17,r4
    a884:	003f1606 	br	a4e0 <__alt_data_end+0xfe00a4e0>
    a888:	1800341e 	bne	r3,zero,a95c <__adddf3+0x6e8>
    a88c:	1186b03a 	or	r3,r2,r6
    a890:	18006f26 	beq	r3,zero,aa50 <__adddf3+0x7dc>
    a894:	100b883a 	mov	r5,r2
    a898:	3021883a 	mov	r16,r6
    a89c:	3825883a 	mov	r18,r7
    a8a0:	0441ffc4 	movi	r17,2047
    a8a4:	003e9206 	br	a2f0 <__alt_data_end+0xfe00a2f0>
    a8a8:	2c20b03a 	or	r16,r5,r16
    a8ac:	8020c03a 	cmpne	r16,r16,zero
    a8b0:	000b883a 	mov	r5,zero
    a8b4:	003f9106 	br	a6fc <__alt_data_end+0xfe00a6fc>
    a8b8:	2023883a 	mov	r17,r4
    a8bc:	000b883a 	mov	r5,zero
    a8c0:	0021883a 	mov	r16,zero
    a8c4:	003ee906 	br	a46c <__alt_data_end+0xfe00a46c>
    a8c8:	0201ffc4 	movi	r8,2047
    a8cc:	22003b26 	beq	r4,r8,a9bc <__adddf3+0x748>
    a8d0:	01cfc83a 	sub	r7,zero,r7
    a8d4:	29402034 	orhi	r5,r5,128
    a8d8:	02000e04 	movi	r8,56
    a8dc:	41c06216 	blt	r8,r7,aa68 <__adddf3+0x7f4>
    a8e0:	020007c4 	movi	r8,31
    a8e4:	41c07016 	blt	r8,r7,aaa8 <__adddf3+0x834>
    a8e8:	02000804 	movi	r8,32
    a8ec:	41d1c83a 	sub	r8,r8,r7
    a8f0:	2a14983a 	sll	r10,r5,r8
    a8f4:	81d2d83a 	srl	r9,r16,r7
    a8f8:	8210983a 	sll	r8,r16,r8
    a8fc:	29cad83a 	srl	r5,r5,r7
    a900:	5252b03a 	or	r9,r10,r9
    a904:	400ec03a 	cmpne	r7,r8,zero
    a908:	49e0b03a 	or	r16,r9,r7
    a90c:	81a1883a 	add	r16,r16,r6
    a910:	2885883a 	add	r2,r5,r2
    a914:	818d803a 	cmpltu	r6,r16,r6
    a918:	118b883a 	add	r5,r2,r6
    a91c:	2023883a 	mov	r17,r4
    a920:	003eef06 	br	a4e0 <__alt_data_end+0xfe00a4e0>
    a924:	1186b03a 	or	r3,r2,r6
    a928:	183e7126 	beq	r3,zero,a2f0 <__alt_data_end+0xfe00a2f0>
    a92c:	8187c83a 	sub	r3,r16,r6
    a930:	80d1803a 	cmpltu	r8,r16,r3
    a934:	2889c83a 	sub	r4,r5,r2
    a938:	2209c83a 	sub	r4,r4,r8
    a93c:	2200202c 	andhi	r8,r4,128
    a940:	40005426 	beq	r8,zero,aa94 <__adddf3+0x820>
    a944:	3421c83a 	sub	r16,r6,r16
    a948:	114bc83a 	sub	r5,r2,r5
    a94c:	340d803a 	cmpltu	r6,r6,r16
    a950:	298bc83a 	sub	r5,r5,r6
    a954:	3825883a 	mov	r18,r7
    a958:	003e6506 	br	a2f0 <__alt_data_end+0xfe00a2f0>
    a95c:	1186b03a 	or	r3,r2,r6
    a960:	18002b26 	beq	r3,zero,aa10 <__adddf3+0x79c>
    a964:	2806d0fa 	srli	r3,r5,3
    a968:	8020d0fa 	srli	r16,r16,3
    a96c:	280a977a 	slli	r5,r5,29
    a970:	1900022c 	andhi	r4,r3,8
    a974:	2c20b03a 	or	r16,r5,r16
    a978:	20000826 	beq	r4,zero,a99c <__adddf3+0x728>
    a97c:	1008d0fa 	srli	r4,r2,3
    a980:	2140022c 	andhi	r5,r4,8
    a984:	2800051e 	bne	r5,zero,a99c <__adddf3+0x728>
    a988:	300cd0fa 	srli	r6,r6,3
    a98c:	1004977a 	slli	r2,r2,29
    a990:	2007883a 	mov	r3,r4
    a994:	3825883a 	mov	r18,r7
    a998:	11a0b03a 	or	r16,r2,r6
    a99c:	800ad77a 	srli	r5,r16,29
    a9a0:	180690fa 	slli	r3,r3,3
    a9a4:	802090fa 	slli	r16,r16,3
    a9a8:	0441ffc4 	movi	r17,2047
    a9ac:	28cab03a 	or	r5,r5,r3
    a9b0:	003e4f06 	br	a2f0 <__alt_data_end+0xfe00a2f0>
    a9b4:	0201ffc4 	movi	r8,2047
    a9b8:	223fc71e 	bne	r4,r8,a8d8 <__alt_data_end+0xfe00a8d8>
    a9bc:	100b883a 	mov	r5,r2
    a9c0:	3021883a 	mov	r16,r6
    a9c4:	2023883a 	mov	r17,r4
    a9c8:	003e4906 	br	a2f0 <__alt_data_end+0xfe00a2f0>
    a9cc:	18002a26 	beq	r3,zero,aa78 <__adddf3+0x804>
    a9d0:	1186b03a 	or	r3,r2,r6
    a9d4:	18000e26 	beq	r3,zero,aa10 <__adddf3+0x79c>
    a9d8:	2806d0fa 	srli	r3,r5,3
    a9dc:	8020d0fa 	srli	r16,r16,3
    a9e0:	280a977a 	slli	r5,r5,29
    a9e4:	1900022c 	andhi	r4,r3,8
    a9e8:	2c20b03a 	or	r16,r5,r16
    a9ec:	203feb26 	beq	r4,zero,a99c <__alt_data_end+0xfe00a99c>
    a9f0:	1008d0fa 	srli	r4,r2,3
    a9f4:	2140022c 	andhi	r5,r4,8
    a9f8:	283fe81e 	bne	r5,zero,a99c <__alt_data_end+0xfe00a99c>
    a9fc:	300cd0fa 	srli	r6,r6,3
    aa00:	1004977a 	slli	r2,r2,29
    aa04:	2007883a 	mov	r3,r4
    aa08:	11a0b03a 	or	r16,r2,r6
    aa0c:	003fe306 	br	a99c <__alt_data_end+0xfe00a99c>
    aa10:	0441ffc4 	movi	r17,2047
    aa14:	003e3606 	br	a2f0 <__alt_data_end+0xfe00a2f0>
    aa18:	0005883a 	mov	r2,zero
    aa1c:	003f8a06 	br	a848 <__alt_data_end+0xfe00a848>
    aa20:	1a3ff804 	addi	r8,r3,-32
    aa24:	02400804 	movi	r9,32
    aa28:	2a10d83a 	srl	r8,r5,r8
    aa2c:	1a402a26 	beq	r3,r9,aad8 <__adddf3+0x864>
    aa30:	02401004 	movi	r9,64
    aa34:	48c7c83a 	sub	r3,r9,r3
    aa38:	28ca983a 	sll	r5,r5,r3
    aa3c:	2c20b03a 	or	r16,r5,r16
    aa40:	8020c03a 	cmpne	r16,r16,zero
    aa44:	8220b03a 	or	r16,r16,r8
    aa48:	000b883a 	mov	r5,zero
    aa4c:	003f2b06 	br	a6fc <__alt_data_end+0xfe00a6fc>
    aa50:	0007883a 	mov	r3,zero
    aa54:	01402034 	movhi	r5,128
    aa58:	297fffc4 	addi	r5,r5,-1
    aa5c:	043ffe04 	movi	r16,-8
    aa60:	0441ffc4 	movi	r17,2047
    aa64:	003e8106 	br	a46c <__alt_data_end+0xfe00a46c>
    aa68:	2c20b03a 	or	r16,r5,r16
    aa6c:	8020c03a 	cmpne	r16,r16,zero
    aa70:	000b883a 	mov	r5,zero
    aa74:	003fa506 	br	a90c <__alt_data_end+0xfe00a90c>
    aa78:	100b883a 	mov	r5,r2
    aa7c:	3021883a 	mov	r16,r6
    aa80:	0441ffc4 	movi	r17,2047
    aa84:	003e1a06 	br	a2f0 <__alt_data_end+0xfe00a2f0>
    aa88:	100b883a 	mov	r5,r2
    aa8c:	3021883a 	mov	r16,r6
    aa90:	003e1706 	br	a2f0 <__alt_data_end+0xfe00a2f0>
    aa94:	20c4b03a 	or	r2,r4,r3
    aa98:	103f6026 	beq	r2,zero,a81c <__alt_data_end+0xfe00a81c>
    aa9c:	200b883a 	mov	r5,r4
    aaa0:	1821883a 	mov	r16,r3
    aaa4:	003e1206 	br	a2f0 <__alt_data_end+0xfe00a2f0>
    aaa8:	3a3ff804 	addi	r8,r7,-32
    aaac:	02400804 	movi	r9,32
    aab0:	2a10d83a 	srl	r8,r5,r8
    aab4:	3a400c26 	beq	r7,r9,aae8 <__adddf3+0x874>
    aab8:	02401004 	movi	r9,64
    aabc:	49cfc83a 	sub	r7,r9,r7
    aac0:	29ca983a 	sll	r5,r5,r7
    aac4:	2c20b03a 	or	r16,r5,r16
    aac8:	8020c03a 	cmpne	r16,r16,zero
    aacc:	8220b03a 	or	r16,r16,r8
    aad0:	000b883a 	mov	r5,zero
    aad4:	003f8d06 	br	a90c <__alt_data_end+0xfe00a90c>
    aad8:	000b883a 	mov	r5,zero
    aadc:	003fd706 	br	aa3c <__alt_data_end+0xfe00aa3c>
    aae0:	3021883a 	mov	r16,r6
    aae4:	003e0206 	br	a2f0 <__alt_data_end+0xfe00a2f0>
    aae8:	000b883a 	mov	r5,zero
    aaec:	003ff506 	br	aac4 <__alt_data_end+0xfe00aac4>

0000aaf0 <__divdf3>:
    aaf0:	defff204 	addi	sp,sp,-56
    aaf4:	dcc00715 	stw	r19,28(sp)
    aaf8:	2826d53a 	srli	r19,r5,20
    aafc:	dd400915 	stw	r21,36(sp)
    ab00:	282ad7fa 	srli	r21,r5,31
    ab04:	ddc00b15 	stw	r23,44(sp)
    ab08:	dd800a15 	stw	r22,40(sp)
    ab0c:	dc800615 	stw	r18,24(sp)
    ab10:	dfc00d15 	stw	ra,52(sp)
    ab14:	04800434 	movhi	r18,16
    ab18:	94bfffc4 	addi	r18,r18,-1
    ab1c:	df000c15 	stw	fp,48(sp)
    ab20:	dd000815 	stw	r20,32(sp)
    ab24:	dc400515 	stw	r17,20(sp)
    ab28:	dc000415 	stw	r16,16(sp)
    ab2c:	9cc1ffcc 	andi	r19,r19,2047
    ab30:	202d883a 	mov	r22,r4
    ab34:	2ca4703a 	and	r18,r5,r18
    ab38:	adc03fcc 	andi	r23,r21,255
    ab3c:	98006a26 	beq	r19,zero,ace8 <__divdf3+0x1f8>
    ab40:	0081ffc4 	movi	r2,2047
    ab44:	2021883a 	mov	r16,r4
    ab48:	98803726 	beq	r19,r2,ac28 <__divdf3+0x138>
    ab4c:	90800434 	orhi	r2,r18,16
    ab50:	100490fa 	slli	r2,r2,3
    ab54:	2024d77a 	srli	r18,r4,29
    ab58:	202090fa 	slli	r16,r4,3
    ab5c:	9cff0044 	addi	r19,r19,-1023
    ab60:	14a4b03a 	or	r18,r2,r18
    ab64:	0029883a 	mov	r20,zero
    ab68:	0039883a 	mov	fp,zero
    ab6c:	3804d53a 	srli	r2,r7,20
    ab70:	382cd7fa 	srli	r22,r7,31
    ab74:	04400434 	movhi	r17,16
    ab78:	8c7fffc4 	addi	r17,r17,-1
    ab7c:	1081ffcc 	andi	r2,r2,2047
    ab80:	3011883a 	mov	r8,r6
    ab84:	3c62703a 	and	r17,r7,r17
    ab88:	b2403fcc 	andi	r9,r22,255
    ab8c:	10007326 	beq	r2,zero,ad5c <__divdf3+0x26c>
    ab90:	0101ffc4 	movi	r4,2047
    ab94:	11006b26 	beq	r2,r4,ad44 <__divdf3+0x254>
    ab98:	89000434 	orhi	r4,r17,16
    ab9c:	200890fa 	slli	r4,r4,3
    aba0:	3022d77a 	srli	r17,r6,29
    aba4:	301090fa 	slli	r8,r6,3
    aba8:	10bf0044 	addi	r2,r2,-1023
    abac:	2462b03a 	or	r17,r4,r17
    abb0:	000d883a 	mov	r6,zero
    abb4:	ad8af03a 	xor	r5,r21,r22
    abb8:	3508b03a 	or	r4,r6,r20
    abbc:	00c003c4 	movi	r3,15
    abc0:	280f883a 	mov	r7,r5
    abc4:	2d003fcc 	andi	r20,r5,255
    abc8:	19009236 	bltu	r3,r4,ae14 <__divdf3+0x324>
    abcc:	2109883a 	add	r4,r4,r4
    abd0:	00c00074 	movhi	r3,1
    abd4:	18eafa04 	addi	r3,r3,-21528
    abd8:	2109883a 	add	r4,r4,r4
    abdc:	20c9883a 	add	r4,r4,r3
    abe0:	20c00017 	ldw	r3,0(r4)
    abe4:	1800683a 	jmp	r3
    abe8:	0000ae14 	movui	zero,696
    abec:	0000ac84 	movi	zero,690
    abf0:	0000ae04 	movi	zero,696
    abf4:	0000ac54 	movui	zero,689
    abf8:	0000ae04 	movi	zero,696
    abfc:	0000adec 	andhi	zero,zero,695
    ac00:	0000ae04 	movi	zero,696
    ac04:	0000ac54 	movui	zero,689
    ac08:	0000ac84 	movi	zero,690
    ac0c:	0000ac84 	movi	zero,690
    ac10:	0000adec 	andhi	zero,zero,695
    ac14:	0000ac54 	movui	zero,689
    ac18:	0000ac44 	movi	zero,689
    ac1c:	0000ac44 	movi	zero,689
    ac20:	0000ac44 	movi	zero,689
    ac24:	0000b100 	call	b10 <___vfprintf_internal_r+0x26c>
    ac28:	9104b03a 	or	r2,r18,r4
    ac2c:	10006c1e 	bne	r2,zero,ade0 <__divdf3+0x2f0>
    ac30:	05000204 	movi	r20,8
    ac34:	0025883a 	mov	r18,zero
    ac38:	0021883a 	mov	r16,zero
    ac3c:	07000084 	movi	fp,2
    ac40:	003fca06 	br	ab6c <__alt_data_end+0xfe00ab6c>
    ac44:	9023883a 	mov	r17,r18
    ac48:	8011883a 	mov	r8,r16
    ac4c:	b813883a 	mov	r9,r23
    ac50:	e00d883a 	mov	r6,fp
    ac54:	00800084 	movi	r2,2
    ac58:	30800926 	beq	r6,r2,ac80 <__divdf3+0x190>
    ac5c:	008000c4 	movi	r2,3
    ac60:	3081d026 	beq	r6,r2,b3a4 <__divdf3+0x8b4>
    ac64:	00800044 	movi	r2,1
    ac68:	3081881e 	bne	r6,r2,b28c <__divdf3+0x79c>
    ac6c:	480f883a 	mov	r7,r9
    ac70:	0005883a 	mov	r2,zero
    ac74:	0025883a 	mov	r18,zero
    ac78:	0021883a 	mov	r16,zero
    ac7c:	00000506 	br	ac94 <__divdf3+0x1a4>
    ac80:	4829883a 	mov	r20,r9
    ac84:	a1c0004c 	andi	r7,r20,1
    ac88:	0081ffc4 	movi	r2,2047
    ac8c:	0025883a 	mov	r18,zero
    ac90:	0021883a 	mov	r16,zero
    ac94:	1004953a 	slli	r2,r2,20
    ac98:	39c03fcc 	andi	r7,r7,255
    ac9c:	380e97fa 	slli	r7,r7,31
    aca0:	00c00434 	movhi	r3,16
    aca4:	18ffffc4 	addi	r3,r3,-1
    aca8:	90e4703a 	and	r18,r18,r3
    acac:	9086b03a 	or	r3,r18,r2
    acb0:	19c6b03a 	or	r3,r3,r7
    acb4:	8005883a 	mov	r2,r16
    acb8:	dfc00d17 	ldw	ra,52(sp)
    acbc:	df000c17 	ldw	fp,48(sp)
    acc0:	ddc00b17 	ldw	r23,44(sp)
    acc4:	dd800a17 	ldw	r22,40(sp)
    acc8:	dd400917 	ldw	r21,36(sp)
    accc:	dd000817 	ldw	r20,32(sp)
    acd0:	dcc00717 	ldw	r19,28(sp)
    acd4:	dc800617 	ldw	r18,24(sp)
    acd8:	dc400517 	ldw	r17,20(sp)
    acdc:	dc000417 	ldw	r16,16(sp)
    ace0:	dec00e04 	addi	sp,sp,56
    ace4:	f800283a 	ret
    ace8:	9104b03a 	or	r2,r18,r4
    acec:	10003726 	beq	r2,zero,adcc <__divdf3+0x2dc>
    acf0:	90012626 	beq	r18,zero,b18c <__divdf3+0x69c>
    acf4:	9009883a 	mov	r4,r18
    acf8:	d9800215 	stw	r6,8(sp)
    acfc:	d9c00115 	stw	r7,4(sp)
    ad00:	000c7700 	call	c770 <__clzsi2>
    ad04:	d9800217 	ldw	r6,8(sp)
    ad08:	d9c00117 	ldw	r7,4(sp)
    ad0c:	00c009c4 	movi	r3,39
    ad10:	18811a16 	blt	r3,r2,b17c <__divdf3+0x68c>
    ad14:	01400a04 	movi	r5,40
    ad18:	143ffe04 	addi	r16,r2,-8
    ad1c:	288bc83a 	sub	r5,r5,r2
    ad20:	9424983a 	sll	r18,r18,r16
    ad24:	b14ad83a 	srl	r5,r22,r5
    ad28:	b420983a 	sll	r16,r22,r16
    ad2c:	2ca4b03a 	or	r18,r5,r18
    ad30:	04ff0344 	movi	r19,-1011
    ad34:	98a7c83a 	sub	r19,r19,r2
    ad38:	0029883a 	mov	r20,zero
    ad3c:	0039883a 	mov	fp,zero
    ad40:	003f8a06 	br	ab6c <__alt_data_end+0xfe00ab6c>
    ad44:	8988b03a 	or	r4,r17,r6
    ad48:	20001e1e 	bne	r4,zero,adc4 <__divdf3+0x2d4>
    ad4c:	0023883a 	mov	r17,zero
    ad50:	0011883a 	mov	r8,zero
    ad54:	01800084 	movi	r6,2
    ad58:	003f9606 	br	abb4 <__alt_data_end+0xfe00abb4>
    ad5c:	8988b03a 	or	r4,r17,r6
    ad60:	20001426 	beq	r4,zero,adb4 <__divdf3+0x2c4>
    ad64:	8800fd26 	beq	r17,zero,b15c <__divdf3+0x66c>
    ad68:	8809883a 	mov	r4,r17
    ad6c:	d9800215 	stw	r6,8(sp)
    ad70:	da400115 	stw	r9,4(sp)
    ad74:	000c7700 	call	c770 <__clzsi2>
    ad78:	d9800217 	ldw	r6,8(sp)
    ad7c:	da400117 	ldw	r9,4(sp)
    ad80:	010009c4 	movi	r4,39
    ad84:	2080f116 	blt	r4,r2,b14c <__divdf3+0x65c>
    ad88:	01000a04 	movi	r4,40
    ad8c:	123ffe04 	addi	r8,r2,-8
    ad90:	2089c83a 	sub	r4,r4,r2
    ad94:	8a22983a 	sll	r17,r17,r8
    ad98:	3108d83a 	srl	r4,r6,r4
    ad9c:	3210983a 	sll	r8,r6,r8
    ada0:	2462b03a 	or	r17,r4,r17
    ada4:	013f0344 	movi	r4,-1011
    ada8:	2085c83a 	sub	r2,r4,r2
    adac:	000d883a 	mov	r6,zero
    adb0:	003f8006 	br	abb4 <__alt_data_end+0xfe00abb4>
    adb4:	0023883a 	mov	r17,zero
    adb8:	0011883a 	mov	r8,zero
    adbc:	01800044 	movi	r6,1
    adc0:	003f7c06 	br	abb4 <__alt_data_end+0xfe00abb4>
    adc4:	018000c4 	movi	r6,3
    adc8:	003f7a06 	br	abb4 <__alt_data_end+0xfe00abb4>
    adcc:	05000104 	movi	r20,4
    add0:	0025883a 	mov	r18,zero
    add4:	0021883a 	mov	r16,zero
    add8:	07000044 	movi	fp,1
    addc:	003f6306 	br	ab6c <__alt_data_end+0xfe00ab6c>
    ade0:	05000304 	movi	r20,12
    ade4:	070000c4 	movi	fp,3
    ade8:	003f6006 	br	ab6c <__alt_data_end+0xfe00ab6c>
    adec:	000f883a 	mov	r7,zero
    adf0:	04800434 	movhi	r18,16
    adf4:	94bfffc4 	addi	r18,r18,-1
    adf8:	043fffc4 	movi	r16,-1
    adfc:	0081ffc4 	movi	r2,2047
    ae00:	003fa406 	br	ac94 <__alt_data_end+0xfe00ac94>
    ae04:	0005883a 	mov	r2,zero
    ae08:	0025883a 	mov	r18,zero
    ae0c:	0021883a 	mov	r16,zero
    ae10:	003fa006 	br	ac94 <__alt_data_end+0xfe00ac94>
    ae14:	9885c83a 	sub	r2,r19,r2
    ae18:	d8800015 	stw	r2,0(sp)
    ae1c:	8c80ef36 	bltu	r17,r18,b1dc <__divdf3+0x6ec>
    ae20:	9440ed26 	beq	r18,r17,b1d8 <__divdf3+0x6e8>
    ae24:	d8c00017 	ldw	r3,0(sp)
    ae28:	002d883a 	mov	r22,zero
    ae2c:	18ffffc4 	addi	r3,r3,-1
    ae30:	d8c00015 	stw	r3,0(sp)
    ae34:	9007883a 	mov	r3,r18
    ae38:	4026d63a 	srli	r19,r8,24
    ae3c:	8822923a 	slli	r17,r17,8
    ae40:	1809883a 	mov	r4,r3
    ae44:	402e923a 	slli	r23,r8,8
    ae48:	9c66b03a 	or	r19,r19,r17
    ae4c:	982ad43a 	srli	r21,r19,16
    ae50:	d8c00315 	stw	r3,12(sp)
    ae54:	9f3fffcc 	andi	fp,r19,65535
    ae58:	a80b883a 	mov	r5,r21
    ae5c:	000a2640 	call	a264 <__udivsi3>
    ae60:	d8c00317 	ldw	r3,12(sp)
    ae64:	a80b883a 	mov	r5,r21
    ae68:	1025883a 	mov	r18,r2
    ae6c:	1809883a 	mov	r4,r3
    ae70:	000a26c0 	call	a26c <__umodsi3>
    ae74:	1004943a 	slli	r2,r2,16
    ae78:	8006d43a 	srli	r3,r16,16
    ae7c:	9709383a 	mul	r4,r18,fp
    ae80:	10c6b03a 	or	r3,r2,r3
    ae84:	1900062e 	bgeu	r3,r4,aea0 <__divdf3+0x3b0>
    ae88:	1cc7883a 	add	r3,r3,r19
    ae8c:	90bfffc4 	addi	r2,r18,-1
    ae90:	1cc0e436 	bltu	r3,r19,b224 <__divdf3+0x734>
    ae94:	1900e32e 	bgeu	r3,r4,b224 <__divdf3+0x734>
    ae98:	94bfff84 	addi	r18,r18,-2
    ae9c:	1cc7883a 	add	r3,r3,r19
    aea0:	1907c83a 	sub	r3,r3,r4
    aea4:	1809883a 	mov	r4,r3
    aea8:	a80b883a 	mov	r5,r21
    aeac:	d8c00315 	stw	r3,12(sp)
    aeb0:	000a2640 	call	a264 <__udivsi3>
    aeb4:	d8c00317 	ldw	r3,12(sp)
    aeb8:	a80b883a 	mov	r5,r21
    aebc:	1023883a 	mov	r17,r2
    aec0:	1809883a 	mov	r4,r3
    aec4:	000a26c0 	call	a26c <__umodsi3>
    aec8:	1004943a 	slli	r2,r2,16
    aecc:	8f0b383a 	mul	r5,r17,fp
    aed0:	843fffcc 	andi	r16,r16,65535
    aed4:	1420b03a 	or	r16,r2,r16
    aed8:	8140062e 	bgeu	r16,r5,aef4 <__divdf3+0x404>
    aedc:	84e1883a 	add	r16,r16,r19
    aee0:	88bfffc4 	addi	r2,r17,-1
    aee4:	84c0cd36 	bltu	r16,r19,b21c <__divdf3+0x72c>
    aee8:	8140cc2e 	bgeu	r16,r5,b21c <__divdf3+0x72c>
    aeec:	8c7fff84 	addi	r17,r17,-2
    aef0:	84e1883a 	add	r16,r16,r19
    aef4:	9004943a 	slli	r2,r18,16
    aef8:	b8ffffcc 	andi	r3,r23,65535
    aefc:	b824d43a 	srli	r18,r23,16
    af00:	88a2b03a 	or	r17,r17,r2
    af04:	8808d43a 	srli	r4,r17,16
    af08:	88bfffcc 	andi	r2,r17,65535
    af0c:	10cd383a 	mul	r6,r2,r3
    af10:	20cf383a 	mul	r7,r4,r3
    af14:	1485383a 	mul	r2,r2,r18
    af18:	3010d43a 	srli	r8,r6,16
    af1c:	814bc83a 	sub	r5,r16,r5
    af20:	3885883a 	add	r2,r7,r2
    af24:	1205883a 	add	r2,r2,r8
    af28:	2489383a 	mul	r4,r4,r18
    af2c:	11c0022e 	bgeu	r2,r7,af38 <__divdf3+0x448>
    af30:	01c00074 	movhi	r7,1
    af34:	21c9883a 	add	r4,r4,r7
    af38:	100ed43a 	srli	r7,r2,16
    af3c:	1020943a 	slli	r16,r2,16
    af40:	31bfffcc 	andi	r6,r6,65535
    af44:	21c9883a 	add	r4,r4,r7
    af48:	81a1883a 	add	r16,r16,r6
    af4c:	29009736 	bltu	r5,r4,b1ac <__divdf3+0x6bc>
    af50:	29009526 	beq	r5,r4,b1a8 <__divdf3+0x6b8>
    af54:	2909c83a 	sub	r4,r5,r4
    af58:	b421c83a 	sub	r16,r22,r16
    af5c:	b42d803a 	cmpltu	r22,r22,r16
    af60:	25adc83a 	sub	r22,r4,r22
    af64:	b4c0c326 	beq	r22,r19,b274 <__divdf3+0x784>
    af68:	b009883a 	mov	r4,r22
    af6c:	a80b883a 	mov	r5,r21
    af70:	d8c00315 	stw	r3,12(sp)
    af74:	000a2640 	call	a264 <__udivsi3>
    af78:	b009883a 	mov	r4,r22
    af7c:	a80b883a 	mov	r5,r21
    af80:	d8800115 	stw	r2,4(sp)
    af84:	000a26c0 	call	a26c <__umodsi3>
    af88:	da000117 	ldw	r8,4(sp)
    af8c:	1004943a 	slli	r2,r2,16
    af90:	800ad43a 	srli	r5,r16,16
    af94:	4709383a 	mul	r4,r8,fp
    af98:	d8c00317 	ldw	r3,12(sp)
    af9c:	114ab03a 	or	r5,r2,r5
    afa0:	2900062e 	bgeu	r5,r4,afbc <__divdf3+0x4cc>
    afa4:	2ccb883a 	add	r5,r5,r19
    afa8:	40bfffc4 	addi	r2,r8,-1
    afac:	2cc0b536 	bltu	r5,r19,b284 <__divdf3+0x794>
    afb0:	2900b42e 	bgeu	r5,r4,b284 <__divdf3+0x794>
    afb4:	423fff84 	addi	r8,r8,-2
    afb8:	2ccb883a 	add	r5,r5,r19
    afbc:	290dc83a 	sub	r6,r5,r4
    afc0:	3009883a 	mov	r4,r6
    afc4:	a80b883a 	mov	r5,r21
    afc8:	d8c00315 	stw	r3,12(sp)
    afcc:	da000115 	stw	r8,4(sp)
    afd0:	d9800215 	stw	r6,8(sp)
    afd4:	000a2640 	call	a264 <__udivsi3>
    afd8:	d9800217 	ldw	r6,8(sp)
    afdc:	a80b883a 	mov	r5,r21
    afe0:	102d883a 	mov	r22,r2
    afe4:	3009883a 	mov	r4,r6
    afe8:	000a26c0 	call	a26c <__umodsi3>
    afec:	1004943a 	slli	r2,r2,16
    aff0:	b739383a 	mul	fp,r22,fp
    aff4:	843fffcc 	andi	r16,r16,65535
    aff8:	1408b03a 	or	r4,r2,r16
    affc:	d8c00317 	ldw	r3,12(sp)
    b000:	da000117 	ldw	r8,4(sp)
    b004:	2700062e 	bgeu	r4,fp,b020 <__divdf3+0x530>
    b008:	24c9883a 	add	r4,r4,r19
    b00c:	b0bfffc4 	addi	r2,r22,-1
    b010:	24c09a36 	bltu	r4,r19,b27c <__divdf3+0x78c>
    b014:	2700992e 	bgeu	r4,fp,b27c <__divdf3+0x78c>
    b018:	b5bfff84 	addi	r22,r22,-2
    b01c:	24c9883a 	add	r4,r4,r19
    b020:	4010943a 	slli	r8,r8,16
    b024:	2739c83a 	sub	fp,r4,fp
    b028:	b210b03a 	or	r8,r22,r8
    b02c:	400ad43a 	srli	r5,r8,16
    b030:	40bfffcc 	andi	r2,r8,65535
    b034:	10c9383a 	mul	r4,r2,r3
    b038:	1485383a 	mul	r2,r2,r18
    b03c:	28c7383a 	mul	r3,r5,r3
    b040:	200cd43a 	srli	r6,r4,16
    b044:	2ca5383a 	mul	r18,r5,r18
    b048:	1885883a 	add	r2,r3,r2
    b04c:	1185883a 	add	r2,r2,r6
    b050:	10c0022e 	bgeu	r2,r3,b05c <__divdf3+0x56c>
    b054:	00c00074 	movhi	r3,1
    b058:	90e5883a 	add	r18,r18,r3
    b05c:	1006d43a 	srli	r3,r2,16
    b060:	1004943a 	slli	r2,r2,16
    b064:	213fffcc 	andi	r4,r4,65535
    b068:	90e5883a 	add	r18,r18,r3
    b06c:	1109883a 	add	r4,r2,r4
    b070:	e480602e 	bgeu	fp,r18,b1f4 <__divdf3+0x704>
    b074:	e4f9883a 	add	fp,fp,r19
    b078:	40bfffc4 	addi	r2,r8,-1
    b07c:	e4c06b2e 	bgeu	fp,r19,b22c <__divdf3+0x73c>
    b080:	1011883a 	mov	r8,r2
    b084:	e4805e26 	beq	fp,r18,b200 <__divdf3+0x710>
    b088:	42000054 	ori	r8,r8,1
    b08c:	d8c00017 	ldw	r3,0(sp)
    b090:	1880ffc4 	addi	r2,r3,1023
    b094:	00806d0e 	bge	zero,r2,b24c <__divdf3+0x75c>
    b098:	40c001cc 	andi	r3,r8,7
    b09c:	18000726 	beq	r3,zero,b0bc <__divdf3+0x5cc>
    b0a0:	410003cc 	andi	r4,r8,15
    b0a4:	00c00104 	movi	r3,4
    b0a8:	20c00426 	beq	r4,r3,b0bc <__divdf3+0x5cc>
    b0ac:	40c7883a 	add	r3,r8,r3
    b0b0:	1a11803a 	cmpltu	r8,r3,r8
    b0b4:	8a23883a 	add	r17,r17,r8
    b0b8:	1811883a 	mov	r8,r3
    b0bc:	88c0402c 	andhi	r3,r17,256
    b0c0:	18000526 	beq	r3,zero,b0d8 <__divdf3+0x5e8>
    b0c4:	d8c00017 	ldw	r3,0(sp)
    b0c8:	00bfc034 	movhi	r2,65280
    b0cc:	10bfffc4 	addi	r2,r2,-1
    b0d0:	88a2703a 	and	r17,r17,r2
    b0d4:	18810004 	addi	r2,r3,1024
    b0d8:	00c1ff84 	movi	r3,2046
    b0dc:	18bee916 	blt	r3,r2,ac84 <__alt_data_end+0xfe00ac84>
    b0e0:	8820977a 	slli	r16,r17,29
    b0e4:	4010d0fa 	srli	r8,r8,3
    b0e8:	8822927a 	slli	r17,r17,9
    b0ec:	1081ffcc 	andi	r2,r2,2047
    b0f0:	8220b03a 	or	r16,r16,r8
    b0f4:	8824d33a 	srli	r18,r17,12
    b0f8:	a1c0004c 	andi	r7,r20,1
    b0fc:	003ee506 	br	ac94 <__alt_data_end+0xfe00ac94>
    b100:	9080022c 	andhi	r2,r18,8
    b104:	10000a26 	beq	r2,zero,b130 <__divdf3+0x640>
    b108:	8880022c 	andhi	r2,r17,8
    b10c:	1000081e 	bne	r2,zero,b130 <__divdf3+0x640>
    b110:	00800434 	movhi	r2,16
    b114:	10bfffc4 	addi	r2,r2,-1
    b118:	8c800234 	orhi	r18,r17,8
    b11c:	90a4703a 	and	r18,r18,r2
    b120:	b00f883a 	mov	r7,r22
    b124:	4021883a 	mov	r16,r8
    b128:	0081ffc4 	movi	r2,2047
    b12c:	003ed906 	br	ac94 <__alt_data_end+0xfe00ac94>
    b130:	00800434 	movhi	r2,16
    b134:	10bfffc4 	addi	r2,r2,-1
    b138:	94800234 	orhi	r18,r18,8
    b13c:	90a4703a 	and	r18,r18,r2
    b140:	a80f883a 	mov	r7,r21
    b144:	0081ffc4 	movi	r2,2047
    b148:	003ed206 	br	ac94 <__alt_data_end+0xfe00ac94>
    b14c:	147ff604 	addi	r17,r2,-40
    b150:	3462983a 	sll	r17,r6,r17
    b154:	0011883a 	mov	r8,zero
    b158:	003f1206 	br	ada4 <__alt_data_end+0xfe00ada4>
    b15c:	3009883a 	mov	r4,r6
    b160:	d9800215 	stw	r6,8(sp)
    b164:	da400115 	stw	r9,4(sp)
    b168:	000c7700 	call	c770 <__clzsi2>
    b16c:	10800804 	addi	r2,r2,32
    b170:	da400117 	ldw	r9,4(sp)
    b174:	d9800217 	ldw	r6,8(sp)
    b178:	003f0106 	br	ad80 <__alt_data_end+0xfe00ad80>
    b17c:	14bff604 	addi	r18,r2,-40
    b180:	b4a4983a 	sll	r18,r22,r18
    b184:	0021883a 	mov	r16,zero
    b188:	003ee906 	br	ad30 <__alt_data_end+0xfe00ad30>
    b18c:	d9800215 	stw	r6,8(sp)
    b190:	d9c00115 	stw	r7,4(sp)
    b194:	000c7700 	call	c770 <__clzsi2>
    b198:	10800804 	addi	r2,r2,32
    b19c:	d9c00117 	ldw	r7,4(sp)
    b1a0:	d9800217 	ldw	r6,8(sp)
    b1a4:	003ed906 	br	ad0c <__alt_data_end+0xfe00ad0c>
    b1a8:	b400262e 	bgeu	r22,r16,b244 <__divdf3+0x754>
    b1ac:	b5ed883a 	add	r22,r22,r23
    b1b0:	b5c5803a 	cmpltu	r2,r22,r23
    b1b4:	14c5883a 	add	r2,r2,r19
    b1b8:	114b883a 	add	r5,r2,r5
    b1bc:	88bfffc4 	addi	r2,r17,-1
    b1c0:	9940112e 	bgeu	r19,r5,b208 <__divdf3+0x718>
    b1c4:	29004e36 	bltu	r5,r4,b300 <__divdf3+0x810>
    b1c8:	21401c26 	beq	r4,r5,b23c <__divdf3+0x74c>
    b1cc:	2909c83a 	sub	r4,r5,r4
    b1d0:	1023883a 	mov	r17,r2
    b1d4:	003f6006 	br	af58 <__alt_data_end+0xfe00af58>
    b1d8:	443f122e 	bgeu	r8,r16,ae24 <__alt_data_end+0xfe00ae24>
    b1dc:	8008d07a 	srli	r4,r16,1
    b1e0:	900497fa 	slli	r2,r18,31
    b1e4:	802c97fa 	slli	r22,r16,31
    b1e8:	9006d07a 	srli	r3,r18,1
    b1ec:	20a0b03a 	or	r16,r4,r2
    b1f0:	003f1106 	br	ae38 <__alt_data_end+0xfe00ae38>
    b1f4:	e4bfa41e 	bne	fp,r18,b088 <__alt_data_end+0xfe00b088>
    b1f8:	203f9e1e 	bne	r4,zero,b074 <__alt_data_end+0xfe00b074>
    b1fc:	002f883a 	mov	r23,zero
    b200:	b93fa11e 	bne	r23,r4,b088 <__alt_data_end+0xfe00b088>
    b204:	003fa106 	br	b08c <__alt_data_end+0xfe00b08c>
    b208:	2cfff01e 	bne	r5,r19,b1cc <__alt_data_end+0xfe00b1cc>
    b20c:	b5ffed2e 	bgeu	r22,r23,b1c4 <__alt_data_end+0xfe00b1c4>
    b210:	9909c83a 	sub	r4,r19,r4
    b214:	1023883a 	mov	r17,r2
    b218:	003f4f06 	br	af58 <__alt_data_end+0xfe00af58>
    b21c:	1023883a 	mov	r17,r2
    b220:	003f3406 	br	aef4 <__alt_data_end+0xfe00aef4>
    b224:	1025883a 	mov	r18,r2
    b228:	003f1d06 	br	aea0 <__alt_data_end+0xfe00aea0>
    b22c:	e4803a36 	bltu	fp,r18,b318 <__divdf3+0x828>
    b230:	97005626 	beq	r18,fp,b38c <__divdf3+0x89c>
    b234:	1011883a 	mov	r8,r2
    b238:	003f9306 	br	b088 <__alt_data_end+0xfe00b088>
    b23c:	b4003036 	bltu	r22,r16,b300 <__divdf3+0x810>
    b240:	1023883a 	mov	r17,r2
    b244:	0009883a 	mov	r4,zero
    b248:	003f4306 	br	af58 <__alt_data_end+0xfe00af58>
    b24c:	d8c00017 	ldw	r3,0(sp)
    b250:	00bf0084 	movi	r2,-1022
    b254:	10c5c83a 	sub	r2,r2,r3
    b258:	00c00e04 	movi	r3,56
    b25c:	18800d0e 	bge	r3,r2,b294 <__divdf3+0x7a4>
    b260:	a1c0004c 	andi	r7,r20,1
    b264:	0005883a 	mov	r2,zero
    b268:	0025883a 	mov	r18,zero
    b26c:	0021883a 	mov	r16,zero
    b270:	003e8806 	br	ac94 <__alt_data_end+0xfe00ac94>
    b274:	023fffc4 	movi	r8,-1
    b278:	003f8406 	br	b08c <__alt_data_end+0xfe00b08c>
    b27c:	102d883a 	mov	r22,r2
    b280:	003f6706 	br	b020 <__alt_data_end+0xfe00b020>
    b284:	1011883a 	mov	r8,r2
    b288:	003f4c06 	br	afbc <__alt_data_end+0xfe00afbc>
    b28c:	4829883a 	mov	r20,r9
    b290:	003f7e06 	br	b08c <__alt_data_end+0xfe00b08c>
    b294:	00c007c4 	movi	r3,31
    b298:	18802616 	blt	r3,r2,b334 <__divdf3+0x844>
    b29c:	d9000017 	ldw	r4,0(sp)
    b2a0:	408ad83a 	srl	r5,r8,r2
    b2a4:	8884d83a 	srl	r2,r17,r2
    b2a8:	20c10784 	addi	r3,r4,1054
    b2ac:	88c8983a 	sll	r4,r17,r3
    b2b0:	40c6983a 	sll	r3,r8,r3
    b2b4:	2908b03a 	or	r4,r5,r4
    b2b8:	1806c03a 	cmpne	r3,r3,zero
    b2bc:	20c6b03a 	or	r3,r4,r3
    b2c0:	190001cc 	andi	r4,r3,7
    b2c4:	20000726 	beq	r4,zero,b2e4 <__divdf3+0x7f4>
    b2c8:	194003cc 	andi	r5,r3,15
    b2cc:	01000104 	movi	r4,4
    b2d0:	29000426 	beq	r5,r4,b2e4 <__divdf3+0x7f4>
    b2d4:	1909883a 	add	r4,r3,r4
    b2d8:	20c7803a 	cmpltu	r3,r4,r3
    b2dc:	10c5883a 	add	r2,r2,r3
    b2e0:	2007883a 	mov	r3,r4
    b2e4:	1100202c 	andhi	r4,r2,128
    b2e8:	20002026 	beq	r4,zero,b36c <__divdf3+0x87c>
    b2ec:	a1c0004c 	andi	r7,r20,1
    b2f0:	00800044 	movi	r2,1
    b2f4:	0025883a 	mov	r18,zero
    b2f8:	0021883a 	mov	r16,zero
    b2fc:	003e6506 	br	ac94 <__alt_data_end+0xfe00ac94>
    b300:	b5ed883a 	add	r22,r22,r23
    b304:	b5c5803a 	cmpltu	r2,r22,r23
    b308:	14c5883a 	add	r2,r2,r19
    b30c:	114b883a 	add	r5,r2,r5
    b310:	8c7fff84 	addi	r17,r17,-2
    b314:	003f0f06 	br	af54 <__alt_data_end+0xfe00af54>
    b318:	bdc7883a 	add	r3,r23,r23
    b31c:	1def803a 	cmpltu	r23,r3,r23
    b320:	bce7883a 	add	r19,r23,r19
    b324:	40bfff84 	addi	r2,r8,-2
    b328:	e4f9883a 	add	fp,fp,r19
    b32c:	182f883a 	mov	r23,r3
    b330:	003f5306 	br	b080 <__alt_data_end+0xfe00b080>
    b334:	d9000017 	ldw	r4,0(sp)
    b338:	00fef884 	movi	r3,-1054
    b33c:	1907c83a 	sub	r3,r3,r4
    b340:	01000804 	movi	r4,32
    b344:	88c6d83a 	srl	r3,r17,r3
    b348:	11001426 	beq	r2,r4,b39c <__divdf3+0x8ac>
    b34c:	d9000017 	ldw	r4,0(sp)
    b350:	20810f84 	addi	r2,r4,1086
    b354:	8884983a 	sll	r2,r17,r2
    b358:	1204b03a 	or	r2,r2,r8
    b35c:	1004c03a 	cmpne	r2,r2,zero
    b360:	10c6b03a 	or	r3,r2,r3
    b364:	0005883a 	mov	r2,zero
    b368:	003fd506 	br	b2c0 <__alt_data_end+0xfe00b2c0>
    b36c:	1020977a 	slli	r16,r2,29
    b370:	1806d0fa 	srli	r3,r3,3
    b374:	1004927a 	slli	r2,r2,9
    b378:	a1c0004c 	andi	r7,r20,1
    b37c:	80e0b03a 	or	r16,r16,r3
    b380:	1024d33a 	srli	r18,r2,12
    b384:	0005883a 	mov	r2,zero
    b388:	003e4206 	br	ac94 <__alt_data_end+0xfe00ac94>
    b38c:	b93fe236 	bltu	r23,r4,b318 <__alt_data_end+0xfe00b318>
    b390:	1011883a 	mov	r8,r2
    b394:	b93f3c1e 	bne	r23,r4,b088 <__alt_data_end+0xfe00b088>
    b398:	003f3c06 	br	b08c <__alt_data_end+0xfe00b08c>
    b39c:	0005883a 	mov	r2,zero
    b3a0:	003fed06 	br	b358 <__alt_data_end+0xfe00b358>
    b3a4:	00800434 	movhi	r2,16
    b3a8:	10bfffc4 	addi	r2,r2,-1
    b3ac:	8c800234 	orhi	r18,r17,8
    b3b0:	90a4703a 	and	r18,r18,r2
    b3b4:	480f883a 	mov	r7,r9
    b3b8:	4021883a 	mov	r16,r8
    b3bc:	0081ffc4 	movi	r2,2047
    b3c0:	003e3406 	br	ac94 <__alt_data_end+0xfe00ac94>

0000b3c4 <__eqdf2>:
    b3c4:	2806d53a 	srli	r3,r5,20
    b3c8:	3810d53a 	srli	r8,r7,20
    b3cc:	00800434 	movhi	r2,16
    b3d0:	10bfffc4 	addi	r2,r2,-1
    b3d4:	18c1ffcc 	andi	r3,r3,2047
    b3d8:	0241ffc4 	movi	r9,2047
    b3dc:	2894703a 	and	r10,r5,r2
    b3e0:	4201ffcc 	andi	r8,r8,2047
    b3e4:	3884703a 	and	r2,r7,r2
    b3e8:	280ad7fa 	srli	r5,r5,31
    b3ec:	380ed7fa 	srli	r7,r7,31
    b3f0:	1a400f26 	beq	r3,r9,b430 <__eqdf2+0x6c>
    b3f4:	0241ffc4 	movi	r9,2047
    b3f8:	42400326 	beq	r8,r9,b408 <__eqdf2+0x44>
    b3fc:	1a000526 	beq	r3,r8,b414 <__eqdf2+0x50>
    b400:	00800044 	movi	r2,1
    b404:	f800283a 	ret
    b408:	1192b03a 	or	r9,r2,r6
    b40c:	483ffc1e 	bne	r9,zero,b400 <__alt_data_end+0xfe00b400>
    b410:	1a3ffb1e 	bne	r3,r8,b400 <__alt_data_end+0xfe00b400>
    b414:	50bffa1e 	bne	r10,r2,b400 <__alt_data_end+0xfe00b400>
    b418:	21bff91e 	bne	r4,r6,b400 <__alt_data_end+0xfe00b400>
    b41c:	29c00826 	beq	r5,r7,b440 <__eqdf2+0x7c>
    b420:	183ff71e 	bne	r3,zero,b400 <__alt_data_end+0xfe00b400>
    b424:	5104b03a 	or	r2,r10,r4
    b428:	1004c03a 	cmpne	r2,r2,zero
    b42c:	f800283a 	ret
    b430:	5112b03a 	or	r9,r10,r4
    b434:	483fef26 	beq	r9,zero,b3f4 <__alt_data_end+0xfe00b3f4>
    b438:	00800044 	movi	r2,1
    b43c:	f800283a 	ret
    b440:	0005883a 	mov	r2,zero
    b444:	f800283a 	ret

0000b448 <__gedf2>:
    b448:	2804d53a 	srli	r2,r5,20
    b44c:	3810d53a 	srli	r8,r7,20
    b450:	00c00434 	movhi	r3,16
    b454:	18ffffc4 	addi	r3,r3,-1
    b458:	1081ffcc 	andi	r2,r2,2047
    b45c:	0241ffc4 	movi	r9,2047
    b460:	28d4703a 	and	r10,r5,r3
    b464:	4201ffcc 	andi	r8,r8,2047
    b468:	38c6703a 	and	r3,r7,r3
    b46c:	280ad7fa 	srli	r5,r5,31
    b470:	380ed7fa 	srli	r7,r7,31
    b474:	12401b26 	beq	r2,r9,b4e4 <__gedf2+0x9c>
    b478:	0241ffc4 	movi	r9,2047
    b47c:	42400926 	beq	r8,r9,b4a4 <__gedf2+0x5c>
    b480:	10000c1e 	bne	r2,zero,b4b4 <__gedf2+0x6c>
    b484:	5112b03a 	or	r9,r10,r4
    b488:	4813003a 	cmpeq	r9,r9,zero
    b48c:	4817883a 	mov	r11,r9
    b490:	40000a26 	beq	r8,zero,b4bc <__gedf2+0x74>
    b494:	48001626 	beq	r9,zero,b4f0 <__gedf2+0xa8>
    b498:	38000d1e 	bne	r7,zero,b4d0 <__gedf2+0x88>
    b49c:	00bfffc4 	movi	r2,-1
    b4a0:	f800283a 	ret
    b4a4:	1992b03a 	or	r9,r3,r6
    b4a8:	483ff526 	beq	r9,zero,b480 <__alt_data_end+0xfe00b480>
    b4ac:	00bfff84 	movi	r2,-2
    b4b0:	f800283a 	ret
    b4b4:	40000e1e 	bne	r8,zero,b4f0 <__gedf2+0xa8>
    b4b8:	0017883a 	mov	r11,zero
    b4bc:	1992b03a 	or	r9,r3,r6
    b4c0:	4813003a 	cmpeq	r9,r9,zero
    b4c4:	5800041e 	bne	r11,zero,b4d8 <__gedf2+0x90>
    b4c8:	48000926 	beq	r9,zero,b4f0 <__gedf2+0xa8>
    b4cc:	283ff31e 	bne	r5,zero,b49c <__alt_data_end+0xfe00b49c>
    b4d0:	00800044 	movi	r2,1
    b4d4:	f800283a 	ret
    b4d8:	483fef26 	beq	r9,zero,b498 <__alt_data_end+0xfe00b498>
    b4dc:	0005883a 	mov	r2,zero
    b4e0:	f800283a 	ret
    b4e4:	5112b03a 	or	r9,r10,r4
    b4e8:	483fe326 	beq	r9,zero,b478 <__alt_data_end+0xfe00b478>
    b4ec:	003fef06 	br	b4ac <__alt_data_end+0xfe00b4ac>
    b4f0:	29fff61e 	bne	r5,r7,b4cc <__alt_data_end+0xfe00b4cc>
    b4f4:	40bff516 	blt	r8,r2,b4cc <__alt_data_end+0xfe00b4cc>
    b4f8:	12000316 	blt	r2,r8,b508 <__gedf2+0xc0>
    b4fc:	1abff336 	bltu	r3,r10,b4cc <__alt_data_end+0xfe00b4cc>
    b500:	50c00326 	beq	r10,r3,b510 <__gedf2+0xc8>
    b504:	50fff52e 	bgeu	r10,r3,b4dc <__alt_data_end+0xfe00b4dc>
    b508:	283fe426 	beq	r5,zero,b49c <__alt_data_end+0xfe00b49c>
    b50c:	003ff006 	br	b4d0 <__alt_data_end+0xfe00b4d0>
    b510:	313fee36 	bltu	r6,r4,b4cc <__alt_data_end+0xfe00b4cc>
    b514:	21bff12e 	bgeu	r4,r6,b4dc <__alt_data_end+0xfe00b4dc>
    b518:	283fe026 	beq	r5,zero,b49c <__alt_data_end+0xfe00b49c>
    b51c:	003fec06 	br	b4d0 <__alt_data_end+0xfe00b4d0>

0000b520 <__ledf2>:
    b520:	2806d53a 	srli	r3,r5,20
    b524:	3810d53a 	srli	r8,r7,20
    b528:	00800434 	movhi	r2,16
    b52c:	10bfffc4 	addi	r2,r2,-1
    b530:	18c1ffcc 	andi	r3,r3,2047
    b534:	0241ffc4 	movi	r9,2047
    b538:	2894703a 	and	r10,r5,r2
    b53c:	4201ffcc 	andi	r8,r8,2047
    b540:	3884703a 	and	r2,r7,r2
    b544:	280ad7fa 	srli	r5,r5,31
    b548:	380ed7fa 	srli	r7,r7,31
    b54c:	1a402026 	beq	r3,r9,b5d0 <__ledf2+0xb0>
    b550:	0241ffc4 	movi	r9,2047
    b554:	42401726 	beq	r8,r9,b5b4 <__ledf2+0x94>
    b558:	18000b26 	beq	r3,zero,b588 <__ledf2+0x68>
    b55c:	29403fcc 	andi	r5,r5,255
    b560:	39c03fcc 	andi	r7,r7,255
    b564:	40000f1e 	bne	r8,zero,b5a4 <__ledf2+0x84>
    b568:	0017883a 	mov	r11,zero
    b56c:	1192b03a 	or	r9,r2,r6
    b570:	4813003a 	cmpeq	r9,r9,zero
    b574:	58001326 	beq	r11,zero,b5c4 <__ledf2+0xa4>
    b578:	48001e1e 	bne	r9,zero,b5f4 <__ledf2+0xd4>
    b57c:	38000b1e 	bne	r7,zero,b5ac <__ledf2+0x8c>
    b580:	00bfffc4 	movi	r2,-1
    b584:	f800283a 	ret
    b588:	5112b03a 	or	r9,r10,r4
    b58c:	4813003a 	cmpeq	r9,r9,zero
    b590:	4817883a 	mov	r11,r9
    b594:	29403fcc 	andi	r5,r5,255
    b598:	39c03fcc 	andi	r7,r7,255
    b59c:	403ff326 	beq	r8,zero,b56c <__alt_data_end+0xfe00b56c>
    b5a0:	483ff61e 	bne	r9,zero,b57c <__alt_data_end+0xfe00b57c>
    b5a4:	29c00e26 	beq	r5,r7,b5e0 <__ledf2+0xc0>
    b5a8:	283ff51e 	bne	r5,zero,b580 <__alt_data_end+0xfe00b580>
    b5ac:	00800044 	movi	r2,1
    b5b0:	f800283a 	ret
    b5b4:	1192b03a 	or	r9,r2,r6
    b5b8:	483fe726 	beq	r9,zero,b558 <__alt_data_end+0xfe00b558>
    b5bc:	00800084 	movi	r2,2
    b5c0:	f800283a 	ret
    b5c4:	483ff726 	beq	r9,zero,b5a4 <__alt_data_end+0xfe00b5a4>
    b5c8:	283ff826 	beq	r5,zero,b5ac <__alt_data_end+0xfe00b5ac>
    b5cc:	003fec06 	br	b580 <__alt_data_end+0xfe00b580>
    b5d0:	5112b03a 	or	r9,r10,r4
    b5d4:	483fde26 	beq	r9,zero,b550 <__alt_data_end+0xfe00b550>
    b5d8:	00800084 	movi	r2,2
    b5dc:	f800283a 	ret
    b5e0:	40fff116 	blt	r8,r3,b5a8 <__alt_data_end+0xfe00b5a8>
    b5e4:	1a000716 	blt	r3,r8,b604 <__ledf2+0xe4>
    b5e8:	12bfef36 	bltu	r2,r10,b5a8 <__alt_data_end+0xfe00b5a8>
    b5ec:	50800326 	beq	r10,r2,b5fc <__ledf2+0xdc>
    b5f0:	50800436 	bltu	r10,r2,b604 <__ledf2+0xe4>
    b5f4:	0005883a 	mov	r2,zero
    b5f8:	f800283a 	ret
    b5fc:	313fea36 	bltu	r6,r4,b5a8 <__alt_data_end+0xfe00b5a8>
    b600:	21bffc2e 	bgeu	r4,r6,b5f4 <__alt_data_end+0xfe00b5f4>
    b604:	283fde26 	beq	r5,zero,b580 <__alt_data_end+0xfe00b580>
    b608:	003fe806 	br	b5ac <__alt_data_end+0xfe00b5ac>

0000b60c <__muldf3>:
    b60c:	defff204 	addi	sp,sp,-56
    b610:	dd000815 	stw	r20,32(sp)
    b614:	2828d53a 	srli	r20,r5,20
    b618:	dc800615 	stw	r18,24(sp)
    b61c:	2824d7fa 	srli	r18,r5,31
    b620:	ddc00b15 	stw	r23,44(sp)
    b624:	dd400915 	stw	r21,36(sp)
    b628:	dcc00715 	stw	r19,28(sp)
    b62c:	dc400515 	stw	r17,20(sp)
    b630:	dfc00d15 	stw	ra,52(sp)
    b634:	04400434 	movhi	r17,16
    b638:	8c7fffc4 	addi	r17,r17,-1
    b63c:	df000c15 	stw	fp,48(sp)
    b640:	dd800a15 	stw	r22,40(sp)
    b644:	dc000415 	stw	r16,16(sp)
    b648:	a501ffcc 	andi	r20,r20,2047
    b64c:	2027883a 	mov	r19,r4
    b650:	2c62703a 	and	r17,r5,r17
    b654:	902f883a 	mov	r23,r18
    b658:	95403fcc 	andi	r21,r18,255
    b65c:	a0005d26 	beq	r20,zero,b7d4 <__muldf3+0x1c8>
    b660:	0081ffc4 	movi	r2,2047
    b664:	2021883a 	mov	r16,r4
    b668:	a0803326 	beq	r20,r2,b738 <__muldf3+0x12c>
    b66c:	88800434 	orhi	r2,r17,16
    b670:	100490fa 	slli	r2,r2,3
    b674:	2022d77a 	srli	r17,r4,29
    b678:	202090fa 	slli	r16,r4,3
    b67c:	a53f0044 	addi	r20,r20,-1023
    b680:	1462b03a 	or	r17,r2,r17
    b684:	0015883a 	mov	r10,zero
    b688:	0039883a 	mov	fp,zero
    b68c:	3804d53a 	srli	r2,r7,20
    b690:	382cd7fa 	srli	r22,r7,31
    b694:	04c00434 	movhi	r19,16
    b698:	9cffffc4 	addi	r19,r19,-1
    b69c:	1081ffcc 	andi	r2,r2,2047
    b6a0:	300b883a 	mov	r5,r6
    b6a4:	3ce6703a 	and	r19,r7,r19
    b6a8:	b2403fcc 	andi	r9,r22,255
    b6ac:	10006626 	beq	r2,zero,b848 <__muldf3+0x23c>
    b6b0:	00c1ffc4 	movi	r3,2047
    b6b4:	10c05e26 	beq	r2,r3,b830 <__muldf3+0x224>
    b6b8:	98c00434 	orhi	r3,r19,16
    b6bc:	180690fa 	slli	r3,r3,3
    b6c0:	3026d77a 	srli	r19,r6,29
    b6c4:	300a90fa 	slli	r5,r6,3
    b6c8:	10bf0044 	addi	r2,r2,-1023
    b6cc:	1ce6b03a 	or	r19,r3,r19
    b6d0:	0007883a 	mov	r3,zero
    b6d4:	1a88b03a 	or	r4,r3,r10
    b6d8:	2109883a 	add	r4,r4,r4
    b6dc:	2109883a 	add	r4,r4,r4
    b6e0:	01800074 	movhi	r6,1
    b6e4:	31adbe04 	addi	r6,r6,-18696
    b6e8:	2189883a 	add	r4,r4,r6
    b6ec:	21000017 	ldw	r4,0(r4)
    b6f0:	95a4f03a 	xor	r18,r18,r22
    b6f4:	2000683a 	jmp	r4
    b6f8:	0000b930 	cmpltui	zero,zero,740
    b6fc:	0000b920 	cmpeqi	zero,zero,740
    b700:	0000b920 	cmpeqi	zero,zero,740
    b704:	0000b90c 	andi	zero,zero,740
    b708:	0000b758 	cmpnei	zero,zero,733
    b70c:	0000b758 	cmpnei	zero,zero,733
    b710:	0000b8f4 	movhi	zero,739
    b714:	0000b90c 	andi	zero,zero,740
    b718:	0000b758 	cmpnei	zero,zero,733
    b71c:	0000b8f4 	movhi	zero,739
    b720:	0000b758 	cmpnei	zero,zero,733
    b724:	0000b90c 	andi	zero,zero,740
    b728:	0000b754 	movui	zero,733
    b72c:	0000b754 	movui	zero,733
    b730:	0000b754 	movui	zero,733
    b734:	0000bb50 	cmplti	zero,zero,749
    b738:	8904b03a 	or	r2,r17,r4
    b73c:	10006a1e 	bne	r2,zero,b8e8 <__muldf3+0x2dc>
    b740:	02800204 	movi	r10,8
    b744:	0023883a 	mov	r17,zero
    b748:	0021883a 	mov	r16,zero
    b74c:	07000084 	movi	fp,2
    b750:	003fce06 	br	b68c <__alt_data_end+0xfe00b68c>
    b754:	a825883a 	mov	r18,r21
    b758:	00800084 	movi	r2,2
    b75c:	e0805226 	beq	fp,r2,b8a8 <__muldf3+0x29c>
    b760:	008000c4 	movi	r2,3
    b764:	e0815d26 	beq	fp,r2,bcdc <__muldf3+0x6d0>
    b768:	00800044 	movi	r2,1
    b76c:	e080db1e 	bne	fp,r2,badc <__muldf3+0x4d0>
    b770:	902f883a 	mov	r23,r18
    b774:	0005883a 	mov	r2,zero
    b778:	0023883a 	mov	r17,zero
    b77c:	0021883a 	mov	r16,zero
    b780:	1004953a 	slli	r2,r2,20
    b784:	bdc03fcc 	andi	r23,r23,255
    b788:	b82e97fa 	slli	r23,r23,31
    b78c:	00c00434 	movhi	r3,16
    b790:	18ffffc4 	addi	r3,r3,-1
    b794:	88e2703a 	and	r17,r17,r3
    b798:	8886b03a 	or	r3,r17,r2
    b79c:	1dc6b03a 	or	r3,r3,r23
    b7a0:	8005883a 	mov	r2,r16
    b7a4:	dfc00d17 	ldw	ra,52(sp)
    b7a8:	df000c17 	ldw	fp,48(sp)
    b7ac:	ddc00b17 	ldw	r23,44(sp)
    b7b0:	dd800a17 	ldw	r22,40(sp)
    b7b4:	dd400917 	ldw	r21,36(sp)
    b7b8:	dd000817 	ldw	r20,32(sp)
    b7bc:	dcc00717 	ldw	r19,28(sp)
    b7c0:	dc800617 	ldw	r18,24(sp)
    b7c4:	dc400517 	ldw	r17,20(sp)
    b7c8:	dc000417 	ldw	r16,16(sp)
    b7cc:	dec00e04 	addi	sp,sp,56
    b7d0:	f800283a 	ret
    b7d4:	8904b03a 	or	r2,r17,r4
    b7d8:	10003e26 	beq	r2,zero,b8d4 <__muldf3+0x2c8>
    b7dc:	8800f226 	beq	r17,zero,bba8 <__muldf3+0x59c>
    b7e0:	8809883a 	mov	r4,r17
    b7e4:	d9800315 	stw	r6,12(sp)
    b7e8:	d9c00115 	stw	r7,4(sp)
    b7ec:	000c7700 	call	c770 <__clzsi2>
    b7f0:	d9800317 	ldw	r6,12(sp)
    b7f4:	d9c00117 	ldw	r7,4(sp)
    b7f8:	00c009c4 	movi	r3,39
    b7fc:	1880e616 	blt	r3,r2,bb98 <__muldf3+0x58c>
    b800:	00c00a04 	movi	r3,40
    b804:	143ffe04 	addi	r16,r2,-8
    b808:	1887c83a 	sub	r3,r3,r2
    b80c:	8c22983a 	sll	r17,r17,r16
    b810:	98c6d83a 	srl	r3,r19,r3
    b814:	9c20983a 	sll	r16,r19,r16
    b818:	1c62b03a 	or	r17,r3,r17
    b81c:	053f0344 	movi	r20,-1011
    b820:	a0a9c83a 	sub	r20,r20,r2
    b824:	0015883a 	mov	r10,zero
    b828:	0039883a 	mov	fp,zero
    b82c:	003f9706 	br	b68c <__alt_data_end+0xfe00b68c>
    b830:	9986b03a 	or	r3,r19,r6
    b834:	1800251e 	bne	r3,zero,b8cc <__muldf3+0x2c0>
    b838:	0027883a 	mov	r19,zero
    b83c:	000b883a 	mov	r5,zero
    b840:	00c00084 	movi	r3,2
    b844:	003fa306 	br	b6d4 <__alt_data_end+0xfe00b6d4>
    b848:	9986b03a 	or	r3,r19,r6
    b84c:	18001b26 	beq	r3,zero,b8bc <__muldf3+0x2b0>
    b850:	9800e026 	beq	r19,zero,bbd4 <__muldf3+0x5c8>
    b854:	9809883a 	mov	r4,r19
    b858:	d9800315 	stw	r6,12(sp)
    b85c:	da400115 	stw	r9,4(sp)
    b860:	da800215 	stw	r10,8(sp)
    b864:	000c7700 	call	c770 <__clzsi2>
    b868:	d9800317 	ldw	r6,12(sp)
    b86c:	da400117 	ldw	r9,4(sp)
    b870:	da800217 	ldw	r10,8(sp)
    b874:	00c009c4 	movi	r3,39
    b878:	1880d216 	blt	r3,r2,bbc4 <__muldf3+0x5b8>
    b87c:	01c00a04 	movi	r7,40
    b880:	117ffe04 	addi	r5,r2,-8
    b884:	388fc83a 	sub	r7,r7,r2
    b888:	9966983a 	sll	r19,r19,r5
    b88c:	31ced83a 	srl	r7,r6,r7
    b890:	314a983a 	sll	r5,r6,r5
    b894:	3ce6b03a 	or	r19,r7,r19
    b898:	00ff0344 	movi	r3,-1011
    b89c:	1885c83a 	sub	r2,r3,r2
    b8a0:	0007883a 	mov	r3,zero
    b8a4:	003f8b06 	br	b6d4 <__alt_data_end+0xfe00b6d4>
    b8a8:	902f883a 	mov	r23,r18
    b8ac:	0081ffc4 	movi	r2,2047
    b8b0:	0023883a 	mov	r17,zero
    b8b4:	0021883a 	mov	r16,zero
    b8b8:	003fb106 	br	b780 <__alt_data_end+0xfe00b780>
    b8bc:	0027883a 	mov	r19,zero
    b8c0:	000b883a 	mov	r5,zero
    b8c4:	00c00044 	movi	r3,1
    b8c8:	003f8206 	br	b6d4 <__alt_data_end+0xfe00b6d4>
    b8cc:	00c000c4 	movi	r3,3
    b8d0:	003f8006 	br	b6d4 <__alt_data_end+0xfe00b6d4>
    b8d4:	02800104 	movi	r10,4
    b8d8:	0023883a 	mov	r17,zero
    b8dc:	0021883a 	mov	r16,zero
    b8e0:	07000044 	movi	fp,1
    b8e4:	003f6906 	br	b68c <__alt_data_end+0xfe00b68c>
    b8e8:	02800304 	movi	r10,12
    b8ec:	070000c4 	movi	fp,3
    b8f0:	003f6606 	br	b68c <__alt_data_end+0xfe00b68c>
    b8f4:	002f883a 	mov	r23,zero
    b8f8:	04400434 	movhi	r17,16
    b8fc:	8c7fffc4 	addi	r17,r17,-1
    b900:	043fffc4 	movi	r16,-1
    b904:	0081ffc4 	movi	r2,2047
    b908:	003f9d06 	br	b780 <__alt_data_end+0xfe00b780>
    b90c:	9823883a 	mov	r17,r19
    b910:	2821883a 	mov	r16,r5
    b914:	4825883a 	mov	r18,r9
    b918:	1839883a 	mov	fp,r3
    b91c:	003f8e06 	br	b758 <__alt_data_end+0xfe00b758>
    b920:	9823883a 	mov	r17,r19
    b924:	2821883a 	mov	r16,r5
    b928:	1839883a 	mov	fp,r3
    b92c:	003f8a06 	br	b758 <__alt_data_end+0xfe00b758>
    b930:	800cd43a 	srli	r6,r16,16
    b934:	2808d43a 	srli	r4,r5,16
    b938:	843fffcc 	andi	r16,r16,65535
    b93c:	297fffcc 	andi	r5,r5,65535
    b940:	2c15383a 	mul	r10,r5,r16
    b944:	2411383a 	mul	r8,r4,r16
    b948:	2987383a 	mul	r3,r5,r6
    b94c:	500ed43a 	srli	r7,r10,16
    b950:	a085883a 	add	r2,r20,r2
    b954:	d8800015 	stw	r2,0(sp)
    b958:	1a05883a 	add	r2,r3,r8
    b95c:	11c5883a 	add	r2,r2,r7
    b960:	2197383a 	mul	r11,r4,r6
    b964:	10c0022e 	bgeu	r2,r3,b970 <__muldf3+0x364>
    b968:	00c00074 	movhi	r3,1
    b96c:	58d7883a 	add	r11,r11,r3
    b970:	9806d43a 	srli	r3,r19,16
    b974:	9cffffcc 	andi	r19,r19,65535
    b978:	9c13383a 	mul	r9,r19,r16
    b97c:	9991383a 	mul	r8,r19,r6
    b980:	1c21383a 	mul	r16,r3,r16
    b984:	481ad43a 	srli	r13,r9,16
    b988:	1018943a 	slli	r12,r2,16
    b98c:	440f883a 	add	r7,r8,r16
    b990:	52bfffcc 	andi	r10,r10,65535
    b994:	3b4f883a 	add	r7,r7,r13
    b998:	1020d43a 	srli	r16,r2,16
    b99c:	6299883a 	add	r12,r12,r10
    b9a0:	198d383a 	mul	r6,r3,r6
    b9a4:	3a00022e 	bgeu	r7,r8,b9b0 <__muldf3+0x3a4>
    b9a8:	00800074 	movhi	r2,1
    b9ac:	308d883a 	add	r6,r6,r2
    b9b0:	8804d43a 	srli	r2,r17,16
    b9b4:	8c7fffcc 	andi	r17,r17,65535
    b9b8:	2c55383a 	mul	r10,r5,r17
    b9bc:	2451383a 	mul	r8,r4,r17
    b9c0:	288b383a 	mul	r5,r5,r2
    b9c4:	501cd43a 	srli	r14,r10,16
    b9c8:	381ad43a 	srli	r13,r7,16
    b9cc:	380e943a 	slli	r7,r7,16
    b9d0:	2a11883a 	add	r8,r5,r8
    b9d4:	4a7fffcc 	andi	r9,r9,65535
    b9d8:	4391883a 	add	r8,r8,r14
    b9dc:	334d883a 	add	r6,r6,r13
    b9e0:	3a4f883a 	add	r7,r7,r9
    b9e4:	2089383a 	mul	r4,r4,r2
    b9e8:	4140022e 	bgeu	r8,r5,b9f4 <__muldf3+0x3e8>
    b9ec:	01400074 	movhi	r5,1
    b9f0:	2149883a 	add	r4,r4,r5
    b9f4:	9c53383a 	mul	r9,r19,r17
    b9f8:	1c63383a 	mul	r17,r3,r17
    b9fc:	98a7383a 	mul	r19,r19,r2
    ba00:	481cd43a 	srli	r14,r9,16
    ba04:	401ad43a 	srli	r13,r8,16
    ba08:	4010943a 	slli	r8,r8,16
    ba0c:	9c4b883a 	add	r5,r19,r17
    ba10:	52bfffcc 	andi	r10,r10,65535
    ba14:	2b8b883a 	add	r5,r5,r14
    ba18:	2349883a 	add	r4,r4,r13
    ba1c:	4291883a 	add	r8,r8,r10
    ba20:	1887383a 	mul	r3,r3,r2
    ba24:	2cc0022e 	bgeu	r5,r19,ba30 <__muldf3+0x424>
    ba28:	00800074 	movhi	r2,1
    ba2c:	1887883a 	add	r3,r3,r2
    ba30:	2814943a 	slli	r10,r5,16
    ba34:	3c21883a 	add	r16,r7,r16
    ba38:	4a7fffcc 	andi	r9,r9,65535
    ba3c:	82e1883a 	add	r16,r16,r11
    ba40:	5255883a 	add	r10,r10,r9
    ba44:	81cf803a 	cmpltu	r7,r16,r7
    ba48:	5195883a 	add	r10,r10,r6
    ba4c:	8221883a 	add	r16,r16,r8
    ba50:	51d7883a 	add	r11,r10,r7
    ba54:	8211803a 	cmpltu	r8,r16,r8
    ba58:	2804d43a 	srli	r2,r5,16
    ba5c:	22d3883a 	add	r9,r4,r11
    ba60:	4a0b883a 	add	r5,r9,r8
    ba64:	518d803a 	cmpltu	r6,r10,r6
    ba68:	59e3803a 	cmpltu	r17,r11,r7
    ba6c:	89a2b03a 	or	r17,r17,r6
    ba70:	2a11803a 	cmpltu	r8,r5,r8
    ba74:	4909803a 	cmpltu	r4,r9,r4
    ba78:	88a3883a 	add	r17,r17,r2
    ba7c:	4108b03a 	or	r4,r8,r4
    ba80:	8923883a 	add	r17,r17,r4
    ba84:	800c927a 	slli	r6,r16,9
    ba88:	88c7883a 	add	r3,r17,r3
    ba8c:	2808d5fa 	srli	r4,r5,23
    ba90:	1822927a 	slli	r17,r3,9
    ba94:	8020d5fa 	srli	r16,r16,23
    ba98:	3318b03a 	or	r12,r6,r12
    ba9c:	280a927a 	slli	r5,r5,9
    baa0:	8922b03a 	or	r17,r17,r4
    baa4:	6018c03a 	cmpne	r12,r12,zero
    baa8:	6420b03a 	or	r16,r12,r16
    baac:	8880402c 	andhi	r2,r17,256
    bab0:	8160b03a 	or	r16,r16,r5
    bab4:	10000926 	beq	r2,zero,badc <__muldf3+0x4d0>
    bab8:	8006d07a 	srli	r3,r16,1
    babc:	8400004c 	andi	r16,r16,1
    bac0:	880497fa 	slli	r2,r17,31
    bac4:	80e0b03a 	or	r16,r16,r3
    bac8:	d8c00017 	ldw	r3,0(sp)
    bacc:	8822d07a 	srli	r17,r17,1
    bad0:	80a0b03a 	or	r16,r16,r2
    bad4:	18c00044 	addi	r3,r3,1
    bad8:	d8c00015 	stw	r3,0(sp)
    badc:	d8c00017 	ldw	r3,0(sp)
    bae0:	1880ffc4 	addi	r2,r3,1023
    bae4:	0080450e 	bge	zero,r2,bbfc <__muldf3+0x5f0>
    bae8:	80c001cc 	andi	r3,r16,7
    baec:	18000726 	beq	r3,zero,bb0c <__muldf3+0x500>
    baf0:	810003cc 	andi	r4,r16,15
    baf4:	00c00104 	movi	r3,4
    baf8:	20c00426 	beq	r4,r3,bb0c <__muldf3+0x500>
    bafc:	80c7883a 	add	r3,r16,r3
    bb00:	1c21803a 	cmpltu	r16,r3,r16
    bb04:	8c23883a 	add	r17,r17,r16
    bb08:	1821883a 	mov	r16,r3
    bb0c:	88c0402c 	andhi	r3,r17,256
    bb10:	18000526 	beq	r3,zero,bb28 <__muldf3+0x51c>
    bb14:	d8c00017 	ldw	r3,0(sp)
    bb18:	00bfc034 	movhi	r2,65280
    bb1c:	10bfffc4 	addi	r2,r2,-1
    bb20:	88a2703a 	and	r17,r17,r2
    bb24:	18810004 	addi	r2,r3,1024
    bb28:	00c1ff84 	movi	r3,2046
    bb2c:	18bf5e16 	blt	r3,r2,b8a8 <__alt_data_end+0xfe00b8a8>
    bb30:	8806977a 	slli	r3,r17,29
    bb34:	8020d0fa 	srli	r16,r16,3
    bb38:	8822927a 	slli	r17,r17,9
    bb3c:	1081ffcc 	andi	r2,r2,2047
    bb40:	1c20b03a 	or	r16,r3,r16
    bb44:	8822d33a 	srli	r17,r17,12
    bb48:	902f883a 	mov	r23,r18
    bb4c:	003f0c06 	br	b780 <__alt_data_end+0xfe00b780>
    bb50:	8880022c 	andhi	r2,r17,8
    bb54:	10000a26 	beq	r2,zero,bb80 <__muldf3+0x574>
    bb58:	9880022c 	andhi	r2,r19,8
    bb5c:	1000081e 	bne	r2,zero,bb80 <__muldf3+0x574>
    bb60:	00800434 	movhi	r2,16
    bb64:	10bfffc4 	addi	r2,r2,-1
    bb68:	9c400234 	orhi	r17,r19,8
    bb6c:	88a2703a 	and	r17,r17,r2
    bb70:	b02f883a 	mov	r23,r22
    bb74:	2821883a 	mov	r16,r5
    bb78:	0081ffc4 	movi	r2,2047
    bb7c:	003f0006 	br	b780 <__alt_data_end+0xfe00b780>
    bb80:	00800434 	movhi	r2,16
    bb84:	10bfffc4 	addi	r2,r2,-1
    bb88:	8c400234 	orhi	r17,r17,8
    bb8c:	88a2703a 	and	r17,r17,r2
    bb90:	0081ffc4 	movi	r2,2047
    bb94:	003efa06 	br	b780 <__alt_data_end+0xfe00b780>
    bb98:	147ff604 	addi	r17,r2,-40
    bb9c:	9c62983a 	sll	r17,r19,r17
    bba0:	0021883a 	mov	r16,zero
    bba4:	003f1d06 	br	b81c <__alt_data_end+0xfe00b81c>
    bba8:	d9800315 	stw	r6,12(sp)
    bbac:	d9c00115 	stw	r7,4(sp)
    bbb0:	000c7700 	call	c770 <__clzsi2>
    bbb4:	10800804 	addi	r2,r2,32
    bbb8:	d9c00117 	ldw	r7,4(sp)
    bbbc:	d9800317 	ldw	r6,12(sp)
    bbc0:	003f0d06 	br	b7f8 <__alt_data_end+0xfe00b7f8>
    bbc4:	14fff604 	addi	r19,r2,-40
    bbc8:	34e6983a 	sll	r19,r6,r19
    bbcc:	000b883a 	mov	r5,zero
    bbd0:	003f3106 	br	b898 <__alt_data_end+0xfe00b898>
    bbd4:	3009883a 	mov	r4,r6
    bbd8:	d9800315 	stw	r6,12(sp)
    bbdc:	da400115 	stw	r9,4(sp)
    bbe0:	da800215 	stw	r10,8(sp)
    bbe4:	000c7700 	call	c770 <__clzsi2>
    bbe8:	10800804 	addi	r2,r2,32
    bbec:	da800217 	ldw	r10,8(sp)
    bbf0:	da400117 	ldw	r9,4(sp)
    bbf4:	d9800317 	ldw	r6,12(sp)
    bbf8:	003f1e06 	br	b874 <__alt_data_end+0xfe00b874>
    bbfc:	d8c00017 	ldw	r3,0(sp)
    bc00:	00bf0084 	movi	r2,-1022
    bc04:	10c5c83a 	sub	r2,r2,r3
    bc08:	00c00e04 	movi	r3,56
    bc0c:	18bed816 	blt	r3,r2,b770 <__alt_data_end+0xfe00b770>
    bc10:	00c007c4 	movi	r3,31
    bc14:	18801916 	blt	r3,r2,bc7c <__muldf3+0x670>
    bc18:	d8c00017 	ldw	r3,0(sp)
    bc1c:	808ad83a 	srl	r5,r16,r2
    bc20:	8884d83a 	srl	r2,r17,r2
    bc24:	1d410784 	addi	r21,r3,1054
    bc28:	8d48983a 	sll	r4,r17,r21
    bc2c:	8546983a 	sll	r3,r16,r21
    bc30:	2908b03a 	or	r4,r5,r4
    bc34:	1806c03a 	cmpne	r3,r3,zero
    bc38:	20c6b03a 	or	r3,r4,r3
    bc3c:	190001cc 	andi	r4,r3,7
    bc40:	20000726 	beq	r4,zero,bc60 <__muldf3+0x654>
    bc44:	194003cc 	andi	r5,r3,15
    bc48:	01000104 	movi	r4,4
    bc4c:	29000426 	beq	r5,r4,bc60 <__muldf3+0x654>
    bc50:	1909883a 	add	r4,r3,r4
    bc54:	20c7803a 	cmpltu	r3,r4,r3
    bc58:	10c5883a 	add	r2,r2,r3
    bc5c:	2007883a 	mov	r3,r4
    bc60:	1100202c 	andhi	r4,r2,128
    bc64:	20001326 	beq	r4,zero,bcb4 <__muldf3+0x6a8>
    bc68:	902f883a 	mov	r23,r18
    bc6c:	00800044 	movi	r2,1
    bc70:	0023883a 	mov	r17,zero
    bc74:	0021883a 	mov	r16,zero
    bc78:	003ec106 	br	b780 <__alt_data_end+0xfe00b780>
    bc7c:	d9000017 	ldw	r4,0(sp)
    bc80:	00fef884 	movi	r3,-1054
    bc84:	1907c83a 	sub	r3,r3,r4
    bc88:	01000804 	movi	r4,32
    bc8c:	88c6d83a 	srl	r3,r17,r3
    bc90:	11001026 	beq	r2,r4,bcd4 <__muldf3+0x6c8>
    bc94:	d9000017 	ldw	r4,0(sp)
    bc98:	20810f84 	addi	r2,r4,1086
    bc9c:	8884983a 	sll	r2,r17,r2
    bca0:	1404b03a 	or	r2,r2,r16
    bca4:	1004c03a 	cmpne	r2,r2,zero
    bca8:	10c6b03a 	or	r3,r2,r3
    bcac:	0005883a 	mov	r2,zero
    bcb0:	003fe206 	br	bc3c <__alt_data_end+0xfe00bc3c>
    bcb4:	1020977a 	slli	r16,r2,29
    bcb8:	1806d0fa 	srli	r3,r3,3
    bcbc:	1004927a 	slli	r2,r2,9
    bcc0:	902f883a 	mov	r23,r18
    bcc4:	80e0b03a 	or	r16,r16,r3
    bcc8:	1022d33a 	srli	r17,r2,12
    bccc:	0005883a 	mov	r2,zero
    bcd0:	003eab06 	br	b780 <__alt_data_end+0xfe00b780>
    bcd4:	0005883a 	mov	r2,zero
    bcd8:	003ff106 	br	bca0 <__alt_data_end+0xfe00bca0>
    bcdc:	00800434 	movhi	r2,16
    bce0:	10bfffc4 	addi	r2,r2,-1
    bce4:	8c400234 	orhi	r17,r17,8
    bce8:	88a2703a 	and	r17,r17,r2
    bcec:	902f883a 	mov	r23,r18
    bcf0:	0081ffc4 	movi	r2,2047
    bcf4:	003ea206 	br	b780 <__alt_data_end+0xfe00b780>

0000bcf8 <__subdf3>:
    bcf8:	02000434 	movhi	r8,16
    bcfc:	423fffc4 	addi	r8,r8,-1
    bd00:	defffb04 	addi	sp,sp,-20
    bd04:	2a06703a 	and	r3,r5,r8
    bd08:	3a10703a 	and	r8,r7,r8
    bd0c:	3804d53a 	srli	r2,r7,20
    bd10:	dc800215 	stw	r18,8(sp)
    bd14:	dc400115 	stw	r17,4(sp)
    bd18:	2824d7fa 	srli	r18,r5,31
    bd1c:	2822d53a 	srli	r17,r5,20
    bd20:	401090fa 	slli	r8,r8,3
    bd24:	180a90fa 	slli	r5,r3,3
    bd28:	3006d77a 	srli	r3,r6,29
    bd2c:	2014d77a 	srli	r10,r4,29
    bd30:	dc000015 	stw	r16,0(sp)
    bd34:	40d0b03a 	or	r8,r8,r3
    bd38:	dfc00415 	stw	ra,16(sp)
    bd3c:	dcc00315 	stw	r19,12(sp)
    bd40:	1081ffcc 	andi	r2,r2,2047
    bd44:	00c1ffc4 	movi	r3,2047
    bd48:	9013883a 	mov	r9,r18
    bd4c:	8c41ffcc 	andi	r17,r17,2047
    bd50:	94803fcc 	andi	r18,r18,255
    bd54:	2a8ab03a 	or	r5,r5,r10
    bd58:	202090fa 	slli	r16,r4,3
    bd5c:	380ed7fa 	srli	r7,r7,31
    bd60:	300c90fa 	slli	r6,r6,3
    bd64:	10c02e26 	beq	r2,r3,be20 <__subdf3+0x128>
    bd68:	39c0005c 	xori	r7,r7,1
    bd6c:	8887c83a 	sub	r3,r17,r2
    bd70:	91c03026 	beq	r18,r7,be34 <__subdf3+0x13c>
    bd74:	00c0a40e 	bge	zero,r3,c008 <__subdf3+0x310>
    bd78:	10004c1e 	bne	r2,zero,beac <__subdf3+0x1b4>
    bd7c:	4184b03a 	or	r2,r8,r6
    bd80:	10008f1e 	bne	r2,zero,bfc0 <__subdf3+0x2c8>
    bd84:	808001cc 	andi	r2,r16,7
    bd88:	10007d26 	beq	r2,zero,bf80 <__subdf3+0x288>
    bd8c:	80c003cc 	andi	r3,r16,15
    bd90:	00800104 	movi	r2,4
    bd94:	18807a26 	beq	r3,r2,bf80 <__subdf3+0x288>
    bd98:	80c00104 	addi	r3,r16,4
    bd9c:	1c21803a 	cmpltu	r16,r3,r16
    bda0:	2c0b883a 	add	r5,r5,r16
    bda4:	2880202c 	andhi	r2,r5,128
    bda8:	9240004c 	andi	r9,r18,1
    bdac:	1821883a 	mov	r16,r3
    bdb0:	10007626 	beq	r2,zero,bf8c <__subdf3+0x294>
    bdb4:	8c400044 	addi	r17,r17,1
    bdb8:	0081ffc4 	movi	r2,2047
    bdbc:	8880b226 	beq	r17,r2,c088 <__subdf3+0x390>
    bdc0:	00bfe034 	movhi	r2,65408
    bdc4:	10bfffc4 	addi	r2,r2,-1
    bdc8:	288a703a 	and	r5,r5,r2
    bdcc:	2804977a 	slli	r2,r5,29
    bdd0:	280a927a 	slli	r5,r5,9
    bdd4:	8020d0fa 	srli	r16,r16,3
    bdd8:	280ad33a 	srli	r5,r5,12
    bddc:	1404b03a 	or	r2,r2,r16
    bde0:	8c41ffcc 	andi	r17,r17,2047
    bde4:	8822953a 	slli	r17,r17,20
    bde8:	4a403fcc 	andi	r9,r9,255
    bdec:	481297fa 	slli	r9,r9,31
    bdf0:	00c00434 	movhi	r3,16
    bdf4:	18ffffc4 	addi	r3,r3,-1
    bdf8:	28c6703a 	and	r3,r5,r3
    bdfc:	1c46b03a 	or	r3,r3,r17
    be00:	1a46b03a 	or	r3,r3,r9
    be04:	dfc00417 	ldw	ra,16(sp)
    be08:	dcc00317 	ldw	r19,12(sp)
    be0c:	dc800217 	ldw	r18,8(sp)
    be10:	dc400117 	ldw	r17,4(sp)
    be14:	dc000017 	ldw	r16,0(sp)
    be18:	dec00504 	addi	sp,sp,20
    be1c:	f800283a 	ret
    be20:	4186b03a 	or	r3,r8,r6
    be24:	183fd026 	beq	r3,zero,bd68 <__alt_data_end+0xfe00bd68>
    be28:	39c03fcc 	andi	r7,r7,255
    be2c:	8887c83a 	sub	r3,r17,r2
    be30:	91ffd01e 	bne	r18,r7,bd74 <__alt_data_end+0xfe00bd74>
    be34:	00c09b0e 	bge	zero,r3,c0a4 <__subdf3+0x3ac>
    be38:	10006926 	beq	r2,zero,bfe0 <__subdf3+0x2e8>
    be3c:	0081ffc4 	movi	r2,2047
    be40:	88bfd026 	beq	r17,r2,bd84 <__alt_data_end+0xfe00bd84>
    be44:	42002034 	orhi	r8,r8,128
    be48:	00800e04 	movi	r2,56
    be4c:	10c0e20e 	bge	r2,r3,c1d8 <__subdf3+0x4e0>
    be50:	418cb03a 	or	r6,r8,r6
    be54:	300cc03a 	cmpne	r6,r6,zero
    be58:	0007883a 	mov	r3,zero
    be5c:	340d883a 	add	r6,r6,r16
    be60:	3421803a 	cmpltu	r16,r6,r16
    be64:	194b883a 	add	r5,r3,r5
    be68:	2c0b883a 	add	r5,r5,r16
    be6c:	3021883a 	mov	r16,r6
    be70:	2880202c 	andhi	r2,r5,128
    be74:	103fc326 	beq	r2,zero,bd84 <__alt_data_end+0xfe00bd84>
    be78:	8c400044 	addi	r17,r17,1
    be7c:	0081ffc4 	movi	r2,2047
    be80:	88811026 	beq	r17,r2,c2c4 <__subdf3+0x5cc>
    be84:	00bfe034 	movhi	r2,65408
    be88:	10bfffc4 	addi	r2,r2,-1
    be8c:	288a703a 	and	r5,r5,r2
    be90:	8006d07a 	srli	r3,r16,1
    be94:	280497fa 	slli	r2,r5,31
    be98:	8400004c 	andi	r16,r16,1
    be9c:	80e0b03a 	or	r16,r16,r3
    bea0:	80a0b03a 	or	r16,r16,r2
    bea4:	280ad07a 	srli	r5,r5,1
    bea8:	003fb606 	br	bd84 <__alt_data_end+0xfe00bd84>
    beac:	0081ffc4 	movi	r2,2047
    beb0:	88bfb426 	beq	r17,r2,bd84 <__alt_data_end+0xfe00bd84>
    beb4:	42002034 	orhi	r8,r8,128
    beb8:	00800e04 	movi	r2,56
    bebc:	10c07516 	blt	r2,r3,c094 <__subdf3+0x39c>
    bec0:	008007c4 	movi	r2,31
    bec4:	10c09816 	blt	r2,r3,c128 <__subdf3+0x430>
    bec8:	00800804 	movi	r2,32
    becc:	10c5c83a 	sub	r2,r2,r3
    bed0:	30c8d83a 	srl	r4,r6,r3
    bed4:	408e983a 	sll	r7,r8,r2
    bed8:	3084983a 	sll	r2,r6,r2
    bedc:	40c6d83a 	srl	r3,r8,r3
    bee0:	3908b03a 	or	r4,r7,r4
    bee4:	1004c03a 	cmpne	r2,r2,zero
    bee8:	208cb03a 	or	r6,r4,r2
    beec:	818dc83a 	sub	r6,r16,r6
    bef0:	81a1803a 	cmpltu	r16,r16,r6
    bef4:	28cbc83a 	sub	r5,r5,r3
    bef8:	2c0bc83a 	sub	r5,r5,r16
    befc:	3021883a 	mov	r16,r6
    bf00:	2880202c 	andhi	r2,r5,128
    bf04:	103f9f26 	beq	r2,zero,bd84 <__alt_data_end+0xfe00bd84>
    bf08:	04c02034 	movhi	r19,128
    bf0c:	9cffffc4 	addi	r19,r19,-1
    bf10:	2ce6703a 	and	r19,r5,r19
    bf14:	98004d26 	beq	r19,zero,c04c <__subdf3+0x354>
    bf18:	9809883a 	mov	r4,r19
    bf1c:	000c7700 	call	c770 <__clzsi2>
    bf20:	10fffe04 	addi	r3,r2,-8
    bf24:	010007c4 	movi	r4,31
    bf28:	20c04e16 	blt	r4,r3,c064 <__subdf3+0x36c>
    bf2c:	01000a04 	movi	r4,40
    bf30:	2085c83a 	sub	r2,r4,r2
    bf34:	8084d83a 	srl	r2,r16,r2
    bf38:	98e6983a 	sll	r19,r19,r3
    bf3c:	80e0983a 	sll	r16,r16,r3
    bf40:	14c4b03a 	or	r2,r2,r19
    bf44:	1c404b16 	blt	r3,r17,c074 <__subdf3+0x37c>
    bf48:	1c63c83a 	sub	r17,r3,r17
    bf4c:	89400044 	addi	r5,r17,1
    bf50:	00c007c4 	movi	r3,31
    bf54:	19406716 	blt	r3,r5,c0f4 <__subdf3+0x3fc>
    bf58:	1c47c83a 	sub	r3,r3,r17
    bf5c:	8148d83a 	srl	r4,r16,r5
    bf60:	80e0983a 	sll	r16,r16,r3
    bf64:	10c6983a 	sll	r3,r2,r3
    bf68:	114ad83a 	srl	r5,r2,r5
    bf6c:	8004c03a 	cmpne	r2,r16,zero
    bf70:	20e0b03a 	or	r16,r4,r3
    bf74:	80a0b03a 	or	r16,r16,r2
    bf78:	0023883a 	mov	r17,zero
    bf7c:	003f8106 	br	bd84 <__alt_data_end+0xfe00bd84>
    bf80:	2880202c 	andhi	r2,r5,128
    bf84:	9240004c 	andi	r9,r18,1
    bf88:	103f8a1e 	bne	r2,zero,bdb4 <__alt_data_end+0xfe00bdb4>
    bf8c:	2804977a 	slli	r2,r5,29
    bf90:	8020d0fa 	srli	r16,r16,3
    bf94:	00c1ffc4 	movi	r3,2047
    bf98:	280ad0fa 	srli	r5,r5,3
    bf9c:	1404b03a 	or	r2,r2,r16
    bfa0:	88c0031e 	bne	r17,r3,bfb0 <__subdf3+0x2b8>
    bfa4:	1146b03a 	or	r3,r2,r5
    bfa8:	18003726 	beq	r3,zero,c088 <__subdf3+0x390>
    bfac:	29400234 	orhi	r5,r5,8
    bfb0:	00c00434 	movhi	r3,16
    bfb4:	18ffffc4 	addi	r3,r3,-1
    bfb8:	28ca703a 	and	r5,r5,r3
    bfbc:	003f8806 	br	bde0 <__alt_data_end+0xfe00bde0>
    bfc0:	18ffffc4 	addi	r3,r3,-1
    bfc4:	1800481e 	bne	r3,zero,c0e8 <__subdf3+0x3f0>
    bfc8:	818dc83a 	sub	r6,r16,r6
    bfcc:	81a1803a 	cmpltu	r16,r16,r6
    bfd0:	2a0bc83a 	sub	r5,r5,r8
    bfd4:	2c0bc83a 	sub	r5,r5,r16
    bfd8:	3021883a 	mov	r16,r6
    bfdc:	003fc806 	br	bf00 <__alt_data_end+0xfe00bf00>
    bfe0:	4184b03a 	or	r2,r8,r6
    bfe4:	103f6726 	beq	r2,zero,bd84 <__alt_data_end+0xfe00bd84>
    bfe8:	18ffffc4 	addi	r3,r3,-1
    bfec:	1800931e 	bne	r3,zero,c23c <__subdf3+0x544>
    bff0:	340d883a 	add	r6,r6,r16
    bff4:	3421803a 	cmpltu	r16,r6,r16
    bff8:	414b883a 	add	r5,r8,r5
    bffc:	2c0b883a 	add	r5,r5,r16
    c000:	3021883a 	mov	r16,r6
    c004:	003f9a06 	br	be70 <__alt_data_end+0xfe00be70>
    c008:	1800531e 	bne	r3,zero,c158 <__subdf3+0x460>
    c00c:	88800044 	addi	r2,r17,1
    c010:	1081ffcc 	andi	r2,r2,2047
    c014:	00c00044 	movi	r3,1
    c018:	1880a00e 	bge	r3,r2,c29c <__subdf3+0x5a4>
    c01c:	8185c83a 	sub	r2,r16,r6
    c020:	8087803a 	cmpltu	r3,r16,r2
    c024:	2a27c83a 	sub	r19,r5,r8
    c028:	98e7c83a 	sub	r19,r19,r3
    c02c:	98c0202c 	andhi	r3,r19,128
    c030:	18006226 	beq	r3,zero,c1bc <__subdf3+0x4c4>
    c034:	3421c83a 	sub	r16,r6,r16
    c038:	414bc83a 	sub	r5,r8,r5
    c03c:	340d803a 	cmpltu	r6,r6,r16
    c040:	29a7c83a 	sub	r19,r5,r6
    c044:	3825883a 	mov	r18,r7
    c048:	983fb31e 	bne	r19,zero,bf18 <__alt_data_end+0xfe00bf18>
    c04c:	8009883a 	mov	r4,r16
    c050:	000c7700 	call	c770 <__clzsi2>
    c054:	10800804 	addi	r2,r2,32
    c058:	10fffe04 	addi	r3,r2,-8
    c05c:	010007c4 	movi	r4,31
    c060:	20ffb20e 	bge	r4,r3,bf2c <__alt_data_end+0xfe00bf2c>
    c064:	10bff604 	addi	r2,r2,-40
    c068:	8084983a 	sll	r2,r16,r2
    c06c:	0021883a 	mov	r16,zero
    c070:	1c7fb50e 	bge	r3,r17,bf48 <__alt_data_end+0xfe00bf48>
    c074:	017fe034 	movhi	r5,65408
    c078:	297fffc4 	addi	r5,r5,-1
    c07c:	88e3c83a 	sub	r17,r17,r3
    c080:	114a703a 	and	r5,r2,r5
    c084:	003f3f06 	br	bd84 <__alt_data_end+0xfe00bd84>
    c088:	000b883a 	mov	r5,zero
    c08c:	0005883a 	mov	r2,zero
    c090:	003f5306 	br	bde0 <__alt_data_end+0xfe00bde0>
    c094:	418cb03a 	or	r6,r8,r6
    c098:	300cc03a 	cmpne	r6,r6,zero
    c09c:	0007883a 	mov	r3,zero
    c0a0:	003f9206 	br	beec <__alt_data_end+0xfe00beec>
    c0a4:	1800961e 	bne	r3,zero,c300 <__subdf3+0x608>
    c0a8:	88800044 	addi	r2,r17,1
    c0ac:	1101ffcc 	andi	r4,r2,2047
    c0b0:	00c00044 	movi	r3,1
    c0b4:	1900680e 	bge	r3,r4,c258 <__subdf3+0x560>
    c0b8:	00c1ffc4 	movi	r3,2047
    c0bc:	10c0b626 	beq	r2,r3,c398 <__subdf3+0x6a0>
    c0c0:	340d883a 	add	r6,r6,r16
    c0c4:	3421803a 	cmpltu	r16,r6,r16
    c0c8:	414b883a 	add	r5,r8,r5
    c0cc:	2c0b883a 	add	r5,r5,r16
    c0d0:	282097fa 	slli	r16,r5,31
    c0d4:	300cd07a 	srli	r6,r6,1
    c0d8:	280ad07a 	srli	r5,r5,1
    c0dc:	1023883a 	mov	r17,r2
    c0e0:	81a0b03a 	or	r16,r16,r6
    c0e4:	003f2706 	br	bd84 <__alt_data_end+0xfe00bd84>
    c0e8:	0081ffc4 	movi	r2,2047
    c0ec:	88bf721e 	bne	r17,r2,beb8 <__alt_data_end+0xfe00beb8>
    c0f0:	003f2406 	br	bd84 <__alt_data_end+0xfe00bd84>
    c0f4:	893ff844 	addi	r4,r17,-31
    c0f8:	00c00804 	movi	r3,32
    c0fc:	1108d83a 	srl	r4,r2,r4
    c100:	28c05126 	beq	r5,r3,c248 <__subdf3+0x550>
    c104:	00c00fc4 	movi	r3,63
    c108:	1c63c83a 	sub	r17,r3,r17
    c10c:	1444983a 	sll	r2,r2,r17
    c110:	1420b03a 	or	r16,r2,r16
    c114:	8020c03a 	cmpne	r16,r16,zero
    c118:	8120b03a 	or	r16,r16,r4
    c11c:	000b883a 	mov	r5,zero
    c120:	0023883a 	mov	r17,zero
    c124:	003f1706 	br	bd84 <__alt_data_end+0xfe00bd84>
    c128:	18bff804 	addi	r2,r3,-32
    c12c:	01000804 	movi	r4,32
    c130:	4084d83a 	srl	r2,r8,r2
    c134:	19004626 	beq	r3,r4,c250 <__subdf3+0x558>
    c138:	01001004 	movi	r4,64
    c13c:	20c7c83a 	sub	r3,r4,r3
    c140:	40d0983a 	sll	r8,r8,r3
    c144:	418cb03a 	or	r6,r8,r6
    c148:	300cc03a 	cmpne	r6,r6,zero
    c14c:	308cb03a 	or	r6,r6,r2
    c150:	0007883a 	mov	r3,zero
    c154:	003f6506 	br	beec <__alt_data_end+0xfe00beec>
    c158:	88002b26 	beq	r17,zero,c208 <__subdf3+0x510>
    c15c:	0101ffc4 	movi	r4,2047
    c160:	11002f26 	beq	r2,r4,c220 <__subdf3+0x528>
    c164:	00c7c83a 	sub	r3,zero,r3
    c168:	29402034 	orhi	r5,r5,128
    c16c:	01000e04 	movi	r4,56
    c170:	20c08516 	blt	r4,r3,c388 <__subdf3+0x690>
    c174:	010007c4 	movi	r4,31
    c178:	20c0cd16 	blt	r4,r3,c4b0 <__subdf3+0x7b8>
    c17c:	01000804 	movi	r4,32
    c180:	20c9c83a 	sub	r4,r4,r3
    c184:	2914983a 	sll	r10,r5,r4
    c188:	80d2d83a 	srl	r9,r16,r3
    c18c:	8108983a 	sll	r4,r16,r4
    c190:	28cad83a 	srl	r5,r5,r3
    c194:	5252b03a 	or	r9,r10,r9
    c198:	2006c03a 	cmpne	r3,r4,zero
    c19c:	48e0b03a 	or	r16,r9,r3
    c1a0:	3421c83a 	sub	r16,r6,r16
    c1a4:	414bc83a 	sub	r5,r8,r5
    c1a8:	340d803a 	cmpltu	r6,r6,r16
    c1ac:	298bc83a 	sub	r5,r5,r6
    c1b0:	1023883a 	mov	r17,r2
    c1b4:	3825883a 	mov	r18,r7
    c1b8:	003f5106 	br	bf00 <__alt_data_end+0xfe00bf00>
    c1bc:	9886b03a 	or	r3,r19,r2
    c1c0:	18001c1e 	bne	r3,zero,c234 <__subdf3+0x53c>
    c1c4:	0013883a 	mov	r9,zero
    c1c8:	000b883a 	mov	r5,zero
    c1cc:	0021883a 	mov	r16,zero
    c1d0:	0023883a 	mov	r17,zero
    c1d4:	003f6d06 	br	bf8c <__alt_data_end+0xfe00bf8c>
    c1d8:	008007c4 	movi	r2,31
    c1dc:	10c03c16 	blt	r2,r3,c2d0 <__subdf3+0x5d8>
    c1e0:	00800804 	movi	r2,32
    c1e4:	10c5c83a 	sub	r2,r2,r3
    c1e8:	30c8d83a 	srl	r4,r6,r3
    c1ec:	408e983a 	sll	r7,r8,r2
    c1f0:	3084983a 	sll	r2,r6,r2
    c1f4:	40c6d83a 	srl	r3,r8,r3
    c1f8:	3908b03a 	or	r4,r7,r4
    c1fc:	1004c03a 	cmpne	r2,r2,zero
    c200:	208cb03a 	or	r6,r4,r2
    c204:	003f1506 	br	be5c <__alt_data_end+0xfe00be5c>
    c208:	2c08b03a 	or	r4,r5,r16
    c20c:	20000426 	beq	r4,zero,c220 <__subdf3+0x528>
    c210:	00c6303a 	nor	r3,zero,r3
    c214:	183fe226 	beq	r3,zero,c1a0 <__alt_data_end+0xfe00c1a0>
    c218:	0101ffc4 	movi	r4,2047
    c21c:	113fd31e 	bne	r2,r4,c16c <__alt_data_end+0xfe00c16c>
    c220:	400b883a 	mov	r5,r8
    c224:	3021883a 	mov	r16,r6
    c228:	1023883a 	mov	r17,r2
    c22c:	3825883a 	mov	r18,r7
    c230:	003ed406 	br	bd84 <__alt_data_end+0xfe00bd84>
    c234:	1021883a 	mov	r16,r2
    c238:	003f3606 	br	bf14 <__alt_data_end+0xfe00bf14>
    c23c:	0081ffc4 	movi	r2,2047
    c240:	88bf011e 	bne	r17,r2,be48 <__alt_data_end+0xfe00be48>
    c244:	003ecf06 	br	bd84 <__alt_data_end+0xfe00bd84>
    c248:	0005883a 	mov	r2,zero
    c24c:	003fb006 	br	c110 <__alt_data_end+0xfe00c110>
    c250:	0011883a 	mov	r8,zero
    c254:	003fbb06 	br	c144 <__alt_data_end+0xfe00c144>
    c258:	2c04b03a 	or	r2,r5,r16
    c25c:	88007f1e 	bne	r17,zero,c45c <__subdf3+0x764>
    c260:	1000a926 	beq	r2,zero,c508 <__subdf3+0x810>
    c264:	4184b03a 	or	r2,r8,r6
    c268:	103ec626 	beq	r2,zero,bd84 <__alt_data_end+0xfe00bd84>
    c26c:	340d883a 	add	r6,r6,r16
    c270:	414b883a 	add	r5,r8,r5
    c274:	3421803a 	cmpltu	r16,r6,r16
    c278:	2c0b883a 	add	r5,r5,r16
    c27c:	2880202c 	andhi	r2,r5,128
    c280:	1000bb26 	beq	r2,zero,c570 <__subdf3+0x878>
    c284:	00bfe034 	movhi	r2,65408
    c288:	10bfffc4 	addi	r2,r2,-1
    c28c:	288a703a 	and	r5,r5,r2
    c290:	3021883a 	mov	r16,r6
    c294:	1823883a 	mov	r17,r3
    c298:	003eba06 	br	bd84 <__alt_data_end+0xfe00bd84>
    c29c:	2c04b03a 	or	r2,r5,r16
    c2a0:	8800311e 	bne	r17,zero,c368 <__subdf3+0x670>
    c2a4:	1000451e 	bne	r2,zero,c3bc <__subdf3+0x6c4>
    c2a8:	4184b03a 	or	r2,r8,r6
    c2ac:	10000426 	beq	r2,zero,c2c0 <__subdf3+0x5c8>
    c2b0:	400b883a 	mov	r5,r8
    c2b4:	3021883a 	mov	r16,r6
    c2b8:	3825883a 	mov	r18,r7
    c2bc:	003eb106 	br	bd84 <__alt_data_end+0xfe00bd84>
    c2c0:	0013883a 	mov	r9,zero
    c2c4:	000b883a 	mov	r5,zero
    c2c8:	0021883a 	mov	r16,zero
    c2cc:	003f2f06 	br	bf8c <__alt_data_end+0xfe00bf8c>
    c2d0:	18bff804 	addi	r2,r3,-32
    c2d4:	01000804 	movi	r4,32
    c2d8:	4084d83a 	srl	r2,r8,r2
    c2dc:	19007226 	beq	r3,r4,c4a8 <__subdf3+0x7b0>
    c2e0:	01001004 	movi	r4,64
    c2e4:	20c7c83a 	sub	r3,r4,r3
    c2e8:	40d0983a 	sll	r8,r8,r3
    c2ec:	418cb03a 	or	r6,r8,r6
    c2f0:	300cc03a 	cmpne	r6,r6,zero
    c2f4:	308cb03a 	or	r6,r6,r2
    c2f8:	0007883a 	mov	r3,zero
    c2fc:	003ed706 	br	be5c <__alt_data_end+0xfe00be5c>
    c300:	8800291e 	bne	r17,zero,c3a8 <__subdf3+0x6b0>
    c304:	2c08b03a 	or	r4,r5,r16
    c308:	20005026 	beq	r4,zero,c44c <__subdf3+0x754>
    c30c:	00c6303a 	nor	r3,zero,r3
    c310:	18000f26 	beq	r3,zero,c350 <__subdf3+0x658>
    c314:	0101ffc4 	movi	r4,2047
    c318:	11004c26 	beq	r2,r4,c44c <__subdf3+0x754>
    c31c:	01000e04 	movi	r4,56
    c320:	20c07516 	blt	r4,r3,c4f8 <__subdf3+0x800>
    c324:	010007c4 	movi	r4,31
    c328:	20c08316 	blt	r4,r3,c538 <__subdf3+0x840>
    c32c:	01000804 	movi	r4,32
    c330:	20c9c83a 	sub	r4,r4,r3
    c334:	2914983a 	sll	r10,r5,r4
    c338:	80ced83a 	srl	r7,r16,r3
    c33c:	8108983a 	sll	r4,r16,r4
    c340:	28cad83a 	srl	r5,r5,r3
    c344:	51ceb03a 	or	r7,r10,r7
    c348:	2006c03a 	cmpne	r3,r4,zero
    c34c:	38e0b03a 	or	r16,r7,r3
    c350:	81a1883a 	add	r16,r16,r6
    c354:	2a0b883a 	add	r5,r5,r8
    c358:	818d803a 	cmpltu	r6,r16,r6
    c35c:	298b883a 	add	r5,r5,r6
    c360:	1023883a 	mov	r17,r2
    c364:	003ec206 	br	be70 <__alt_data_end+0xfe00be70>
    c368:	1000221e 	bne	r2,zero,c3f4 <__subdf3+0x6fc>
    c36c:	4184b03a 	or	r2,r8,r6
    c370:	10005b26 	beq	r2,zero,c4e0 <__subdf3+0x7e8>
    c374:	400b883a 	mov	r5,r8
    c378:	3021883a 	mov	r16,r6
    c37c:	3825883a 	mov	r18,r7
    c380:	0441ffc4 	movi	r17,2047
    c384:	003e7f06 	br	bd84 <__alt_data_end+0xfe00bd84>
    c388:	2c20b03a 	or	r16,r5,r16
    c38c:	8020c03a 	cmpne	r16,r16,zero
    c390:	000b883a 	mov	r5,zero
    c394:	003f8206 	br	c1a0 <__alt_data_end+0xfe00c1a0>
    c398:	1023883a 	mov	r17,r2
    c39c:	000b883a 	mov	r5,zero
    c3a0:	0021883a 	mov	r16,zero
    c3a4:	003ef906 	br	bf8c <__alt_data_end+0xfe00bf8c>
    c3a8:	0101ffc4 	movi	r4,2047
    c3ac:	11002726 	beq	r2,r4,c44c <__subdf3+0x754>
    c3b0:	00c7c83a 	sub	r3,zero,r3
    c3b4:	29402034 	orhi	r5,r5,128
    c3b8:	003fd806 	br	c31c <__alt_data_end+0xfe00c31c>
    c3bc:	4184b03a 	or	r2,r8,r6
    c3c0:	103e7026 	beq	r2,zero,bd84 <__alt_data_end+0xfe00bd84>
    c3c4:	8185c83a 	sub	r2,r16,r6
    c3c8:	8089803a 	cmpltu	r4,r16,r2
    c3cc:	2a07c83a 	sub	r3,r5,r8
    c3d0:	1907c83a 	sub	r3,r3,r4
    c3d4:	1900202c 	andhi	r4,r3,128
    c3d8:	20005226 	beq	r4,zero,c524 <__subdf3+0x82c>
    c3dc:	3421c83a 	sub	r16,r6,r16
    c3e0:	414bc83a 	sub	r5,r8,r5
    c3e4:	340d803a 	cmpltu	r6,r6,r16
    c3e8:	298bc83a 	sub	r5,r5,r6
    c3ec:	3825883a 	mov	r18,r7
    c3f0:	003e6406 	br	bd84 <__alt_data_end+0xfe00bd84>
    c3f4:	4184b03a 	or	r2,r8,r6
    c3f8:	10002926 	beq	r2,zero,c4a0 <__subdf3+0x7a8>
    c3fc:	2804d0fa 	srli	r2,r5,3
    c400:	8020d0fa 	srli	r16,r16,3
    c404:	280a977a 	slli	r5,r5,29
    c408:	10c0022c 	andhi	r3,r2,8
    c40c:	2c20b03a 	or	r16,r5,r16
    c410:	18000826 	beq	r3,zero,c434 <__subdf3+0x73c>
    c414:	4006d0fa 	srli	r3,r8,3
    c418:	1900022c 	andhi	r4,r3,8
    c41c:	2000051e 	bne	r4,zero,c434 <__subdf3+0x73c>
    c420:	300cd0fa 	srli	r6,r6,3
    c424:	4010977a 	slli	r8,r8,29
    c428:	1805883a 	mov	r2,r3
    c42c:	3825883a 	mov	r18,r7
    c430:	41a0b03a 	or	r16,r8,r6
    c434:	800ad77a 	srli	r5,r16,29
    c438:	100490fa 	slli	r2,r2,3
    c43c:	802090fa 	slli	r16,r16,3
    c440:	0441ffc4 	movi	r17,2047
    c444:	288ab03a 	or	r5,r5,r2
    c448:	003e4e06 	br	bd84 <__alt_data_end+0xfe00bd84>
    c44c:	400b883a 	mov	r5,r8
    c450:	3021883a 	mov	r16,r6
    c454:	1023883a 	mov	r17,r2
    c458:	003e4a06 	br	bd84 <__alt_data_end+0xfe00bd84>
    c45c:	10002d26 	beq	r2,zero,c514 <__subdf3+0x81c>
    c460:	4184b03a 	or	r2,r8,r6
    c464:	10000e26 	beq	r2,zero,c4a0 <__subdf3+0x7a8>
    c468:	2804d0fa 	srli	r2,r5,3
    c46c:	8020d0fa 	srli	r16,r16,3
    c470:	280a977a 	slli	r5,r5,29
    c474:	10c0022c 	andhi	r3,r2,8
    c478:	2c20b03a 	or	r16,r5,r16
    c47c:	183fed26 	beq	r3,zero,c434 <__alt_data_end+0xfe00c434>
    c480:	4006d0fa 	srli	r3,r8,3
    c484:	1900022c 	andhi	r4,r3,8
    c488:	203fea1e 	bne	r4,zero,c434 <__alt_data_end+0xfe00c434>
    c48c:	300cd0fa 	srli	r6,r6,3
    c490:	4010977a 	slli	r8,r8,29
    c494:	1805883a 	mov	r2,r3
    c498:	41a0b03a 	or	r16,r8,r6
    c49c:	003fe506 	br	c434 <__alt_data_end+0xfe00c434>
    c4a0:	0441ffc4 	movi	r17,2047
    c4a4:	003e3706 	br	bd84 <__alt_data_end+0xfe00bd84>
    c4a8:	0011883a 	mov	r8,zero
    c4ac:	003f8f06 	br	c2ec <__alt_data_end+0xfe00c2ec>
    c4b0:	193ff804 	addi	r4,r3,-32
    c4b4:	02400804 	movi	r9,32
    c4b8:	2908d83a 	srl	r4,r5,r4
    c4bc:	1a402a26 	beq	r3,r9,c568 <__subdf3+0x870>
    c4c0:	02401004 	movi	r9,64
    c4c4:	48c7c83a 	sub	r3,r9,r3
    c4c8:	28ca983a 	sll	r5,r5,r3
    c4cc:	2c20b03a 	or	r16,r5,r16
    c4d0:	8020c03a 	cmpne	r16,r16,zero
    c4d4:	8120b03a 	or	r16,r16,r4
    c4d8:	000b883a 	mov	r5,zero
    c4dc:	003f3006 	br	c1a0 <__alt_data_end+0xfe00c1a0>
    c4e0:	0013883a 	mov	r9,zero
    c4e4:	01402034 	movhi	r5,128
    c4e8:	297fffc4 	addi	r5,r5,-1
    c4ec:	043ffe04 	movi	r16,-8
    c4f0:	0441ffc4 	movi	r17,2047
    c4f4:	003ea506 	br	bf8c <__alt_data_end+0xfe00bf8c>
    c4f8:	2c20b03a 	or	r16,r5,r16
    c4fc:	8020c03a 	cmpne	r16,r16,zero
    c500:	000b883a 	mov	r5,zero
    c504:	003f9206 	br	c350 <__alt_data_end+0xfe00c350>
    c508:	400b883a 	mov	r5,r8
    c50c:	3021883a 	mov	r16,r6
    c510:	003e1c06 	br	bd84 <__alt_data_end+0xfe00bd84>
    c514:	400b883a 	mov	r5,r8
    c518:	3021883a 	mov	r16,r6
    c51c:	0441ffc4 	movi	r17,2047
    c520:	003e1806 	br	bd84 <__alt_data_end+0xfe00bd84>
    c524:	1888b03a 	or	r4,r3,r2
    c528:	203f6526 	beq	r4,zero,c2c0 <__alt_data_end+0xfe00c2c0>
    c52c:	180b883a 	mov	r5,r3
    c530:	1021883a 	mov	r16,r2
    c534:	003e1306 	br	bd84 <__alt_data_end+0xfe00bd84>
    c538:	193ff804 	addi	r4,r3,-32
    c53c:	01c00804 	movi	r7,32
    c540:	2908d83a 	srl	r4,r5,r4
    c544:	19c00c26 	beq	r3,r7,c578 <__subdf3+0x880>
    c548:	01c01004 	movi	r7,64
    c54c:	38c7c83a 	sub	r3,r7,r3
    c550:	28ca983a 	sll	r5,r5,r3
    c554:	2c20b03a 	or	r16,r5,r16
    c558:	8020c03a 	cmpne	r16,r16,zero
    c55c:	8120b03a 	or	r16,r16,r4
    c560:	000b883a 	mov	r5,zero
    c564:	003f7a06 	br	c350 <__alt_data_end+0xfe00c350>
    c568:	000b883a 	mov	r5,zero
    c56c:	003fd706 	br	c4cc <__alt_data_end+0xfe00c4cc>
    c570:	3021883a 	mov	r16,r6
    c574:	003e0306 	br	bd84 <__alt_data_end+0xfe00bd84>
    c578:	000b883a 	mov	r5,zero
    c57c:	003ff506 	br	c554 <__alt_data_end+0xfe00c554>

0000c580 <__fixdfsi>:
    c580:	2806d53a 	srli	r3,r5,20
    c584:	00800434 	movhi	r2,16
    c588:	10bfffc4 	addi	r2,r2,-1
    c58c:	0180ff84 	movi	r6,1022
    c590:	18c1ffcc 	andi	r3,r3,2047
    c594:	2884703a 	and	r2,r5,r2
    c598:	280ad7fa 	srli	r5,r5,31
    c59c:	30c0120e 	bge	r6,r3,c5e8 <__fixdfsi+0x68>
    c5a0:	01810744 	movi	r6,1053
    c5a4:	30c00c16 	blt	r6,r3,c5d8 <__fixdfsi+0x58>
    c5a8:	01810cc4 	movi	r6,1075
    c5ac:	30cdc83a 	sub	r6,r6,r3
    c5b0:	01c007c4 	movi	r7,31
    c5b4:	10800434 	orhi	r2,r2,16
    c5b8:	39800d16 	blt	r7,r6,c5f0 <__fixdfsi+0x70>
    c5bc:	18fefb44 	addi	r3,r3,-1043
    c5c0:	2188d83a 	srl	r4,r4,r6
    c5c4:	10c4983a 	sll	r2,r2,r3
    c5c8:	2084b03a 	or	r2,r4,r2
    c5cc:	28000726 	beq	r5,zero,c5ec <__fixdfsi+0x6c>
    c5d0:	0085c83a 	sub	r2,zero,r2
    c5d4:	f800283a 	ret
    c5d8:	00a00034 	movhi	r2,32768
    c5dc:	10bfffc4 	addi	r2,r2,-1
    c5e0:	2885883a 	add	r2,r5,r2
    c5e4:	f800283a 	ret
    c5e8:	0005883a 	mov	r2,zero
    c5ec:	f800283a 	ret
    c5f0:	010104c4 	movi	r4,1043
    c5f4:	20c7c83a 	sub	r3,r4,r3
    c5f8:	10c4d83a 	srl	r2,r2,r3
    c5fc:	003ff306 	br	c5cc <__alt_data_end+0xfe00c5cc>

0000c600 <__floatsidf>:
    c600:	defffd04 	addi	sp,sp,-12
    c604:	dc000015 	stw	r16,0(sp)
    c608:	dfc00215 	stw	ra,8(sp)
    c60c:	dc400115 	stw	r17,4(sp)
    c610:	2021883a 	mov	r16,r4
    c614:	20002926 	beq	r4,zero,c6bc <__floatsidf+0xbc>
    c618:	2022d7fa 	srli	r17,r4,31
    c61c:	88000126 	beq	r17,zero,c624 <__floatsidf+0x24>
    c620:	0121c83a 	sub	r16,zero,r4
    c624:	8009883a 	mov	r4,r16
    c628:	000c7700 	call	c770 <__clzsi2>
    c62c:	01810784 	movi	r6,1054
    c630:	00c00284 	movi	r3,10
    c634:	308dc83a 	sub	r6,r6,r2
    c638:	1880150e 	bge	r3,r2,c690 <__floatsidf+0x90>
    c63c:	113ffd44 	addi	r4,r2,-11
    c640:	8108983a 	sll	r4,r16,r4
    c644:	00800434 	movhi	r2,16
    c648:	10bfffc4 	addi	r2,r2,-1
    c64c:	3181ffcc 	andi	r6,r6,2047
    c650:	2088703a 	and	r4,r4,r2
    c654:	880b883a 	mov	r5,r17
    c658:	0005883a 	mov	r2,zero
    c65c:	300c953a 	slli	r6,r6,20
    c660:	29403fcc 	andi	r5,r5,255
    c664:	280a97fa 	slli	r5,r5,31
    c668:	00c00434 	movhi	r3,16
    c66c:	18ffffc4 	addi	r3,r3,-1
    c670:	20c8703a 	and	r4,r4,r3
    c674:	2186b03a 	or	r3,r4,r6
    c678:	1946b03a 	or	r3,r3,r5
    c67c:	dfc00217 	ldw	ra,8(sp)
    c680:	dc400117 	ldw	r17,4(sp)
    c684:	dc000017 	ldw	r16,0(sp)
    c688:	dec00304 	addi	sp,sp,12
    c68c:	f800283a 	ret
    c690:	010002c4 	movi	r4,11
    c694:	2089c83a 	sub	r4,r4,r2
    c698:	8108d83a 	srl	r4,r16,r4
    c69c:	10800544 	addi	r2,r2,21
    c6a0:	00c00434 	movhi	r3,16
    c6a4:	18ffffc4 	addi	r3,r3,-1
    c6a8:	8084983a 	sll	r2,r16,r2
    c6ac:	20c8703a 	and	r4,r4,r3
    c6b0:	3181ffcc 	andi	r6,r6,2047
    c6b4:	880b883a 	mov	r5,r17
    c6b8:	003fe806 	br	c65c <__alt_data_end+0xfe00c65c>
    c6bc:	000b883a 	mov	r5,zero
    c6c0:	000d883a 	mov	r6,zero
    c6c4:	0009883a 	mov	r4,zero
    c6c8:	0005883a 	mov	r2,zero
    c6cc:	003fe306 	br	c65c <__alt_data_end+0xfe00c65c>

0000c6d0 <__floatunsidf>:
    c6d0:	defffe04 	addi	sp,sp,-8
    c6d4:	dc000015 	stw	r16,0(sp)
    c6d8:	dfc00115 	stw	ra,4(sp)
    c6dc:	2021883a 	mov	r16,r4
    c6e0:	20001f26 	beq	r4,zero,c760 <__floatunsidf+0x90>
    c6e4:	000c7700 	call	c770 <__clzsi2>
    c6e8:	01010784 	movi	r4,1054
    c6ec:	00c00284 	movi	r3,10
    c6f0:	2089c83a 	sub	r4,r4,r2
    c6f4:	1880100e 	bge	r3,r2,c738 <__floatunsidf+0x68>
    c6f8:	117ffd44 	addi	r5,r2,-11
    c6fc:	814a983a 	sll	r5,r16,r5
    c700:	00800434 	movhi	r2,16
    c704:	10bfffc4 	addi	r2,r2,-1
    c708:	2101ffcc 	andi	r4,r4,2047
    c70c:	288a703a 	and	r5,r5,r2
    c710:	0005883a 	mov	r2,zero
    c714:	2008953a 	slli	r4,r4,20
    c718:	00c00434 	movhi	r3,16
    c71c:	18ffffc4 	addi	r3,r3,-1
    c720:	28c6703a 	and	r3,r5,r3
    c724:	1906b03a 	or	r3,r3,r4
    c728:	dfc00117 	ldw	ra,4(sp)
    c72c:	dc000017 	ldw	r16,0(sp)
    c730:	dec00204 	addi	sp,sp,8
    c734:	f800283a 	ret
    c738:	014002c4 	movi	r5,11
    c73c:	288bc83a 	sub	r5,r5,r2
    c740:	814ad83a 	srl	r5,r16,r5
    c744:	10800544 	addi	r2,r2,21
    c748:	00c00434 	movhi	r3,16
    c74c:	18ffffc4 	addi	r3,r3,-1
    c750:	8084983a 	sll	r2,r16,r2
    c754:	28ca703a 	and	r5,r5,r3
    c758:	2101ffcc 	andi	r4,r4,2047
    c75c:	003fed06 	br	c714 <__alt_data_end+0xfe00c714>
    c760:	0009883a 	mov	r4,zero
    c764:	000b883a 	mov	r5,zero
    c768:	0005883a 	mov	r2,zero
    c76c:	003fe906 	br	c714 <__alt_data_end+0xfe00c714>

0000c770 <__clzsi2>:
    c770:	00bfffd4 	movui	r2,65535
    c774:	11000b36 	bltu	r2,r4,c7a4 <__clzsi2+0x34>
    c778:	00803fc4 	movi	r2,255
    c77c:	11001e2e 	bgeu	r2,r4,c7f8 <__clzsi2+0x88>
    c780:	00c00204 	movi	r3,8
    c784:	20c8d83a 	srl	r4,r4,r3
    c788:	00c00074 	movhi	r3,1
    c78c:	18fc9104 	addi	r3,r3,-3516
    c790:	00800604 	movi	r2,24
    c794:	1909883a 	add	r4,r3,r4
    c798:	20c00003 	ldbu	r3,0(r4)
    c79c:	10c5c83a 	sub	r2,r2,r3
    c7a0:	f800283a 	ret
    c7a4:	00804034 	movhi	r2,256
    c7a8:	10bfffc4 	addi	r2,r2,-1
    c7ac:	11000936 	bltu	r2,r4,c7d4 <__clzsi2+0x64>
    c7b0:	00800404 	movi	r2,16
    c7b4:	1007883a 	mov	r3,r2
    c7b8:	20c8d83a 	srl	r4,r4,r3
    c7bc:	00c00074 	movhi	r3,1
    c7c0:	18fc9104 	addi	r3,r3,-3516
    c7c4:	1909883a 	add	r4,r3,r4
    c7c8:	20c00003 	ldbu	r3,0(r4)
    c7cc:	10c5c83a 	sub	r2,r2,r3
    c7d0:	f800283a 	ret
    c7d4:	00c00604 	movi	r3,24
    c7d8:	20c8d83a 	srl	r4,r4,r3
    c7dc:	00c00074 	movhi	r3,1
    c7e0:	18fc9104 	addi	r3,r3,-3516
    c7e4:	00800204 	movi	r2,8
    c7e8:	1909883a 	add	r4,r3,r4
    c7ec:	20c00003 	ldbu	r3,0(r4)
    c7f0:	10c5c83a 	sub	r2,r2,r3
    c7f4:	f800283a 	ret
    c7f8:	0007883a 	mov	r3,zero
    c7fc:	20c8d83a 	srl	r4,r4,r3
    c800:	00c00074 	movhi	r3,1
    c804:	18fc9104 	addi	r3,r3,-3516
    c808:	00800804 	movi	r2,32
    c80c:	1909883a 	add	r4,r3,r4
    c810:	20c00003 	ldbu	r3,0(r4)
    c814:	10c5c83a 	sub	r2,r2,r3
    c818:	f800283a 	ret

0000c81c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c81c:	defffe04 	addi	sp,sp,-8
    c820:	dfc00115 	stw	ra,4(sp)
    c824:	df000015 	stw	fp,0(sp)
    c828:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c82c:	00800074 	movhi	r2,1
    c830:	10839404 	addi	r2,r2,3664
    c834:	10800017 	ldw	r2,0(r2)
    c838:	10000526 	beq	r2,zero,c850 <alt_get_errno+0x34>
    c83c:	00800074 	movhi	r2,1
    c840:	10839404 	addi	r2,r2,3664
    c844:	10800017 	ldw	r2,0(r2)
    c848:	103ee83a 	callr	r2
    c84c:	00000206 	br	c858 <alt_get_errno+0x3c>
    c850:	00800074 	movhi	r2,1
    c854:	108a5c04 	addi	r2,r2,10608
}
    c858:	e037883a 	mov	sp,fp
    c85c:	dfc00117 	ldw	ra,4(sp)
    c860:	df000017 	ldw	fp,0(sp)
    c864:	dec00204 	addi	sp,sp,8
    c868:	f800283a 	ret

0000c86c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    c86c:	defffb04 	addi	sp,sp,-20
    c870:	dfc00415 	stw	ra,16(sp)
    c874:	df000315 	stw	fp,12(sp)
    c878:	df000304 	addi	fp,sp,12
    c87c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    c880:	e0bfff17 	ldw	r2,-4(fp)
    c884:	10000616 	blt	r2,zero,c8a0 <close+0x34>
    c888:	e0bfff17 	ldw	r2,-4(fp)
    c88c:	10c00324 	muli	r3,r2,12
    c890:	00800074 	movhi	r2,1
    c894:	10bf1104 	addi	r2,r2,-956
    c898:	1885883a 	add	r2,r3,r2
    c89c:	00000106 	br	c8a4 <close+0x38>
    c8a0:	0005883a 	mov	r2,zero
    c8a4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    c8a8:	e0bffd17 	ldw	r2,-12(fp)
    c8ac:	10001826 	beq	r2,zero,c910 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    c8b0:	e0bffd17 	ldw	r2,-12(fp)
    c8b4:	10800017 	ldw	r2,0(r2)
    c8b8:	10800417 	ldw	r2,16(r2)
    c8bc:	10000626 	beq	r2,zero,c8d8 <close+0x6c>
    c8c0:	e0bffd17 	ldw	r2,-12(fp)
    c8c4:	10800017 	ldw	r2,0(r2)
    c8c8:	10800417 	ldw	r2,16(r2)
    c8cc:	e13ffd17 	ldw	r4,-12(fp)
    c8d0:	103ee83a 	callr	r2
    c8d4:	00000106 	br	c8dc <close+0x70>
    c8d8:	0005883a 	mov	r2,zero
    c8dc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    c8e0:	e13fff17 	ldw	r4,-4(fp)
    c8e4:	000d2100 	call	d210 <alt_release_fd>
    if (rval < 0)
    c8e8:	e0bffe17 	ldw	r2,-8(fp)
    c8ec:	1000060e 	bge	r2,zero,c908 <close+0x9c>
    {
      ALT_ERRNO = -rval;
    c8f0:	000c81c0 	call	c81c <alt_get_errno>
    c8f4:	e0fffe17 	ldw	r3,-8(fp)
    c8f8:	00c7c83a 	sub	r3,zero,r3
    c8fc:	10c00015 	stw	r3,0(r2)
      return -1;
    c900:	00bfffc4 	movi	r2,-1
    c904:	00000606 	br	c920 <close+0xb4>
    }
    return 0;
    c908:	0005883a 	mov	r2,zero
    c90c:	00000406 	br	c920 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    c910:	000c81c0 	call	c81c <alt_get_errno>
    c914:	00c01444 	movi	r3,81
    c918:	10c00015 	stw	r3,0(r2)
    return -1;
    c91c:	00bfffc4 	movi	r2,-1
  }
}
    c920:	e037883a 	mov	sp,fp
    c924:	dfc00117 	ldw	ra,4(sp)
    c928:	df000017 	ldw	fp,0(sp)
    c92c:	dec00204 	addi	sp,sp,8
    c930:	f800283a 	ret

0000c934 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    c934:	defffc04 	addi	sp,sp,-16
    c938:	df000315 	stw	fp,12(sp)
    c93c:	df000304 	addi	fp,sp,12
    c940:	e13ffd15 	stw	r4,-12(fp)
    c944:	e17ffe15 	stw	r5,-8(fp)
    c948:	e1bfff15 	stw	r6,-4(fp)
  return len;
    c94c:	e0bfff17 	ldw	r2,-4(fp)
}
    c950:	e037883a 	mov	sp,fp
    c954:	df000017 	ldw	fp,0(sp)
    c958:	dec00104 	addi	sp,sp,4
    c95c:	f800283a 	ret

0000c960 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c960:	defffe04 	addi	sp,sp,-8
    c964:	dfc00115 	stw	ra,4(sp)
    c968:	df000015 	stw	fp,0(sp)
    c96c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c970:	00800074 	movhi	r2,1
    c974:	10839404 	addi	r2,r2,3664
    c978:	10800017 	ldw	r2,0(r2)
    c97c:	10000526 	beq	r2,zero,c994 <alt_get_errno+0x34>
    c980:	00800074 	movhi	r2,1
    c984:	10839404 	addi	r2,r2,3664
    c988:	10800017 	ldw	r2,0(r2)
    c98c:	103ee83a 	callr	r2
    c990:	00000206 	br	c99c <alt_get_errno+0x3c>
    c994:	00800074 	movhi	r2,1
    c998:	108a5c04 	addi	r2,r2,10608
}
    c99c:	e037883a 	mov	sp,fp
    c9a0:	dfc00117 	ldw	ra,4(sp)
    c9a4:	df000017 	ldw	fp,0(sp)
    c9a8:	dec00204 	addi	sp,sp,8
    c9ac:	f800283a 	ret

0000c9b0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    c9b0:	defffb04 	addi	sp,sp,-20
    c9b4:	dfc00415 	stw	ra,16(sp)
    c9b8:	df000315 	stw	fp,12(sp)
    c9bc:	df000304 	addi	fp,sp,12
    c9c0:	e13ffe15 	stw	r4,-8(fp)
    c9c4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c9c8:	e0bffe17 	ldw	r2,-8(fp)
    c9cc:	10000616 	blt	r2,zero,c9e8 <fstat+0x38>
    c9d0:	e0bffe17 	ldw	r2,-8(fp)
    c9d4:	10c00324 	muli	r3,r2,12
    c9d8:	00800074 	movhi	r2,1
    c9dc:	10bf1104 	addi	r2,r2,-956
    c9e0:	1885883a 	add	r2,r3,r2
    c9e4:	00000106 	br	c9ec <fstat+0x3c>
    c9e8:	0005883a 	mov	r2,zero
    c9ec:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    c9f0:	e0bffd17 	ldw	r2,-12(fp)
    c9f4:	10001026 	beq	r2,zero,ca38 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    c9f8:	e0bffd17 	ldw	r2,-12(fp)
    c9fc:	10800017 	ldw	r2,0(r2)
    ca00:	10800817 	ldw	r2,32(r2)
    ca04:	10000726 	beq	r2,zero,ca24 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    ca08:	e0bffd17 	ldw	r2,-12(fp)
    ca0c:	10800017 	ldw	r2,0(r2)
    ca10:	10800817 	ldw	r2,32(r2)
    ca14:	e13ffd17 	ldw	r4,-12(fp)
    ca18:	e17fff17 	ldw	r5,-4(fp)
    ca1c:	103ee83a 	callr	r2
    ca20:	00000906 	br	ca48 <fstat+0x98>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    ca24:	e0bfff17 	ldw	r2,-4(fp)
    ca28:	00c80004 	movi	r3,8192
    ca2c:	10c00115 	stw	r3,4(r2)
      return 0;
    ca30:	0005883a 	mov	r2,zero
    ca34:	00000406 	br	ca48 <fstat+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ca38:	000c9600 	call	c960 <alt_get_errno>
    ca3c:	00c01444 	movi	r3,81
    ca40:	10c00015 	stw	r3,0(r2)
    return -1;
    ca44:	00bfffc4 	movi	r2,-1
  }
}
    ca48:	e037883a 	mov	sp,fp
    ca4c:	dfc00117 	ldw	ra,4(sp)
    ca50:	df000017 	ldw	fp,0(sp)
    ca54:	dec00204 	addi	sp,sp,8
    ca58:	f800283a 	ret

0000ca5c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    ca5c:	defff904 	addi	sp,sp,-28
    ca60:	dfc00615 	stw	ra,24(sp)
    ca64:	df000515 	stw	fp,20(sp)
    ca68:	df000504 	addi	fp,sp,20
    ca6c:	e13ffc15 	stw	r4,-16(fp)
    ca70:	e17ffd15 	stw	r5,-12(fp)
    ca74:	e1bffe15 	stw	r6,-8(fp)
    ca78:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    ca7c:	e0800217 	ldw	r2,8(fp)
    ca80:	d8800015 	stw	r2,0(sp)
    ca84:	e13ffc17 	ldw	r4,-16(fp)
    ca88:	e17ffd17 	ldw	r5,-12(fp)
    ca8c:	e1bffe17 	ldw	r6,-8(fp)
    ca90:	e1ffff17 	ldw	r7,-4(fp)
    ca94:	000cc340 	call	cc34 <alt_iic_isr_register>
}  
    ca98:	e037883a 	mov	sp,fp
    ca9c:	dfc00117 	ldw	ra,4(sp)
    caa0:	df000017 	ldw	fp,0(sp)
    caa4:	dec00204 	addi	sp,sp,8
    caa8:	f800283a 	ret

0000caac <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    caac:	defff904 	addi	sp,sp,-28
    cab0:	df000615 	stw	fp,24(sp)
    cab4:	df000604 	addi	fp,sp,24
    cab8:	e13ffe15 	stw	r4,-8(fp)
    cabc:	e17fff15 	stw	r5,-4(fp)
    cac0:	e0bfff17 	ldw	r2,-4(fp)
    cac4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cac8:	0005303a 	rdctl	r2,status
    cacc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cad0:	e0fffb17 	ldw	r3,-20(fp)
    cad4:	00bfff84 	movi	r2,-2
    cad8:	1884703a 	and	r2,r3,r2
    cadc:	1001703a 	wrctl	status,r2
  
  return context;
    cae0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    cae4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    cae8:	e0bffa17 	ldw	r2,-24(fp)
    caec:	00c00044 	movi	r3,1
    caf0:	1884983a 	sll	r2,r3,r2
    caf4:	1007883a 	mov	r3,r2
    caf8:	00800074 	movhi	r2,1
    cafc:	108a5d04 	addi	r2,r2,10612
    cb00:	10800017 	ldw	r2,0(r2)
    cb04:	1886b03a 	or	r3,r3,r2
    cb08:	00800074 	movhi	r2,1
    cb0c:	108a5d04 	addi	r2,r2,10612
    cb10:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    cb14:	00800074 	movhi	r2,1
    cb18:	108a5d04 	addi	r2,r2,10612
    cb1c:	10800017 	ldw	r2,0(r2)
    cb20:	100170fa 	wrctl	ienable,r2
    cb24:	e0bffc17 	ldw	r2,-16(fp)
    cb28:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cb2c:	e0bffd17 	ldw	r2,-12(fp)
    cb30:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    cb34:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    cb38:	e037883a 	mov	sp,fp
    cb3c:	df000017 	ldw	fp,0(sp)
    cb40:	dec00104 	addi	sp,sp,4
    cb44:	f800283a 	ret

0000cb48 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    cb48:	defff904 	addi	sp,sp,-28
    cb4c:	df000615 	stw	fp,24(sp)
    cb50:	df000604 	addi	fp,sp,24
    cb54:	e13ffe15 	stw	r4,-8(fp)
    cb58:	e17fff15 	stw	r5,-4(fp)
    cb5c:	e0bfff17 	ldw	r2,-4(fp)
    cb60:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cb64:	0005303a 	rdctl	r2,status
    cb68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cb6c:	e0fffb17 	ldw	r3,-20(fp)
    cb70:	00bfff84 	movi	r2,-2
    cb74:	1884703a 	and	r2,r3,r2
    cb78:	1001703a 	wrctl	status,r2
  
  return context;
    cb7c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    cb80:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    cb84:	e0bffa17 	ldw	r2,-24(fp)
    cb88:	00c00044 	movi	r3,1
    cb8c:	1884983a 	sll	r2,r3,r2
    cb90:	0084303a 	nor	r2,zero,r2
    cb94:	1007883a 	mov	r3,r2
    cb98:	00800074 	movhi	r2,1
    cb9c:	108a5d04 	addi	r2,r2,10612
    cba0:	10800017 	ldw	r2,0(r2)
    cba4:	1886703a 	and	r3,r3,r2
    cba8:	00800074 	movhi	r2,1
    cbac:	108a5d04 	addi	r2,r2,10612
    cbb0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    cbb4:	00800074 	movhi	r2,1
    cbb8:	108a5d04 	addi	r2,r2,10612
    cbbc:	10800017 	ldw	r2,0(r2)
    cbc0:	100170fa 	wrctl	ienable,r2
    cbc4:	e0bffc17 	ldw	r2,-16(fp)
    cbc8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cbcc:	e0bffd17 	ldw	r2,-12(fp)
    cbd0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    cbd4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    cbd8:	e037883a 	mov	sp,fp
    cbdc:	df000017 	ldw	fp,0(sp)
    cbe0:	dec00104 	addi	sp,sp,4
    cbe4:	f800283a 	ret

0000cbe8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    cbe8:	defffc04 	addi	sp,sp,-16
    cbec:	df000315 	stw	fp,12(sp)
    cbf0:	df000304 	addi	fp,sp,12
    cbf4:	e13ffe15 	stw	r4,-8(fp)
    cbf8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    cbfc:	000530fa 	rdctl	r2,ienable
    cc00:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    cc04:	e0bfff17 	ldw	r2,-4(fp)
    cc08:	00c00044 	movi	r3,1
    cc0c:	1884983a 	sll	r2,r3,r2
    cc10:	1007883a 	mov	r3,r2
    cc14:	e0bffd17 	ldw	r2,-12(fp)
    cc18:	1884703a 	and	r2,r3,r2
    cc1c:	1004c03a 	cmpne	r2,r2,zero
    cc20:	10803fcc 	andi	r2,r2,255
}
    cc24:	e037883a 	mov	sp,fp
    cc28:	df000017 	ldw	fp,0(sp)
    cc2c:	dec00104 	addi	sp,sp,4
    cc30:	f800283a 	ret

0000cc34 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    cc34:	defff504 	addi	sp,sp,-44
    cc38:	dfc00a15 	stw	ra,40(sp)
    cc3c:	df000915 	stw	fp,36(sp)
    cc40:	df000904 	addi	fp,sp,36
    cc44:	e13ffc15 	stw	r4,-16(fp)
    cc48:	e17ffd15 	stw	r5,-12(fp)
    cc4c:	e1bffe15 	stw	r6,-8(fp)
    cc50:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    cc54:	00bffa84 	movi	r2,-22
    cc58:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    cc5c:	e0bffd17 	ldw	r2,-12(fp)
    cc60:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    cc64:	e0bff817 	ldw	r2,-32(fp)
    cc68:	10800808 	cmpgei	r2,r2,32
    cc6c:	1000271e 	bne	r2,zero,cd0c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cc70:	0005303a 	rdctl	r2,status
    cc74:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cc78:	e0fffa17 	ldw	r3,-24(fp)
    cc7c:	00bfff84 	movi	r2,-2
    cc80:	1884703a 	and	r2,r3,r2
    cc84:	1001703a 	wrctl	status,r2
  
  return context;
    cc88:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    cc8c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    cc90:	00c00074 	movhi	r3,1
    cc94:	18ca6d04 	addi	r3,r3,10676
    cc98:	e0bff817 	ldw	r2,-32(fp)
    cc9c:	100490fa 	slli	r2,r2,3
    cca0:	1885883a 	add	r2,r3,r2
    cca4:	e0fffe17 	ldw	r3,-8(fp)
    cca8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    ccac:	00c00074 	movhi	r3,1
    ccb0:	18ca6d04 	addi	r3,r3,10676
    ccb4:	e0bff817 	ldw	r2,-32(fp)
    ccb8:	100490fa 	slli	r2,r2,3
    ccbc:	1885883a 	add	r2,r3,r2
    ccc0:	10800104 	addi	r2,r2,4
    ccc4:	e0ffff17 	ldw	r3,-4(fp)
    ccc8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    cccc:	e0bffe17 	ldw	r2,-8(fp)
    ccd0:	10000526 	beq	r2,zero,cce8 <alt_iic_isr_register+0xb4>
    ccd4:	e0bff817 	ldw	r2,-32(fp)
    ccd8:	e13ffc17 	ldw	r4,-16(fp)
    ccdc:	100b883a 	mov	r5,r2
    cce0:	000caac0 	call	caac <alt_ic_irq_enable>
    cce4:	00000406 	br	ccf8 <alt_iic_isr_register+0xc4>
    cce8:	e0bff817 	ldw	r2,-32(fp)
    ccec:	e13ffc17 	ldw	r4,-16(fp)
    ccf0:	100b883a 	mov	r5,r2
    ccf4:	000cb480 	call	cb48 <alt_ic_irq_disable>
    ccf8:	e0bff715 	stw	r2,-36(fp)
    ccfc:	e0bff917 	ldw	r2,-28(fp)
    cd00:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cd04:	e0bffb17 	ldw	r2,-20(fp)
    cd08:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    cd0c:	e0bff717 	ldw	r2,-36(fp)
}
    cd10:	e037883a 	mov	sp,fp
    cd14:	dfc00117 	ldw	ra,4(sp)
    cd18:	df000017 	ldw	fp,0(sp)
    cd1c:	dec00204 	addi	sp,sp,8
    cd20:	f800283a 	ret

0000cd24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cd24:	defffe04 	addi	sp,sp,-8
    cd28:	dfc00115 	stw	ra,4(sp)
    cd2c:	df000015 	stw	fp,0(sp)
    cd30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cd34:	00800074 	movhi	r2,1
    cd38:	10839404 	addi	r2,r2,3664
    cd3c:	10800017 	ldw	r2,0(r2)
    cd40:	10000526 	beq	r2,zero,cd58 <alt_get_errno+0x34>
    cd44:	00800074 	movhi	r2,1
    cd48:	10839404 	addi	r2,r2,3664
    cd4c:	10800017 	ldw	r2,0(r2)
    cd50:	103ee83a 	callr	r2
    cd54:	00000206 	br	cd60 <alt_get_errno+0x3c>
    cd58:	00800074 	movhi	r2,1
    cd5c:	108a5c04 	addi	r2,r2,10608
}
    cd60:	e037883a 	mov	sp,fp
    cd64:	dfc00117 	ldw	ra,4(sp)
    cd68:	df000017 	ldw	fp,0(sp)
    cd6c:	dec00204 	addi	sp,sp,8
    cd70:	f800283a 	ret

0000cd74 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    cd74:	deffed04 	addi	sp,sp,-76
    cd78:	dfc01215 	stw	ra,72(sp)
    cd7c:	df001115 	stw	fp,68(sp)
    cd80:	df001104 	addi	fp,sp,68
    cd84:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cd88:	e0bfff17 	ldw	r2,-4(fp)
    cd8c:	10000616 	blt	r2,zero,cda8 <isatty+0x34>
    cd90:	e0bfff17 	ldw	r2,-4(fp)
    cd94:	10c00324 	muli	r3,r2,12
    cd98:	00800074 	movhi	r2,1
    cd9c:	10bf1104 	addi	r2,r2,-956
    cda0:	1885883a 	add	r2,r3,r2
    cda4:	00000106 	br	cdac <isatty+0x38>
    cda8:	0005883a 	mov	r2,zero
    cdac:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    cdb0:	e0bfef17 	ldw	r2,-68(fp)
    cdb4:	10000e26 	beq	r2,zero,cdf0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    cdb8:	e0bfef17 	ldw	r2,-68(fp)
    cdbc:	10800017 	ldw	r2,0(r2)
    cdc0:	10800817 	ldw	r2,32(r2)
    cdc4:	1000021e 	bne	r2,zero,cdd0 <isatty+0x5c>
    {
      return 1;
    cdc8:	00800044 	movi	r2,1
    cdcc:	00000c06 	br	ce00 <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    cdd0:	e0bff004 	addi	r2,fp,-64
    cdd4:	e13fff17 	ldw	r4,-4(fp)
    cdd8:	100b883a 	mov	r5,r2
    cddc:	000c9b00 	call	c9b0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    cde0:	e0bff117 	ldw	r2,-60(fp)
    cde4:	10880020 	cmpeqi	r2,r2,8192
    cde8:	10803fcc 	andi	r2,r2,255
    cdec:	00000406 	br	ce00 <isatty+0x8c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cdf0:	000cd240 	call	cd24 <alt_get_errno>
    cdf4:	00c01444 	movi	r3,81
    cdf8:	10c00015 	stw	r3,0(r2)
    return 0;
    cdfc:	0005883a 	mov	r2,zero
  }
}
    ce00:	e037883a 	mov	sp,fp
    ce04:	dfc00117 	ldw	ra,4(sp)
    ce08:	df000017 	ldw	fp,0(sp)
    ce0c:	dec00204 	addi	sp,sp,8
    ce10:	f800283a 	ret

0000ce14 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    ce14:	defffc04 	addi	sp,sp,-16
    ce18:	df000315 	stw	fp,12(sp)
    ce1c:	df000304 	addi	fp,sp,12
    ce20:	e13ffd15 	stw	r4,-12(fp)
    ce24:	e17ffe15 	stw	r5,-8(fp)
    ce28:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    ce2c:	e0fffe17 	ldw	r3,-8(fp)
    ce30:	e0bffd17 	ldw	r2,-12(fp)
    ce34:	18800c26 	beq	r3,r2,ce68 <alt_load_section+0x54>
  {
    while( to != end )
    ce38:	00000806 	br	ce5c <alt_load_section+0x48>
    {
      *to++ = *from++;
    ce3c:	e0bffe17 	ldw	r2,-8(fp)
    ce40:	10c00104 	addi	r3,r2,4
    ce44:	e0fffe15 	stw	r3,-8(fp)
    ce48:	e0fffd17 	ldw	r3,-12(fp)
    ce4c:	19000104 	addi	r4,r3,4
    ce50:	e13ffd15 	stw	r4,-12(fp)
    ce54:	18c00017 	ldw	r3,0(r3)
    ce58:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    ce5c:	e0fffe17 	ldw	r3,-8(fp)
    ce60:	e0bfff17 	ldw	r2,-4(fp)
    ce64:	18bff51e 	bne	r3,r2,ce3c <__alt_data_end+0xfe00ce3c>
    {
      *to++ = *from++;
    }
  }
}
    ce68:	e037883a 	mov	sp,fp
    ce6c:	df000017 	ldw	fp,0(sp)
    ce70:	dec00104 	addi	sp,sp,4
    ce74:	f800283a 	ret

0000ce78 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    ce78:	defffe04 	addi	sp,sp,-8
    ce7c:	dfc00115 	stw	ra,4(sp)
    ce80:	df000015 	stw	fp,0(sp)
    ce84:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    ce88:	01000074 	movhi	r4,1
    ce8c:	21039904 	addi	r4,r4,3684
    ce90:	01400074 	movhi	r5,1
    ce94:	297cde04 	addi	r5,r5,-3208
    ce98:	01800074 	movhi	r6,1
    ce9c:	31839904 	addi	r6,r6,3684
    cea0:	000ce140 	call	ce14 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    cea4:	01000034 	movhi	r4,0
    cea8:	21000804 	addi	r4,r4,32
    ceac:	01400034 	movhi	r5,0
    ceb0:	29400804 	addi	r5,r5,32
    ceb4:	01800034 	movhi	r6,0
    ceb8:	31806f04 	addi	r6,r6,444
    cebc:	000ce140 	call	ce14 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    cec0:	01000074 	movhi	r4,1
    cec4:	213c0a04 	addi	r4,r4,-4056
    cec8:	01400074 	movhi	r5,1
    cecc:	297c0a04 	addi	r5,r5,-4056
    ced0:	01800074 	movhi	r6,1
    ced4:	31bcde04 	addi	r6,r6,-3208
    ced8:	000ce140 	call	ce14 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    cedc:	000e2080 	call	e208 <alt_dcache_flush_all>
  alt_icache_flush_all();
    cee0:	000e3f40 	call	e3f4 <alt_icache_flush_all>
}
    cee4:	e037883a 	mov	sp,fp
    cee8:	dfc00117 	ldw	ra,4(sp)
    ceec:	df000017 	ldw	fp,0(sp)
    cef0:	dec00204 	addi	sp,sp,8
    cef4:	f800283a 	ret

0000cef8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cef8:	defffe04 	addi	sp,sp,-8
    cefc:	dfc00115 	stw	ra,4(sp)
    cf00:	df000015 	stw	fp,0(sp)
    cf04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cf08:	00800074 	movhi	r2,1
    cf0c:	10839404 	addi	r2,r2,3664
    cf10:	10800017 	ldw	r2,0(r2)
    cf14:	10000526 	beq	r2,zero,cf2c <alt_get_errno+0x34>
    cf18:	00800074 	movhi	r2,1
    cf1c:	10839404 	addi	r2,r2,3664
    cf20:	10800017 	ldw	r2,0(r2)
    cf24:	103ee83a 	callr	r2
    cf28:	00000206 	br	cf34 <alt_get_errno+0x3c>
    cf2c:	00800074 	movhi	r2,1
    cf30:	108a5c04 	addi	r2,r2,10608
}
    cf34:	e037883a 	mov	sp,fp
    cf38:	dfc00117 	ldw	ra,4(sp)
    cf3c:	df000017 	ldw	fp,0(sp)
    cf40:	dec00204 	addi	sp,sp,8
    cf44:	f800283a 	ret

0000cf48 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    cf48:	defff904 	addi	sp,sp,-28
    cf4c:	dfc00615 	stw	ra,24(sp)
    cf50:	df000515 	stw	fp,20(sp)
    cf54:	df000504 	addi	fp,sp,20
    cf58:	e13ffd15 	stw	r4,-12(fp)
    cf5c:	e17ffe15 	stw	r5,-8(fp)
    cf60:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    cf64:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cf68:	e0bffd17 	ldw	r2,-12(fp)
    cf6c:	10000616 	blt	r2,zero,cf88 <lseek+0x40>
    cf70:	e0bffd17 	ldw	r2,-12(fp)
    cf74:	10c00324 	muli	r3,r2,12
    cf78:	00800074 	movhi	r2,1
    cf7c:	10bf1104 	addi	r2,r2,-956
    cf80:	1885883a 	add	r2,r3,r2
    cf84:	00000106 	br	cf8c <lseek+0x44>
    cf88:	0005883a 	mov	r2,zero
    cf8c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    cf90:	e0bffc17 	ldw	r2,-16(fp)
    cf94:	10001026 	beq	r2,zero,cfd8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    cf98:	e0bffc17 	ldw	r2,-16(fp)
    cf9c:	10800017 	ldw	r2,0(r2)
    cfa0:	10800717 	ldw	r2,28(r2)
    cfa4:	10000926 	beq	r2,zero,cfcc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    cfa8:	e0bffc17 	ldw	r2,-16(fp)
    cfac:	10800017 	ldw	r2,0(r2)
    cfb0:	10800717 	ldw	r2,28(r2)
    cfb4:	e13ffc17 	ldw	r4,-16(fp)
    cfb8:	e17ffe17 	ldw	r5,-8(fp)
    cfbc:	e1bfff17 	ldw	r6,-4(fp)
    cfc0:	103ee83a 	callr	r2
    cfc4:	e0bffb15 	stw	r2,-20(fp)
    cfc8:	00000506 	br	cfe0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    cfcc:	00bfde84 	movi	r2,-134
    cfd0:	e0bffb15 	stw	r2,-20(fp)
    cfd4:	00000206 	br	cfe0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    cfd8:	00bfebc4 	movi	r2,-81
    cfdc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    cfe0:	e0bffb17 	ldw	r2,-20(fp)
    cfe4:	1000060e 	bge	r2,zero,d000 <lseek+0xb8>
  {
    ALT_ERRNO = -rc;
    cfe8:	000cef80 	call	cef8 <alt_get_errno>
    cfec:	e0fffb17 	ldw	r3,-20(fp)
    cff0:	00c7c83a 	sub	r3,zero,r3
    cff4:	10c00015 	stw	r3,0(r2)
    rc = -1;
    cff8:	00bfffc4 	movi	r2,-1
    cffc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    d000:	e0bffb17 	ldw	r2,-20(fp)
}
    d004:	e037883a 	mov	sp,fp
    d008:	dfc00117 	ldw	ra,4(sp)
    d00c:	df000017 	ldw	fp,0(sp)
    d010:	dec00204 	addi	sp,sp,8
    d014:	f800283a 	ret

0000d018 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d018:	defffd04 	addi	sp,sp,-12
    d01c:	dfc00215 	stw	ra,8(sp)
    d020:	df000115 	stw	fp,4(sp)
    d024:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d028:	0009883a 	mov	r4,zero
    d02c:	000d4c40 	call	d4c4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d030:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d034:	000d4f80 	call	d4f8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d038:	01000074 	movhi	r4,1
    d03c:	213cd404 	addi	r4,r4,-3248
    d040:	01400074 	movhi	r5,1
    d044:	297cd404 	addi	r5,r5,-3248
    d048:	01800074 	movhi	r6,1
    d04c:	31bcd404 	addi	r6,r6,-3248
    d050:	000e4e40 	call	e4e4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d054:	000e33c0 	call	e33c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d058:	01000074 	movhi	r4,1
    d05c:	2138e604 	addi	r4,r4,-7272
    d060:	000ec6c0 	call	ec6c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d064:	d126d517 	ldw	r4,-25772(gp)
    d068:	d0e6d617 	ldw	r3,-25768(gp)
    d06c:	d0a6d717 	ldw	r2,-25764(gp)
    d070:	180b883a 	mov	r5,r3
    d074:	100d883a 	mov	r6,r2
    d078:	00003940 	call	394 <main>
    d07c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    d080:	01000044 	movi	r4,1
    d084:	000c86c0 	call	c86c <close>
  exit (result);
    d088:	e13fff17 	ldw	r4,-4(fp)
    d08c:	000ec800 	call	ec80 <exit>

0000d090 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    d090:	defffe04 	addi	sp,sp,-8
    d094:	df000115 	stw	fp,4(sp)
    d098:	df000104 	addi	fp,sp,4
    d09c:	e13fff15 	stw	r4,-4(fp)
}
    d0a0:	e037883a 	mov	sp,fp
    d0a4:	df000017 	ldw	fp,0(sp)
    d0a8:	dec00104 	addi	sp,sp,4
    d0ac:	f800283a 	ret

0000d0b0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    d0b0:	defffe04 	addi	sp,sp,-8
    d0b4:	df000115 	stw	fp,4(sp)
    d0b8:	df000104 	addi	fp,sp,4
    d0bc:	e13fff15 	stw	r4,-4(fp)
}
    d0c0:	e037883a 	mov	sp,fp
    d0c4:	df000017 	ldw	fp,0(sp)
    d0c8:	dec00104 	addi	sp,sp,4
    d0cc:	f800283a 	ret

0000d0d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d0d0:	defffe04 	addi	sp,sp,-8
    d0d4:	dfc00115 	stw	ra,4(sp)
    d0d8:	df000015 	stw	fp,0(sp)
    d0dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d0e0:	00800074 	movhi	r2,1
    d0e4:	10839404 	addi	r2,r2,3664
    d0e8:	10800017 	ldw	r2,0(r2)
    d0ec:	10000526 	beq	r2,zero,d104 <alt_get_errno+0x34>
    d0f0:	00800074 	movhi	r2,1
    d0f4:	10839404 	addi	r2,r2,3664
    d0f8:	10800017 	ldw	r2,0(r2)
    d0fc:	103ee83a 	callr	r2
    d100:	00000206 	br	d10c <alt_get_errno+0x3c>
    d104:	00800074 	movhi	r2,1
    d108:	108a5c04 	addi	r2,r2,10608
}
    d10c:	e037883a 	mov	sp,fp
    d110:	dfc00117 	ldw	ra,4(sp)
    d114:	df000017 	ldw	fp,0(sp)
    d118:	dec00204 	addi	sp,sp,8
    d11c:	f800283a 	ret

0000d120 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d120:	defff904 	addi	sp,sp,-28
    d124:	dfc00615 	stw	ra,24(sp)
    d128:	df000515 	stw	fp,20(sp)
    d12c:	df000504 	addi	fp,sp,20
    d130:	e13ffd15 	stw	r4,-12(fp)
    d134:	e17ffe15 	stw	r5,-8(fp)
    d138:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d13c:	e0bffd17 	ldw	r2,-12(fp)
    d140:	10000616 	blt	r2,zero,d15c <read+0x3c>
    d144:	e0bffd17 	ldw	r2,-12(fp)
    d148:	10c00324 	muli	r3,r2,12
    d14c:	00800074 	movhi	r2,1
    d150:	10bf1104 	addi	r2,r2,-956
    d154:	1885883a 	add	r2,r3,r2
    d158:	00000106 	br	d160 <read+0x40>
    d15c:	0005883a 	mov	r2,zero
    d160:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d164:	e0bffb17 	ldw	r2,-20(fp)
    d168:	10002026 	beq	r2,zero,d1ec <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d16c:	e0bffb17 	ldw	r2,-20(fp)
    d170:	10800217 	ldw	r2,8(r2)
    d174:	108000cc 	andi	r2,r2,3
    d178:	10800060 	cmpeqi	r2,r2,1
    d17c:	1000171e 	bne	r2,zero,d1dc <read+0xbc>
        (fd->dev->read))
    d180:	e0bffb17 	ldw	r2,-20(fp)
    d184:	10800017 	ldw	r2,0(r2)
    d188:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d18c:	10001326 	beq	r2,zero,d1dc <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d190:	e0bffb17 	ldw	r2,-20(fp)
    d194:	10800017 	ldw	r2,0(r2)
    d198:	10800517 	ldw	r2,20(r2)
    d19c:	e0ffff17 	ldw	r3,-4(fp)
    d1a0:	e13ffb17 	ldw	r4,-20(fp)
    d1a4:	e17ffe17 	ldw	r5,-8(fp)
    d1a8:	180d883a 	mov	r6,r3
    d1ac:	103ee83a 	callr	r2
    d1b0:	e0bffc15 	stw	r2,-16(fp)
    d1b4:	e0bffc17 	ldw	r2,-16(fp)
    d1b8:	1000060e 	bge	r2,zero,d1d4 <read+0xb4>
        {
          ALT_ERRNO = -rval;
    d1bc:	000d0d00 	call	d0d0 <alt_get_errno>
    d1c0:	e0fffc17 	ldw	r3,-16(fp)
    d1c4:	00c7c83a 	sub	r3,zero,r3
    d1c8:	10c00015 	stw	r3,0(r2)
          return -1;
    d1cc:	00bfffc4 	movi	r2,-1
    d1d0:	00000a06 	br	d1fc <read+0xdc>
        }
        return rval;
    d1d4:	e0bffc17 	ldw	r2,-16(fp)
    d1d8:	00000806 	br	d1fc <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
    d1dc:	000d0d00 	call	d0d0 <alt_get_errno>
    d1e0:	00c00344 	movi	r3,13
    d1e4:	10c00015 	stw	r3,0(r2)
    d1e8:	00000306 	br	d1f8 <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d1ec:	000d0d00 	call	d0d0 <alt_get_errno>
    d1f0:	00c01444 	movi	r3,81
    d1f4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    d1f8:	00bfffc4 	movi	r2,-1
}
    d1fc:	e037883a 	mov	sp,fp
    d200:	dfc00117 	ldw	ra,4(sp)
    d204:	df000017 	ldw	fp,0(sp)
    d208:	dec00204 	addi	sp,sp,8
    d20c:	f800283a 	ret

0000d210 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d210:	defffe04 	addi	sp,sp,-8
    d214:	df000115 	stw	fp,4(sp)
    d218:	df000104 	addi	fp,sp,4
    d21c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d220:	e0bfff17 	ldw	r2,-4(fp)
    d224:	108000d0 	cmplti	r2,r2,3
    d228:	10000d1e 	bne	r2,zero,d260 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    d22c:	00c00074 	movhi	r3,1
    d230:	18ff1104 	addi	r3,r3,-956
    d234:	e0bfff17 	ldw	r2,-4(fp)
    d238:	10800324 	muli	r2,r2,12
    d23c:	1885883a 	add	r2,r3,r2
    d240:	10800204 	addi	r2,r2,8
    d244:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d248:	00c00074 	movhi	r3,1
    d24c:	18ff1104 	addi	r3,r3,-956
    d250:	e0bfff17 	ldw	r2,-4(fp)
    d254:	10800324 	muli	r2,r2,12
    d258:	1885883a 	add	r2,r3,r2
    d25c:	10000015 	stw	zero,0(r2)
  }
}
    d260:	e037883a 	mov	sp,fp
    d264:	df000017 	ldw	fp,0(sp)
    d268:	dec00104 	addi	sp,sp,4
    d26c:	f800283a 	ret

0000d270 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    d270:	defff904 	addi	sp,sp,-28
    d274:	df000615 	stw	fp,24(sp)
    d278:	df000604 	addi	fp,sp,24
    d27c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d280:	0005303a 	rdctl	r2,status
    d284:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d288:	e0fffc17 	ldw	r3,-16(fp)
    d28c:	00bfff84 	movi	r2,-2
    d290:	1884703a 	and	r2,r3,r2
    d294:	1001703a 	wrctl	status,r2
  
  return context;
    d298:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    d29c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d2a0:	d0a00d17 	ldw	r2,-32716(gp)
    d2a4:	10c000c4 	addi	r3,r2,3
    d2a8:	00bfff04 	movi	r2,-4
    d2ac:	1884703a 	and	r2,r3,r2
    d2b0:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d2b4:	d0e00d17 	ldw	r3,-32716(gp)
    d2b8:	e0bfff17 	ldw	r2,-4(fp)
    d2bc:	1885883a 	add	r2,r3,r2
    d2c0:	00c08034 	movhi	r3,512
    d2c4:	18c00004 	addi	r3,r3,0
    d2c8:	1880062e 	bgeu	r3,r2,d2e4 <sbrk+0x74>
    d2cc:	e0bffa17 	ldw	r2,-24(fp)
    d2d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d2d4:	e0bffd17 	ldw	r2,-12(fp)
    d2d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    d2dc:	00bfffc4 	movi	r2,-1
    d2e0:	00000b06 	br	d310 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    d2e4:	d0a00d17 	ldw	r2,-32716(gp)
    d2e8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    d2ec:	d0e00d17 	ldw	r3,-32716(gp)
    d2f0:	e0bfff17 	ldw	r2,-4(fp)
    d2f4:	1885883a 	add	r2,r3,r2
    d2f8:	d0a00d15 	stw	r2,-32716(gp)
    d2fc:	e0bffa17 	ldw	r2,-24(fp)
    d300:	e0bffe15 	stw	r2,-8(fp)
    d304:	e0bffe17 	ldw	r2,-8(fp)
    d308:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    d30c:	e0bffb17 	ldw	r2,-20(fp)
} 
    d310:	e037883a 	mov	sp,fp
    d314:	df000017 	ldw	fp,0(sp)
    d318:	dec00104 	addi	sp,sp,4
    d31c:	f800283a 	ret

0000d320 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    d320:	defffd04 	addi	sp,sp,-12
    d324:	dfc00215 	stw	ra,8(sp)
    d328:	df000115 	stw	fp,4(sp)
    d32c:	df000104 	addi	fp,sp,4
    d330:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    d334:	e13fff17 	ldw	r4,-4(fp)
    d338:	000e0b40 	call	e0b4 <alt_busy_sleep>
}
    d33c:	e037883a 	mov	sp,fp
    d340:	dfc00117 	ldw	ra,4(sp)
    d344:	df000017 	ldw	fp,0(sp)
    d348:	dec00204 	addi	sp,sp,8
    d34c:	f800283a 	ret

0000d350 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d350:	defffe04 	addi	sp,sp,-8
    d354:	dfc00115 	stw	ra,4(sp)
    d358:	df000015 	stw	fp,0(sp)
    d35c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d360:	00800074 	movhi	r2,1
    d364:	10839404 	addi	r2,r2,3664
    d368:	10800017 	ldw	r2,0(r2)
    d36c:	10000526 	beq	r2,zero,d384 <alt_get_errno+0x34>
    d370:	00800074 	movhi	r2,1
    d374:	10839404 	addi	r2,r2,3664
    d378:	10800017 	ldw	r2,0(r2)
    d37c:	103ee83a 	callr	r2
    d380:	00000206 	br	d38c <alt_get_errno+0x3c>
    d384:	00800074 	movhi	r2,1
    d388:	108a5c04 	addi	r2,r2,10608
}
    d38c:	e037883a 	mov	sp,fp
    d390:	dfc00117 	ldw	ra,4(sp)
    d394:	df000017 	ldw	fp,0(sp)
    d398:	dec00204 	addi	sp,sp,8
    d39c:	f800283a 	ret

0000d3a0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    d3a0:	defff904 	addi	sp,sp,-28
    d3a4:	dfc00615 	stw	ra,24(sp)
    d3a8:	df000515 	stw	fp,20(sp)
    d3ac:	df000504 	addi	fp,sp,20
    d3b0:	e13ffd15 	stw	r4,-12(fp)
    d3b4:	e17ffe15 	stw	r5,-8(fp)
    d3b8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d3bc:	e0bffd17 	ldw	r2,-12(fp)
    d3c0:	10000616 	blt	r2,zero,d3dc <write+0x3c>
    d3c4:	e0bffd17 	ldw	r2,-12(fp)
    d3c8:	10c00324 	muli	r3,r2,12
    d3cc:	00800074 	movhi	r2,1
    d3d0:	10bf1104 	addi	r2,r2,-956
    d3d4:	1885883a 	add	r2,r3,r2
    d3d8:	00000106 	br	d3e0 <write+0x40>
    d3dc:	0005883a 	mov	r2,zero
    d3e0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d3e4:	e0bffb17 	ldw	r2,-20(fp)
    d3e8:	10001f26 	beq	r2,zero,d468 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    d3ec:	e0bffb17 	ldw	r2,-20(fp)
    d3f0:	10800217 	ldw	r2,8(r2)
    d3f4:	108000cc 	andi	r2,r2,3
    d3f8:	10001726 	beq	r2,zero,d458 <write+0xb8>
    d3fc:	e0bffb17 	ldw	r2,-20(fp)
    d400:	10800017 	ldw	r2,0(r2)
    d404:	10800617 	ldw	r2,24(r2)
    d408:	10001326 	beq	r2,zero,d458 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    d40c:	e0bffb17 	ldw	r2,-20(fp)
    d410:	10800017 	ldw	r2,0(r2)
    d414:	10800617 	ldw	r2,24(r2)
    d418:	e0ffff17 	ldw	r3,-4(fp)
    d41c:	e13ffb17 	ldw	r4,-20(fp)
    d420:	e17ffe17 	ldw	r5,-8(fp)
    d424:	180d883a 	mov	r6,r3
    d428:	103ee83a 	callr	r2
    d42c:	e0bffc15 	stw	r2,-16(fp)
    d430:	e0bffc17 	ldw	r2,-16(fp)
    d434:	1000060e 	bge	r2,zero,d450 <write+0xb0>
      {
        ALT_ERRNO = -rval;
    d438:	000d3500 	call	d350 <alt_get_errno>
    d43c:	e0fffc17 	ldw	r3,-16(fp)
    d440:	00c7c83a 	sub	r3,zero,r3
    d444:	10c00015 	stw	r3,0(r2)
        return -1;
    d448:	00bfffc4 	movi	r2,-1
    d44c:	00000a06 	br	d478 <write+0xd8>
      }
      return rval;
    d450:	e0bffc17 	ldw	r2,-16(fp)
    d454:	00000806 	br	d478 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
    d458:	000d3500 	call	d350 <alt_get_errno>
    d45c:	00c00344 	movi	r3,13
    d460:	10c00015 	stw	r3,0(r2)
    d464:	00000306 	br	d474 <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    d468:	000d3500 	call	d350 <alt_get_errno>
    d46c:	00c01444 	movi	r3,81
    d470:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    d474:	00bfffc4 	movi	r2,-1
}
    d478:	e037883a 	mov	sp,fp
    d47c:	dfc00117 	ldw	ra,4(sp)
    d480:	df000017 	ldw	fp,0(sp)
    d484:	dec00204 	addi	sp,sp,8
    d488:	f800283a 	ret

0000d48c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    d48c:	defffd04 	addi	sp,sp,-12
    d490:	dfc00215 	stw	ra,8(sp)
    d494:	df000115 	stw	fp,4(sp)
    d498:	df000104 	addi	fp,sp,4
    d49c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    d4a0:	e13fff17 	ldw	r4,-4(fp)
    d4a4:	01400074 	movhi	r5,1
    d4a8:	29439104 	addi	r5,r5,3652
    d4ac:	000e29c0 	call	e29c <alt_dev_llist_insert>
}
    d4b0:	e037883a 	mov	sp,fp
    d4b4:	dfc00117 	ldw	ra,4(sp)
    d4b8:	df000017 	ldw	fp,0(sp)
    d4bc:	dec00204 	addi	sp,sp,8
    d4c0:	f800283a 	ret

0000d4c4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    d4c4:	defffd04 	addi	sp,sp,-12
    d4c8:	dfc00215 	stw	ra,8(sp)
    d4cc:	df000115 	stw	fp,4(sp)
    d4d0:	df000104 	addi	fp,sp,4
    d4d4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    d4d8:	000e9680 	call	e968 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    d4dc:	00800044 	movi	r2,1
    d4e0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    d4e4:	e037883a 	mov	sp,fp
    d4e8:	dfc00117 	ldw	ra,4(sp)
    d4ec:	df000017 	ldw	fp,0(sp)
    d4f0:	dec00204 	addi	sp,sp,8
    d4f4:	f800283a 	ret

0000d4f8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    d4f8:	defffe04 	addi	sp,sp,-8
    d4fc:	dfc00115 	stw	ra,4(sp)
    d500:	df000015 	stw	fp,0(sp)
    d504:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    d508:	01000074 	movhi	r4,1
    d50c:	213f7b04 	addi	r4,r4,-532
    d510:	000b883a 	mov	r5,zero
    d514:	01800144 	movi	r6,5
    d518:	000d6a00 	call	d6a0 <altera_avalon_jtag_uart_init>
    d51c:	01000074 	movhi	r4,1
    d520:	213f7104 	addi	r4,r4,-572
    d524:	000d48c0 	call	d48c <alt_dev_reg>
}
    d528:	e037883a 	mov	sp,fp
    d52c:	dfc00117 	ldw	ra,4(sp)
    d530:	df000017 	ldw	fp,0(sp)
    d534:	dec00204 	addi	sp,sp,8
    d538:	f800283a 	ret

0000d53c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    d53c:	defffa04 	addi	sp,sp,-24
    d540:	dfc00515 	stw	ra,20(sp)
    d544:	df000415 	stw	fp,16(sp)
    d548:	df000404 	addi	fp,sp,16
    d54c:	e13ffd15 	stw	r4,-12(fp)
    d550:	e17ffe15 	stw	r5,-8(fp)
    d554:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d558:	e0bffd17 	ldw	r2,-12(fp)
    d55c:	10800017 	ldw	r2,0(r2)
    d560:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    d564:	e0bffc17 	ldw	r2,-16(fp)
    d568:	10c00a04 	addi	r3,r2,40
    d56c:	e0bffd17 	ldw	r2,-12(fp)
    d570:	10800217 	ldw	r2,8(r2)
    d574:	1809883a 	mov	r4,r3
    d578:	e17ffe17 	ldw	r5,-8(fp)
    d57c:	e1bfff17 	ldw	r6,-4(fp)
    d580:	100f883a 	mov	r7,r2
    d584:	000db540 	call	db54 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    d588:	e037883a 	mov	sp,fp
    d58c:	dfc00117 	ldw	ra,4(sp)
    d590:	df000017 	ldw	fp,0(sp)
    d594:	dec00204 	addi	sp,sp,8
    d598:	f800283a 	ret

0000d59c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    d59c:	defffa04 	addi	sp,sp,-24
    d5a0:	dfc00515 	stw	ra,20(sp)
    d5a4:	df000415 	stw	fp,16(sp)
    d5a8:	df000404 	addi	fp,sp,16
    d5ac:	e13ffd15 	stw	r4,-12(fp)
    d5b0:	e17ffe15 	stw	r5,-8(fp)
    d5b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d5b8:	e0bffd17 	ldw	r2,-12(fp)
    d5bc:	10800017 	ldw	r2,0(r2)
    d5c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    d5c4:	e0bffc17 	ldw	r2,-16(fp)
    d5c8:	10c00a04 	addi	r3,r2,40
    d5cc:	e0bffd17 	ldw	r2,-12(fp)
    d5d0:	10800217 	ldw	r2,8(r2)
    d5d4:	1809883a 	mov	r4,r3
    d5d8:	e17ffe17 	ldw	r5,-8(fp)
    d5dc:	e1bfff17 	ldw	r6,-4(fp)
    d5e0:	100f883a 	mov	r7,r2
    d5e4:	000dd5c0 	call	dd5c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    d5e8:	e037883a 	mov	sp,fp
    d5ec:	dfc00117 	ldw	ra,4(sp)
    d5f0:	df000017 	ldw	fp,0(sp)
    d5f4:	dec00204 	addi	sp,sp,8
    d5f8:	f800283a 	ret

0000d5fc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    d5fc:	defffc04 	addi	sp,sp,-16
    d600:	dfc00315 	stw	ra,12(sp)
    d604:	df000215 	stw	fp,8(sp)
    d608:	df000204 	addi	fp,sp,8
    d60c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d610:	e0bfff17 	ldw	r2,-4(fp)
    d614:	10800017 	ldw	r2,0(r2)
    d618:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    d61c:	e0bffe17 	ldw	r2,-8(fp)
    d620:	10c00a04 	addi	r3,r2,40
    d624:	e0bfff17 	ldw	r2,-4(fp)
    d628:	10800217 	ldw	r2,8(r2)
    d62c:	1809883a 	mov	r4,r3
    d630:	100b883a 	mov	r5,r2
    d634:	000da000 	call	da00 <altera_avalon_jtag_uart_close>
}
    d638:	e037883a 	mov	sp,fp
    d63c:	dfc00117 	ldw	ra,4(sp)
    d640:	df000017 	ldw	fp,0(sp)
    d644:	dec00204 	addi	sp,sp,8
    d648:	f800283a 	ret

0000d64c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    d64c:	defffa04 	addi	sp,sp,-24
    d650:	dfc00515 	stw	ra,20(sp)
    d654:	df000415 	stw	fp,16(sp)
    d658:	df000404 	addi	fp,sp,16
    d65c:	e13ffd15 	stw	r4,-12(fp)
    d660:	e17ffe15 	stw	r5,-8(fp)
    d664:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    d668:	e0bffd17 	ldw	r2,-12(fp)
    d66c:	10800017 	ldw	r2,0(r2)
    d670:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    d674:	e0bffc17 	ldw	r2,-16(fp)
    d678:	10800a04 	addi	r2,r2,40
    d67c:	1009883a 	mov	r4,r2
    d680:	e17ffe17 	ldw	r5,-8(fp)
    d684:	e1bfff17 	ldw	r6,-4(fp)
    d688:	000da680 	call	da68 <altera_avalon_jtag_uart_ioctl>
}
    d68c:	e037883a 	mov	sp,fp
    d690:	dfc00117 	ldw	ra,4(sp)
    d694:	df000017 	ldw	fp,0(sp)
    d698:	dec00204 	addi	sp,sp,8
    d69c:	f800283a 	ret

0000d6a0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    d6a0:	defffa04 	addi	sp,sp,-24
    d6a4:	dfc00515 	stw	ra,20(sp)
    d6a8:	df000415 	stw	fp,16(sp)
    d6ac:	df000404 	addi	fp,sp,16
    d6b0:	e13ffd15 	stw	r4,-12(fp)
    d6b4:	e17ffe15 	stw	r5,-8(fp)
    d6b8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d6bc:	e0bffd17 	ldw	r2,-12(fp)
    d6c0:	00c00044 	movi	r3,1
    d6c4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    d6c8:	e0bffd17 	ldw	r2,-12(fp)
    d6cc:	10800017 	ldw	r2,0(r2)
    d6d0:	10800104 	addi	r2,r2,4
    d6d4:	e0fffd17 	ldw	r3,-12(fp)
    d6d8:	18c00817 	ldw	r3,32(r3)
    d6dc:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    d6e0:	e0fffe17 	ldw	r3,-8(fp)
    d6e4:	e0bfff17 	ldw	r2,-4(fp)
    d6e8:	d8000015 	stw	zero,0(sp)
    d6ec:	1809883a 	mov	r4,r3
    d6f0:	100b883a 	mov	r5,r2
    d6f4:	01800074 	movhi	r6,1
    d6f8:	31b5d804 	addi	r6,r6,-10400
    d6fc:	e1fffd17 	ldw	r7,-12(fp)
    d700:	000ca5c0 	call	ca5c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    d704:	e0bffd17 	ldw	r2,-12(fp)
    d708:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    d70c:	e0bffd17 	ldw	r2,-12(fp)
    d710:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    d714:	00800074 	movhi	r2,1
    d718:	108a6104 	addi	r2,r2,10628
    d71c:	10800017 	ldw	r2,0(r2)
    d720:	1809883a 	mov	r4,r3
    d724:	100b883a 	mov	r5,r2
    d728:	01800074 	movhi	r6,1
    d72c:	31b65704 	addi	r6,r6,-9892
    d730:	e1fffd17 	ldw	r7,-12(fp)
    d734:	000df740 	call	df74 <alt_alarm_start>
    d738:	1000040e 	bge	r2,zero,d74c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    d73c:	e0bffd17 	ldw	r2,-12(fp)
    d740:	00e00034 	movhi	r3,32768
    d744:	18ffffc4 	addi	r3,r3,-1
    d748:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    d74c:	e037883a 	mov	sp,fp
    d750:	dfc00117 	ldw	ra,4(sp)
    d754:	df000017 	ldw	fp,0(sp)
    d758:	dec00204 	addi	sp,sp,8
    d75c:	f800283a 	ret

0000d760 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    d760:	defff804 	addi	sp,sp,-32
    d764:	df000715 	stw	fp,28(sp)
    d768:	df000704 	addi	fp,sp,28
    d76c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    d770:	e0bfff17 	ldw	r2,-4(fp)
    d774:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    d778:	e0bffb17 	ldw	r2,-20(fp)
    d77c:	10800017 	ldw	r2,0(r2)
    d780:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d784:	e0bffc17 	ldw	r2,-16(fp)
    d788:	10800104 	addi	r2,r2,4
    d78c:	10800037 	ldwio	r2,0(r2)
    d790:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    d794:	e0bffd17 	ldw	r2,-12(fp)
    d798:	1080c00c 	andi	r2,r2,768
    d79c:	1000011e 	bne	r2,zero,d7a4 <altera_avalon_jtag_uart_irq+0x44>
      break;
    d7a0:	00006a06 	br	d94c <altera_avalon_jtag_uart_irq+0x1ec>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    d7a4:	e0bffd17 	ldw	r2,-12(fp)
    d7a8:	1080400c 	andi	r2,r2,256
    d7ac:	10003226 	beq	r2,zero,d878 <altera_avalon_jtag_uart_irq+0x118>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    d7b0:	00800074 	movhi	r2,1
    d7b4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d7b8:	e0bffb17 	ldw	r2,-20(fp)
    d7bc:	10800a17 	ldw	r2,40(r2)
    d7c0:	10800044 	addi	r2,r2,1
    d7c4:	1081ffcc 	andi	r2,r2,2047
    d7c8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    d7cc:	e0bffb17 	ldw	r2,-20(fp)
    d7d0:	10c00b17 	ldw	r3,44(r2)
    d7d4:	e0bffe17 	ldw	r2,-8(fp)
    d7d8:	1880011e 	bne	r3,r2,d7e0 <altera_avalon_jtag_uart_irq+0x80>
          break;
    d7dc:	00001506 	br	d834 <altera_avalon_jtag_uart_irq+0xd4>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    d7e0:	e0bffc17 	ldw	r2,-16(fp)
    d7e4:	10800037 	ldwio	r2,0(r2)
    d7e8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    d7ec:	e0bff917 	ldw	r2,-28(fp)
    d7f0:	10a0000c 	andi	r2,r2,32768
    d7f4:	1000011e 	bne	r2,zero,d7fc <altera_avalon_jtag_uart_irq+0x9c>
          break;
    d7f8:	00000e06 	br	d834 <altera_avalon_jtag_uart_irq+0xd4>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    d7fc:	e0bffb17 	ldw	r2,-20(fp)
    d800:	10800a17 	ldw	r2,40(r2)
    d804:	e0fff917 	ldw	r3,-28(fp)
    d808:	e13ffb17 	ldw	r4,-20(fp)
    d80c:	2085883a 	add	r2,r4,r2
    d810:	10800e04 	addi	r2,r2,56
    d814:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d818:	e0bffb17 	ldw	r2,-20(fp)
    d81c:	10800a17 	ldw	r2,40(r2)
    d820:	10800044 	addi	r2,r2,1
    d824:	10c1ffcc 	andi	r3,r2,2047
    d828:	e0bffb17 	ldw	r2,-20(fp)
    d82c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    d830:	003fe106 	br	d7b8 <__alt_data_end+0xfe00d7b8>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    d834:	e0bff917 	ldw	r2,-28(fp)
    d838:	10bfffec 	andhi	r2,r2,65535
    d83c:	10000e26 	beq	r2,zero,d878 <altera_avalon_jtag_uart_irq+0x118>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d840:	e0bffb17 	ldw	r2,-20(fp)
    d844:	10c00817 	ldw	r3,32(r2)
    d848:	00bfff84 	movi	r2,-2
    d84c:	1886703a 	and	r3,r3,r2
    d850:	e0bffb17 	ldw	r2,-20(fp)
    d854:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    d858:	e0bffc17 	ldw	r2,-16(fp)
    d85c:	10800104 	addi	r2,r2,4
    d860:	e0fffb17 	ldw	r3,-20(fp)
    d864:	18c00817 	ldw	r3,32(r3)
    d868:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d86c:	e0bffc17 	ldw	r2,-16(fp)
    d870:	10800104 	addi	r2,r2,4
    d874:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    d878:	e0bffd17 	ldw	r2,-12(fp)
    d87c:	1080800c 	andi	r2,r2,512
    d880:	10003126 	beq	r2,zero,d948 <altera_avalon_jtag_uart_irq+0x1e8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    d884:	e0bffd17 	ldw	r2,-12(fp)
    d888:	1004d43a 	srli	r2,r2,16
    d88c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    d890:	00001406 	br	d8e4 <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    d894:	e0bffc17 	ldw	r2,-16(fp)
    d898:	e0fffb17 	ldw	r3,-20(fp)
    d89c:	18c00d17 	ldw	r3,52(r3)
    d8a0:	e13ffb17 	ldw	r4,-20(fp)
    d8a4:	20c7883a 	add	r3,r4,r3
    d8a8:	18c20e04 	addi	r3,r3,2104
    d8ac:	18c00003 	ldbu	r3,0(r3)
    d8b0:	18c03fcc 	andi	r3,r3,255
    d8b4:	18c0201c 	xori	r3,r3,128
    d8b8:	18ffe004 	addi	r3,r3,-128
    d8bc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d8c0:	e0bffb17 	ldw	r2,-20(fp)
    d8c4:	10800d17 	ldw	r2,52(r2)
    d8c8:	10800044 	addi	r2,r2,1
    d8cc:	10c1ffcc 	andi	r3,r2,2047
    d8d0:	e0bffb17 	ldw	r2,-20(fp)
    d8d4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    d8d8:	e0bffa17 	ldw	r2,-24(fp)
    d8dc:	10bfffc4 	addi	r2,r2,-1
    d8e0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    d8e4:	e0bffa17 	ldw	r2,-24(fp)
    d8e8:	10000526 	beq	r2,zero,d900 <altera_avalon_jtag_uart_irq+0x1a0>
    d8ec:	e0bffb17 	ldw	r2,-20(fp)
    d8f0:	10c00d17 	ldw	r3,52(r2)
    d8f4:	e0bffb17 	ldw	r2,-20(fp)
    d8f8:	10800c17 	ldw	r2,48(r2)
    d8fc:	18bfe51e 	bne	r3,r2,d894 <__alt_data_end+0xfe00d894>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    d900:	e0bffa17 	ldw	r2,-24(fp)
    d904:	10001026 	beq	r2,zero,d948 <altera_avalon_jtag_uart_irq+0x1e8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    d908:	e0bffb17 	ldw	r2,-20(fp)
    d90c:	10c00817 	ldw	r3,32(r2)
    d910:	00bfff44 	movi	r2,-3
    d914:	1886703a 	and	r3,r3,r2
    d918:	e0bffb17 	ldw	r2,-20(fp)
    d91c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    d920:	e0bffb17 	ldw	r2,-20(fp)
    d924:	10800017 	ldw	r2,0(r2)
    d928:	10800104 	addi	r2,r2,4
    d92c:	e0fffb17 	ldw	r3,-20(fp)
    d930:	18c00817 	ldw	r3,32(r3)
    d934:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d938:	e0bffc17 	ldw	r2,-16(fp)
    d93c:	10800104 	addi	r2,r2,4
    d940:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    d944:	003f8f06 	br	d784 <__alt_data_end+0xfe00d784>
    d948:	003f8e06 	br	d784 <__alt_data_end+0xfe00d784>
}
    d94c:	e037883a 	mov	sp,fp
    d950:	df000017 	ldw	fp,0(sp)
    d954:	dec00104 	addi	sp,sp,4
    d958:	f800283a 	ret

0000d95c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    d95c:	defff804 	addi	sp,sp,-32
    d960:	df000715 	stw	fp,28(sp)
    d964:	df000704 	addi	fp,sp,28
    d968:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    d96c:	e0bffb17 	ldw	r2,-20(fp)
    d970:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    d974:	e0bff917 	ldw	r2,-28(fp)
    d978:	10800017 	ldw	r2,0(r2)
    d97c:	10800104 	addi	r2,r2,4
    d980:	10800037 	ldwio	r2,0(r2)
    d984:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    d988:	e0bffa17 	ldw	r2,-24(fp)
    d98c:	1081000c 	andi	r2,r2,1024
    d990:	10000a26 	beq	r2,zero,d9bc <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    d994:	e0bff917 	ldw	r2,-28(fp)
    d998:	10800017 	ldw	r2,0(r2)
    d99c:	10800104 	addi	r2,r2,4
    d9a0:	e0fff917 	ldw	r3,-28(fp)
    d9a4:	18c00817 	ldw	r3,32(r3)
    d9a8:	18c10014 	ori	r3,r3,1024
    d9ac:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    d9b0:	e0bff917 	ldw	r2,-28(fp)
    d9b4:	10000915 	stw	zero,36(r2)
    d9b8:	00000a06 	br	d9e4 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    d9bc:	e0bff917 	ldw	r2,-28(fp)
    d9c0:	10800917 	ldw	r2,36(r2)
    d9c4:	00e00034 	movhi	r3,32768
    d9c8:	18ffff04 	addi	r3,r3,-4
    d9cc:	18800536 	bltu	r3,r2,d9e4 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
    d9d0:	e0bff917 	ldw	r2,-28(fp)
    d9d4:	10800917 	ldw	r2,36(r2)
    d9d8:	10c00044 	addi	r3,r2,1
    d9dc:	e0bff917 	ldw	r2,-28(fp)
    d9e0:	10c00915 	stw	r3,36(r2)
    d9e4:	00800074 	movhi	r2,1
    d9e8:	108a6104 	addi	r2,r2,10628
    d9ec:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    d9f0:	e037883a 	mov	sp,fp
    d9f4:	df000017 	ldw	fp,0(sp)
    d9f8:	dec00104 	addi	sp,sp,4
    d9fc:	f800283a 	ret

0000da00 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    da00:	defffd04 	addi	sp,sp,-12
    da04:	df000215 	stw	fp,8(sp)
    da08:	df000204 	addi	fp,sp,8
    da0c:	e13ffe15 	stw	r4,-8(fp)
    da10:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    da14:	00000506 	br	da2c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    da18:	e0bfff17 	ldw	r2,-4(fp)
    da1c:	1090000c 	andi	r2,r2,16384
    da20:	10000226 	beq	r2,zero,da2c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    da24:	00bffd44 	movi	r2,-11
    da28:	00000b06 	br	da58 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    da2c:	e0bffe17 	ldw	r2,-8(fp)
    da30:	10c00d17 	ldw	r3,52(r2)
    da34:	e0bffe17 	ldw	r2,-8(fp)
    da38:	10800c17 	ldw	r2,48(r2)
    da3c:	18800526 	beq	r3,r2,da54 <altera_avalon_jtag_uart_close+0x54>
    da40:	e0bffe17 	ldw	r2,-8(fp)
    da44:	10c00917 	ldw	r3,36(r2)
    da48:	e0bffe17 	ldw	r2,-8(fp)
    da4c:	10800117 	ldw	r2,4(r2)
    da50:	18bff136 	bltu	r3,r2,da18 <__alt_data_end+0xfe00da18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    da54:	0005883a 	mov	r2,zero
}
    da58:	e037883a 	mov	sp,fp
    da5c:	df000017 	ldw	fp,0(sp)
    da60:	dec00104 	addi	sp,sp,4
    da64:	f800283a 	ret

0000da68 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    da68:	defffa04 	addi	sp,sp,-24
    da6c:	df000515 	stw	fp,20(sp)
    da70:	df000504 	addi	fp,sp,20
    da74:	e13ffd15 	stw	r4,-12(fp)
    da78:	e17ffe15 	stw	r5,-8(fp)
    da7c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    da80:	00bff9c4 	movi	r2,-25
    da84:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    da88:	e0bffe17 	ldw	r2,-8(fp)
    da8c:	10da8060 	cmpeqi	r3,r2,27137
    da90:	1800031e 	bne	r3,zero,daa0 <altera_avalon_jtag_uart_ioctl+0x38>
    da94:	109a80a0 	cmpeqi	r2,r2,27138
    da98:	1000191e 	bne	r2,zero,db00 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    da9c:	00002806 	br	db40 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    daa0:	e0bffd17 	ldw	r2,-12(fp)
    daa4:	10c00117 	ldw	r3,4(r2)
    daa8:	00a00034 	movhi	r2,32768
    daac:	10bfffc4 	addi	r2,r2,-1
    dab0:	18801226 	beq	r3,r2,dafc <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
    dab4:	e0bfff17 	ldw	r2,-4(fp)
    dab8:	10800017 	ldw	r2,0(r2)
    dabc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    dac0:	e0bffc17 	ldw	r2,-16(fp)
    dac4:	10800090 	cmplti	r2,r2,2
    dac8:	1000061e 	bne	r2,zero,dae4 <altera_avalon_jtag_uart_ioctl+0x7c>
    dacc:	e0fffc17 	ldw	r3,-16(fp)
    dad0:	00a00034 	movhi	r2,32768
    dad4:	10bfffc4 	addi	r2,r2,-1
    dad8:	18800226 	beq	r3,r2,dae4 <altera_avalon_jtag_uart_ioctl+0x7c>
    dadc:	e0bffc17 	ldw	r2,-16(fp)
    dae0:	00000206 	br	daec <altera_avalon_jtag_uart_ioctl+0x84>
    dae4:	00a00034 	movhi	r2,32768
    dae8:	10bfff84 	addi	r2,r2,-2
    daec:	e0fffd17 	ldw	r3,-12(fp)
    daf0:	18800115 	stw	r2,4(r3)
      rc = 0;
    daf4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    daf8:	00001106 	br	db40 <altera_avalon_jtag_uart_ioctl+0xd8>
    dafc:	00001006 	br	db40 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    db00:	e0bffd17 	ldw	r2,-12(fp)
    db04:	10c00117 	ldw	r3,4(r2)
    db08:	00a00034 	movhi	r2,32768
    db0c:	10bfffc4 	addi	r2,r2,-1
    db10:	18800a26 	beq	r3,r2,db3c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    db14:	e0bffd17 	ldw	r2,-12(fp)
    db18:	10c00917 	ldw	r3,36(r2)
    db1c:	e0bffd17 	ldw	r2,-12(fp)
    db20:	10800117 	ldw	r2,4(r2)
    db24:	1885803a 	cmpltu	r2,r3,r2
    db28:	10c03fcc 	andi	r3,r2,255
    db2c:	e0bfff17 	ldw	r2,-4(fp)
    db30:	10c00015 	stw	r3,0(r2)
      rc = 0;
    db34:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    db38:	00000006 	br	db3c <altera_avalon_jtag_uart_ioctl+0xd4>
    db3c:	0001883a 	nop

  default:
    break;
  }

  return rc;
    db40:	e0bffb17 	ldw	r2,-20(fp)
}
    db44:	e037883a 	mov	sp,fp
    db48:	df000017 	ldw	fp,0(sp)
    db4c:	dec00104 	addi	sp,sp,4
    db50:	f800283a 	ret

0000db54 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    db54:	defff304 	addi	sp,sp,-52
    db58:	dfc00c15 	stw	ra,48(sp)
    db5c:	df000b15 	stw	fp,44(sp)
    db60:	df000b04 	addi	fp,sp,44
    db64:	e13ffc15 	stw	r4,-16(fp)
    db68:	e17ffd15 	stw	r5,-12(fp)
    db6c:	e1bffe15 	stw	r6,-8(fp)
    db70:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    db74:	e0bffd17 	ldw	r2,-12(fp)
    db78:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    db7c:	00004906 	br	dca4 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    db80:	e0bffc17 	ldw	r2,-16(fp)
    db84:	10800a17 	ldw	r2,40(r2)
    db88:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    db8c:	e0bffc17 	ldw	r2,-16(fp)
    db90:	10800b17 	ldw	r2,44(r2)
    db94:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    db98:	e0fff717 	ldw	r3,-36(fp)
    db9c:	e0bff817 	ldw	r2,-32(fp)
    dba0:	18800536 	bltu	r3,r2,dbb8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    dba4:	e0fff717 	ldw	r3,-36(fp)
    dba8:	e0bff817 	ldw	r2,-32(fp)
    dbac:	1885c83a 	sub	r2,r3,r2
    dbb0:	e0bff615 	stw	r2,-40(fp)
    dbb4:	00000406 	br	dbc8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    dbb8:	00c20004 	movi	r3,2048
    dbbc:	e0bff817 	ldw	r2,-32(fp)
    dbc0:	1885c83a 	sub	r2,r3,r2
    dbc4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    dbc8:	e0bff617 	ldw	r2,-40(fp)
    dbcc:	1000011e 	bne	r2,zero,dbd4 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
    dbd0:	00001d06 	br	dc48 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
    dbd4:	e0fffe17 	ldw	r3,-8(fp)
    dbd8:	e0bff617 	ldw	r2,-40(fp)
    dbdc:	1880022e 	bgeu	r3,r2,dbe8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    dbe0:	e0bffe17 	ldw	r2,-8(fp)
    dbe4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    dbe8:	e0bff817 	ldw	r2,-32(fp)
    dbec:	10800e04 	addi	r2,r2,56
    dbf0:	e0fffc17 	ldw	r3,-16(fp)
    dbf4:	1885883a 	add	r2,r3,r2
    dbf8:	e13ff517 	ldw	r4,-44(fp)
    dbfc:	100b883a 	mov	r5,r2
    dc00:	e1bff617 	ldw	r6,-40(fp)
    dc04:	0005d6c0 	call	5d6c <memcpy>
      ptr   += n;
    dc08:	e0fff517 	ldw	r3,-44(fp)
    dc0c:	e0bff617 	ldw	r2,-40(fp)
    dc10:	1885883a 	add	r2,r3,r2
    dc14:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    dc18:	e0fffe17 	ldw	r3,-8(fp)
    dc1c:	e0bff617 	ldw	r2,-40(fp)
    dc20:	1885c83a 	sub	r2,r3,r2
    dc24:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    dc28:	e0fff817 	ldw	r3,-32(fp)
    dc2c:	e0bff617 	ldw	r2,-40(fp)
    dc30:	1885883a 	add	r2,r3,r2
    dc34:	10c1ffcc 	andi	r3,r2,2047
    dc38:	e0bffc17 	ldw	r2,-16(fp)
    dc3c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    dc40:	e0bffe17 	ldw	r2,-8(fp)
    dc44:	00bfce16 	blt	zero,r2,db80 <__alt_data_end+0xfe00db80>

    /* If we read any data then return it */
    if (ptr != buffer)
    dc48:	e0fff517 	ldw	r3,-44(fp)
    dc4c:	e0bffd17 	ldw	r2,-12(fp)
    dc50:	18800126 	beq	r3,r2,dc58 <altera_avalon_jtag_uart_read+0x104>
      break;
    dc54:	00001506 	br	dcac <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    dc58:	e0bfff17 	ldw	r2,-4(fp)
    dc5c:	1090000c 	andi	r2,r2,16384
    dc60:	10000126 	beq	r2,zero,dc68 <altera_avalon_jtag_uart_read+0x114>
      break;
    dc64:	00001106 	br	dcac <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    dc68:	0001883a 	nop
    dc6c:	e0bffc17 	ldw	r2,-16(fp)
    dc70:	10c00a17 	ldw	r3,40(r2)
    dc74:	e0bff717 	ldw	r2,-36(fp)
    dc78:	1880051e 	bne	r3,r2,dc90 <altera_avalon_jtag_uart_read+0x13c>
    dc7c:	e0bffc17 	ldw	r2,-16(fp)
    dc80:	10c00917 	ldw	r3,36(r2)
    dc84:	e0bffc17 	ldw	r2,-16(fp)
    dc88:	10800117 	ldw	r2,4(r2)
    dc8c:	18bff736 	bltu	r3,r2,dc6c <__alt_data_end+0xfe00dc6c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    dc90:	e0bffc17 	ldw	r2,-16(fp)
    dc94:	10c00a17 	ldw	r3,40(r2)
    dc98:	e0bff717 	ldw	r2,-36(fp)
    dc9c:	1880011e 	bne	r3,r2,dca4 <altera_avalon_jtag_uart_read+0x150>
      break;
    dca0:	00000206 	br	dcac <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    dca4:	e0bffe17 	ldw	r2,-8(fp)
    dca8:	00bfb516 	blt	zero,r2,db80 <__alt_data_end+0xfe00db80>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    dcac:	e0fff517 	ldw	r3,-44(fp)
    dcb0:	e0bffd17 	ldw	r2,-12(fp)
    dcb4:	18801726 	beq	r3,r2,dd14 <altera_avalon_jtag_uart_read+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dcb8:	0005303a 	rdctl	r2,status
    dcbc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dcc0:	e0fffa17 	ldw	r3,-24(fp)
    dcc4:	00bfff84 	movi	r2,-2
    dcc8:	1884703a 	and	r2,r3,r2
    dccc:	1001703a 	wrctl	status,r2
  
  return context;
    dcd0:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    dcd4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    dcd8:	e0bffc17 	ldw	r2,-16(fp)
    dcdc:	10800817 	ldw	r2,32(r2)
    dce0:	10c00054 	ori	r3,r2,1
    dce4:	e0bffc17 	ldw	r2,-16(fp)
    dce8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    dcec:	e0bffc17 	ldw	r2,-16(fp)
    dcf0:	10800017 	ldw	r2,0(r2)
    dcf4:	10800104 	addi	r2,r2,4
    dcf8:	e0fffc17 	ldw	r3,-16(fp)
    dcfc:	18c00817 	ldw	r3,32(r3)
    dd00:	10c00035 	stwio	r3,0(r2)
    dd04:	e0bff917 	ldw	r2,-28(fp)
    dd08:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dd0c:	e0bffb17 	ldw	r2,-20(fp)
    dd10:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    dd14:	e0fff517 	ldw	r3,-44(fp)
    dd18:	e0bffd17 	ldw	r2,-12(fp)
    dd1c:	18800426 	beq	r3,r2,dd30 <altera_avalon_jtag_uart_read+0x1dc>
    return ptr - buffer;
    dd20:	e0fff517 	ldw	r3,-44(fp)
    dd24:	e0bffd17 	ldw	r2,-12(fp)
    dd28:	1885c83a 	sub	r2,r3,r2
    dd2c:	00000606 	br	dd48 <altera_avalon_jtag_uart_read+0x1f4>
  else if (flags & O_NONBLOCK)
    dd30:	e0bfff17 	ldw	r2,-4(fp)
    dd34:	1090000c 	andi	r2,r2,16384
    dd38:	10000226 	beq	r2,zero,dd44 <altera_avalon_jtag_uart_read+0x1f0>
    return -EWOULDBLOCK;
    dd3c:	00bffd44 	movi	r2,-11
    dd40:	00000106 	br	dd48 <altera_avalon_jtag_uart_read+0x1f4>
  else
    return -EIO;
    dd44:	00bffec4 	movi	r2,-5
}
    dd48:	e037883a 	mov	sp,fp
    dd4c:	dfc00117 	ldw	ra,4(sp)
    dd50:	df000017 	ldw	fp,0(sp)
    dd54:	dec00204 	addi	sp,sp,8
    dd58:	f800283a 	ret

0000dd5c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    dd5c:	defff304 	addi	sp,sp,-52
    dd60:	dfc00c15 	stw	ra,48(sp)
    dd64:	df000b15 	stw	fp,44(sp)
    dd68:	df000b04 	addi	fp,sp,44
    dd6c:	e13ffc15 	stw	r4,-16(fp)
    dd70:	e17ffd15 	stw	r5,-12(fp)
    dd74:	e1bffe15 	stw	r6,-8(fp)
    dd78:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    dd7c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    dd80:	e0bffd17 	ldw	r2,-12(fp)
    dd84:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    dd88:	00003906 	br	de70 <altera_avalon_jtag_uart_write+0x114>
    dd8c:	00003806 	br	de70 <altera_avalon_jtag_uart_write+0x114>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    dd90:	e0bffc17 	ldw	r2,-16(fp)
    dd94:	10800c17 	ldw	r2,48(r2)
    dd98:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
    dd9c:	e0bffc17 	ldw	r2,-16(fp)
    dda0:	10800d17 	ldw	r2,52(r2)
    dda4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    dda8:	e0fff817 	ldw	r3,-32(fp)
    ddac:	e0bff517 	ldw	r2,-44(fp)
    ddb0:	1880062e 	bgeu	r3,r2,ddcc <altera_avalon_jtag_uart_write+0x70>
        n = out - 1 - in;
    ddb4:	e0fff517 	ldw	r3,-44(fp)
    ddb8:	e0bff817 	ldw	r2,-32(fp)
    ddbc:	1885c83a 	sub	r2,r3,r2
    ddc0:	10bfffc4 	addi	r2,r2,-1
    ddc4:	e0bff615 	stw	r2,-40(fp)
    ddc8:	00000b06 	br	ddf8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    ddcc:	e0bff517 	ldw	r2,-44(fp)
    ddd0:	10000526 	beq	r2,zero,dde8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    ddd4:	00c20004 	movi	r3,2048
    ddd8:	e0bff817 	ldw	r2,-32(fp)
    dddc:	1885c83a 	sub	r2,r3,r2
    dde0:	e0bff615 	stw	r2,-40(fp)
    dde4:	00000406 	br	ddf8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    dde8:	00c1ffc4 	movi	r3,2047
    ddec:	e0bff817 	ldw	r2,-32(fp)
    ddf0:	1885c83a 	sub	r2,r3,r2
    ddf4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    ddf8:	e0bff617 	ldw	r2,-40(fp)
    ddfc:	1000011e 	bne	r2,zero,de04 <altera_avalon_jtag_uart_write+0xa8>
        break;
    de00:	00001d06 	br	de78 <altera_avalon_jtag_uart_write+0x11c>

      if (n > count)
    de04:	e0fffe17 	ldw	r3,-8(fp)
    de08:	e0bff617 	ldw	r2,-40(fp)
    de0c:	1880022e 	bgeu	r3,r2,de18 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    de10:	e0bffe17 	ldw	r2,-8(fp)
    de14:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    de18:	e0bff817 	ldw	r2,-32(fp)
    de1c:	10820e04 	addi	r2,r2,2104
    de20:	e0fffc17 	ldw	r3,-16(fp)
    de24:	1885883a 	add	r2,r3,r2
    de28:	1009883a 	mov	r4,r2
    de2c:	e17ffd17 	ldw	r5,-12(fp)
    de30:	e1bff617 	ldw	r6,-40(fp)
    de34:	0005d6c0 	call	5d6c <memcpy>
      ptr   += n;
    de38:	e0fffd17 	ldw	r3,-12(fp)
    de3c:	e0bff617 	ldw	r2,-40(fp)
    de40:	1885883a 	add	r2,r3,r2
    de44:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    de48:	e0fffe17 	ldw	r3,-8(fp)
    de4c:	e0bff617 	ldw	r2,-40(fp)
    de50:	1885c83a 	sub	r2,r3,r2
    de54:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    de58:	e0fff817 	ldw	r3,-32(fp)
    de5c:	e0bff617 	ldw	r2,-40(fp)
    de60:	1885883a 	add	r2,r3,r2
    de64:	10c1ffcc 	andi	r3,r2,2047
    de68:	e0bffc17 	ldw	r2,-16(fp)
    de6c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    de70:	e0bffe17 	ldw	r2,-8(fp)
    de74:	00bfc616 	blt	zero,r2,dd90 <__alt_data_end+0xfe00dd90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    de78:	0005303a 	rdctl	r2,status
    de7c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    de80:	e0fffa17 	ldw	r3,-24(fp)
    de84:	00bfff84 	movi	r2,-2
    de88:	1884703a 	and	r2,r3,r2
    de8c:	1001703a 	wrctl	status,r2
  
  return context;
    de90:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    de94:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    de98:	e0bffc17 	ldw	r2,-16(fp)
    de9c:	10800817 	ldw	r2,32(r2)
    dea0:	10c00094 	ori	r3,r2,2
    dea4:	e0bffc17 	ldw	r2,-16(fp)
    dea8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    deac:	e0bffc17 	ldw	r2,-16(fp)
    deb0:	10800017 	ldw	r2,0(r2)
    deb4:	10800104 	addi	r2,r2,4
    deb8:	e0fffc17 	ldw	r3,-16(fp)
    debc:	18c00817 	ldw	r3,32(r3)
    dec0:	10c00035 	stwio	r3,0(r2)
    dec4:	e0bff917 	ldw	r2,-28(fp)
    dec8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    decc:	e0bffb17 	ldw	r2,-20(fp)
    ded0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    ded4:	e0bffe17 	ldw	r2,-8(fp)
    ded8:	0080120e 	bge	zero,r2,df24 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
    dedc:	e0bfff17 	ldw	r2,-4(fp)
    dee0:	1090000c 	andi	r2,r2,16384
    dee4:	10000126 	beq	r2,zero,deec <altera_avalon_jtag_uart_write+0x190>
        break;
    dee8:	00001006 	br	df2c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    deec:	0001883a 	nop
    def0:	e0bffc17 	ldw	r2,-16(fp)
    def4:	10c00d17 	ldw	r3,52(r2)
    def8:	e0bff517 	ldw	r2,-44(fp)
    defc:	1880051e 	bne	r3,r2,df14 <altera_avalon_jtag_uart_write+0x1b8>
    df00:	e0bffc17 	ldw	r2,-16(fp)
    df04:	10c00917 	ldw	r3,36(r2)
    df08:	e0bffc17 	ldw	r2,-16(fp)
    df0c:	10800117 	ldw	r2,4(r2)
    df10:	18bff736 	bltu	r3,r2,def0 <__alt_data_end+0xfe00def0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    df14:	e0bffc17 	ldw	r2,-16(fp)
    df18:	10800917 	ldw	r2,36(r2)
    df1c:	10000126 	beq	r2,zero,df24 <altera_avalon_jtag_uart_write+0x1c8>
         break;
    df20:	00000206 	br	df2c <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
    df24:	e0bffe17 	ldw	r2,-8(fp)
    df28:	00bf9816 	blt	zero,r2,dd8c <__alt_data_end+0xfe00dd8c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    df2c:	e0fffd17 	ldw	r3,-12(fp)
    df30:	e0bff717 	ldw	r2,-36(fp)
    df34:	18800426 	beq	r3,r2,df48 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
    df38:	e0fffd17 	ldw	r3,-12(fp)
    df3c:	e0bff717 	ldw	r2,-36(fp)
    df40:	1885c83a 	sub	r2,r3,r2
    df44:	00000606 	br	df60 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
    df48:	e0bfff17 	ldw	r2,-4(fp)
    df4c:	1090000c 	andi	r2,r2,16384
    df50:	10000226 	beq	r2,zero,df5c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
    df54:	00bffd44 	movi	r2,-11
    df58:	00000106 	br	df60 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    df5c:	00bffec4 	movi	r2,-5
}
    df60:	e037883a 	mov	sp,fp
    df64:	dfc00117 	ldw	ra,4(sp)
    df68:	df000017 	ldw	fp,0(sp)
    df6c:	dec00204 	addi	sp,sp,8
    df70:	f800283a 	ret

0000df74 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    df74:	defff504 	addi	sp,sp,-44
    df78:	df000a15 	stw	fp,40(sp)
    df7c:	df000a04 	addi	fp,sp,40
    df80:	e13ffc15 	stw	r4,-16(fp)
    df84:	e17ffd15 	stw	r5,-12(fp)
    df88:	e1bffe15 	stw	r6,-8(fp)
    df8c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    df90:	e03ff615 	stw	zero,-40(fp)
    df94:	00800074 	movhi	r2,1
    df98:	108a6104 	addi	r2,r2,10628
    df9c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    dfa0:	10003f26 	beq	r2,zero,e0a0 <alt_alarm_start+0x12c>
  {
    if (alarm)
    dfa4:	e0bffc17 	ldw	r2,-16(fp)
    dfa8:	10003b26 	beq	r2,zero,e098 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    dfac:	e0bffc17 	ldw	r2,-16(fp)
    dfb0:	e0fffe17 	ldw	r3,-8(fp)
    dfb4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    dfb8:	e0bffc17 	ldw	r2,-16(fp)
    dfbc:	e0ffff17 	ldw	r3,-4(fp)
    dfc0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dfc4:	0005303a 	rdctl	r2,status
    dfc8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dfcc:	e0fff817 	ldw	r3,-32(fp)
    dfd0:	00bfff84 	movi	r2,-2
    dfd4:	1884703a 	and	r2,r3,r2
    dfd8:	1001703a 	wrctl	status,r2
  
  return context;
    dfdc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    dfe0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    dfe4:	00800074 	movhi	r2,1
    dfe8:	108a6204 	addi	r2,r2,10632
    dfec:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    dff0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    dff4:	e0fffd17 	ldw	r3,-12(fp)
    dff8:	e0bff617 	ldw	r2,-40(fp)
    dffc:	1885883a 	add	r2,r3,r2
    e000:	10c00044 	addi	r3,r2,1
    e004:	e0bffc17 	ldw	r2,-16(fp)
    e008:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    e00c:	e0bffc17 	ldw	r2,-16(fp)
    e010:	10c00217 	ldw	r3,8(r2)
    e014:	e0bff617 	ldw	r2,-40(fp)
    e018:	1880042e 	bgeu	r3,r2,e02c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    e01c:	e0bffc17 	ldw	r2,-16(fp)
    e020:	00c00044 	movi	r3,1
    e024:	10c00405 	stb	r3,16(r2)
    e028:	00000206 	br	e034 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    e02c:	e0bffc17 	ldw	r2,-16(fp)
    e030:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    e034:	e0bffc17 	ldw	r2,-16(fp)
    e038:	00c00074 	movhi	r3,1
    e03c:	18c39704 	addi	r3,r3,3676
    e040:	e0fff915 	stw	r3,-28(fp)
    e044:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e048:	e0bffa17 	ldw	r2,-24(fp)
    e04c:	e0fff917 	ldw	r3,-28(fp)
    e050:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e054:	e0bff917 	ldw	r2,-28(fp)
    e058:	10c00017 	ldw	r3,0(r2)
    e05c:	e0bffa17 	ldw	r2,-24(fp)
    e060:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e064:	e0bff917 	ldw	r2,-28(fp)
    e068:	10800017 	ldw	r2,0(r2)
    e06c:	e0fffa17 	ldw	r3,-24(fp)
    e070:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e074:	e0bff917 	ldw	r2,-28(fp)
    e078:	e0fffa17 	ldw	r3,-24(fp)
    e07c:	10c00015 	stw	r3,0(r2)
    e080:	e0bff717 	ldw	r2,-36(fp)
    e084:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e088:	e0bffb17 	ldw	r2,-20(fp)
    e08c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    e090:	0005883a 	mov	r2,zero
    e094:	00000306 	br	e0a4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    e098:	00bffa84 	movi	r2,-22
    e09c:	00000106 	br	e0a4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    e0a0:	00bfde84 	movi	r2,-134
  }
}
    e0a4:	e037883a 	mov	sp,fp
    e0a8:	df000017 	ldw	fp,0(sp)
    e0ac:	dec00104 	addi	sp,sp,4
    e0b0:	f800283a 	ret

0000e0b4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    e0b4:	defffa04 	addi	sp,sp,-24
    e0b8:	dfc00515 	stw	ra,20(sp)
    e0bc:	df000415 	stw	fp,16(sp)
    e0c0:	df000404 	addi	fp,sp,16
    e0c4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    e0c8:	008000c4 	movi	r2,3
    e0cc:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    e0d0:	e0fffd17 	ldw	r3,-12(fp)
    e0d4:	008003f4 	movhi	r2,15
    e0d8:	10909004 	addi	r2,r2,16960
    e0dc:	1885383a 	mul	r2,r3,r2
    e0e0:	0100bef4 	movhi	r4,763
    e0e4:	213c2004 	addi	r4,r4,-3968
    e0e8:	100b883a 	mov	r5,r2
    e0ec:	000a2640 	call	a264 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    e0f0:	01200034 	movhi	r4,32768
    e0f4:	213fffc4 	addi	r4,r4,-1
    e0f8:	100b883a 	mov	r5,r2
    e0fc:	000a2640 	call	a264 <__udivsi3>
    e100:	e13fff17 	ldw	r4,-4(fp)
    e104:	100b883a 	mov	r5,r2
    e108:	000a2640 	call	a264 <__udivsi3>
    e10c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    e110:	e0bffe17 	ldw	r2,-8(fp)
    e114:	10002926 	beq	r2,zero,e1bc <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
    e118:	e03ffc15 	stw	zero,-16(fp)
    e11c:	00001606 	br	e178 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    e120:	00a00034 	movhi	r2,32768
    e124:	10bfffc4 	addi	r2,r2,-1
    e128:	10bfffc4 	addi	r2,r2,-1
    e12c:	103ffe1e 	bne	r2,zero,e128 <__alt_data_end+0xfe00e128>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    e130:	e0fffd17 	ldw	r3,-12(fp)
    e134:	008003f4 	movhi	r2,15
    e138:	10909004 	addi	r2,r2,16960
    e13c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    e140:	0100bef4 	movhi	r4,763
    e144:	213c2004 	addi	r4,r4,-3968
    e148:	100b883a 	mov	r5,r2
    e14c:	000a2640 	call	a264 <__udivsi3>
    e150:	01200034 	movhi	r4,32768
    e154:	213fffc4 	addi	r4,r4,-1
    e158:	100b883a 	mov	r5,r2
    e15c:	000a2640 	call	a264 <__udivsi3>
    e160:	e0ffff17 	ldw	r3,-4(fp)
    e164:	1885c83a 	sub	r2,r3,r2
    e168:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    e16c:	e0bffc17 	ldw	r2,-16(fp)
    e170:	10800044 	addi	r2,r2,1
    e174:	e0bffc15 	stw	r2,-16(fp)
    e178:	e0fffc17 	ldw	r3,-16(fp)
    e17c:	e0bffe17 	ldw	r2,-8(fp)
    e180:	18bfe716 	blt	r3,r2,e120 <__alt_data_end+0xfe00e120>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    e184:	e0fffd17 	ldw	r3,-12(fp)
    e188:	008003f4 	movhi	r2,15
    e18c:	10909004 	addi	r2,r2,16960
    e190:	1885383a 	mul	r2,r3,r2
    e194:	0100bef4 	movhi	r4,763
    e198:	213c2004 	addi	r4,r4,-3968
    e19c:	100b883a 	mov	r5,r2
    e1a0:	000a2640 	call	a264 <__udivsi3>
    e1a4:	1007883a 	mov	r3,r2
    e1a8:	e0bfff17 	ldw	r2,-4(fp)
    e1ac:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    e1b0:	10bfffc4 	addi	r2,r2,-1
    e1b4:	103ffe1e 	bne	r2,zero,e1b0 <__alt_data_end+0xfe00e1b0>
    e1b8:	00000d06 	br	e1f0 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    e1bc:	e0fffd17 	ldw	r3,-12(fp)
    e1c0:	008003f4 	movhi	r2,15
    e1c4:	10909004 	addi	r2,r2,16960
    e1c8:	1885383a 	mul	r2,r3,r2
    e1cc:	0100bef4 	movhi	r4,763
    e1d0:	213c2004 	addi	r4,r4,-3968
    e1d4:	100b883a 	mov	r5,r2
    e1d8:	000a2640 	call	a264 <__udivsi3>
    e1dc:	1007883a 	mov	r3,r2
    e1e0:	e0bfff17 	ldw	r2,-4(fp)
    e1e4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    e1e8:	10bfffc4 	addi	r2,r2,-1
    e1ec:	00bffe16 	blt	zero,r2,e1e8 <__alt_data_end+0xfe00e1e8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    e1f0:	0005883a 	mov	r2,zero
}
    e1f4:	e037883a 	mov	sp,fp
    e1f8:	dfc00117 	ldw	ra,4(sp)
    e1fc:	df000017 	ldw	fp,0(sp)
    e200:	dec00204 	addi	sp,sp,8
    e204:	f800283a 	ret

0000e208 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    e208:	defffe04 	addi	sp,sp,-8
    e20c:	df000115 	stw	fp,4(sp)
    e210:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    e214:	e03fff15 	stw	zero,-4(fp)
    e218:	00000506 	br	e230 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    e21c:	e0bfff17 	ldw	r2,-4(fp)
    e220:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    e224:	e0bfff17 	ldw	r2,-4(fp)
    e228:	10800804 	addi	r2,r2,32
    e22c:	e0bfff15 	stw	r2,-4(fp)
    e230:	e0bfff17 	ldw	r2,-4(fp)
    e234:	10820030 	cmpltui	r2,r2,2048
    e238:	103ff81e 	bne	r2,zero,e21c <__alt_data_end+0xfe00e21c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    e23c:	e037883a 	mov	sp,fp
    e240:	df000017 	ldw	fp,0(sp)
    e244:	dec00104 	addi	sp,sp,4
    e248:	f800283a 	ret

0000e24c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e24c:	defffe04 	addi	sp,sp,-8
    e250:	dfc00115 	stw	ra,4(sp)
    e254:	df000015 	stw	fp,0(sp)
    e258:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e25c:	00800074 	movhi	r2,1
    e260:	10839404 	addi	r2,r2,3664
    e264:	10800017 	ldw	r2,0(r2)
    e268:	10000526 	beq	r2,zero,e280 <alt_get_errno+0x34>
    e26c:	00800074 	movhi	r2,1
    e270:	10839404 	addi	r2,r2,3664
    e274:	10800017 	ldw	r2,0(r2)
    e278:	103ee83a 	callr	r2
    e27c:	00000206 	br	e288 <alt_get_errno+0x3c>
    e280:	00800074 	movhi	r2,1
    e284:	108a5c04 	addi	r2,r2,10608
}
    e288:	e037883a 	mov	sp,fp
    e28c:	dfc00117 	ldw	ra,4(sp)
    e290:	df000017 	ldw	fp,0(sp)
    e294:	dec00204 	addi	sp,sp,8
    e298:	f800283a 	ret

0000e29c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    e29c:	defffa04 	addi	sp,sp,-24
    e2a0:	dfc00515 	stw	ra,20(sp)
    e2a4:	df000415 	stw	fp,16(sp)
    e2a8:	df000404 	addi	fp,sp,16
    e2ac:	e13ffe15 	stw	r4,-8(fp)
    e2b0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    e2b4:	e0bffe17 	ldw	r2,-8(fp)
    e2b8:	10000326 	beq	r2,zero,e2c8 <alt_dev_llist_insert+0x2c>
    e2bc:	e0bffe17 	ldw	r2,-8(fp)
    e2c0:	10800217 	ldw	r2,8(r2)
    e2c4:	1000051e 	bne	r2,zero,e2dc <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    e2c8:	000e24c0 	call	e24c <alt_get_errno>
    e2cc:	00c00584 	movi	r3,22
    e2d0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    e2d4:	00bffa84 	movi	r2,-22
    e2d8:	00001306 	br	e328 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    e2dc:	e0bffe17 	ldw	r2,-8(fp)
    e2e0:	e0ffff17 	ldw	r3,-4(fp)
    e2e4:	e0fffc15 	stw	r3,-16(fp)
    e2e8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e2ec:	e0bffd17 	ldw	r2,-12(fp)
    e2f0:	e0fffc17 	ldw	r3,-16(fp)
    e2f4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e2f8:	e0bffc17 	ldw	r2,-16(fp)
    e2fc:	10c00017 	ldw	r3,0(r2)
    e300:	e0bffd17 	ldw	r2,-12(fp)
    e304:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e308:	e0bffc17 	ldw	r2,-16(fp)
    e30c:	10800017 	ldw	r2,0(r2)
    e310:	e0fffd17 	ldw	r3,-12(fp)
    e314:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e318:	e0bffc17 	ldw	r2,-16(fp)
    e31c:	e0fffd17 	ldw	r3,-12(fp)
    e320:	10c00015 	stw	r3,0(r2)

  return 0;  
    e324:	0005883a 	mov	r2,zero
}
    e328:	e037883a 	mov	sp,fp
    e32c:	dfc00117 	ldw	ra,4(sp)
    e330:	df000017 	ldw	fp,0(sp)
    e334:	dec00204 	addi	sp,sp,8
    e338:	f800283a 	ret

0000e33c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    e33c:	defffd04 	addi	sp,sp,-12
    e340:	dfc00215 	stw	ra,8(sp)
    e344:	df000115 	stw	fp,4(sp)
    e348:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e34c:	00800074 	movhi	r2,1
    e350:	10bc0904 	addi	r2,r2,-4060
    e354:	e0bfff15 	stw	r2,-4(fp)
    e358:	00000606 	br	e374 <_do_ctors+0x38>
        (*ctor) (); 
    e35c:	e0bfff17 	ldw	r2,-4(fp)
    e360:	10800017 	ldw	r2,0(r2)
    e364:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e368:	e0bfff17 	ldw	r2,-4(fp)
    e36c:	10bfff04 	addi	r2,r2,-4
    e370:	e0bfff15 	stw	r2,-4(fp)
    e374:	e0ffff17 	ldw	r3,-4(fp)
    e378:	00800074 	movhi	r2,1
    e37c:	10bc0a04 	addi	r2,r2,-4056
    e380:	18bff62e 	bgeu	r3,r2,e35c <__alt_data_end+0xfe00e35c>
        (*ctor) (); 
}
    e384:	e037883a 	mov	sp,fp
    e388:	dfc00117 	ldw	ra,4(sp)
    e38c:	df000017 	ldw	fp,0(sp)
    e390:	dec00204 	addi	sp,sp,8
    e394:	f800283a 	ret

0000e398 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    e398:	defffd04 	addi	sp,sp,-12
    e39c:	dfc00215 	stw	ra,8(sp)
    e3a0:	df000115 	stw	fp,4(sp)
    e3a4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    e3a8:	00800074 	movhi	r2,1
    e3ac:	10bc0904 	addi	r2,r2,-4060
    e3b0:	e0bfff15 	stw	r2,-4(fp)
    e3b4:	00000606 	br	e3d0 <_do_dtors+0x38>
        (*dtor) (); 
    e3b8:	e0bfff17 	ldw	r2,-4(fp)
    e3bc:	10800017 	ldw	r2,0(r2)
    e3c0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    e3c4:	e0bfff17 	ldw	r2,-4(fp)
    e3c8:	10bfff04 	addi	r2,r2,-4
    e3cc:	e0bfff15 	stw	r2,-4(fp)
    e3d0:	e0ffff17 	ldw	r3,-4(fp)
    e3d4:	00800074 	movhi	r2,1
    e3d8:	10bc0a04 	addi	r2,r2,-4056
    e3dc:	18bff62e 	bgeu	r3,r2,e3b8 <__alt_data_end+0xfe00e3b8>
        (*dtor) (); 
}
    e3e0:	e037883a 	mov	sp,fp
    e3e4:	dfc00117 	ldw	ra,4(sp)
    e3e8:	df000017 	ldw	fp,0(sp)
    e3ec:	dec00204 	addi	sp,sp,8
    e3f0:	f800283a 	ret

0000e3f4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    e3f4:	defffe04 	addi	sp,sp,-8
    e3f8:	dfc00115 	stw	ra,4(sp)
    e3fc:	df000015 	stw	fp,0(sp)
    e400:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    e404:	0009883a 	mov	r4,zero
    e408:	01440004 	movi	r5,4096
    e40c:	000ebe00 	call	ebe0 <alt_icache_flush>
#endif
}
    e410:	e037883a 	mov	sp,fp
    e414:	dfc00117 	ldw	ra,4(sp)
    e418:	df000017 	ldw	fp,0(sp)
    e41c:	dec00204 	addi	sp,sp,8
    e420:	f800283a 	ret

0000e424 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    e424:	defff904 	addi	sp,sp,-28
    e428:	dfc00615 	stw	ra,24(sp)
    e42c:	df000515 	stw	fp,20(sp)
    e430:	df000504 	addi	fp,sp,20
    e434:	e13ffc15 	stw	r4,-16(fp)
    e438:	e17ffd15 	stw	r5,-12(fp)
    e43c:	e1bffe15 	stw	r6,-8(fp)
    e440:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    e444:	e13ffd17 	ldw	r4,-12(fp)
    e448:	e17ffe17 	ldw	r5,-8(fp)
    e44c:	e1bfff17 	ldw	r6,-4(fp)
    e450:	000e6780 	call	e678 <open>
    e454:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    e458:	e0bffb17 	ldw	r2,-20(fp)
    e45c:	10001c16 	blt	r2,zero,e4d0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    e460:	00c00074 	movhi	r3,1
    e464:	18ff1104 	addi	r3,r3,-956
    e468:	e0bffb17 	ldw	r2,-20(fp)
    e46c:	10800324 	muli	r2,r2,12
    e470:	1885883a 	add	r2,r3,r2
    e474:	10c00017 	ldw	r3,0(r2)
    e478:	e0bffc17 	ldw	r2,-16(fp)
    e47c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    e480:	00c00074 	movhi	r3,1
    e484:	18ff1104 	addi	r3,r3,-956
    e488:	e0bffb17 	ldw	r2,-20(fp)
    e48c:	10800324 	muli	r2,r2,12
    e490:	1885883a 	add	r2,r3,r2
    e494:	10800104 	addi	r2,r2,4
    e498:	10c00017 	ldw	r3,0(r2)
    e49c:	e0bffc17 	ldw	r2,-16(fp)
    e4a0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    e4a4:	00c00074 	movhi	r3,1
    e4a8:	18ff1104 	addi	r3,r3,-956
    e4ac:	e0bffb17 	ldw	r2,-20(fp)
    e4b0:	10800324 	muli	r2,r2,12
    e4b4:	1885883a 	add	r2,r3,r2
    e4b8:	10800204 	addi	r2,r2,8
    e4bc:	10c00017 	ldw	r3,0(r2)
    e4c0:	e0bffc17 	ldw	r2,-16(fp)
    e4c4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    e4c8:	e13ffb17 	ldw	r4,-20(fp)
    e4cc:	000d2100 	call	d210 <alt_release_fd>
  }
} 
    e4d0:	e037883a 	mov	sp,fp
    e4d4:	dfc00117 	ldw	ra,4(sp)
    e4d8:	df000017 	ldw	fp,0(sp)
    e4dc:	dec00204 	addi	sp,sp,8
    e4e0:	f800283a 	ret

0000e4e4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    e4e4:	defffb04 	addi	sp,sp,-20
    e4e8:	dfc00415 	stw	ra,16(sp)
    e4ec:	df000315 	stw	fp,12(sp)
    e4f0:	df000304 	addi	fp,sp,12
    e4f4:	e13ffd15 	stw	r4,-12(fp)
    e4f8:	e17ffe15 	stw	r5,-8(fp)
    e4fc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    e500:	01000074 	movhi	r4,1
    e504:	213f1404 	addi	r4,r4,-944
    e508:	e17ffd17 	ldw	r5,-12(fp)
    e50c:	01800044 	movi	r6,1
    e510:	01c07fc4 	movi	r7,511
    e514:	000e4240 	call	e424 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    e518:	01000074 	movhi	r4,1
    e51c:	213f1104 	addi	r4,r4,-956
    e520:	e17ffe17 	ldw	r5,-8(fp)
    e524:	000d883a 	mov	r6,zero
    e528:	01c07fc4 	movi	r7,511
    e52c:	000e4240 	call	e424 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    e530:	01000074 	movhi	r4,1
    e534:	213f1704 	addi	r4,r4,-932
    e538:	e17fff17 	ldw	r5,-4(fp)
    e53c:	01800044 	movi	r6,1
    e540:	01c07fc4 	movi	r7,511
    e544:	000e4240 	call	e424 <alt_open_fd>
}  
    e548:	e037883a 	mov	sp,fp
    e54c:	dfc00117 	ldw	ra,4(sp)
    e550:	df000017 	ldw	fp,0(sp)
    e554:	dec00204 	addi	sp,sp,8
    e558:	f800283a 	ret

0000e55c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e55c:	defffe04 	addi	sp,sp,-8
    e560:	dfc00115 	stw	ra,4(sp)
    e564:	df000015 	stw	fp,0(sp)
    e568:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e56c:	00800074 	movhi	r2,1
    e570:	10839404 	addi	r2,r2,3664
    e574:	10800017 	ldw	r2,0(r2)
    e578:	10000526 	beq	r2,zero,e590 <alt_get_errno+0x34>
    e57c:	00800074 	movhi	r2,1
    e580:	10839404 	addi	r2,r2,3664
    e584:	10800017 	ldw	r2,0(r2)
    e588:	103ee83a 	callr	r2
    e58c:	00000206 	br	e598 <alt_get_errno+0x3c>
    e590:	00800074 	movhi	r2,1
    e594:	108a5c04 	addi	r2,r2,10608
}
    e598:	e037883a 	mov	sp,fp
    e59c:	dfc00117 	ldw	ra,4(sp)
    e5a0:	df000017 	ldw	fp,0(sp)
    e5a4:	dec00204 	addi	sp,sp,8
    e5a8:	f800283a 	ret

0000e5ac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    e5ac:	defffd04 	addi	sp,sp,-12
    e5b0:	df000215 	stw	fp,8(sp)
    e5b4:	df000204 	addi	fp,sp,8
    e5b8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    e5bc:	e0bfff17 	ldw	r2,-4(fp)
    e5c0:	10800217 	ldw	r2,8(r2)
    e5c4:	10d00034 	orhi	r3,r2,16384
    e5c8:	e0bfff17 	ldw	r2,-4(fp)
    e5cc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    e5d0:	e03ffe15 	stw	zero,-8(fp)
    e5d4:	00001d06 	br	e64c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    e5d8:	00c00074 	movhi	r3,1
    e5dc:	18ff1104 	addi	r3,r3,-956
    e5e0:	e0bffe17 	ldw	r2,-8(fp)
    e5e4:	10800324 	muli	r2,r2,12
    e5e8:	1885883a 	add	r2,r3,r2
    e5ec:	10c00017 	ldw	r3,0(r2)
    e5f0:	e0bfff17 	ldw	r2,-4(fp)
    e5f4:	10800017 	ldw	r2,0(r2)
    e5f8:	1880111e 	bne	r3,r2,e640 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    e5fc:	00c00074 	movhi	r3,1
    e600:	18ff1104 	addi	r3,r3,-956
    e604:	e0bffe17 	ldw	r2,-8(fp)
    e608:	10800324 	muli	r2,r2,12
    e60c:	1885883a 	add	r2,r3,r2
    e610:	10800204 	addi	r2,r2,8
    e614:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    e618:	1000090e 	bge	r2,zero,e640 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    e61c:	e0bffe17 	ldw	r2,-8(fp)
    e620:	10c00324 	muli	r3,r2,12
    e624:	00800074 	movhi	r2,1
    e628:	10bf1104 	addi	r2,r2,-956
    e62c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    e630:	e0bfff17 	ldw	r2,-4(fp)
    e634:	18800226 	beq	r3,r2,e640 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    e638:	00bffcc4 	movi	r2,-13
    e63c:	00000a06 	br	e668 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    e640:	e0bffe17 	ldw	r2,-8(fp)
    e644:	10800044 	addi	r2,r2,1
    e648:	e0bffe15 	stw	r2,-8(fp)
    e64c:	00800074 	movhi	r2,1
    e650:	10839304 	addi	r2,r2,3660
    e654:	10800017 	ldw	r2,0(r2)
    e658:	1007883a 	mov	r3,r2
    e65c:	e0bffe17 	ldw	r2,-8(fp)
    e660:	18bfdd2e 	bgeu	r3,r2,e5d8 <__alt_data_end+0xfe00e5d8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    e664:	0005883a 	mov	r2,zero
}
    e668:	e037883a 	mov	sp,fp
    e66c:	df000017 	ldw	fp,0(sp)
    e670:	dec00104 	addi	sp,sp,4
    e674:	f800283a 	ret

0000e678 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    e678:	defff604 	addi	sp,sp,-40
    e67c:	dfc00915 	stw	ra,36(sp)
    e680:	df000815 	stw	fp,32(sp)
    e684:	df000804 	addi	fp,sp,32
    e688:	e13ffd15 	stw	r4,-12(fp)
    e68c:	e17ffe15 	stw	r5,-8(fp)
    e690:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    e694:	00bfffc4 	movi	r2,-1
    e698:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    e69c:	00bffb44 	movi	r2,-19
    e6a0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    e6a4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    e6a8:	e13ffd17 	ldw	r4,-12(fp)
    e6ac:	01400074 	movhi	r5,1
    e6b0:	29439104 	addi	r5,r5,3652
    e6b4:	000e9880 	call	e988 <alt_find_dev>
    e6b8:	e0bff815 	stw	r2,-32(fp)
    e6bc:	e0bff817 	ldw	r2,-32(fp)
    e6c0:	1000051e 	bne	r2,zero,e6d8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    e6c4:	e13ffd17 	ldw	r4,-12(fp)
    e6c8:	000ea180 	call	ea18 <alt_find_file>
    e6cc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    e6d0:	00800044 	movi	r2,1
    e6d4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    e6d8:	e0bff817 	ldw	r2,-32(fp)
    e6dc:	10002926 	beq	r2,zero,e784 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    e6e0:	e13ff817 	ldw	r4,-32(fp)
    e6e4:	000eb2c0 	call	eb2c <alt_get_fd>
    e6e8:	e0bff915 	stw	r2,-28(fp)
    e6ec:	e0bff917 	ldw	r2,-28(fp)
    e6f0:	1000030e 	bge	r2,zero,e700 <open+0x88>
    {
      status = index;
    e6f4:	e0bff917 	ldw	r2,-28(fp)
    e6f8:	e0bffa15 	stw	r2,-24(fp)
    e6fc:	00002306 	br	e78c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    e700:	e0bff917 	ldw	r2,-28(fp)
    e704:	10c00324 	muli	r3,r2,12
    e708:	00800074 	movhi	r2,1
    e70c:	10bf1104 	addi	r2,r2,-956
    e710:	1885883a 	add	r2,r3,r2
    e714:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    e718:	e0fffe17 	ldw	r3,-8(fp)
    e71c:	00900034 	movhi	r2,16384
    e720:	10bfffc4 	addi	r2,r2,-1
    e724:	1886703a 	and	r3,r3,r2
    e728:	e0bffc17 	ldw	r2,-16(fp)
    e72c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    e730:	e0bffb17 	ldw	r2,-20(fp)
    e734:	1000051e 	bne	r2,zero,e74c <open+0xd4>
    e738:	e13ffc17 	ldw	r4,-16(fp)
    e73c:	000e5ac0 	call	e5ac <alt_file_locked>
    e740:	e0bffa15 	stw	r2,-24(fp)
    e744:	e0bffa17 	ldw	r2,-24(fp)
    e748:	10001016 	blt	r2,zero,e78c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    e74c:	e0bff817 	ldw	r2,-32(fp)
    e750:	10800317 	ldw	r2,12(r2)
    e754:	10000826 	beq	r2,zero,e778 <open+0x100>
    e758:	e0bff817 	ldw	r2,-32(fp)
    e75c:	10800317 	ldw	r2,12(r2)
    e760:	e13ffc17 	ldw	r4,-16(fp)
    e764:	e17ffd17 	ldw	r5,-12(fp)
    e768:	e1bffe17 	ldw	r6,-8(fp)
    e76c:	e1ffff17 	ldw	r7,-4(fp)
    e770:	103ee83a 	callr	r2
    e774:	00000106 	br	e77c <open+0x104>
    e778:	0005883a 	mov	r2,zero
    e77c:	e0bffa15 	stw	r2,-24(fp)
    e780:	00000206 	br	e78c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    e784:	00bffb44 	movi	r2,-19
    e788:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    e78c:	e0bffa17 	ldw	r2,-24(fp)
    e790:	1000080e 	bge	r2,zero,e7b4 <open+0x13c>
  {
    alt_release_fd (index);  
    e794:	e13ff917 	ldw	r4,-28(fp)
    e798:	000d2100 	call	d210 <alt_release_fd>
    ALT_ERRNO = -status;
    e79c:	000e55c0 	call	e55c <alt_get_errno>
    e7a0:	e0fffa17 	ldw	r3,-24(fp)
    e7a4:	00c7c83a 	sub	r3,zero,r3
    e7a8:	10c00015 	stw	r3,0(r2)
    return -1;
    e7ac:	00bfffc4 	movi	r2,-1
    e7b0:	00000106 	br	e7b8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    e7b4:	e0bff917 	ldw	r2,-28(fp)
}
    e7b8:	e037883a 	mov	sp,fp
    e7bc:	dfc00117 	ldw	ra,4(sp)
    e7c0:	df000017 	ldw	fp,0(sp)
    e7c4:	dec00204 	addi	sp,sp,8
    e7c8:	f800283a 	ret

0000e7cc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    e7cc:	defffa04 	addi	sp,sp,-24
    e7d0:	df000515 	stw	fp,20(sp)
    e7d4:	df000504 	addi	fp,sp,20
    e7d8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e7dc:	0005303a 	rdctl	r2,status
    e7e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e7e4:	e0fffc17 	ldw	r3,-16(fp)
    e7e8:	00bfff84 	movi	r2,-2
    e7ec:	1884703a 	and	r2,r3,r2
    e7f0:	1001703a 	wrctl	status,r2
  
  return context;
    e7f4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    e7f8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    e7fc:	e0bfff17 	ldw	r2,-4(fp)
    e800:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    e804:	e0bffd17 	ldw	r2,-12(fp)
    e808:	10800017 	ldw	r2,0(r2)
    e80c:	e0fffd17 	ldw	r3,-12(fp)
    e810:	18c00117 	ldw	r3,4(r3)
    e814:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    e818:	e0bffd17 	ldw	r2,-12(fp)
    e81c:	10800117 	ldw	r2,4(r2)
    e820:	e0fffd17 	ldw	r3,-12(fp)
    e824:	18c00017 	ldw	r3,0(r3)
    e828:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    e82c:	e0bffd17 	ldw	r2,-12(fp)
    e830:	e0fffd17 	ldw	r3,-12(fp)
    e834:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    e838:	e0bffd17 	ldw	r2,-12(fp)
    e83c:	e0fffd17 	ldw	r3,-12(fp)
    e840:	10c00015 	stw	r3,0(r2)
    e844:	e0bffb17 	ldw	r2,-20(fp)
    e848:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e84c:	e0bffe17 	ldw	r2,-8(fp)
    e850:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    e854:	e037883a 	mov	sp,fp
    e858:	df000017 	ldw	fp,0(sp)
    e85c:	dec00104 	addi	sp,sp,4
    e860:	f800283a 	ret

0000e864 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    e864:	defffb04 	addi	sp,sp,-20
    e868:	dfc00415 	stw	ra,16(sp)
    e86c:	df000315 	stw	fp,12(sp)
    e870:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    e874:	d0a00e17 	ldw	r2,-32712(gp)
    e878:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    e87c:	d0a6d917 	ldw	r2,-25756(gp)
    e880:	10800044 	addi	r2,r2,1
    e884:	d0a6d915 	stw	r2,-25756(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    e888:	00002e06 	br	e944 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    e88c:	e0bffd17 	ldw	r2,-12(fp)
    e890:	10800017 	ldw	r2,0(r2)
    e894:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    e898:	e0bffd17 	ldw	r2,-12(fp)
    e89c:	10800403 	ldbu	r2,16(r2)
    e8a0:	10803fcc 	andi	r2,r2,255
    e8a4:	10000426 	beq	r2,zero,e8b8 <alt_tick+0x54>
    e8a8:	d0a6d917 	ldw	r2,-25756(gp)
    e8ac:	1000021e 	bne	r2,zero,e8b8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    e8b0:	e0bffd17 	ldw	r2,-12(fp)
    e8b4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    e8b8:	e0bffd17 	ldw	r2,-12(fp)
    e8bc:	10800217 	ldw	r2,8(r2)
    e8c0:	d0e6d917 	ldw	r3,-25756(gp)
    e8c4:	18801d36 	bltu	r3,r2,e93c <alt_tick+0xd8>
    e8c8:	e0bffd17 	ldw	r2,-12(fp)
    e8cc:	10800403 	ldbu	r2,16(r2)
    e8d0:	10803fcc 	andi	r2,r2,255
    e8d4:	1000191e 	bne	r2,zero,e93c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    e8d8:	e0bffd17 	ldw	r2,-12(fp)
    e8dc:	10800317 	ldw	r2,12(r2)
    e8e0:	e0fffd17 	ldw	r3,-12(fp)
    e8e4:	18c00517 	ldw	r3,20(r3)
    e8e8:	1809883a 	mov	r4,r3
    e8ec:	103ee83a 	callr	r2
    e8f0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    e8f4:	e0bfff17 	ldw	r2,-4(fp)
    e8f8:	1000031e 	bne	r2,zero,e908 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    e8fc:	e13ffd17 	ldw	r4,-12(fp)
    e900:	000e7cc0 	call	e7cc <alt_alarm_stop>
    e904:	00000d06 	br	e93c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    e908:	e0bffd17 	ldw	r2,-12(fp)
    e90c:	10c00217 	ldw	r3,8(r2)
    e910:	e0bfff17 	ldw	r2,-4(fp)
    e914:	1887883a 	add	r3,r3,r2
    e918:	e0bffd17 	ldw	r2,-12(fp)
    e91c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    e920:	e0bffd17 	ldw	r2,-12(fp)
    e924:	10c00217 	ldw	r3,8(r2)
    e928:	d0a6d917 	ldw	r2,-25756(gp)
    e92c:	1880032e 	bgeu	r3,r2,e93c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    e930:	e0bffd17 	ldw	r2,-12(fp)
    e934:	00c00044 	movi	r3,1
    e938:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    e93c:	e0bffe17 	ldw	r2,-8(fp)
    e940:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    e944:	e0fffd17 	ldw	r3,-12(fp)
    e948:	d0a00e04 	addi	r2,gp,-32712
    e94c:	18bfcf1e 	bne	r3,r2,e88c <__alt_data_end+0xfe00e88c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    e950:	0001883a 	nop
}
    e954:	e037883a 	mov	sp,fp
    e958:	dfc00117 	ldw	ra,4(sp)
    e95c:	df000017 	ldw	fp,0(sp)
    e960:	dec00204 	addi	sp,sp,8
    e964:	f800283a 	ret

0000e968 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    e968:	deffff04 	addi	sp,sp,-4
    e96c:	df000015 	stw	fp,0(sp)
    e970:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    e974:	000170fa 	wrctl	ienable,zero
}
    e978:	e037883a 	mov	sp,fp
    e97c:	df000017 	ldw	fp,0(sp)
    e980:	dec00104 	addi	sp,sp,4
    e984:	f800283a 	ret

0000e988 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    e988:	defffa04 	addi	sp,sp,-24
    e98c:	dfc00515 	stw	ra,20(sp)
    e990:	df000415 	stw	fp,16(sp)
    e994:	df000404 	addi	fp,sp,16
    e998:	e13ffe15 	stw	r4,-8(fp)
    e99c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    e9a0:	e0bfff17 	ldw	r2,-4(fp)
    e9a4:	10800017 	ldw	r2,0(r2)
    e9a8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    e9ac:	e13ffe17 	ldw	r4,-8(fp)
    e9b0:	00008180 	call	818 <strlen>
    e9b4:	10800044 	addi	r2,r2,1
    e9b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    e9bc:	00000d06 	br	e9f4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    e9c0:	e0bffc17 	ldw	r2,-16(fp)
    e9c4:	10c00217 	ldw	r3,8(r2)
    e9c8:	e0bffd17 	ldw	r2,-12(fp)
    e9cc:	1809883a 	mov	r4,r3
    e9d0:	e17ffe17 	ldw	r5,-8(fp)
    e9d4:	100d883a 	mov	r6,r2
    e9d8:	000ecb80 	call	ecb8 <memcmp>
    e9dc:	1000021e 	bne	r2,zero,e9e8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    e9e0:	e0bffc17 	ldw	r2,-16(fp)
    e9e4:	00000706 	br	ea04 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    e9e8:	e0bffc17 	ldw	r2,-16(fp)
    e9ec:	10800017 	ldw	r2,0(r2)
    e9f0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    e9f4:	e0fffc17 	ldw	r3,-16(fp)
    e9f8:	e0bfff17 	ldw	r2,-4(fp)
    e9fc:	18bff01e 	bne	r3,r2,e9c0 <__alt_data_end+0xfe00e9c0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    ea00:	0005883a 	mov	r2,zero
}
    ea04:	e037883a 	mov	sp,fp
    ea08:	dfc00117 	ldw	ra,4(sp)
    ea0c:	df000017 	ldw	fp,0(sp)
    ea10:	dec00204 	addi	sp,sp,8
    ea14:	f800283a 	ret

0000ea18 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    ea18:	defffb04 	addi	sp,sp,-20
    ea1c:	dfc00415 	stw	ra,16(sp)
    ea20:	df000315 	stw	fp,12(sp)
    ea24:	df000304 	addi	fp,sp,12
    ea28:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    ea2c:	00800074 	movhi	r2,1
    ea30:	10838f04 	addi	r2,r2,3644
    ea34:	10800017 	ldw	r2,0(r2)
    ea38:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ea3c:	00003106 	br	eb04 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    ea40:	e0bffd17 	ldw	r2,-12(fp)
    ea44:	10800217 	ldw	r2,8(r2)
    ea48:	1009883a 	mov	r4,r2
    ea4c:	00008180 	call	818 <strlen>
    ea50:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    ea54:	e0bffd17 	ldw	r2,-12(fp)
    ea58:	10c00217 	ldw	r3,8(r2)
    ea5c:	e0bffe17 	ldw	r2,-8(fp)
    ea60:	10bfffc4 	addi	r2,r2,-1
    ea64:	1885883a 	add	r2,r3,r2
    ea68:	10800003 	ldbu	r2,0(r2)
    ea6c:	10803fcc 	andi	r2,r2,255
    ea70:	1080201c 	xori	r2,r2,128
    ea74:	10bfe004 	addi	r2,r2,-128
    ea78:	10800bd8 	cmpnei	r2,r2,47
    ea7c:	1000031e 	bne	r2,zero,ea8c <alt_find_file+0x74>
    {
      len -= 1;
    ea80:	e0bffe17 	ldw	r2,-8(fp)
    ea84:	10bfffc4 	addi	r2,r2,-1
    ea88:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ea8c:	e0bffe17 	ldw	r2,-8(fp)
    ea90:	e0ffff17 	ldw	r3,-4(fp)
    ea94:	1885883a 	add	r2,r3,r2
    ea98:	10800003 	ldbu	r2,0(r2)
    ea9c:	10803fcc 	andi	r2,r2,255
    eaa0:	1080201c 	xori	r2,r2,128
    eaa4:	10bfe004 	addi	r2,r2,-128
    eaa8:	10800be0 	cmpeqi	r2,r2,47
    eaac:	1000081e 	bne	r2,zero,ead0 <alt_find_file+0xb8>
    eab0:	e0bffe17 	ldw	r2,-8(fp)
    eab4:	e0ffff17 	ldw	r3,-4(fp)
    eab8:	1885883a 	add	r2,r3,r2
    eabc:	10800003 	ldbu	r2,0(r2)
    eac0:	10803fcc 	andi	r2,r2,255
    eac4:	1080201c 	xori	r2,r2,128
    eac8:	10bfe004 	addi	r2,r2,-128
    eacc:	10000a1e 	bne	r2,zero,eaf8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    ead0:	e0bffd17 	ldw	r2,-12(fp)
    ead4:	10c00217 	ldw	r3,8(r2)
    ead8:	e0bffe17 	ldw	r2,-8(fp)
    eadc:	1809883a 	mov	r4,r3
    eae0:	e17fff17 	ldw	r5,-4(fp)
    eae4:	100d883a 	mov	r6,r2
    eae8:	000ecb80 	call	ecb8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    eaec:	1000021e 	bne	r2,zero,eaf8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    eaf0:	e0bffd17 	ldw	r2,-12(fp)
    eaf4:	00000806 	br	eb18 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    eaf8:	e0bffd17 	ldw	r2,-12(fp)
    eafc:	10800017 	ldw	r2,0(r2)
    eb00:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    eb04:	e0fffd17 	ldw	r3,-12(fp)
    eb08:	00800074 	movhi	r2,1
    eb0c:	10838f04 	addi	r2,r2,3644
    eb10:	18bfcb1e 	bne	r3,r2,ea40 <__alt_data_end+0xfe00ea40>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    eb14:	0005883a 	mov	r2,zero
}
    eb18:	e037883a 	mov	sp,fp
    eb1c:	dfc00117 	ldw	ra,4(sp)
    eb20:	df000017 	ldw	fp,0(sp)
    eb24:	dec00204 	addi	sp,sp,8
    eb28:	f800283a 	ret

0000eb2c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    eb2c:	defffc04 	addi	sp,sp,-16
    eb30:	df000315 	stw	fp,12(sp)
    eb34:	df000304 	addi	fp,sp,12
    eb38:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    eb3c:	00bffa04 	movi	r2,-24
    eb40:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    eb44:	e03ffd15 	stw	zero,-12(fp)
    eb48:	00001d06 	br	ebc0 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    eb4c:	00c00074 	movhi	r3,1
    eb50:	18ff1104 	addi	r3,r3,-956
    eb54:	e0bffd17 	ldw	r2,-12(fp)
    eb58:	10800324 	muli	r2,r2,12
    eb5c:	1885883a 	add	r2,r3,r2
    eb60:	10800017 	ldw	r2,0(r2)
    eb64:	1000131e 	bne	r2,zero,ebb4 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    eb68:	00c00074 	movhi	r3,1
    eb6c:	18ff1104 	addi	r3,r3,-956
    eb70:	e0bffd17 	ldw	r2,-12(fp)
    eb74:	10800324 	muli	r2,r2,12
    eb78:	1885883a 	add	r2,r3,r2
    eb7c:	e0ffff17 	ldw	r3,-4(fp)
    eb80:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    eb84:	00800074 	movhi	r2,1
    eb88:	10839304 	addi	r2,r2,3660
    eb8c:	10c00017 	ldw	r3,0(r2)
    eb90:	e0bffd17 	ldw	r2,-12(fp)
    eb94:	1880040e 	bge	r3,r2,eba8 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    eb98:	00800074 	movhi	r2,1
    eb9c:	10839304 	addi	r2,r2,3660
    eba0:	e0fffd17 	ldw	r3,-12(fp)
    eba4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    eba8:	e0bffd17 	ldw	r2,-12(fp)
    ebac:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    ebb0:	00000606 	br	ebcc <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ebb4:	e0bffd17 	ldw	r2,-12(fp)
    ebb8:	10800044 	addi	r2,r2,1
    ebbc:	e0bffd15 	stw	r2,-12(fp)
    ebc0:	e0bffd17 	ldw	r2,-12(fp)
    ebc4:	10800810 	cmplti	r2,r2,32
    ebc8:	103fe01e 	bne	r2,zero,eb4c <__alt_data_end+0xfe00eb4c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    ebcc:	e0bffe17 	ldw	r2,-8(fp)
}
    ebd0:	e037883a 	mov	sp,fp
    ebd4:	df000017 	ldw	fp,0(sp)
    ebd8:	dec00104 	addi	sp,sp,4
    ebdc:	f800283a 	ret

0000ebe0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    ebe0:	defffb04 	addi	sp,sp,-20
    ebe4:	df000415 	stw	fp,16(sp)
    ebe8:	df000404 	addi	fp,sp,16
    ebec:	e13ffe15 	stw	r4,-8(fp)
    ebf0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    ebf4:	e0bfff17 	ldw	r2,-4(fp)
    ebf8:	10840070 	cmpltui	r2,r2,4097
    ebfc:	1000021e 	bne	r2,zero,ec08 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    ec00:	00840004 	movi	r2,4096
    ec04:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    ec08:	e0fffe17 	ldw	r3,-8(fp)
    ec0c:	e0bfff17 	ldw	r2,-4(fp)
    ec10:	1885883a 	add	r2,r3,r2
    ec14:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    ec18:	e0bffe17 	ldw	r2,-8(fp)
    ec1c:	e0bffc15 	stw	r2,-16(fp)
    ec20:	00000506 	br	ec38 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    ec24:	e0bffc17 	ldw	r2,-16(fp)
    ec28:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    ec2c:	e0bffc17 	ldw	r2,-16(fp)
    ec30:	10800804 	addi	r2,r2,32
    ec34:	e0bffc15 	stw	r2,-16(fp)
    ec38:	e0fffc17 	ldw	r3,-16(fp)
    ec3c:	e0bffd17 	ldw	r2,-12(fp)
    ec40:	18bff836 	bltu	r3,r2,ec24 <__alt_data_end+0xfe00ec24>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    ec44:	e0bffe17 	ldw	r2,-8(fp)
    ec48:	108007cc 	andi	r2,r2,31
    ec4c:	10000226 	beq	r2,zero,ec58 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    ec50:	e0bffc17 	ldw	r2,-16(fp)
    ec54:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    ec58:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    ec5c:	e037883a 	mov	sp,fp
    ec60:	df000017 	ldw	fp,0(sp)
    ec64:	dec00104 	addi	sp,sp,4
    ec68:	f800283a 	ret

0000ec6c <atexit>:
    ec6c:	200b883a 	mov	r5,r4
    ec70:	000d883a 	mov	r6,zero
    ec74:	0009883a 	mov	r4,zero
    ec78:	000f883a 	mov	r7,zero
    ec7c:	000ed341 	jmpi	ed34 <__register_exitproc>

0000ec80 <exit>:
    ec80:	defffe04 	addi	sp,sp,-8
    ec84:	000b883a 	mov	r5,zero
    ec88:	dc000015 	stw	r16,0(sp)
    ec8c:	dfc00115 	stw	ra,4(sp)
    ec90:	2021883a 	mov	r16,r4
    ec94:	000ee500 	call	ee50 <__call_exitprocs>
    ec98:	00800074 	movhi	r2,1
    ec9c:	10838904 	addi	r2,r2,3620
    eca0:	11000017 	ldw	r4,0(r2)
    eca4:	20800f17 	ldw	r2,60(r4)
    eca8:	10000126 	beq	r2,zero,ecb0 <exit+0x30>
    ecac:	103ee83a 	callr	r2
    ecb0:	8009883a 	mov	r4,r16
    ecb4:	000eff40 	call	eff4 <_exit>

0000ecb8 <memcmp>:
    ecb8:	01c000c4 	movi	r7,3
    ecbc:	3980192e 	bgeu	r7,r6,ed24 <memcmp+0x6c>
    ecc0:	2144b03a 	or	r2,r4,r5
    ecc4:	11c4703a 	and	r2,r2,r7
    ecc8:	10000f26 	beq	r2,zero,ed08 <memcmp+0x50>
    eccc:	21c00003 	ldbu	r7,0(r4)
    ecd0:	28800003 	ldbu	r2,0(r5)
    ecd4:	3880151e 	bne	r7,r2,ed2c <memcmp+0x74>
    ecd8:	30ffff84 	addi	r3,r6,-2
    ecdc:	01bfffc4 	movi	r6,-1
    ece0:	00000406 	br	ecf4 <memcmp+0x3c>
    ece4:	21c00003 	ldbu	r7,0(r4)
    ece8:	28800003 	ldbu	r2,0(r5)
    ecec:	18ffffc4 	addi	r3,r3,-1
    ecf0:	38800e1e 	bne	r7,r2,ed2c <memcmp+0x74>
    ecf4:	21000044 	addi	r4,r4,1
    ecf8:	29400044 	addi	r5,r5,1
    ecfc:	19bff91e 	bne	r3,r6,ece4 <__alt_data_end+0xfe00ece4>
    ed00:	0005883a 	mov	r2,zero
    ed04:	f800283a 	ret
    ed08:	20c00017 	ldw	r3,0(r4)
    ed0c:	28800017 	ldw	r2,0(r5)
    ed10:	1880041e 	bne	r3,r2,ed24 <memcmp+0x6c>
    ed14:	31bfff04 	addi	r6,r6,-4
    ed18:	21000104 	addi	r4,r4,4
    ed1c:	29400104 	addi	r5,r5,4
    ed20:	39bff936 	bltu	r7,r6,ed08 <__alt_data_end+0xfe00ed08>
    ed24:	303fe91e 	bne	r6,zero,eccc <__alt_data_end+0xfe00eccc>
    ed28:	003ff506 	br	ed00 <__alt_data_end+0xfe00ed00>
    ed2c:	3885c83a 	sub	r2,r7,r2
    ed30:	f800283a 	ret

0000ed34 <__register_exitproc>:
    ed34:	defffa04 	addi	sp,sp,-24
    ed38:	00800074 	movhi	r2,1
    ed3c:	10838904 	addi	r2,r2,3620
    ed40:	dc000315 	stw	r16,12(sp)
    ed44:	14000017 	ldw	r16,0(r2)
    ed48:	dc400415 	stw	r17,16(sp)
    ed4c:	dfc00515 	stw	ra,20(sp)
    ed50:	80805217 	ldw	r2,328(r16)
    ed54:	2023883a 	mov	r17,r4
    ed58:	10003a26 	beq	r2,zero,ee44 <__register_exitproc+0x110>
    ed5c:	10c00117 	ldw	r3,4(r2)
    ed60:	020007c4 	movi	r8,31
    ed64:	40c0190e 	bge	r8,r3,edcc <__register_exitproc+0x98>
    ed68:	00800034 	movhi	r2,0
    ed6c:	10800004 	addi	r2,r2,0
    ed70:	1000061e 	bne	r2,zero,ed8c <__register_exitproc+0x58>
    ed74:	00bfffc4 	movi	r2,-1
    ed78:	dfc00517 	ldw	ra,20(sp)
    ed7c:	dc400417 	ldw	r17,16(sp)
    ed80:	dc000317 	ldw	r16,12(sp)
    ed84:	dec00604 	addi	sp,sp,24
    ed88:	f800283a 	ret
    ed8c:	01006404 	movi	r4,400
    ed90:	d9400015 	stw	r5,0(sp)
    ed94:	d9800115 	stw	r6,4(sp)
    ed98:	d9c00215 	stw	r7,8(sp)
    ed9c:	00000000 	call	0 <__alt_mem_sdram>
    eda0:	d9400017 	ldw	r5,0(sp)
    eda4:	d9800117 	ldw	r6,4(sp)
    eda8:	d9c00217 	ldw	r7,8(sp)
    edac:	103ff126 	beq	r2,zero,ed74 <__alt_data_end+0xfe00ed74>
    edb0:	81005217 	ldw	r4,328(r16)
    edb4:	10000115 	stw	zero,4(r2)
    edb8:	0007883a 	mov	r3,zero
    edbc:	11000015 	stw	r4,0(r2)
    edc0:	80805215 	stw	r2,328(r16)
    edc4:	10006215 	stw	zero,392(r2)
    edc8:	10006315 	stw	zero,396(r2)
    edcc:	88000d1e 	bne	r17,zero,ee04 <__register_exitproc+0xd0>
    edd0:	19000084 	addi	r4,r3,2
    edd4:	2109883a 	add	r4,r4,r4
    edd8:	18c00044 	addi	r3,r3,1
    eddc:	2109883a 	add	r4,r4,r4
    ede0:	10c00115 	stw	r3,4(r2)
    ede4:	1105883a 	add	r2,r2,r4
    ede8:	11400015 	stw	r5,0(r2)
    edec:	0005883a 	mov	r2,zero
    edf0:	dfc00517 	ldw	ra,20(sp)
    edf4:	dc400417 	ldw	r17,16(sp)
    edf8:	dc000317 	ldw	r16,12(sp)
    edfc:	dec00604 	addi	sp,sp,24
    ee00:	f800283a 	ret
    ee04:	18c9883a 	add	r4,r3,r3
    ee08:	2109883a 	add	r4,r4,r4
    ee0c:	1109883a 	add	r4,r2,r4
    ee10:	21802215 	stw	r6,136(r4)
    ee14:	01800044 	movi	r6,1
    ee18:	12006217 	ldw	r8,392(r2)
    ee1c:	30cc983a 	sll	r6,r6,r3
    ee20:	4190b03a 	or	r8,r8,r6
    ee24:	12006215 	stw	r8,392(r2)
    ee28:	21c04215 	stw	r7,264(r4)
    ee2c:	01000084 	movi	r4,2
    ee30:	893fe71e 	bne	r17,r4,edd0 <__alt_data_end+0xfe00edd0>
    ee34:	11006317 	ldw	r4,396(r2)
    ee38:	218cb03a 	or	r6,r4,r6
    ee3c:	11806315 	stw	r6,396(r2)
    ee40:	003fe306 	br	edd0 <__alt_data_end+0xfe00edd0>
    ee44:	80805304 	addi	r2,r16,332
    ee48:	80805215 	stw	r2,328(r16)
    ee4c:	003fc306 	br	ed5c <__alt_data_end+0xfe00ed5c>

0000ee50 <__call_exitprocs>:
    ee50:	00800074 	movhi	r2,1
    ee54:	10838904 	addi	r2,r2,3620
    ee58:	10800017 	ldw	r2,0(r2)
    ee5c:	defff304 	addi	sp,sp,-52
    ee60:	df000b15 	stw	fp,44(sp)
    ee64:	d8800015 	stw	r2,0(sp)
    ee68:	10805204 	addi	r2,r2,328
    ee6c:	dd400815 	stw	r21,32(sp)
    ee70:	dfc00c15 	stw	ra,48(sp)
    ee74:	ddc00a15 	stw	r23,40(sp)
    ee78:	dd800915 	stw	r22,36(sp)
    ee7c:	dd000715 	stw	r20,28(sp)
    ee80:	dcc00615 	stw	r19,24(sp)
    ee84:	dc800515 	stw	r18,20(sp)
    ee88:	dc400415 	stw	r17,16(sp)
    ee8c:	dc000315 	stw	r16,12(sp)
    ee90:	d9000115 	stw	r4,4(sp)
    ee94:	2839883a 	mov	fp,r5
    ee98:	d8800215 	stw	r2,8(sp)
    ee9c:	057fffc4 	movi	r21,-1
    eea0:	d8800017 	ldw	r2,0(sp)
    eea4:	14805217 	ldw	r18,328(r2)
    eea8:	90001826 	beq	r18,zero,ef0c <__call_exitprocs+0xbc>
    eeac:	ddc00217 	ldw	r23,8(sp)
    eeb0:	90c00117 	ldw	r3,4(r18)
    eeb4:	1c3fffc4 	addi	r16,r3,-1
    eeb8:	80001116 	blt	r16,zero,ef00 <__call_exitprocs+0xb0>
    eebc:	18c00044 	addi	r3,r3,1
    eec0:	8427883a 	add	r19,r16,r16
    eec4:	18c7883a 	add	r3,r3,r3
    eec8:	95802204 	addi	r22,r18,136
    eecc:	9ce7883a 	add	r19,r19,r19
    eed0:	18c7883a 	add	r3,r3,r3
    eed4:	b4e7883a 	add	r19,r22,r19
    eed8:	90e3883a 	add	r17,r18,r3
    eedc:	e0001726 	beq	fp,zero,ef3c <__call_exitprocs+0xec>
    eee0:	8c87c83a 	sub	r3,r17,r18
    eee4:	b0c7883a 	add	r3,r22,r3
    eee8:	18c01e17 	ldw	r3,120(r3)
    eeec:	1f001326 	beq	r3,fp,ef3c <__call_exitprocs+0xec>
    eef0:	843fffc4 	addi	r16,r16,-1
    eef4:	9cffff04 	addi	r19,r19,-4
    eef8:	8c7fff04 	addi	r17,r17,-4
    eefc:	857ff71e 	bne	r16,r21,eedc <__alt_data_end+0xfe00eedc>
    ef00:	00800034 	movhi	r2,0
    ef04:	10800004 	addi	r2,r2,0
    ef08:	10002a1e 	bne	r2,zero,efb4 <__call_exitprocs+0x164>
    ef0c:	dfc00c17 	ldw	ra,48(sp)
    ef10:	df000b17 	ldw	fp,44(sp)
    ef14:	ddc00a17 	ldw	r23,40(sp)
    ef18:	dd800917 	ldw	r22,36(sp)
    ef1c:	dd400817 	ldw	r21,32(sp)
    ef20:	dd000717 	ldw	r20,28(sp)
    ef24:	dcc00617 	ldw	r19,24(sp)
    ef28:	dc800517 	ldw	r18,20(sp)
    ef2c:	dc400417 	ldw	r17,16(sp)
    ef30:	dc000317 	ldw	r16,12(sp)
    ef34:	dec00d04 	addi	sp,sp,52
    ef38:	f800283a 	ret
    ef3c:	91000117 	ldw	r4,4(r18)
    ef40:	88c00017 	ldw	r3,0(r17)
    ef44:	213fffc4 	addi	r4,r4,-1
    ef48:	24001526 	beq	r4,r16,efa0 <__call_exitprocs+0x150>
    ef4c:	88000015 	stw	zero,0(r17)
    ef50:	183fe726 	beq	r3,zero,eef0 <__alt_data_end+0xfe00eef0>
    ef54:	00800044 	movi	r2,1
    ef58:	1408983a 	sll	r4,r2,r16
    ef5c:	91406217 	ldw	r5,392(r18)
    ef60:	95000117 	ldw	r20,4(r18)
    ef64:	214a703a 	and	r5,r4,r5
    ef68:	28000b26 	beq	r5,zero,ef98 <__call_exitprocs+0x148>
    ef6c:	91406317 	ldw	r5,396(r18)
    ef70:	2148703a 	and	r4,r4,r5
    ef74:	20000c1e 	bne	r4,zero,efa8 <__call_exitprocs+0x158>
    ef78:	99400017 	ldw	r5,0(r19)
    ef7c:	d9000117 	ldw	r4,4(sp)
    ef80:	183ee83a 	callr	r3
    ef84:	90c00117 	ldw	r3,4(r18)
    ef88:	1d3fc51e 	bne	r3,r20,eea0 <__alt_data_end+0xfe00eea0>
    ef8c:	b8c00017 	ldw	r3,0(r23)
    ef90:	1cbfd726 	beq	r3,r18,eef0 <__alt_data_end+0xfe00eef0>
    ef94:	003fc206 	br	eea0 <__alt_data_end+0xfe00eea0>
    ef98:	183ee83a 	callr	r3
    ef9c:	003ff906 	br	ef84 <__alt_data_end+0xfe00ef84>
    efa0:	94000115 	stw	r16,4(r18)
    efa4:	003fea06 	br	ef50 <__alt_data_end+0xfe00ef50>
    efa8:	99000017 	ldw	r4,0(r19)
    efac:	183ee83a 	callr	r3
    efb0:	003ff406 	br	ef84 <__alt_data_end+0xfe00ef84>
    efb4:	90c00117 	ldw	r3,4(r18)
    efb8:	1800081e 	bne	r3,zero,efdc <__call_exitprocs+0x18c>
    efbc:	90c00017 	ldw	r3,0(r18)
    efc0:	18000a26 	beq	r3,zero,efec <__call_exitprocs+0x19c>
    efc4:	9009883a 	mov	r4,r18
    efc8:	b8c00015 	stw	r3,0(r23)
    efcc:	00000000 	call	0 <__alt_mem_sdram>
    efd0:	bc800017 	ldw	r18,0(r23)
    efd4:	903fb61e 	bne	r18,zero,eeb0 <__alt_data_end+0xfe00eeb0>
    efd8:	003fcc06 	br	ef0c <__alt_data_end+0xfe00ef0c>
    efdc:	90c00017 	ldw	r3,0(r18)
    efe0:	902f883a 	mov	r23,r18
    efe4:	1825883a 	mov	r18,r3
    efe8:	003ffa06 	br	efd4 <__alt_data_end+0xfe00efd4>
    efec:	0007883a 	mov	r3,zero
    eff0:	003ffb06 	br	efe0 <__alt_data_end+0xfe00efe0>

0000eff4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    eff4:	defffd04 	addi	sp,sp,-12
    eff8:	df000215 	stw	fp,8(sp)
    effc:	df000204 	addi	fp,sp,8
    f000:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    f004:	0001883a 	nop
    f008:	e0bfff17 	ldw	r2,-4(fp)
    f00c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    f010:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    f014:	10000226 	beq	r2,zero,f020 <_exit+0x2c>
    ALT_SIM_FAIL();
    f018:	002af070 	cmpltui	zero,zero,43969
    f01c:	00000106 	br	f024 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    f020:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    f024:	003fff06 	br	f024 <__alt_data_end+0xfe00f024>
